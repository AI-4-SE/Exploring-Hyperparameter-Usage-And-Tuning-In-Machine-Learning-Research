{
    "libs/tracker/E_tracker.py": {
        "sklearn": {
            "RANSACRegressor_618": {
                "variable": {
                    "value": "ransac",
                    "type": "Variable",
                    "possible_values": []
                },
                "base_estimator": {
                    "value": "linear_model.LinearRegression(fit_intercept=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "min_samples": {
                    "value": "self.cfg.scale_recovery.ransac.min_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_trials": {
                    "value": "self.cfg.scale_recovery.ransac.max_trials",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stop_probability": {
                    "value": "self.cfg.scale_recovery.ransac.stop_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "residual_threshold": {
                    "value": "self.cfg.scale_recovery.ransac.thre",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LinearRegression_619": {
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_147": {
                "variable": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_147": {
                "variable": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_148": {
                "variable": {
                    "value": "self.inv_K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.inv_K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_148": {
                "variable": {
                    "value": "self.inv_K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_676": {
                "variable": {
                    "value": "pose_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rigid_flow_pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(E_pose)",
                            "Call"
                        ],
                        [
                            "ref_data['rigid_flow_pose'].pose",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_676": {
                "variable": {
                    "value": "pose_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_677": {
                "variable": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ref_data['raw_depth']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_677": {
                "variable": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "apis/run.py": {
        "torch": {
            "manual_seed_83": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_84": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg.seed",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "libs/deep_models/checkpoint_logger.py": {
        "torch": {
            "save_87": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save_folder, '{}.pth'.format(model_name))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_folder, 'optimizer.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_folder, 'train_state.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_96": {
                "obj": {
                    "value": "train_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ckpt_data['train_state']",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save_folder, '{}.pth'.format(model_name))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_folder, 'optimizer.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_folder, 'train_state.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_78": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save_folder, '{}.pth'.format(model_name))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_folder, 'optimizer.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_folder, 'train_state.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "libs/deep_models/deep_models.py": {
        "torch": {
            "device_36": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_142": {
                "variable": {
                    "value": "self.model_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters_to_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_162": {
                "variable": {
                    "value": "cur_imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cur_imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.transpose(in_cur_data['img'] / 255, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(cur_imgs).unsqueeze(0).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_162": {
                "variable": {
                    "value": "cur_imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "ref_imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ref_imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.transpose(in_ref_data['img'] / 255, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ref_imgs).unsqueeze(0).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_163": {
                "variable": {
                    "value": "ref_imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "img_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(img_tensor, 0)",
                            "Call"
                        ],
                        [
                            "img_tensor.cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(img_tensor, 1)",
                            "Call"
                        ],
                        [
                            "img_tensor.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "img_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(img_tensor, 0)",
                            "Call"
                        ],
                        [
                            "img_tensor.cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(img_tensor, 1)",
                            "Call"
                        ],
                        [
                            "img_tensor.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_246": {
                "variable": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.transpose(img1 / 255, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img1).unsqueeze(0).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_246": {
                "variable": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_247": {
                "variable": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.transpose(img2 / 255, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img2).unsqueeze(0).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_247": {
                "variable": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_252": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "K44",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.eye(4)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_252": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_254": {
                "variable": {
                    "value": "inv_K",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "K44",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.eye(4)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_254": {
                "variable": {
                    "value": "inv_K",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_258": {
                "variable": {
                    "value": "pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_poses.detach().cpu().numpy()[0]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(pose).unsqueeze(0).float().cuda()",
                            "Call"
                        ],
                        [
                            "self.pose.pred_pose",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(pose).unsqueeze(0).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_258": {
                "variable": {
                    "value": "pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_350": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save_folder, '{}.pth'.format(model_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_263": {
                "variable": {
                    "value": "deep_pose_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pose.pred_pose[:, :3, 3].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_264": {
                "variable": {
                    "value": "pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_poses.detach().cpu().numpy()[0]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(pose).unsqueeze(0).float().cuda()",
                            "Call"
                        ],
                        [
                            "self.pose.pred_pose",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(pose).unsqueeze(0).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_264": {
                "variable": {
                    "value": "pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_265": {
                "input": {
                    "value": "pose[:, :3, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/depth/deep_depth.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_242": {
                "variable": {
                    "value": "abs_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "reprojection_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reprojection_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(reprojection_losses, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "identity_reprojection_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "identity_reprojection_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(identity_reprojection_loss, reprojection_loss)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_221": {
                "variable": {
                    "value": "(to_optimise, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((identity_reprojection_loss, reprojection_loss), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(depth_losses, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "depth_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_180": {
                "variable": {
                    "value": "outputs[warp_img, 1, frame_id, s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "img_ref",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs['color', frame_id, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "grid": {
                    "value": "outputs['reproj_xy', 1, frame_id, s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_291": {
                "variable": {
                    "value": "(to_optimise, idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((identity_reprojection_loss, reprojection_loss), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(depth_losses, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_216": {
                "*size": {
                    "value": "identity_reprojection_loss.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grid_sample_271": {
                "variable": {
                    "value": "warp_disp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs['disp', frame_id, scale]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "outputs['reproj_xy', 1, frame_id, scale]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_278": {
                "variable": {
                    "value": "transformed_cam_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T[:, :3, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "cam_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.backproject_depth(ref_depth, inputs['inv_K', source_scale])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "libs/deep_models/depth/monodepth2/depth_decoder.py": {
        "torch": {
            "ModuleList_47": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "list(self.convs.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_48": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_features[-1]",
                            "Subscript"
                        ],
                        [
                            "self.convs['upconv', i, 0](x)",
                            "Call"
                        ],
                        [
                            "[upsample(x)]",
                            "List"
                        ],
                        [
                            "x + [input_features[i - 1]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.convs['upconv', i, 1](x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/depth/monodepth2/layers.py": {
        "torch": {
            "zeros_51": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "translation_vector.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_69": {
                "variable": {
                    "value": "angle",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_72": {
                "variable": {
                    "value": "ca",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(vec, 2, 2, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_73": {
                "variable": {
                    "value": "sa",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(vec, 2, 2, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(vec.shape[0], 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_92": {
                "variable": {
                    "value": "rot[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * xC + ca",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_93": {
                "variable": {
                    "value": "rot[:, 0, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "xyC - zs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_94": {
                "variable": {
                    "value": "rot[:, 0, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "zxC + ys",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_95": {
                "variable": {
                    "value": "rot[:, 1, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "xyC + zs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_96": {
                "variable": {
                    "value": "rot[:, 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y * yC + ca",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_97": {
                "variable": {
                    "value": "rot[:, 1, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "yzC - xs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_98": {
                "variable": {
                    "value": "rot[:, 2, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "zxC - ys",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_99": {
                "variable": {
                    "value": "rot[:, 2, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "yzC + xs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_100": {
                "variable": {
                    "value": "rot[:, 2, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "z * zC + ca",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grid_sample_328": {
                "variable": {
                    "value": "warp_forward_flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-source_backward_flow",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "grid": {
                    "value": "pix_forward",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_337": {
                "variable": {
                    "value": "warp_backward_flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-source_forward_flow",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "grid": {
                    "value": "pix_backward",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_357": {
                "variable": {
                    "value": "grad_disp_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp[:, :, :, :-1] - disp[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_358": {
                "variable": {
                    "value": "grad_disp_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp[:, :, :-1, :] - disp[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_360": {
                "variable": {
                    "value": "grad_img_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(img[:, :, :, :-1] - img[:, :, :, 1:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_361": {
                "variable": {
                    "value": "grad_img_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(img[:, :, :-1, :] - img[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_405": {
                "variable": {
                    "value": "thresh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt / pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_411": {
                "variable": {
                    "value": "rmse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rmse.mean()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_414": {
                "variable": {
                    "value": "rmse_log",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rmse_log.mean()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_416": {
                "variable": {
                    "value": "abs_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(gt - pred) / gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_418": {
                "variable": {
                    "value": "sq_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gt - pred) ** 2 / gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rot_from_axisangle(axisangle)",
                            "Call"
                        ],
                        [
                            "R.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_translation_matrix(t)",
                            "Call"
                        ],
                        [
                            "torch.zeros(translation_vector.shape[0], 4, 4).to(device=translation_vector.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_43": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_translation_matrix(t)",
                            "Call"
                        ],
                        [
                            "torch.zeros(translation_vector.shape[0], 4, 4).to(device=translation_vector.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rot_from_axisangle(axisangle)",
                            "Call"
                        ],
                        [
                            "R.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ELU_113": {
                "variable": {
                    "value": "self.nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(out_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.id_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(self.id_coords)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_153": {
                "variable": {
                    "value": "self.ones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.batch_size, 1, self.height * self.width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_155": {
                "variable": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([self.id_coords[0].view(-1), self.id_coords[1].view(-1)], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_158": {
                "variable": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.cat([self.pix_coords, self.ones], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "variable": {
                    "value": "cam_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inv_K[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "cam_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cam_points, self.ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_182": {
                "variable": {
                    "value": "cam_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(K, T)[:, :3, :]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_207": {
                "variable": {
                    "value": "self.id_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(self.id_coords)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_209": {
                "variable": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.id_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_211": {
                "variable": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_246": {
                "variable": {
                    "value": "self.id_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(self.id_coords)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_248": {
                "variable": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.id_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_250": {
                "variable": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_283": {
                "variable": {
                    "value": "self.id_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(self.id_coords)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_285": {
                "variable": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.id_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_287": {
                "variable": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pix_coords",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_350": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "axis[..., 0].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.refl(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_363": {
                "input": {
                    "value": "-grad_img_x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_364": {
                "input": {
                    "value": "-grad_img_y",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AvgPool2d_374": {
                "variable": {
                    "value": "self.mu_x_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_375": {
                "variable": {
                    "value": "self.mu_y_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_376": {
                "variable": {
                    "value": "self.sig_x_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_377": {
                "variable": {
                    "value": "self.sig_y_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_378": {
                "variable": {
                    "value": "self.sig_xy_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_380": {
                "variable": {
                    "value": "self.refl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_128": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_130": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_360": {
                "input": {
                    "value": "img[:, :, :, :-1] - img[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_361": {
                "input": {
                    "value": "img[:, :, :-1, :] - img[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_399": {
                "input": {
                    "value": "(1 - SSIM_n / SSIM_d) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "ndarray": {
                    "value": "self.id_coords",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_153": {
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height * self.width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_155": {
                "tensors": {
                    "value": "[self.id_coords[0].view(-1), self.id_coords[1].view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_158": {
                "tensors": {
                    "value": "[self.pix_coords, self.ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_180": {
                "input": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_translation_matrix(t)",
                            "Call"
                        ],
                        [
                            "torch.zeros(translation_vector.shape[0], 4, 4).to(device=translation_vector.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_207": {
                "ndarray": {
                    "value": "self.id_coords",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_246": {
                "ndarray": {
                    "value": "self.id_coords",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_283": {
                "ndarray": {
                    "value": "self.id_coords",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_413": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_416": {
                "input": {
                    "value": "gt - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/depth/monodepth2/monodepth2.py": {
        "torch": {
            "load_48": {
                "variable": {
                    "value": "loaded_dict_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "encoder_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(weight_path, 'encoder.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_55": {
                "variable": {
                    "value": "loaded_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "depth_decoder_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(weight_path, 'depth.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_112": {
                "variable": {
                    "value": "disp_resized",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_disps['disp', s]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(original_height, original_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/depth/monodepth2/resnet_encoder.py": {
        "torch": {
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input_images * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_28": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_56": {
                "tensors": {
                    "value": "[loaded['conv1.weight']] * num_input_images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/flow/deep_flow.py": {
        "torch": {
            "device_35": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_123": {
                "variable": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(flow, (des_height, des_width), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.stack([flow[:, 0, :, :] * ratio_width, flow[:, 1, :, :] * ratio_height], dim=1)",
                            "Call"
                        ],
                        [
                            "np.load(flow_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(flow, (resize_width, resize_height))",
                            "Call"
                        ],
                        [
                            "outputs['flow', 0, f_i, scale]",
                            "Subscript"
                        ],
                        [
                            "outputs['flow', f_i, 0, scale]",
                            "Subscript"
                        ],
                        [
                            "outputs['flow', 0, frame_id, scale].norm(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "outputs['flow', frame_id, 0, scale].norm(dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(des_height, des_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_126": {
                "variable": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[flow[:, 0, :, :] * ratio_width, flow[:, 1, :, :] * ratio_height]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grid_sample_183": {
                "variable": {
                    "value": "warp_flow1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-flow2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "grid": {
                    "value": "px1on2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_349": {
                "variable": {
                    "value": "abs_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "reprojection_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reprojection_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(reprojection_losses, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_311": {
                "variable": {
                    "value": "(to_optimise, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reprojection_losses",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_267": {
                "variable": {
                    "value": "outputs[color_flow, 0, f_i, scale]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs['color', f_i, source_scale]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "pix_coords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.flow_to_pix(flow)",
                            "Call"
                        ],
                        [
                            "self.flow_to_pix(flow)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_278": {
                "variable": {
                    "value": "outputs[color_flow, f_i, 0, scale]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs['color', 0, source_scale]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "pix_coords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.flow_to_pix(flow)",
                            "Call"
                        ],
                        [
                            "self.flow_to_pix(flow)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/flow/hd3/hd3_flow.py": {
        "torch": {
            "load_96": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "input_img1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img1, img2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "input_img2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img2, img1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_134": {
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(th, tw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/flow/hd3/hd3losses.py": {
        "torch": {
            "norm_50": {
                "variable": {
                    "value": "error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output - gt[:, :2, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "KLDivLoss_17": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_54": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "error",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(output - gt[:, :2, :, :], 2, 1, keepdim=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_25": {
                "input": {
                    "value": "ms_pred[l - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_34": {
                "input": {
                    "value": "ms_prob[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/flow/hd3/hd3model.py": {
        "torch": {
            "cat_33": {
                "tensors": {
                    "value": "img_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/flow/hd3/models/correlation.py": {
        "torch": {
            "current_stream_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/flow/hd3/models/decoder.py": {
        "torch": {
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.root",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm(outplane * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "outplane * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplane",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_108": {
                "tensors": {
                    "value": "[y1, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/flow/hd3/models/dla.py": {
        "torch": {
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottle_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes // expansion",
                            "BinOp"
                        ],
                        [
                            "planes * cardinality // 32",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottle_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes // expansion",
                            "BinOp"
                        ],
                        [
                            "planes * cardinality // 32",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottle_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes // expansion",
                            "BinOp"
                        ],
                        [
                            "planes * cardinality // 32",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottle_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes // expansion",
                            "BinOp"
                        ],
                        [
                            "planes * cardinality // 32",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottle_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes // expansion",
                            "BinOp"
                        ],
                        [
                            "planes * cardinality // 32",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottle_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes // expansion",
                            "BinOp"
                        ],
                        [
                            "planes * cardinality // 32",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottle_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes // expansion",
                            "BinOp"
                        ],
                        [
                            "planes * cardinality // 32",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "cardinality",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "BottleneckX.cardinality",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottle_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes // expansion",
                            "BinOp"
                        ],
                        [
                            "planes * cardinality // 32",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_132": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_168": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_275": {
                "variable": {
                    "value": "self.base_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, channels[0], kernel_size=7, stride=1, padding=3, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_234": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_236": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_348": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_173": {
                "tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(torch.cat(x, 1))",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "x + children[0]",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.root(x2, x1, *children)",
                            "Call"
                        ],
                        [
                            "self.tree2(x1, children=children)",
                            "Call"
                        ],
                        [
                            "self.base_layer(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'level{}'.format(i))(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_276": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_278": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_237": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_336": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride if i == 0 else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_345": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/flow/hd3/models/dla_up.py": {
        "torch": {
            "Sequential_62": {
                "variable": {
                    "value": "node",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_dim * 2, out_dim, kernel_size=node_kernel, stride=1, padding=node_kernel // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_149": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "448",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(c, out_dim, kernel_size=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_48": {
                "variable": {
                    "value": "up",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "f * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.ceil(w.size(2) / 2)",
                            "Call"
                        ],
                        [
                            "int(up_factors[i])",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "f // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "out_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "node_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "node_kernel // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_92": {
                "tensors": {
                    "value": "[x, layers[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(2 * f - 1 - f % 2) / (2.0 * f)",
                            "BinOp"
                        ],
                        [
                            "range(1, w.size(0))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/flow/hd3/models/hd3_ops.py": {
        "torch": {
            "arange_22": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_23": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_31": {
                "variable": {
                    "value": "vgrid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[2.0 * vgrid[:, 0, :, :] / max(W - 1, 1) - 1.0, 2.0 * vgrid[:, 1, :, :] / max(H - 1, 1) - 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_38": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "flo[:, 0, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "torch.stack([2.0 * vgrid[:, 0, :, :] / max(W - 1, 1) - 1.0, 2.0 * vgrid[:, 1, :, :] / max(H - 1, 1) - 1.0], dim=1)",
                            "Call"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_39": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grid_sample_40": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(x.size(), device=x.device)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(mask, vgrid, padding_mode='zeros')",
                            "Call"
                        ],
                        [
                            "torch.ones((B, 1, int(H * scale_factor), int(W * scale_factor)), dtype=torch.float, device=flo.device)",
                            "Call"
                        ],
                        [
                            "(flo[:, 2, :, :].unsqueeze(1) > 0).float()",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid + flo",
                            "BinOp"
                        ],
                        [
                            "torch.stack([2.0 * vgrid[:, 0, :, :] / max(W - 1, 1) - 1.0, 2.0 * vgrid[:, 1, :, :] / max(H - 1, 1) - 1.0], dim=1)",
                            "Call"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AvgPool2d_87": {
                "variable": {
                    "value": "avg_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_88": {
                "variable": {
                    "value": "max_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "d - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "padder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "disp.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "disp.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_131": {
                "variable": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(vec, (des_height, des_width), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "vec * ratio_width",
                            "BinOp"
                        ],
                        [
                            "torch.stack([vec[:, 0, :, :] * ratio_width, vec[:, 1, :, :] * ratio_height], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(des_height, des_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_146": {
                "variable": {
                    "value": "flo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(flo, scale_factor=scale_factor, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(flo, int(1 / scale_factor))",
                            "Call"
                        ],
                        [
                            "flo[:, :2, :, :] / (flo[:, 2, :, :].unsqueeze(1) + 1e-09)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(flo, min=-c, max=c)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-c",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "floor_149": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "flo[:, 0, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "floor_151": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "flo[:, 1, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_154": {
                "variable": {
                    "value": "x0_safe",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.floor(x)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-c",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_155": {
                "variable": {
                    "value": "y0_safe",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.floor(y)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-c",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_156": {
                "variable": {
                    "value": "x1_safe",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-c",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_157": {
                "variable": {
                    "value": "y1_safe",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-c",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, (2 * c + 1) ** 2, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "flo.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_205": {
                "variable": {
                    "value": "avg_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_206": {
                "variable": {
                    "value": "max_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "d - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_210": {
                "variable": {
                    "value": "lt_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(prob, dim=1)",
                            "Call"
                        ],
                        [
                            "_disp_prob2flow_prob(prob, False)",
                            "Call"
                        ],
                        [
                            "normalizer(prob)",
                            "Call"
                        ],
                        [
                            "normalizer(prob)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "indice + indice / (d - 1)",
                            "BinOp"
                        ],
                        [
                            "indice.squeeze().reshape(B, 1, H, W)",
                            "Call"
                        ],
                        [
                            "indice.squeeze().reshape(B, H, W).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_212": {
                "variable": {
                    "value": "rt_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(prob, dim=1)",
                            "Call"
                        ],
                        [
                            "_disp_prob2flow_prob(prob, False)",
                            "Call"
                        ],
                        [
                            "normalizer(prob)",
                            "Call"
                        ],
                        [
                            "normalizer(prob)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indice + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_214": {
                "variable": {
                    "value": "lb_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(prob, dim=1)",
                            "Call"
                        ],
                        [
                            "_disp_prob2flow_prob(prob, False)",
                            "Call"
                        ],
                        [
                            "normalizer(prob)",
                            "Call"
                        ],
                        [
                            "normalizer(prob)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indice + d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_216": {
                "variable": {
                    "value": "rb_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(prob, dim=1)",
                            "Call"
                        ],
                        [
                            "_disp_prob2flow_prob(prob, False)",
                            "Call"
                        ],
                        [
                            "normalizer(prob)",
                            "Call"
                        ],
                        [
                            "normalizer(prob)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indice + d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cor_flow[1][:, 0, :, :].unsqueeze(1) - cor_prob_n[0] - cor_prob_n[2], cor_flow[2][:, 1, :, :].unsqueeze(1) - cor_prob_n[0] - cor_prob_n[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, d * (d - 1) // 2, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "prob.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "prob_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, prob, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_81": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(prob, dim=1)",
                            "Call"
                        ],
                        [
                            "_disp_prob2flow_prob(prob, False)",
                            "Call"
                        ],
                        [
                            "normalizer(prob)",
                            "Call"
                        ],
                        [
                            "normalizer(prob)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_102": {
                "tensors": {
                    "value": "[disp, padder]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_112": {
                "variable": {
                    "value": "flo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(flo, scale_factor=scale_factor, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(flo, int(1 / scale_factor))",
                            "Call"
                        ],
                        [
                            "flo[:, :2, :, :] / (flo[:, 2, :, :].unsqueeze(1) + 1e-09)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(flo, min=-c, max=c)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_117": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, 1, int(H * scale_factor), int(W * scale_factor))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "flo.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_122": {
                "variable": {
                    "value": "flo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(flo, scale_factor=scale_factor, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(flo, int(1 / scale_factor))",
                            "Call"
                        ],
                        [
                            "flo[:, :2, :, :] / (flo[:, 2, :, :].unsqueeze(1) + 1e-09)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(flo, min=-c, max=c)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "int(1 / scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_136": {
                "variable": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vec[:, 0, :, :] * ratio_width, vec[:, 1, :, :] * ratio_height]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_200": {
                "variable": {
                    "value": "normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_241": {
                "variable": {
                    "value": "normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_159": {
                "input": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.floor(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x0_safe",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(x0, min=-c, max=c)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_160": {
                "input": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "x1_safe",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(x1, min=-c, max=c)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_161": {
                "input": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.floor(y)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y0_safe",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(y0, min=-c, max=c)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_162": {
                "input": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "y1_safe",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(y1, min=-c, max=c)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_169": {
                "input": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.floor(y)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y0_safe",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(y0, min=-c, max=c)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_170": {
                "input": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.floor(y)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y0_safe",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(y0, min=-c, max=c)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_171": {
                "input": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "y1_safe",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(y1, min=-c, max=c)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_172": {
                "input": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "y1_safe",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(y1, min=-c, max=c)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_197": {
                "tensors": {
                    "value": "[ind % d - d // 2, ind / d - d // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/flow/hd3/models/hd3net.py": {
        "torch": {
            "Conv2d_33": {
                "variable": {
                    "value": "self.cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ch[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm(128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BatchNorm(128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_149": {
                "tensors": {
                    "value": "[x[:, :3, :, :], x[:, 3:, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cost_vol, ref_feat, ms_pred[-1][-1], up_curr_vect]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_185": {
                "variable": {
                    "value": "curr_vect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_vect",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "density2vector(prob_map, self.dim, True)",
                            "Call"
                        ],
                        [
                            "curr_vect + up_curr_vect",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(curr_vect, max=0)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "*args": {
                    "value": "nn.Conv2d(ch[i], ch[i + 1], kernel_size=3, stride=1, padding=dilations[i], dilation=dilations[i], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_58": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "up_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classes[l + 1]",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "ch[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 1, 2, 4, 8, 16, 1]",
                            "List"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[1, 1, 2, 4, 8, 16, 1]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_189": {
                "input": {
                    "value": "curr_vect",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "density2vector(prob_map, self.dim, True)",
                            "Call"
                        ],
                        [
                            "curr_vect + up_curr_vect",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(curr_vect, max=0)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/flow/hd3/models/vgg.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/flow/lite_flow_net/correlation.py": {
        "torch": {
            "current_stream_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/flow/lite_flow_net/lite_flow.py": {
        "torch": {
            "load_45": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "input_img1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img1, img2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "input_img2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img2, img1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_73": {
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(th, tw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/flow/lite_flow_net/lite_flow_net.py": {
        "torch": {
            "cat_26": {
                "variable": {
                    "value": "tensorFlow",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensorFlow[:, 0:1, :, :] / ((tensorInput.size(3) - 1.0) / 2.0), tensorFlow[:, 1:2, :, :] / ((tensorInput.size(2) - 1.0) / 2.0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_21": {
                "variable": {
                    "value": "tensorHorizontal",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "tensorFlow.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_22": {
                "variable": {
                    "value": "tensorVertical",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "tensorFlow.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "Backward_tensorGrid[str(tensorFlow.size())]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensorHorizontal, tensorVertical]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_28": {
                "input": {
                    "value": "tensorInput",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "(Backward_tensorGrid[str(tensorFlow.size())] + tensorFlow).permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ModuleList_267": {
                "variable": {
                    "value": "self.moduleMatching",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Matching(intLevel) for intLevel in [2, 3, 4, 5, 6]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_268": {
                "variable": {
                    "value": "self.moduleSubpixel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Subpixel(intLevel) for intLevel in [2, 3, 4, 5, 6]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_269": {
                "variable": {
                    "value": "self.moduleRegularization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Regularization(intLevel) for intLevel in [2, 3, 4, 5, 6]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.moduleOne",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=3, out_channels=32, kernel_size=7, stride=1, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.moduleTwo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.moduleThr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.moduleFou",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=64, out_channels=96, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.moduleFiv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=96, out_channels=128, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.moduleSix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=128, out_channels=192, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.moduleMain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=49, out_channels=128, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "variable": {
                    "value": "self.moduleMain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=[0, 0, 130, 130, 194, 258, 386][intLevel], out_channels=128, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_211": {
                "variable": {
                    "value": "self.moduleMain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=[0, 0, 131, 131, 131, 131, 195][intLevel], out_channels=128, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_239": {
                "variable": {
                    "value": "self.moduleScaleX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "[0, 0, 49, 25, 25, 9, 9][intLevel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_240": {
                "variable": {
                    "value": "self.moduleScaleY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "[0, 0, 49, 25, 25, 9, 9][intLevel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.moduleFeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "leaky_relu_145": {
                "variable": {
                    "value": "tensorCorrelation",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "correlation.FunctionCorrelation(tensorFirst=tensorFeaturesFirst, tensorSecond=tensorFeaturesSecond, intStride=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "self.moduleFeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "variable": {
                    "value": "self.moduleFeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "variable": {
                    "value": "self.moduleDist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=32, out_channels=[0, 0, 49, 25, 25, 9, 9][intLevel], kernel_size=[0, 0, 7, 5, 5, 3, 3][intLevel], stride=1, padding=[0, 0, 3, 2, 2, 1, 1][intLevel])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_264": {
                "tensors": {
                    "value": "[tensorScaleX, tensorScaleY]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_308": {
                "input": {
                    "value": "tensorFirst[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[tensorFirst]",
                            "List"
                        ]
                    ]
                },
                "size": {
                    "value": "(tensorFeaturesFirst[intLevel].size(2), tensorFeaturesFirst[intLevel].size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_309": {
                "input": {
                    "value": "tensorSecond[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[tensorSecond]",
                            "List"
                        ]
                    ]
                },
                "size": {
                    "value": "(tensorFeaturesSecond[intLevel].size(2), tensorFeaturesSecond[intLevel].size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_41": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_46": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_48": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_50": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_55": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_57": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_62": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_64": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_69": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_74": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.moduleFeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_109": {
                "variable": {
                    "value": "self.moduleUpflow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_117": {
                "variable": {
                    "value": "self.moduleUpcorr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "49",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "49",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "49",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "in_channels": {
                    "value": "49",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_123": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_125": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_127": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[0, 0, 7, 5, 5, 3, 3][intLevel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, 0, 3, 2, 2, 1, 1][intLevel]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.moduleFeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "[0, 0, 130, 130, 194, 258, 386][intLevel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_173": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_174": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_175": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_177": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_178": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[0, 0, 7, 5, 5, 3, 3][intLevel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, 0, 3, 2, 2, 1, 1][intLevel]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_204": {
                "variable": {
                    "value": "self.moduleFeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=[0, 0, 32, 64, 96, 128, 192][intLevel], out_channels=128, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_212": {
                "in_channels": {
                    "value": "[0, 0, 131, 131, 131, 131, 195][intLevel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_213": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_214": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_215": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_217": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_218": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_219": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_220": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_221": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_222": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_223": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_232": {
                "variable": {
                    "value": "self.moduleDist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=32, out_channels=[0, 0, 49, 25, 25, 9, 9][intLevel], kernel_size=([0, 0, 7, 5, 5, 3, 3][intLevel], 1), stride=1, padding=([0, 0, 3, 2, 2, 1, 1][intLevel], 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_190": {
                "tensors": {
                    "value": "[tensorFeaturesFirst, tensorFeaturesSecond, tensorFlow]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_228": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "[0, 0, 49, 25, 25, 9, 9][intLevel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[0, 0, 7, 5, 5, 3, 3][intLevel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, 0, 3, 2, 2, 1, 1][intLevel]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_255": {
                "tensors": {
                    "value": "[tensorDifference, tensorFlow - tensorFlow.view(tensorFlow.size(0), 2, -1).mean(2, True).view(tensorFlow.size(0), 2, 1, 1), self.moduleFeat(tensorFeaturesFirst)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_100": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_148": {
                "input": {
                    "value": "correlation.FunctionCorrelation(tensorFirst=tensorFeaturesFirst, tensorSecond=tensorFeaturesSecond, intStride=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_166": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_205": {
                "in_channels": {
                    "value": "[0, 0, 32, 64, 96, 128, 192][intLevel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_206": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_233": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "[0, 0, 49, 25, 25, 9, 9][intLevel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "([0, 0, 7, 5, 5, 3, 3][intLevel], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "([0, 0, 3, 2, 2, 1, 1][intLevel], 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_234": {
                "in_channels": {
                    "value": "[0, 0, 49, 25, 25, 9, 9][intLevel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "[0, 0, 49, 25, 25, 9, 9][intLevel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, [0, 0, 7, 5, 5, 3, 3][intLevel])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, [0, 0, 3, 2, 2, 1, 1][intLevel])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_261": {
                "input": {
                    "value": "tensorFlow[:, 0:1, :, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.cat([tensorFlow[:, 0:1, :, :] / ((tensorInput.size(3) - 1.0) / 2.0), tensorFlow[:, 1:2, :, :] / ((tensorInput.size(2) - 1.0) / 2.0)], 1)",
                            "Call"
                        ],
                        [
                            "self.moduleUpflow(tensorFlow)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.moduleMatching[intLevel](tensorFirst[intLevel], tensorSecond[intLevel], tensorFeaturesFirst[intLevel], tensorFeaturesSecond[intLevel], tensorFlow)",
                            "Call"
                        ],
                        [
                            "self.moduleSubpixel[intLevel](tensorFirst[intLevel], tensorSecond[intLevel], tensorFeaturesFirst[intLevel], tensorFeaturesSecond[intLevel], tensorFlow)",
                            "Call"
                        ],
                        [
                            "self.moduleRegularization[intLevel](tensorFirst[intLevel], tensorSecond[intLevel], tensorFeaturesFirst[intLevel], tensorFeaturesSecond[intLevel], tensorFlow)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.intUnfold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((self.intUnfold - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unfold_262": {
                "input": {
                    "value": "tensorFlow[:, 1:2, :, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.cat([tensorFlow[:, 0:1, :, :] / ((tensorInput.size(3) - 1.0) / 2.0), tensorFlow[:, 1:2, :, :] / ((tensorInput.size(2) - 1.0) / 2.0)], 1)",
                            "Call"
                        ],
                        [
                            "self.moduleUpflow(tensorFlow)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.moduleMatching[intLevel](tensorFirst[intLevel], tensorSecond[intLevel], tensorFeaturesFirst[intLevel], tensorFeaturesSecond[intLevel], tensorFlow)",
                            "Call"
                        ],
                        [
                            "self.moduleSubpixel[intLevel](tensorFirst[intLevel], tensorSecond[intLevel], tensorFeaturesFirst[intLevel], tensorFeaturesSecond[intLevel], tensorFlow)",
                            "Call"
                        ],
                        [
                            "self.moduleRegularization[intLevel](tensorFirst[intLevel], tensorSecond[intLevel], tensorFeaturesFirst[intLevel], tensorFeaturesSecond[intLevel], tensorFlow)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.intUnfold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((self.intUnfold - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/pose/deep_pose.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/pose/monodepth2/monodepth2.py": {
        "torch": {
            "device_41": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_51": {
                "variable": {
                    "value": "loaded_dict_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "encoder_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(weight_path, 'pose_encoder.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_58": {
                "variable": {
                    "value": "loaded_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pose_decoder_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(weight_path, 'pose.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "libs/deep_models/pose/monodepth2/pose_decoder.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.convs[squeeze]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_ch_enc[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.convs[pose, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input_features * 256",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.convs[pose, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.convs[pose, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6 * num_frames_to_predict_for",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "list(self.convs.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "cat_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.relu(self.convs['squeeze'](f)) for f in last_features]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(cat_features, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "libs/geometry/backprojection.py": {
        "torch": {
            "tensor_34": {
                "variable": {
                    "value": "id_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "id_coords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.stack(meshgrid, axis=0).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(id_coords)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.ones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 1, self.height * self.width)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_39": {
                "variable": {
                    "value": "self.xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([id_coords[0].view(-1), id_coords[1].view(-1)], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "self.xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.xy, self.ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "variable": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inv_K[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "xy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.xy.repeat(depth.shape[0], 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_63": {
                "variable": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_37": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height * self.width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_40": {
                "tensors": {
                    "value": "[id_coords[0].view(-1), id_coords[1].view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "libs/geometry/projection.py": {
        "torch": {
            "matmul_46": {
                "variable": {
                    "value": "points2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K[:, :3, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "points3d",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "libs/geometry/reprojection.py": {
        "torch": {}
    },
    "libs/geometry/rigid_flow.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "libs/geometry/transformation3d.py": {
        "torch": {
            "matmul_31": {
                "variable": {
                    "value": "transformed_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "libs/matching/depth_consistency.py": {
        "torch": {
            "from_numpy_48": {
                "variable": {
                    "value": "data[inv_K]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['inv_K']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "variable": {
                    "value": "data[inv_K]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "data[K]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['K']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_52": {
                "variable": {
                    "value": "data[K]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "data[depth, cur_data[id]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cur_data['raw_depth']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_55": {
                "variable": {
                    "value": "data[depth, cur_data[id]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "data[depth, data[ref_id]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ref_data['raw_depth']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_62": {
                "variable": {
                    "value": "data[depth, data[ref_id]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "data[pose_T, cur_data[id], data[ref_id]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ref_data['deep_pose']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_65": {
                "variable": {
                    "value": "data[pose_T, cur_data[id], data[ref_id]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_106": {
                "variable": {
                    "value": "outputs[warp_depth, inputs[cur_id], inputs[ref_id]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs['depth', inputs['ref_id']]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "reproj_xy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.reproj(cur_depth, T, K, inv_K)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_112": {
                "variable": {
                    "value": "transformed_cam_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T[:, :3, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "cam_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.backproj(cur_depth, inv_K)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "libs/tracker/pnp_tracker.py": {
        "torch": {
            "from_numpy_41": {
                "variable": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_41": {
                "variable": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "self.inv_K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.inv_K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_42": {
                "variable": {
                    "value": "self.inv_K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "pose_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rigid_flow_pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ref_data['rigid_flow_pose'].pose",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_183": {
                "variable": {
                    "value": "pose_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_184": {
                "variable": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ref_data['raw_depth']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_184": {
                "variable": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/generate_flow_prediction.py": {
        "torch": {
            "from_numpy_166": {
                "ndarray": {
                    "value": "flows",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "batch_flows['forward']",
                            "Subscript"
                        ],
                        [
                            "flow_net.resize_dense_flow(torch.from_numpy(flows), h, w)",
                            "Call"
                        ],
                        [
                            "flows.detach().cpu().numpy()[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}