{
    "ClassBalancedSampler.py": {
        "torch": {
            "ClassBalancedSampler_3": {
                "base_class_0": {
                    "value": "torch.utils.data.Sampler",
                    "possible_values": []
                },
                "self.shuffle": {
                    "value": "shuffle",
                    "possible_values": []
                }
            }
        }
    },
    "ECG_CNN1.py": {
        "torch": {
            "Block_13": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "MaxPool1d_20": {
                    "variable": {
                        "value": "self.pool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "5",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    }
                }
            },
            "Net_29": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_34": {
                    "variable": {
                        "value": "self.block",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[Block(bias), Block(bias), Block(bias), Block(bias), Block(bias)]",
                        "possible_values": []
                    }
                }
            },
            "SubstituteNet_88": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv1d_91": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "1",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "32",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "5",
                        "possible_values": []
                    }
                },
                "Conv1d_92": {
                    "variable": {
                        "value": "self.conv12",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "32",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "32",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "5",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "2",
                        "possible_values": []
                    }
                },
                "Conv1d_93": {
                    "variable": {
                        "value": "self.conv13",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "32",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "32",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "5",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "2",
                        "possible_values": []
                    }
                },
                "MaxPool1d_94": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "5",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    }
                },
                "Linear_95": {
                    "variable": {
                        "value": "self.fc1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "32 * 90",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "32 * 10",
                        "possible_values": []
                    }
                },
                "Linear_96": {
                    "variable": {
                        "value": "self.fc2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "32 * 10",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "32",
                        "possible_values": []
                    }
                },
                "Linear_97": {
                    "variable": {
                        "value": "self.fc3",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "32",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "5",
                        "possible_values": []
                    }
                },
                "Softmax_98": {
                    "variable": {
                        "value": "self.softmax",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "Adamax_192": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "train_arg['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_254": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pt'",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "train_arg['device']",
                            "Subscript"
                        ],
                        [
                            "train_arg['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_288": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pt'",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "train_arg['device']",
                            "Subscript"
                        ],
                        [
                            "train_arg['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_317": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pt'",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "train_arg['device']",
                            "Subscript"
                        ],
                        [
                            "train_arg['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x3",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "possible_values": [
                        [
                            "x1 + x",
                            "BinOp"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(x)",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv12(x)",
                    "possible_values": []
                }
            },
            "relu_104": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv13(x)",
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "possible_values": []
                }
            },
            "save_114": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'result': result}",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "possible_values": [
                        [
                            "'result/ECG_CNN1_' + str(num) + str(bias) + '_' + loss_name",
                            "BinOp"
                        ],
                        [
                            "filename + '_Jacob1_'",
                            "BinOp"
                        ],
                        [
                            "filename + '_Jacob2_'",
                            "BinOp"
                        ],
                        [
                            "filename + '_epoch' + str(epoch)",
                            "BinOp"
                        ],
                        [
                            "get_filename(num, bias, loss_name, train_arg)",
                            "Call"
                        ],
                        [
                            "get_filename(num, bias, loss_name, train_arg, epoch)",
                            "Call"
                        ],
                        [
                            "get_filename(num, bias, loss_name, train_arg, epoch)",
                            "Call"
                        ],
                        [
                            "get_filename(num, bias, loss_name, train_arg, epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_280": {
                "obj": {
                    "value": "{'result_100pgd': result_100pgd}",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_result_wba.pt'",
                    "possible_values": []
                }
            },
            "save_313": {
                "obj": {
                    "value": "{'result_spsa': result_spsa}",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_result_bba_spsa.pt'",
                    "possible_values": []
                }
            },
            "save_342": {
                "obj": {
                    "value": "{'result_rand': result_rand}",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_result_rand.pt'",
                    "possible_values": []
                }
            },
            "load_206": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_epoch' + str(epoch_save) + '.pt'",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "train_arg['device']",
                            "Subscript"
                        ],
                        [
                            "train_arg['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adamax_215": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "train_arg['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_23": {
                "input": {
                    "value": "self.conv1(x)",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "ECG_CNN1_ce.py": {
        "torch": {
            "manual_seed_20": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "device_115": {
                "variable": {
                    "value": "train_arg[device]",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "cross_entropy_48": {
                "variable": {
                    "value": "loss1",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "possible_values": [
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Y",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "Yp == Y",
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "ECG_CNN1_ce_adv_pgd.py": {
        "torch": {
            "manual_seed_19": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "device_113": {
                "variable": {
                    "value": "train_arg[device]",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "save_26": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'result': result}",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "possible_values": []
                }
            },
            "sum_73": {
                "input": {
                    "value": "Yp == Y",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_113": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cross_entropy_60": {
                "input": {
                    "value": "Zn",
                    "possible_values": [
                        [
                            "model(Xn)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Y",
                    "possible_values": []
                }
            }
        }
    },
    "ECG_CNN1_ce_jacob.py": {
        "torch": {
            "manual_seed_20": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cross_entropy_46": {
                "variable": {
                    "value": "loss1",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "possible_values": [
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Y",
                    "possible_values": []
                }
            },
            "cross_entropy_106": {
                "variable": {
                    "value": "loss1",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "possible_values": [
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Y",
                    "possible_values": []
                }
            },
            "device_179": {
                "variable": {
                    "value": "train_arg[device]",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "sum_70": {
                "input": {
                    "value": "Yp == Y",
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "Yp == Y",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_160": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_179": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "ECG_CNN1_mse.py": {
        "torch": {
            "manual_seed_19": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "M",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "device_83": {
                "variable": {
                    "value": "train_arg[device]",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:3 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "mean_54": {
                "variable": {
                    "value": "loss1",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((Z - MM) ** 2, dim=1)",
                    "possible_values": []
                }
            },
            "sum_63": {
                "input": {
                    "value": "Yp == Y",
                    "possible_values": []
                }
            },
            "sum_54": {
                "input": {
                    "value": "(Z - MM) ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "ECG_CNN1_mse_margin.py": {
        "torch": {
            "manual_seed_19": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "M",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "device_80": {
                "variable": {
                    "value": "train_arg[device]",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:3 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "mean_50": {
                "variable": {
                    "value": "loss1",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((Z - MM) ** 2, dim=1)",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "Yp == Y",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "(Z - MM) ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "ECG_CNN1_mse_margin_loss1.py": {
        "torch": {
            "manual_seed_19": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "M",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "device_80": {
                "variable": {
                    "value": "train_arg[device]",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "mean_50": {
                "variable": {
                    "value": "loss1",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((Z - MM) ** 2, dim=1)",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "Yp == Y",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "(Z - MM) ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "ECG_CNN1_mse_margin_loss2.py": {
        "torch": {
            "manual_seed_18": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "M",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "mean_51": {
                "variable": {
                    "value": "loss1",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((Z - MM) ** 2, dim=1)",
                    "possible_values": []
                }
            },
            "device_88": {
                "variable": {
                    "value": "train_arg[device]",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "Yp_e_Y",
                    "possible_values": [
                        [
                            "Yp == Y",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_51": {
                "input": {
                    "value": "(Z - MM) ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "ECG_Dataset.py": {
        "torch": {
            "load_31": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "f": {
                    "value": "mitbih_data.pt",
                    "possible_values": []
                }
            },
            "load_61": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "f": {
                    "value": "mitbih_data.pt",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "X_test",
                    "possible_values": []
                },
                "tensors": {
                    "value": "X_test",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(X_test, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "Y_test",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Y_test",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(Y_test, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_40": {
                "variable": {
                    "value": "sample_count_train[n]",
                    "possible_values": []
                },
                "input": {
                    "value": "data['Y_train'] == n",
                    "possible_values": []
                }
            },
            "sum_43": {
                "variable": {
                    "value": "sample_count_val[n]",
                    "possible_values": []
                },
                "input": {
                    "value": "data['Y_val'] == n",
                    "possible_values": []
                }
            },
            "sum_46": {
                "variable": {
                    "value": "sample_count_test[n]",
                    "possible_values": []
                },
                "input": {
                    "value": "data['Y_test'] == n",
                    "possible_values": []
                }
            },
            "sum_64": {
                "variable": {
                    "value": "sample_count_train[n]",
                    "possible_values": []
                },
                "input": {
                    "value": "data['Y_train'] == n",
                    "possible_values": []
                }
            },
            "sum_67": {
                "variable": {
                    "value": "sample_count_val[n]",
                    "possible_values": []
                },
                "input": {
                    "value": "data['Y_val'] == n",
                    "possible_values": []
                }
            },
            "sum_70": {
                "variable": {
                    "value": "sample_count_test[n]",
                    "possible_values": []
                },
                "input": {
                    "value": "data['Y_test'] == n",
                    "possible_values": []
                }
            },
            "ones_82": {
                "*size": {
                    "value": "X_n.size(0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            }
        }
    },
    "ECG_MLP1.py": {
        "torch": {
            "Net_15": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_19": {
                    "variable": {
                        "value": "self.E",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[Linear(187, num), Linear(num, num), Linear(num, num), Linear(num, 32)]",
                        "possible_values": []
                    }
                },
                "ModuleList_24": {
                    "variable": {
                        "value": "self.C",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[Linear(32, 5)]",
                        "possible_values": []
                    }
                },
                "ModuleList_26": {
                    "variable": {
                        "value": "self.G",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[nn.ReLU(inplace=True), nn.ReLU(inplace=True), nn.ReLU(inplace=True)]",
                        "possible_values": []
                    }
                }
            },
            "SubstituteNet_66": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_69": {
                    "variable": {
                        "value": "self.net",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(187, num, bias=bias)",
                        "possible_values": []
                    }
                }
            },
            "Adamax_165": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "train_arg['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_227": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pt'",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "train_arg['device']",
                            "Subscript"
                        ],
                        [
                            "train_arg['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_319": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pt'",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "train_arg['device']",
                            "Subscript"
                        ],
                        [
                            "train_arg['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_348": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pt'",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "train_arg['device']",
                            "Subscript"
                        ],
                        [
                            "train_arg['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_87": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'result': result}",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "possible_values": [
                        [
                            "'result/ECG_MLP1_' + str(num) + str(bias) + '_' + loss_name",
                            "BinOp"
                        ],
                        [
                            "filename + '_Jacob1_'",
                            "BinOp"
                        ],
                        [
                            "filename + '_Jacob2_'",
                            "BinOp"
                        ],
                        [
                            "filename + '_epoch' + str(epoch)",
                            "BinOp"
                        ],
                        [
                            "get_filename(num, bias, loss_name, train_arg)",
                            "Call"
                        ],
                        [
                            "get_filename(num, bias, loss_name, train_arg, epoch)",
                            "Call"
                        ],
                        [
                            "get_filename(num, bias, loss_name, train_arg, epoch)",
                            "Call"
                        ],
                        [
                            "get_filename(num, bias, loss_name, train_arg, epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_311": {
                "obj": {
                    "value": "{'result_100pgd': result_100pgd}",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_result_wba.pt'",
                    "possible_values": []
                }
            },
            "save_344": {
                "obj": {
                    "value": "{'result_spsa': result_spsa}",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_result_bba_spsa.pt'",
                    "possible_values": []
                }
            },
            "save_373": {
                "obj": {
                    "value": "{'result_rand': result_rand}",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_result_rand.pt'",
                    "possible_values": []
                }
            },
            "load_179": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_epoch' + str(epoch_save) + '.pt'",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "train_arg['device']",
                            "Subscript"
                        ],
                        [
                            "train_arg['device']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adamax_188": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "train_arg['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "187",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BatchNorm1d_71": {
                "num_features": {
                    "value": "num",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "num",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BatchNorm1d_74": {
                "num_features": {
                    "value": "num",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "num",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BatchNorm1d_77": {
                "num_features": {
                    "value": "num",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "num",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BatchNorm1d_80": {
                "num_features": {
                    "value": "num",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "num",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "ECG_MLP1_ce.py": {
        "torch": {
            "manual_seed_20": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "device_112": {
                "variable": {
                    "value": "train_arg[device]",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "cross_entropy_47": {
                "variable": {
                    "value": "loss1",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "possible_values": [
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Y",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "Yp == Y",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_112": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "ECG_MLP1_ce_adv_pgd.py": {
        "torch": {
            "manual_seed_19": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "save_26": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'result': result}",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "possible_values": []
                }
            },
            "cross_entropy_59": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "possible_values": [
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Y",
                    "possible_values": []
                }
            },
            "cross_entropy_60": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "input": {
                    "value": "Zn",
                    "possible_values": [
                        [
                            "model(Xn)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Y",
                    "possible_values": []
                }
            },
            "device_105": {
                "variable": {
                    "value": "train_arg[device]",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "Yp == Y",
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "ECG_MLP1_ce_jacob.py": {
        "torch": {
            "manual_seed_20": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cross_entropy_45": {
                "variable": {
                    "value": "loss1",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "possible_values": [
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Y",
                    "possible_values": []
                }
            },
            "cross_entropy_105": {
                "variable": {
                    "value": "loss1",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "possible_values": [
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Y",
                    "possible_values": []
                }
            },
            "device_178": {
                "variable": {
                    "value": "train_arg[device]",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "Yp == Y",
                    "possible_values": []
                }
            },
            "sum_129": {
                "input": {
                    "value": "Yp == Y",
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_159": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_178": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "ECG_MLP1_mse.py": {
        "torch": {
            "manual_seed_19": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "M",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "device_83": {
                "variable": {
                    "value": "train_arg[device]",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "mean_54": {
                "variable": {
                    "value": "loss1",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((Z - MM) ** 2, dim=1)",
                    "possible_values": []
                }
            },
            "sum_63": {
                "input": {
                    "value": "Yp == Y",
                    "possible_values": []
                }
            },
            "sum_54": {
                "input": {
                    "value": "(Z - MM) ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "ECG_MLP1_mse_margin.py": {
        "torch": {
            "manual_seed_19": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "M",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "device_79": {
                "variable": {
                    "value": "train_arg[device]",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "mean_50": {
                "variable": {
                    "value": "loss1",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((Z - MM) ** 2, dim=1)",
                    "possible_values": []
                }
            },
            "sum_63": {
                "input": {
                    "value": "Yp == Y",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "(Z - MM) ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_79": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "ECG_MLP1_mse_margin_loss1.py": {
        "torch": {
            "manual_seed_19": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "M",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "device_80": {
                "variable": {
                    "value": "train_arg[device]",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "mean_50": {
                "variable": {
                    "value": "loss1",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((Z - MM) ** 2, dim=1)",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "Yp == Y",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "(Z - MM) ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "ECG_MLP1_mse_margin_loss2.py": {
        "torch": {
            "manual_seed_18": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "M",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "mean_51": {
                "variable": {
                    "value": "loss1",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((Z - MM) ** 2, dim=1)",
                    "possible_values": []
                }
            },
            "device_87": {
                "variable": {
                    "value": "train_arg[device]",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "Yp_e_Y",
                    "possible_values": [
                        [
                            "Yp == Y",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_51": {
                "input": {
                    "value": "(Z - MM) ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_87": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Evaluate.py": {
        "torch": {
            "clamp_150": {
                "variable": {
                    "value": "Xn",
                    "possible_values": []
                },
                "input": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X + noise_norm * (2 * torch.rand_like(X) - 1)",
                            "BinOp"
                        ],
                        [
                            "X.clone().detach()",
                            "Call"
                        ],
                        [
                            "Xn.detach() + step * Xn_grad.sign().detach()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(Xn, 0, 1)",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X.clone().detach()",
                            "Call"
                        ],
                        [
                            "X + noise_init",
                            "BinOp"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X + noise_new",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(Xn, 0, 1)",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "ifgsm_attack(model, X, Y, noise_norm, norm_type, max_iter, step, scale_z, targeted, stop_if_label_change, use_optimizer=use_optimizer)",
                            "Call"
                        ],
                        [
                            "pgd_attack(model, X, Y, noise_norm, norm_type, max_iter, step, True, None, scale_z, targeted, stop_if_label_change, use_optimizer=use_optimizer)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_like_290": {
                "variable": {
                    "value": "noise_old",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "X.view(X.size(0), -1)",
                            "Call"
                        ],
                        [
                            "X.view(X.size(0), -1)",
                            "Call"
                        ],
                        [
                            "X.view(X.size(0), -1)",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_291": {
                "variable": {
                    "value": "flag",
                    "possible_values": []
                },
                "*size": {
                    "value": "X.size(0)",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            },
            "Adamax_307": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "[noise_new]",
                    "possible_values": []
                },
                "lr": {
                    "value": "step",
                    "possible_values": [
                        [
                            "max(1 / 255, noise_level / max_iter)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_337": {
                "variable": {
                    "value": "Xnew",
                    "possible_values": []
                },
                "input": {
                    "value": "X + noise_new",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clamp_366": {
                "variable": {
                    "value": "Xn",
                    "possible_values": []
                },
                "input": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X + noise_norm * (2 * torch.rand_like(X) - 1)",
                            "BinOp"
                        ],
                        [
                            "X.clone().detach()",
                            "Call"
                        ],
                        [
                            "Xn.detach() + step * Xn_grad.sign().detach()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(Xn, 0, 1)",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X.clone().detach()",
                            "Call"
                        ],
                        [
                            "X + noise_init",
                            "BinOp"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X + noise_new",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(Xn, 0, 1)",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "ifgsm_attack(model, X, Y, noise_norm, norm_type, max_iter, step, scale_z, targeted, stop_if_label_change, use_optimizer=use_optimizer)",
                            "Call"
                        ],
                        [
                            "pgd_attack(model, X, Y, noise_norm, norm_type, max_iter, step, True, None, scale_z, targeted, stop_if_label_change, use_optimizer=use_optimizer)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_11": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_144": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "Zn",
                    "possible_values": [
                        [
                            "model(Xn)",
                            "Call"
                        ],
                        [
                            "model(Xn)",
                            "Call"
                        ],
                        [
                            "model(Xn)",
                            "Call"
                        ],
                        [
                            "Zn * scale_z",
                            "BinOp"
                        ],
                        [
                            "model(Xn)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Y",
                    "possible_values": [
                        [
                            "(Y > 0.5).to(torch.int64)",
                            "Call"
                        ],
                        [
                            "(Y > 0.5).to(torch.int64)",
                            "Call"
                        ],
                        [
                            "Y.to(torch.int64)",
                            "Call"
                        ],
                        [
                            "(Y > 0.5).to(torch.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_146": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "Zn",
                    "possible_values": [
                        [
                            "model(Xn)",
                            "Call"
                        ],
                        [
                            "model(Xn)",
                            "Call"
                        ],
                        [
                            "model(Xn)",
                            "Call"
                        ],
                        [
                            "Zn * scale_z",
                            "BinOp"
                        ],
                        [
                            "model(Xn)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Y_int64",
                    "possible_values": [
                        [
                            "Y.to(torch.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_159": {
                "input": {
                    "value": "X ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_169": {
                "input": {
                    "value": "X.abs()",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_214": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_243": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_319": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "Zn",
                    "possible_values": [
                        [
                            "model(Xn)",
                            "Call"
                        ],
                        [
                            "model(Xn)",
                            "Call"
                        ],
                        [
                            "model(Xn)",
                            "Call"
                        ],
                        [
                            "Zn * scale_z",
                            "BinOp"
                        ],
                        [
                            "model(Xn)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Y.to(X.dtype)",
                    "possible_values": []
                }
            },
            "cross_entropy_322": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "Zn",
                    "possible_values": [
                        [
                            "model(Xn)",
                            "Call"
                        ],
                        [
                            "model(Xn)",
                            "Call"
                        ],
                        [
                            "model(Xn)",
                            "Call"
                        ],
                        [
                            "Zn * scale_z",
                            "BinOp"
                        ],
                        [
                            "model(Xn)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Y",
                    "possible_values": [
                        [
                            "(Y > 0.5).to(torch.int64)",
                            "Call"
                        ],
                        [
                            "(Y > 0.5).to(torch.int64)",
                            "Call"
                        ],
                        [
                            "Y.to(torch.int64)",
                            "Call"
                        ],
                        [
                            "(Y > 0.5).to(torch.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_452": {
                "input": {
                    "value": "(Yp == Y) & (Ypn != Y)",
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "(Yp == Y) & (Ypn != Y)",
                    "possible_values": []
                }
            },
            "grad_148": {
                "outputs": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "nnF.binary_cross_entropy_with_logits(Zn, Y)",
                            "Call"
                        ],
                        [
                            "nnF.cross_entropy(Zn, Y_int64)",
                            "Call"
                        ],
                        [
                            "nnF.binary_cross_entropy_with_logits(Zn, Y.to(X.dtype))",
                            "Call"
                        ],
                        [
                            "nnF.cross_entropy(Zn, Y)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X + noise_norm * (2 * torch.rand_like(X) - 1)",
                            "BinOp"
                        ],
                        [
                            "X.clone().detach()",
                            "Call"
                        ],
                        [
                            "Xn.detach() + step * Xn_grad.sign().detach()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(Xn, 0, 1)",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X.clone().detach()",
                            "Call"
                        ],
                        [
                            "X + noise_init",
                            "BinOp"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X + noise_new",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(Xn, 0, 1)",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "ifgsm_attack(model, X, Y, noise_norm, norm_type, max_iter, step, scale_z, targeted, stop_if_label_change, use_optimizer=use_optimizer)",
                            "Call"
                        ],
                        [
                            "pgd_attack(model, X, Y, noise_norm, norm_type, max_iter, step, True, None, scale_z, targeted, stop_if_label_change, use_optimizer=use_optimizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_219": {
                "variable": {
                    "value": "l1_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "N.abs()",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_248": {
                "variable": {
                    "value": "l1_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "g.abs()",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "no_grad_280": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "grad_328": {
                "outputs": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "nnF.binary_cross_entropy_with_logits(Zn, Y)",
                            "Call"
                        ],
                        [
                            "nnF.cross_entropy(Zn, Y_int64)",
                            "Call"
                        ],
                        [
                            "nnF.binary_cross_entropy_with_logits(Zn, Y.to(X.dtype))",
                            "Call"
                        ],
                        [
                            "nnF.cross_entropy(Zn, Y)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X + noise_norm * (2 * torch.rand_like(X) - 1)",
                            "BinOp"
                        ],
                        [
                            "X.clone().detach()",
                            "Call"
                        ],
                        [
                            "Xn.detach() + step * Xn_grad.sign().detach()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(Xn, 0, 1)",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X.clone().detach()",
                            "Call"
                        ],
                        [
                            "X + noise_init",
                            "BinOp"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X + noise_new",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(Xn, 0, 1)",
                            "Call"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "ifgsm_attack(model, X, Y, noise_norm, norm_type, max_iter, step, scale_z, targeted, stop_if_label_change, use_optimizer=use_optimizer)",
                            "Call"
                        ],
                        [
                            "pgd_attack(model, X, Y, noise_norm, norm_type, max_iter, step, True, None, scale_z, targeted, stop_if_label_change, use_optimizer=use_optimizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_187": {
                "variable": {
                    "value": "L2norm_mean",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(torch.sum(X ** 2, dim=1))",
                    "possible_values": []
                }
            },
            "sqrt_225": {
                "variable": {
                    "value": "l2_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(N ** 2, dim=1, keepdim=True)",
                    "possible_values": []
                }
            },
            "sqrt_252": {
                "variable": {
                    "value": "l2_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(g ** 2, dim=1, keepdim=True)",
                    "possible_values": []
                }
            },
            "sum_439": {
                "input": {
                    "value": "(Y == i) & (Ypn_ == j)",
                    "possible_values": []
                }
            },
            "sum_443": {
                "input": {
                    "value": "(Y == i) & (Yp == j)",
                    "possible_values": []
                }
            },
            "sum_22": {
                "input": {
                    "value": "(Y == i) & (Yp == j)",
                    "possible_values": []
                }
            },
            "sum_80": {
                "input": {
                    "value": "(Y == i) & (Ypn_ == j)",
                    "possible_values": []
                }
            },
            "sum_84": {
                "input": {
                    "value": "(Y == i) & (Yp == j)",
                    "possible_values": []
                }
            },
            "sqrt_159": {
                "input": {
                    "value": "torch.sum(X ** 2, dim=1)",
                    "possible_values": []
                }
            },
            "rand_like_299": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "X.view(X.size(0), -1)",
                            "Call"
                        ],
                        [
                            "X.view(X.size(0), -1)",
                            "Call"
                        ],
                        [
                            "X.view(X.size(0), -1)",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_225": {
                "input": {
                    "value": "N ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_252": {
                "input": {
                    "value": "g ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "rand_like_59": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "X.view(X.size(0), -1)",
                            "Call"
                        ],
                        [
                            "X.view(X.size(0), -1)",
                            "Call"
                        ],
                        [
                            "X.view(X.size(0), -1)",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_232": {
                "input": {
                    "value": "N.abs() ** p",
                    "possible_values": []
                }
            },
            "sum_257": {
                "input": {
                    "value": "g.abs() ** p",
                    "possible_values": []
                }
            },
            "sqrt_187": {
                "input": {
                    "value": "torch.sum(X ** 2, dim=1)",
                    "possible_values": []
                }
            },
            "sum_187": {
                "input": {
                    "value": "X ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "Evaluate_bba_spsa.py": {
        "torch": {
            "tensor_34": {
                "variable": {
                    "value": "avoid_zero_div",
                    "possible_values": []
                },
                "data": {
                    "value": "1e-12",
                    "possible_values": []
                },
                "dtype": {
                    "value": "eta.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "eta.device",
                    "possible_values": []
                }
            },
            "Adam_246": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "[perturbation]",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_293": {
                "variable": {
                    "value": "adv_x",
                    "possible_values": []
                },
                "input": {
                    "value": "(x + perturbation).detach()",
                    "possible_values": []
                },
                "min": {
                    "value": "clip_min",
                    "possible_values": [
                        [
                            "-np.inf",
                            "MethodArgument"
                        ],
                        [
                            "-np.inf",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "possible_values": [
                        [
                            "np.inf",
                            "MethodArgument"
                        ],
                        [
                            "np.inf",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_343": {
                "variable": {
                    "value": "new_image",
                    "possible_values": []
                },
                "input": {
                    "value": "input_image + clipped_perturbation",
                    "possible_values": []
                },
                "min": {
                    "value": "clip_min",
                    "possible_values": [
                        [
                            "-np.inf",
                            "MethodArgument"
                        ],
                        [
                            "-np.inf",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "possible_values": [
                        [
                            "np.inf",
                            "MethodArgument"
                        ],
                        [
                            "np.inf",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_435": {
                "variable": {
                    "value": "incorrect_logits",
                    "possible_values": []
                },
                "condition": {
                    "value": "logit_indices == labels[:, None]",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.full_like(logits, float('-inf'))",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "model_fn(x + pert)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_445": {
                "variable": {
                    "value": "(max_incorrect_logits, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "incorrect_logits",
                    "possible_values": [
                        [
                            "torch.where(logit_indices == labels[:, None], torch.full_like(logits, float('-inf')), logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_40": {
                "variable": {
                    "value": "eta",
                    "possible_values": []
                },
                "input": {
                    "value": "eta",
                    "possible_values": [
                        [
                            "torch.clamp(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-eps",
                    "possible_values": []
                },
                "max": {
                    "value": "eps",
                    "possible_values": []
                }
            },
            "min_66": {
                "variable": {
                    "value": "factor",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(1.0, dtype=eta.dtype, device=eta.device)",
                    "possible_values": []
                }
            },
            "argmax_166": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "model_fn(x)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_385": {
                "variable": {
                    "value": "delta_x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[delta_x, -delta_x]",
                    "possible_values": []
                }
            },
            "mean_401": {
                "input": {
                    "value": "torch.cat(grad_list)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "gather_462": {
                "variable": {
                    "value": "Zy",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "possible_values": [
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "Y[:, None]",
                    "possible_values": []
                }
            },
            "arange_463": {
                "variable": {
                    "value": "idxTable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "Z.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                },
                "device": {
                    "value": "Z.device",
                    "possible_values": []
                }
            },
            "where_464": {
                "variable": {
                    "value": "Zother",
                    "possible_values": []
                },
                "condition": {
                    "value": "idxTable != Y[:, None]",
                    "possible_values": []
                },
                "x": {
                    "value": "Z",
                    "possible_values": [
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.full_like(Z, float('-inf'))",
                    "possible_values": []
                }
            },
            "max_48": {
                "variable": {
                    "value": "norm",
                    "possible_values": []
                },
                "input": {
                    "value": "avoid_zero_div",
                    "possible_values": [
                        [
                            "torch.tensor(1e-12, dtype=eta.dtype, device=eta.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_196": {
                "tensors": {
                    "value": "adv_x",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.clamp((x + perturbation).detach(), clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_230": {
                "input": {
                    "value": "x >= clip_min",
                    "possible_values": []
                }
            },
            "all_232": {
                "input": {
                    "value": "x <= clip_max",
                    "possible_values": []
                }
            },
            "all_307": {
                "input": {
                    "value": "adv_x >= clip_min",
                    "possible_values": []
                }
            },
            "all_309": {
                "input": {
                    "value": "adv_x <= clip_max",
                    "possible_values": []
                }
            },
            "cat_401": {
                "tensors": {
                    "value": "grad_list",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "full_like_439": {
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "model_fn(x + pert)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "float('-inf')",
                    "possible_values": []
                }
            },
            "no_grad_488": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sum_598": {
                "input": {
                    "value": "(Yp == Y) & (Ypn != Y)",
                    "possible_values": []
                }
            },
            "sqrt_58": {
                "variable": {
                    "value": "norm",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(avoid_zero_div, torch.sum(eta ** 2, dim=reduc_ind, keepdim=True))",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "1.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "eta.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "eta.device",
                    "possible_values": []
                }
            },
            "all_299": {
                "input": {
                    "value": "torch.abs(adv_x - x) <= eps + 1e-06",
                    "possible_values": []
                }
            },
            "all_303": {
                "input": {
                    "value": "torch.abs(torch.renorm(adv_x - x, p=norm, dim=0, maxnorm=eps) - (adv_x - x)) < 1e-06",
                    "possible_values": []
                }
            },
            "sign_383": {
                "input": {
                    "value": "torch.rand_like(x_batch) - 0.5",
                    "possible_values": []
                }
            },
            "mean_395": {
                "input": {
                    "value": "loss_vals * torch.sign(delta_x)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "full_like_464": {
                "input": {
                    "value": "Z",
                    "possible_values": [
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "float('-inf')",
                    "possible_values": []
                }
            },
            "Adamax_492": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "[noise]",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_494": {
                "variable": {
                    "value": "grad_n",
                    "possible_values": []
                },
                "input": {
                    "value": "noise",
                    "possible_values": [
                        [
                            "Xn[k] - X[k]",
                            "BinOp"
                        ],
                        [
                            "noise - lr * grad_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_517": {
                "variable": {
                    "value": "Xn[k]",
                    "possible_values": []
                },
                "input": {
                    "value": "X[k] + noise",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "torch.abs(eta)",
                    "possible_values": []
                },
                "dim": {
                    "value": "reduc_ind",
                    "possible_values": [
                        [
                            "list(range(1, len(eta.size())))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "rand_like_242": {
                "input": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "arange_425": {
                "start": {
                    "value": "logits.size()[1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "labels.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "labels.device",
                    "possible_values": []
                }
            },
            "sign_497": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand_like(Xnk) - 0.5",
                    "possible_values": []
                }
            },
            "sum_585": {
                "input": {
                    "value": "(Y == i) & (Ypn_ == j)",
                    "possible_values": []
                }
            },
            "sum_589": {
                "input": {
                    "value": "(Y == i) & (Yp == j)",
                    "possible_values": []
                }
            },
            "abs_52": {
                "input": {
                    "value": "eta",
                    "possible_values": [
                        [
                            "torch.clamp(eta, -eps, eps)",
                            "Call"
                        ],
                        [
                            "eta * factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_58": {
                "input": {
                    "value": "avoid_zero_div",
                    "possible_values": [
                        [
                            "torch.tensor(1e-12, dtype=eta.dtype, device=eta.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_299": {
                "input": {
                    "value": "adv_x - x",
                    "possible_values": []
                }
            },
            "abs_303": {
                "input": {
                    "value": "torch.renorm(adv_x - x, p=norm, dim=0, maxnorm=eps) - (adv_x - x)",
                    "possible_values": []
                }
            },
            "rand_like_383": {
                "input": {
                    "value": "x_batch",
                    "possible_values": [
                        [
                            "x.expand(samples, *[-1] * (num_dims - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_395": {
                "input": {
                    "value": "delta_x",
                    "possible_values": [
                        [
                            "delta * torch.sign(torch.rand_like(x_batch) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([delta_x, -delta_x])",
                            "Call"
                        ],
                        [
                            "step * v",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_like_478": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "X.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_62": {
                "input": {
                    "value": "eta ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "reduc_ind",
                    "possible_values": [
                        [
                            "list(range(1, len(eta.size())))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "renorm_305": {
                "input": {
                    "value": "adv_x - x",
                    "possible_values": []
                },
                "p": {
                    "value": "norm",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.max(avoid_zero_div, torch.sum(eta ** 2, dim=reduc_ind, keepdim=True)))",
                            "Call"
                        ],
                        [
                            "np.inf",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "maxnorm": {
                    "value": "eps",
                    "possible_values": []
                }
            },
            "rand_like_497": {
                "input": {
                    "value": "Xnk",
                    "possible_values": [
                        [
                            "Xn[k].expand((spsa_samples, *Xn[k].size()))",
                            "Call"
                        ],
                        [
                            "Xn[k].view((1, *Xn[k].size()))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "RobustDNN_loss.py": {
        "torch": {
            "tensor_35": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Z.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "Z.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Z.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "Z.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Z.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "Z.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "abs_136": {
                "variable": {
                    "value": "dist",
                    "possible_values": []
                },
                "input": {
                    "value": "Z - M",
                    "possible_values": []
                }
            },
            "tensor_172": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_199": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_233": {
                "variable": {
                    "value": "loss1",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "variable": {
                    "value": "loss2",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_271": {
                "variable": {
                    "value": "loss1",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_272": {
                "variable": {
                    "value": "loss2",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_311": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_344": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_378": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_413": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_463": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_515": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_559": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_606": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_659": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_704": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_751": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_796": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_845": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_883": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_931": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_983": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_1027": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_1071": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_1101": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_1141": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_1165": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_1184": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_1215": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_1237": {
                "input": {
                    "value": "temp",
                    "possible_values": [
                        [
                            "margin - Zy + Zother",
                            "BinOp"
                        ],
                        [
                            "temp[temp > 0]",
                            "Subscript"
                        ],
                        [
                            "temp[(temp > 0) & (temp < 2 * margin)]",
                            "Subscript"
                        ],
                        [
                            "dLdW * Weight",
                            "BinOp"
                        ],
                        [
                            "temp.view(temp.size(0), -1)",
                            "Call"
                        ],
                        [
                            "dLdW * Weight",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_1253": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "temp ** 2",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Z.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "Z.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "Zother",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Zn[:, 0:n], Zn[:, n + 1:]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "Zother",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Zn[:, 0:n], Zn[:, n + 1:]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "center",
                    "possible_values": []
                },
                "data": {
                    "value": "center",
                    "possible_values": [
                        [
                            "torch.tensor(center, dtype=Z.dtype, device=Z.device)",
                            "Call"
                        ],
                        [
                            "center.to(Z.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(center, dtype=Z.dtype, device=Z.device)",
                            "Call"
                        ],
                        [
                            "center.to(Z.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "Z.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "Z.device",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "radius",
                    "possible_values": []
                },
                "data": {
                    "value": "radius",
                    "possible_values": [
                        [
                            "torch.tensor(radius, dtype=Z.dtype, device=Z.device)",
                            "Call"
                        ],
                        [
                            "radius.to(Z.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(radius, dtype=Z.dtype, device=Z.device)",
                            "Call"
                        ],
                        [
                            "radius.to(Z.device)",
                            "Call"
                        ],
                        [
                            "radius[Y]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "Z.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "Z.device",
                    "possible_values": []
                }
            },
            "sum_102": {
                "variable": {
                    "value": "dist_sq",
                    "possible_values": []
                },
                "input": {
                    "value": "(Z - M) ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Z.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "Z.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "center",
                    "possible_values": []
                },
                "data": {
                    "value": "center",
                    "possible_values": [
                        [
                            "torch.tensor(center, dtype=Z.dtype, device=Z.device)",
                            "Call"
                        ],
                        [
                            "center.to(Z.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(center, dtype=Z.dtype, device=Z.device)",
                            "Call"
                        ],
                        [
                            "center.to(Z.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "Z.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "Z.device",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "radius",
                    "possible_values": []
                },
                "data": {
                    "value": "radius",
                    "possible_values": [
                        [
                            "torch.tensor(radius, dtype=Z.dtype, device=Z.device)",
                            "Call"
                        ],
                        [
                            "radius.to(Z.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(radius, dtype=Z.dtype, device=Z.device)",
                            "Call"
                        ],
                        [
                            "radius.to(Z.device)",
                            "Call"
                        ],
                        [
                            "radius[Y]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "Z.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "Z.device",
                    "possible_values": []
                }
            },
            "tensor_140": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Z.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "Z.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mean_163": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(X_grad.abs(), dim=1)",
                    "possible_values": []
                }
            },
            "sum_20": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "Zt",
                    "possible_values": [
                        [
                            "half_margin - Z * t",
                            "BinOp"
                        ],
                        [
                            "Zt[Zt > 0]",
                            "Subscript"
                        ],
                        [
                            "Zt[(Zt > 0) & (Zt < margin)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_22": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(1 + Zt)",
                    "possible_values": []
                }
            },
            "sum_109": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_sq",
                    "possible_values": [
                        [
                            "(Z - M) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sum((Z - M) ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "dist_sq[dist_sq > radius_sq]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_111": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(1 + dist_sq)",
                    "possible_values": []
                }
            },
            "sum_143": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "possible_values": [
                        [
                            "torch.abs(Z - M)",
                            "Call"
                        ],
                        [
                            "dist[dist > radius]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_145": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(1 + dist)",
                    "possible_values": []
                }
            },
            "grad_160": {
                "outputs": {
                    "value": "L",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X",
                    "possible_values": [
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mean_165": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(X_grad ** 2, dim=1)",
                    "possible_values": []
                }
            },
            "sqrt_325": {
                "variable": {
                    "value": "Xn_grad_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(Xn_grad ** 2, dim=1, keepdim=True)",
                    "possible_values": []
                }
            },
            "sqrt_334": {
                "variable": {
                    "value": "Sn_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(Sn ** 2, dim=1, keepdim=True)",
                    "possible_values": []
                }
            },
            "sqrt_358": {
                "variable": {
                    "value": "Xn_grad_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(Xn_grad ** 2, dim=1, keepdim=True)",
                    "possible_values": []
                }
            },
            "sqrt_367": {
                "variable": {
                    "value": "Sn_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(Sn ** 2, dim=1, keepdim=True)",
                    "possible_values": []
                }
            },
            "sum_434": {
                "variable": {
                    "value": "Signal",
                    "possible_values": []
                },
                "input": {
                    "value": "Xn_grad * Sn",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_484": {
                "variable": {
                    "value": "Signal",
                    "possible_values": []
                },
                "input": {
                    "value": "Xn_grad * Sn",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_628": {
                "variable": {
                    "value": "Signal",
                    "possible_values": []
                },
                "input": {
                    "value": "Xn_grad * Sn",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_772": {
                "variable": {
                    "value": "Signal",
                    "possible_values": []
                },
                "input": {
                    "value": "Xn_grad * Sn",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_817": {
                "variable": {
                    "value": "Signal",
                    "possible_values": []
                },
                "input": {
                    "value": "Xn_grad * Sn",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_953": {
                "variable": {
                    "value": "Signal",
                    "possible_values": []
                },
                "input": {
                    "value": "Xn_grad * Sn",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_1093": {
                "variable": {
                    "value": "Signal",
                    "possible_values": []
                },
                "input": {
                    "value": "Xn_grad * Sn",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_1123": {
                "variable": {
                    "value": "Signal",
                    "possible_values": []
                },
                "input": {
                    "value": "Xn_grad * Sn",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_1199": {
                "variable": {
                    "value": "L2norm_sq",
                    "possible_values": []
                },
                "input": {
                    "value": "Xn_grad ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_163": {
                "input": {
                    "value": "X_grad.abs()",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_244": {
                "outputs": {
                    "value": "Zn.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_715": {
                "input": {
                    "value": "Zother",
                    "possible_values": [
                        [
                            "torch.cat([Zn[:, 0:n], Zn[:, n + 1:]], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([Zn[:, 0:n], Zn[:, n + 1:]], dim=1)",
                            "Call"
                        ],
                        [
                            "Z[:, idx_other]",
                            "Subscript"
                        ],
                        [
                            "Z[:, idx_other]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_719": {
                "outputs": {
                    "value": "Signal.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_727": {
                "input": {
                    "value": "Xn_grad ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_1038": {
                "input": {
                    "value": "Zother",
                    "possible_values": [
                        [
                            "torch.cat([Zn[:, 0:n], Zn[:, n + 1:]], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([Zn[:, 0:n], Zn[:, n + 1:]], dim=1)",
                            "Call"
                        ],
                        [
                            "Z[:, idx_other]",
                            "Subscript"
                        ],
                        [
                            "Z[:, idx_other]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_1042": {
                "outputs": {
                    "value": "Signal.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_1048": {
                "input": {
                    "value": "Xn_grad.abs()",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_1221": {
                "outputs": {
                    "value": "Zm",
                    "possible_values": [
                        [
                            "Z[:, m].sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "X",
                    "possible_values": [
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ],
                        [
                            "X.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "log_22": {
                "input": {
                    "value": "1 + Zt",
                    "possible_values": []
                }
            },
            "sum_70": {
                "input": {
                    "value": "Zother ** 2",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "(Zn - alpha) ** 2",
                    "possible_values": []
                }
            },
            "log_111": {
                "input": {
                    "value": "1 + dist_sq",
                    "possible_values": []
                }
            },
            "log_145": {
                "input": {
                    "value": "1 + dist",
                    "possible_values": []
                }
            },
            "sum_165": {
                "input": {
                    "value": "X_grad ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_184": {
                "outputs": {
                    "value": "Zn.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "grad_211": {
                "outputs": {
                    "value": "Zn.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_252": {
                "input": {
                    "value": "Sn ** 2",
                    "possible_values": []
                }
            },
            "mean_258": {
                "input": {
                    "value": "diff[region1].abs()",
                    "possible_values": []
                }
            },
            "mean_259": {
                "input": {
                    "value": "diff[region2].abs()",
                    "possible_values": []
                }
            },
            "grad_284": {
                "outputs": {
                    "value": "Zn.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "grad_323": {
                "outputs": {
                    "value": "Zn.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_325": {
                "input": {
                    "value": "Xn_grad ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_334": {
                "input": {
                    "value": "Sn ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_337": {
                "input": {
                    "value": "(Xn_grad - Sn) ** 2",
                    "possible_values": []
                }
            },
            "grad_356": {
                "outputs": {
                    "value": "Zn.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_358": {
                "input": {
                    "value": "Xn_grad ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_367": {
                "input": {
                    "value": "Sn ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_370": {
                "input": {
                    "value": "Sn * Xn_grad",
                    "possible_values": []
                }
            },
            "grad_390": {
                "outputs": {
                    "value": "Zn.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xrn",
                    "possible_values": [
                        [
                            "Xr[Y == n].detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "grad_425": {
                "outputs": {
                    "value": "Zn.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_439": {
                "input": {
                    "value": "Xn_grad ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_475": {
                "outputs": {
                    "value": "Zn.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_492": {
                "input": {
                    "value": "Xn_grad ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_531": {
                "outputs": {
                    "value": "Signal.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_536": {
                "input": {
                    "value": "Xn_grad ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_575": {
                "outputs": {
                    "value": "Signal.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_583": {
                "input": {
                    "value": "Xn_grad ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_625": {
                "outputs": {
                    "value": "ZSignal.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_635": {
                "input": {
                    "value": "Xn_grad ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_672": {
                "outputs": {
                    "value": "Signal.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_680": {
                "input": {
                    "value": "Xn_grad ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_763": {
                "outputs": {
                    "value": "Zn.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_776": {
                "input": {
                    "value": "Xn_grad.abs()",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_808": {
                "outputs": {
                    "value": "Zn.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_823": {
                "input": {
                    "value": "Xn_grad.abs()",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_861": {
                "outputs": {
                    "value": "Signal.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_864": {
                "input": {
                    "value": "Xn_grad.abs()",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_901": {
                "outputs": {
                    "value": "Signal.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_904": {
                "input": {
                    "value": "Xn_grad.abs()",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_950": {
                "outputs": {
                    "value": "ZSignal.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_958": {
                "input": {
                    "value": "Xn_grad.abs()",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_996": {
                "outputs": {
                    "value": "Signal.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_1002": {
                "input": {
                    "value": "Xn_grad.abs()",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_1084": {
                "outputs": {
                    "value": "Zn.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_1094": {
                "input": {
                    "value": "(Signal - alpha) ** 2",
                    "possible_values": []
                }
            },
            "grad_1114": {
                "outputs": {
                    "value": "Zn.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "grad_1152": {
                "outputs": {
                    "value": "Zn.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "grad_1176": {
                "outputs": {
                    "value": "Zn.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_1178": {
                "input": {
                    "value": "Xn_grad ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_1197": {
                "outputs": {
                    "value": "Zn.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Xn",
                    "possible_values": [
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[n:n + 1].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n].detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ],
                        [
                            "X[Y == n]",
                            "Subscript"
                        ],
                        [
                            "Xn.detach()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_1223": {
                "input": {
                    "value": "X_grad.abs()",
                    "possible_values": []
                }
            },
            "grad_1234": {
                "outputs": {
                    "value": "dZdX_loss",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Weight",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "grad_1251": {
                "outputs": {
                    "value": "dZdX_loss",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Weight",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "temp",
                    "possible_values": [
                        [
                            "margin - Zy + Zother",
                            "BinOp"
                        ],
                        [
                            "temp[temp > 0]",
                            "Subscript"
                        ],
                        [
                            "temp[(temp > 0) & (temp < 2 * margin)]",
                            "Subscript"
                        ],
                        [
                            "dLdW * Weight",
                            "BinOp"
                        ],
                        [
                            "temp.view(temp.size(0), -1)",
                            "Call"
                        ],
                        [
                            "dLdW * Weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_51": {
                "input": {
                    "value": "torch.log(1 + temp)",
                    "possible_values": []
                }
            },
            "sum_189": {
                "input": {
                    "value": "Xn_grad[M < eps].abs()",
                    "possible_values": []
                }
            },
            "sum_219": {
                "input": {
                    "value": "Sn ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_223": {
                "input": {
                    "value": "diff.abs()",
                    "possible_values": []
                }
            },
            "sum_261": {
                "input": {
                    "value": "diff[region1] ** 2",
                    "possible_values": []
                }
            },
            "sum_262": {
                "input": {
                    "value": "diff[region2] ** 2",
                    "possible_values": []
                }
            },
            "sum_292": {
                "input": {
                    "value": "Sn ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_298": {
                "input": {
                    "value": "diff[region1].abs()",
                    "possible_values": []
                }
            },
            "sum_299": {
                "input": {
                    "value": "diff[region2].abs()",
                    "possible_values": []
                }
            },
            "sum_398": {
                "input": {
                    "value": "Sn ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_402": {
                "input": {
                    "value": "diff.abs()",
                    "possible_values": []
                }
            },
            "sum_442": {
                "input": {
                    "value": "Noise - Signal",
                    "possible_values": []
                }
            },
            "sum_538": {
                "input": {
                    "value": "Noise - Signal",
                    "possible_values": []
                }
            },
            "sum_733": {
                "input": {
                    "value": "torch.log(1 + NSR)",
                    "possible_values": []
                }
            },
            "sum_735": {
                "input": {
                    "value": "NSR",
                    "possible_values": [
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_781": {
                "input": {
                    "value": "diff",
                    "possible_values": [
                        [
                            "Xn_grad - Sn",
                            "BinOp"
                        ],
                        [
                            "Xn_grad - Sn",
                            "BinOp"
                        ],
                        [
                            "Xn_grad - Sn",
                            "BinOp"
                        ],
                        [
                            "Xrn_grad - Sn",
                            "BinOp"
                        ],
                        [
                            "Noise - Signal * alpha ** 2",
                            "BinOp"
                        ],
                        [
                            "diff[diff > 0]",
                            "Subscript"
                        ],
                        [
                            "Noise - Signal * alpha ** 2",
                            "BinOp"
                        ],
                        [
                            "diff[diff > 0]",
                            "Subscript"
                        ],
                        [
                            "Noise - alpha * Signal.abs()",
                            "BinOp"
                        ],
                        [
                            "diff[diff > 0]",
                            "Subscript"
                        ],
                        [
                            "Noise - alpha * Signal.abs()",
                            "BinOp"
                        ],
                        [
                            "diff[diff > 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_869": {
                "input": {
                    "value": "diff",
                    "possible_values": [
                        [
                            "Xn_grad - Sn",
                            "BinOp"
                        ],
                        [
                            "Xn_grad - Sn",
                            "BinOp"
                        ],
                        [
                            "Xn_grad - Sn",
                            "BinOp"
                        ],
                        [
                            "Xrn_grad - Sn",
                            "BinOp"
                        ],
                        [
                            "Noise - Signal * alpha ** 2",
                            "BinOp"
                        ],
                        [
                            "diff[diff > 0]",
                            "Subscript"
                        ],
                        [
                            "Noise - Signal * alpha ** 2",
                            "BinOp"
                        ],
                        [
                            "diff[diff > 0]",
                            "Subscript"
                        ],
                        [
                            "Noise - alpha * Signal.abs()",
                            "BinOp"
                        ],
                        [
                            "diff[diff > 0]",
                            "Subscript"
                        ],
                        [
                            "Noise - alpha * Signal.abs()",
                            "BinOp"
                        ],
                        [
                            "diff[diff > 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_1054": {
                "input": {
                    "value": "torch.log(1 + NSR)",
                    "possible_values": []
                }
            },
            "sum_1056": {
                "input": {
                    "value": "NSR",
                    "possible_values": [
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_1127": {
                "input": {
                    "value": "Bias ** 2",
                    "possible_values": []
                }
            },
            "sum_1154": {
                "input": {
                    "value": "Xn_grad.abs()",
                    "possible_values": []
                }
            },
            "sum_1202": {
                "input": {
                    "value": "L2norm_sq",
                    "possible_values": [
                        [
                            "torch.sum(Xn_grad ** 2, dim=1)",
                            "Call"
                        ],
                        [
                            "L2norm_sq[L2norm_sq > alpha ** 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_1225": {
                "input": {
                    "value": "X_grad ** 2",
                    "possible_values": []
                }
            },
            "log_51": {
                "input": {
                    "value": "1 + temp",
                    "possible_values": []
                }
            },
            "sum_191": {
                "input": {
                    "value": "Xn_grad[M < eps] ** 2",
                    "possible_values": []
                }
            },
            "sum_225": {
                "input": {
                    "value": "diff ** 2",
                    "possible_values": []
                }
            },
            "sum_301": {
                "input": {
                    "value": "diff[region1] ** 2",
                    "possible_values": []
                }
            },
            "sum_302": {
                "input": {
                    "value": "diff[region2] ** 2",
                    "possible_values": []
                }
            },
            "sum_404": {
                "input": {
                    "value": "diff ** 2",
                    "possible_values": []
                }
            },
            "sum_448": {
                "input": {
                    "value": "diff",
                    "possible_values": [
                        [
                            "Xn_grad - Sn",
                            "BinOp"
                        ],
                        [
                            "Xn_grad - Sn",
                            "BinOp"
                        ],
                        [
                            "Xn_grad - Sn",
                            "BinOp"
                        ],
                        [
                            "Xrn_grad - Sn",
                            "BinOp"
                        ],
                        [
                            "Noise - Signal * alpha ** 2",
                            "BinOp"
                        ],
                        [
                            "diff[diff > 0]",
                            "Subscript"
                        ],
                        [
                            "Noise - Signal * alpha ** 2",
                            "BinOp"
                        ],
                        [
                            "diff[diff > 0]",
                            "Subscript"
                        ],
                        [
                            "Noise - alpha * Signal.abs()",
                            "BinOp"
                        ],
                        [
                            "diff[diff > 0]",
                            "Subscript"
                        ],
                        [
                            "Noise - alpha * Signal.abs()",
                            "BinOp"
                        ],
                        [
                            "diff[diff > 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_499": {
                "input": {
                    "value": "torch.log(1 + NSR)",
                    "possible_values": []
                }
            },
            "sum_501": {
                "input": {
                    "value": "NSR",
                    "possible_values": [
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_544": {
                "input": {
                    "value": "diff",
                    "possible_values": [
                        [
                            "Xn_grad - Sn",
                            "BinOp"
                        ],
                        [
                            "Xn_grad - Sn",
                            "BinOp"
                        ],
                        [
                            "Xn_grad - Sn",
                            "BinOp"
                        ],
                        [
                            "Xrn_grad - Sn",
                            "BinOp"
                        ],
                        [
                            "Noise - Signal * alpha ** 2",
                            "BinOp"
                        ],
                        [
                            "diff[diff > 0]",
                            "Subscript"
                        ],
                        [
                            "Noise - Signal * alpha ** 2",
                            "BinOp"
                        ],
                        [
                            "diff[diff > 0]",
                            "Subscript"
                        ],
                        [
                            "Noise - alpha * Signal.abs()",
                            "BinOp"
                        ],
                        [
                            "diff[diff > 0]",
                            "Subscript"
                        ],
                        [
                            "Noise - alpha * Signal.abs()",
                            "BinOp"
                        ],
                        [
                            "diff[diff > 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_589": {
                "input": {
                    "value": "torch.log(1 + NSR)",
                    "possible_values": []
                }
            },
            "sum_591": {
                "input": {
                    "value": "NSR",
                    "possible_values": [
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_641": {
                "input": {
                    "value": "torch.log(1 + NSR)",
                    "possible_values": []
                }
            },
            "sum_643": {
                "input": {
                    "value": "NSR",
                    "possible_values": [
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_686": {
                "input": {
                    "value": "torch.log(1 + NSR)",
                    "possible_values": []
                }
            },
            "sum_688": {
                "input": {
                    "value": "NSR",
                    "possible_values": [
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_733": {
                "input": {
                    "value": "1 + NSR",
                    "possible_values": []
                }
            },
            "sum_829": {
                "input": {
                    "value": "torch.log(1 + NSR)",
                    "possible_values": []
                }
            },
            "sum_831": {
                "input": {
                    "value": "NSR",
                    "possible_values": [
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_913": {
                "input": {
                    "value": "torch.log(1 + NSR)",
                    "possible_values": []
                }
            },
            "sum_915": {
                "input": {
                    "value": "NSR",
                    "possible_values": [
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_964": {
                "input": {
                    "value": "torch.log(1 + NSR)",
                    "possible_values": []
                }
            },
            "sum_966": {
                "input": {
                    "value": "NSR",
                    "possible_values": [
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_1008": {
                "input": {
                    "value": "torch.log(1 + NSR)",
                    "possible_values": []
                }
            },
            "sum_1010": {
                "input": {
                    "value": "NSR",
                    "possible_values": [
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha ** 2]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal.abs() + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ],
                        [
                            "Noise / (Signal + eps)",
                            "BinOp"
                        ],
                        [
                            "NSR[NSR > alpha]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_1054": {
                "input": {
                    "value": "1 + NSR",
                    "possible_values": []
                }
            },
            "sum_1156": {
                "input": {
                    "value": "Xn_grad ** 2",
                    "possible_values": []
                }
            },
            "log_499": {
                "input": {
                    "value": "1 + NSR",
                    "possible_values": []
                }
            },
            "log_589": {
                "input": {
                    "value": "1 + NSR",
                    "possible_values": []
                }
            },
            "log_641": {
                "input": {
                    "value": "1 + NSR",
                    "possible_values": []
                }
            },
            "log_686": {
                "input": {
                    "value": "1 + NSR",
                    "possible_values": []
                }
            },
            "log_829": {
                "input": {
                    "value": "1 + NSR",
                    "possible_values": []
                }
            },
            "log_913": {
                "input": {
                    "value": "1 + NSR",
                    "possible_values": []
                }
            },
            "log_964": {
                "input": {
                    "value": "1 + NSR",
                    "possible_values": []
                }
            },
            "log_1008": {
                "input": {
                    "value": "1 + NSR",
                    "possible_values": []
                }
            }
        }
    },
    "RobustDNN_module.py": {
        "torch": {
            "Gate_23": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "DoubleGate_71": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ReLU_82": {
                    "variable": {
                        "value": "self.activation",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "inplace",
                        "possible_values": [
                            [
                                "False",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "Normalization_107": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.layerA": {
                    "value": "layerA",
                    "possible_values": []
                },
                "self.layerB": {
                    "value": "layerB",
                    "possible_values": []
                },
                "self.track_running_stats": {
                    "value": "track_running_stats",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SimpleNormalization_195": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.layerA": {
                    "value": "layerA",
                    "possible_values": []
                },
                "self.layerB": {
                    "value": "layerB",
                    "possible_values": []
                },
                "self.track_running_stats": {
                    "value": "track_running_stats",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_271": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_274": {
                    "variable": {
                        "value": "self.linear",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "in_features",
                        "possible_values": [
                            [
                                "None",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "out_features",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "bias",
                        "possible_values": [
                            [
                                "False",
                                "MethodArgument"
                            ],
                            [
                                "False",
                                "MethodArgument"
                            ],
                            [
                                "True",
                                "MethodArgument"
                            ],
                            [
                                "True",
                                "MethodArgument"
                            ],
                            [
                                "True",
                                "MethodArgument"
                            ],
                            [
                                "True",
                                "MethodArgument"
                            ],
                            [
                                "True",
                                "MethodArgument"
                            ],
                            [
                                "True",
                                "MethodArgument"
                            ],
                            [
                                "True",
                                "MethodArgument"
                            ],
                            [
                                "True",
                                "MethodArgument"
                            ],
                            [
                                "True",
                                "MethodArgument"
                            ],
                            [
                                "True",
                                "MethodArgument"
                            ],
                            [
                                "True",
                                "MethodArgument"
                            ],
                            [
                                "True",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "Dense_406": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "ConvNd_438": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.dim": {
                    "value": "dim",
                    "possible_values": []
                }
            },
            "Convolution_606": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.dim": {
                    "value": "dim",
                    "possible_values": []
                }
            },
            "ConvTransposeNd_646": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.dim": {
                    "value": "dim",
                    "possible_values": []
                },
                "self.anti_artifact": {
                    "value": "anti_artifact",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose1d_819": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_827": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_835": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "TransposedConvolution_843": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.dim": {
                    "value": "dim",
                    "possible_values": []
                }
            },
            "ones_9": {
                "variable": {
                    "value": "Mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "possible_values": []
                }
            },
            "gather_14": {
                "variable": {
                    "value": "Mask",
                    "possible_values": []
                },
                "input": {
                    "value": "Mask",
                    "possible_values": [
                        [
                            "torch.ones(x.size(), dtype=x.dtype, device=x.device)",
                            "Call"
                        ],
                        [
                            "torch.gather(Mask, 1, idx_x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_x",
                    "possible_values": [
                        [
                            "idx_sort.argsort(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_104": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y1, y2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_8": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.activation",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(in_features, dtype=torch.float32)",
                    "possible_values": []
                }
            },
            "zeros_like_131": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x * alpha",
                            "BinOp"
                        ],
                        [
                            "self.update_parameter(x)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x / self.gain.view(1, -1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x_size)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x * alpha",
                            "BinOp"
                        ],
                        [
                            "self.update_parameter(x)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x / self.gain",
                            "BinOp"
                        ],
                        [
                            "x.view(x_size)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.gate(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.gate(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.tconv(x)",
                            "Call"
                        ],
                        [
                            "x / t",
                            "BinOp"
                        ],
                        [
                            "self.tconv(x)",
                            "Call"
                        ],
                        [
                            "self.gate(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_133": {
                "variable": {
                    "value": "counter",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "possible_values": []
                }
            },
            "zeros_like_215": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x * alpha",
                            "BinOp"
                        ],
                        [
                            "self.update_parameter(x)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x / self.gain.view(1, -1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x_size)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x * alpha",
                            "BinOp"
                        ],
                        [
                            "self.update_parameter(x)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x / self.gain",
                            "BinOp"
                        ],
                        [
                            "x.view(x_size)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.gate(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.gate(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.tconv(x)",
                            "Call"
                        ],
                        [
                            "x / t",
                            "BinOp"
                        ],
                        [
                            "self.tconv(x)",
                            "Call"
                        ],
                        [
                            "self.gate(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_217": {
                "variable": {
                    "value": "counter",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_230": {
                "variable": {
                    "value": "alpha",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(w ** 2) / w.size(0)",
                    "possible_values": []
                }
            },
            "Identity_418": {
                "variable": {
                    "value": "self.gate",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Identity_425": {
                "variable": {
                    "value": "self.bn",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv1d_444": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_621": {
                "variable": {
                    "value": "self.gate",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Identity_633": {
                "variable": {
                    "value": "self.bn",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_653": {
                "variable": {
                    "value": "self.tconv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_859": {
                "variable": {
                    "value": "self.gate",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Identity_868": {
                "variable": {
                    "value": "self.bn",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Softplus_37": {
                "variable": {
                    "value": "self.activation",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "eps",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "gain_min",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "data": {
                    "value": "momentum",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "ones_121": {
                "*size": {
                    "value": "num_features",
                    "possible_values": [
                        [
                            "layerA.weight.size(0)",
                            "Call"
                        ],
                        [
                            "layerB.weight.size(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "data": {
                    "value": "eps",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_203": {
                "data": {
                    "value": "gain_min",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_204": {
                "data": {
                    "value": "momentum",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "ones_205": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "no_grad_213": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sum_219": {
                "variable": {
                    "value": "batch_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "x * mask",
                    "possible_values": []
                }
            },
            "no_grad_227": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_235": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_277": {
                "*size": {
                    "value": "self.weight.size()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "ones_278": {
                "*size": {
                    "value": "self.weight.size()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "no_grad_298": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randn_like_302": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "input": {
                    "value": "w[idx]",
                    "possible_values": []
                }
            },
            "no_grad_310": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_322": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_331": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_350": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_368": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_386": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_399": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_448": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_457": {
                "*size": {
                    "value": "self.weight.size()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "ones_458": {
                "*size": {
                    "value": "self.weight.size()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "no_grad_479": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randn_like_482": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "input": {
                    "value": "w[idx]",
                    "possible_values": []
                }
            },
            "no_grad_490": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_502": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_512": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_532": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_550": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_568": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_581": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_628": {
                "*size": {
                    "value": "self.conv.weight.size()",
                    "possible_values": []
                }
            },
            "ones_629": {
                "*size": {
                    "value": "self.conv.weight.size()",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_657": {
                "variable": {
                    "value": "self.tconv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose1d_667": {
                "variable": {
                    "value": "self._tconv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_682": {
                "*size": {
                    "value": "self.weight.size()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "ones_683": {
                "*size": {
                    "value": "self.weight.size()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "no_grad_704": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randn_like_707": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "input": {
                    "value": "w[idx]",
                    "possible_values": []
                }
            },
            "no_grad_715": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_727": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_737": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_757": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_775": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_793": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_806": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_like_813": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x * alpha",
                            "BinOp"
                        ],
                        [
                            "self.update_parameter(x)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x / self.gain.view(1, -1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x_size)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x * alpha",
                            "BinOp"
                        ],
                        [
                            "self.update_parameter(x)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], -1)",
                            "Call"
                        ],
                        [
                            "x / self.gain",
                            "BinOp"
                        ],
                        [
                            "x.view(x_size)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.gate(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.gate(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.tconv(x)",
                            "Call"
                        ],
                        [
                            "x / t",
                            "BinOp"
                        ],
                        [
                            "self.tconv(x)",
                            "Call"
                        ],
                        [
                            "self.gate(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "num_features",
                    "possible_values": [
                        [
                            "layerA.weight.size(0)",
                            "Call"
                        ],
                        [
                            "layerB.weight.size(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_77": {
                "*size": {
                    "value": "in_features",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "sum_134": {
                "input": {
                    "value": "counter",
                    "possible_values": [
                        [
                            "torch.sum(mask, dim=(0, 2))",
                            "Call"
                        ],
                        [
                            "torch.sum(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_149": {
                "input": {
                    "value": "torch.sum(w ** 2, dim=1, keepdim=True)",
                    "possible_values": []
                }
            },
            "sum_292": {
                "input": {
                    "value": "WoW[n]",
                    "possible_values": []
                }
            },
            "sqrt_324": {
                "input": {
                    "value": "1 / (torch.sum(w ** 2, dim=1, keepdim=True) + 1e-16)",
                    "possible_values": []
                }
            },
            "sqrt_333": {
                "input": {
                    "value": "w.size(0) / torch.sum(w ** 2)",
                    "possible_values": []
                }
            },
            "Conv3d_452": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_472": {
                "input": {
                    "value": "WoW[n]",
                    "possible_values": []
                }
            },
            "sqrt_505": {
                "input": {
                    "value": "1 / (torch.sum(w ** 2, dim=1, keepdim=True) + 1e-16)",
                    "possible_values": []
                }
            },
            "sqrt_514": {
                "input": {
                    "value": "w.size(0) / torch.sum(w ** 2)",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_661": {
                "variable": {
                    "value": "self.tconv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_671": {
                "variable": {
                    "value": "self._tconv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_697": {
                "input": {
                    "value": "WoW[n]",
                    "possible_values": []
                }
            },
            "sqrt_730": {
                "input": {
                    "value": "1 / (torch.sum(w ** 2, dim=1, keepdim=True) + 1e-16)",
                    "possible_values": []
                }
            },
            "sqrt_739": {
                "input": {
                    "value": "w.size(0) / torch.sum(w ** 2)",
                    "possible_values": []
                }
            },
            "no_grad_812": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "x * mask",
                    "possible_values": []
                },
                "dim": {
                    "value": "(0, 2)",
                    "possible_values": []
                }
            },
            "sum_149": {
                "input": {
                    "value": "w ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_230": {
                "input": {
                    "value": "w ** 2",
                    "possible_values": []
                }
            },
            "sqrt_303": {
                "input": {
                    "value": "torch.sum(v ** 2)",
                    "possible_values": []
                }
            },
            "sum_314": {
                "input": {
                    "value": "WoW[n]",
                    "possible_values": []
                }
            },
            "sqrt_483": {
                "input": {
                    "value": "torch.sum(v ** 2)",
                    "possible_values": []
                }
            },
            "sum_494": {
                "input": {
                    "value": "WoW[n]",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_675": {
                "variable": {
                    "value": "self._tconv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_708": {
                "input": {
                    "value": "torch.sum(v ** 2)",
                    "possible_values": []
                }
            },
            "sum_719": {
                "input": {
                    "value": "WoW[n]",
                    "possible_values": []
                }
            },
            "sum_303": {
                "input": {
                    "value": "v ** 2",
                    "possible_values": []
                }
            },
            "sum_333": {
                "input": {
                    "value": "w ** 2",
                    "possible_values": []
                }
            },
            "sum_483": {
                "input": {
                    "value": "v ** 2",
                    "possible_values": []
                }
            },
            "sum_514": {
                "input": {
                    "value": "w ** 2",
                    "possible_values": []
                }
            },
            "sum_708": {
                "input": {
                    "value": "v ** 2",
                    "possible_values": []
                }
            },
            "sum_739": {
                "input": {
                    "value": "w ** 2",
                    "possible_values": []
                }
            },
            "sum_324": {
                "input": {
                    "value": "w ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_505": {
                "input": {
                    "value": "w ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_730": {
                "input": {
                    "value": "w ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "ShowNoise.py": {
        "torch": {
            "Net_17": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_21": {
                    "variable": {
                        "value": "self.E",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[Linear(187, num), Linear(num, num), Linear(num, num), Linear(num, 32)]",
                        "possible_values": []
                    }
                },
                "ModuleList_26": {
                    "variable": {
                        "value": "self.C",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[Linear(32, 5)]",
                        "possible_values": []
                    }
                },
                "ModuleList_28": {
                    "variable": {
                        "value": "self.G",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[nn.ReLU(inplace=True), nn.ReLU(inplace=True), nn.ReLU(inplace=True)]",
                        "possible_values": []
                    }
                }
            },
            "device_121": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "load_137": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "Result/ECG_MLP1_128True_ce_epoch49.pt",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda:1' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_121": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess.py": {
        "torch": {
            "tensor_37": {
                "variable": {
                    "value": "data[X_train]",
                    "possible_values": []
                },
                "data": {
                    "value": "X_train[idxlist_train, :]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "data[Y_train]",
                    "possible_values": []
                },
                "data": {
                    "value": "Y_train[idxlist_train]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "data[X_val]",
                    "possible_values": []
                },
                "data": {
                    "value": "X_train[idxlist_val, :]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "data[Y_val]",
                    "possible_values": []
                },
                "data": {
                    "value": "Y_train[idxlist_val]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "data[X_test]",
                    "possible_values": []
                },
                "data": {
                    "value": "X_test",
                    "possible_values": [
                        [
                            "df_test.values[:, 0:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "data[Y_test]",
                    "possible_values": []
                },
                "data": {
                    "value": "Y_test",
                    "possible_values": [
                        [
                            "df_test.values[:, -1].astype('int64')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            },
            "save_43": {
                "obj": {
                    "value": "data",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "mitbih_data.pt",
                    "possible_values": []
                }
            }
        }
    }
}