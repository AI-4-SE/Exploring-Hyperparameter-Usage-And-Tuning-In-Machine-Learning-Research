{
    "Dataset/DatasetLoader.py": {
        "sklearn": {},
        "torch": {
            "DataLoader_20": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Digits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OneClass(train_dataset, test_dataset, Class)",
                            "Call"
                        ],
                        [
                            "OneClass(train_dataset, test_dataset, Class)",
                            "Call"
                        ],
                        [
                            "OneClass(train_dataset, test_dataset, Class)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_21": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "new_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OneClass(train_dataset, test_dataset, Class)",
                            "Call"
                        ],
                        [
                            "OneClass(train_dataset, test_dataset, Class)",
                            "Call"
                        ],
                        [
                            "OneClass(train_dataset, test_dataset, Class)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_31": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Digits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OneClass(train_dataset, test_dataset, Class)",
                            "Call"
                        ],
                        [
                            "OneClass(train_dataset, test_dataset, Class)",
                            "Call"
                        ],
                        [
                            "OneClass(train_dataset, test_dataset, Class)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_32": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "new_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OneClass(train_dataset, test_dataset, Class)",
                            "Call"
                        ],
                        [
                            "OneClass(train_dataset, test_dataset, Class)",
                            "Call"
                        ],
                        [
                            "OneClass(train_dataset, test_dataset, Class)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Digits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OneClass(train_dataset, test_dataset, Class)",
                            "Call"
                        ],
                        [
                            "OneClass(train_dataset, test_dataset, Class)",
                            "Call"
                        ],
                        [
                            "OneClass(train_dataset, test_dataset, Class)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "new_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OneClass(train_dataset, test_dataset, Class)",
                            "Call"
                        ],
                        [
                            "OneClass(train_dataset, test_dataset, Class)",
                            "Call"
                        ],
                        [
                            "OneClass(train_dataset, test_dataset, Class)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_71": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.Tensor(X_train.values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(torch.Tensor(X_train.values))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(torch.Tensor(X_train.values))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_73": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.Tensor(X_test.values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_74": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(torch.Tensor(X_test.values), torch.Tensor(y_test.values))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(torch.Tensor(X_test.values), torch.Tensor(y_test.values))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_87": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.Tensor(X_train.values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(torch.Tensor(X_train.values))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(torch.Tensor(X_train.values))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ],
                        [
                            "train_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_89": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.Tensor(X_test.values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(torch.Tensor(X_test.values), torch.Tensor(y_test.values))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(torch.Tensor(X_test.values), torch.Tensor(y_test.values))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ],
                        [
                            "test_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Dataset/Utils.py": {
        "sklearn": {},
        "torch": {
            "mean_21": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / x_scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_25": {
                "variable": {
                    "value": "x_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_25": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / x_scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_28": {
                "input": {
                    "value": "torch.sum(x ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_28": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Network/CIFARNet.py": {
        "sklearn": {},
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.encoder_hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "In_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['input_shape']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.encoder_middle_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.encoder_middle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.encoder_output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.decoder_hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.decoder_middle1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.decoder_middle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.decoder_output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "In_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['input_shape']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "leaky_relu_25": {
                "input": {
                    "value": "self.encoder_hidden_layer(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_26": {
                "variable": {
                    "value": "code",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.encoder_output_layer(activation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_27": {
                "input": {
                    "value": "self.decoder_hidden_layer(code)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_28": {
                "variable": {
                    "value": "reconstructed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decoder_output_layer(activation)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Network/MNISTNet.py": {
        "sklearn": {},
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.encoder_hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "In_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['input_shape']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.encoder_middle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.encoder_output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.decoder_hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.decoder_middle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.decoder_output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "In_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['input_shape']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "leaky_relu_23": {
                "input": {
                    "value": "self.encoder_hidden_layer(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_24": {
                "variable": {
                    "value": "code",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.encoder_output_layer(activation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_25": {
                "input": {
                    "value": "self.decoder_hidden_layer(code)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_26": {
                "variable": {
                    "value": "reconstructed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decoder_output_layer(activation)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Network/PIMANet.py": {
        "sklearn": {},
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.encoder_hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "In_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['input_shape']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.encoder_middle_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.encoder_middle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.encoder_output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.decoder_hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.decoder_middle1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.decoder_middle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.decoder_output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "In_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['input_shape']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "leaky_relu_27": {
                "input": {
                    "value": "self.encoder_hidden_layer(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_28": {
                "variable": {
                    "value": "code",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.encoder_output_layer(activation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_29": {
                "input": {
                    "value": "self.decoder_hidden_layer(code)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Network/SpeechNet.py": {
        "sklearn": {},
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.encoder_hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "In_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['input_shape']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.encoder_middle_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.encoder_middle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.encoder_output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.decoder_hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.decoder_middle1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.decoder_middle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.decoder_output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "In_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['input_shape']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "leaky_relu_26": {
                "input": {
                    "value": "self.encoder_hidden_layer(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_27": {
                "variable": {
                    "value": "code",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.encoder_output_layer(activation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_28": {
                "input": {
                    "value": "self.decoder_hidden_layer(code)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Source/GammaTune.py": {
        "sklearn": {},
        "torch": {
            "device_12": {
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_23": {
                "input": {
                    "value": "code.to(device) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Source/Tester.py": {
        "sklearn": {
            "roc_auc_score_25": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_12": {
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_22": {
                "input": {
                    "value": "(code_test.to(device) - C) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Source/Trainer.py": {
        "sklearn": {},
        "torch": {
            "device_12": {
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "mean_42": {
                "variable": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch_features[Num_batch:, :])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "(code.to(device) - C) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "sklearn": {},
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_26": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_27": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "code_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adagrad_28": {
                "variable": {
                    "value": "update_center",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[C]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "lr_decay": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_29": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_30": {
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_32": {
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}