{
    "emnlp_final_experiments/claim-detection/train_multi_view_averaging_individuals.py": {
        "sklearn": {
            "ParameterSampler_164": {
                "variable": {
                    "value": "grid_search_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "param_distributions": {
                    "value": "param_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{1: list(range(0, 11)), 2: list(range(0, 11)), 3: list(range(0, 11)), 4: list(range(0, 11)), 5: list(range(0, 11))}",
                            "Dict"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "n_epochs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.n_epochs",
                            "Attribute"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_230": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_224": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_225": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_233": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_337": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MultiViewTransformerNetworkAveragingIndividuals(bert_model, bert_config, len(train_dls))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_322": {
                "dataset": {
                    "value": "subset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_385": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_{domain}_{len(train_dls)}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_384": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_{domain}_{v}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_130": {
                "obj": {
                    "value": "model.module.domain_experts[v].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}_{v}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_132": {
                "obj": {
                    "value": "model.module.shared_bert.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}_{v}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Subset_319": {
                "dataset": {
                    "value": "dset_choices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset_indices[d][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_343": {
                "f": {
                    "value": "args.pretrained_bert",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "emnlp_final_experiments/claim-detection/train_multi_view_domainclassifier_individuals.py": {
        "sklearn": {},
        "torch": {
            "CrossEntropyLoss_169": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.FloatTensor(class_weights).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_261": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_255": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_256": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_264": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConcatDataset_364": {
                "variable": {
                    "value": "domain_classifier_train_dset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[subset[0] for subset in subsets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataLoader_365": {
                "variable": {
                    "value": "domain_classifier_train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "domain_classifier_train_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ConcatDataset([subset[0] for subset in subsets])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConcatDataset_371": {
                "variable": {
                    "value": "domain_classifier_val_dset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[subset[1] for subset in subsets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "is_available_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_417": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MultiViewTransformerNetworkDomainClassifierIndividuals(bert_model, bert_config, shared_bert, len(train_dls))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_205": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_domainclassifier_{domain_name}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "DataLoader_346": {
                "dataset": {
                    "value": "subset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_403": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_domainclassifier_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_129": {
                "obj": {
                    "value": "model.module.domain_experts[v].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}_{v}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Subset_343": {
                "dataset": {
                    "value": "dset_choices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset_indices[d][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_411": {
                "f": {
                    "value": "f'{args.pretrained_model}/model_{domain}_{v}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_464": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_{domain}_{v}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_424": {
                "f": {
                    "value": "args.pretrained_bert",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "emnlp_final_experiments/claim-detection/train_multi_view_selective_weighting.py": {
        "sklearn": {
            "ParameterSampler_53": {
                "variable": {
                    "value": "grid_search_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "param_distributions": {
                    "value": "param_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{1: list(range(0, 11)), 2: list(range(0, 11)), 3: list(range(0, 11)), 4: list(range(0, 11)), 5: list(range(0, 11))}",
                            "Dict"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "n_epochs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.n_epochs",
                            "Attribute"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_106": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_100": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_101": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_109": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_207": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MultiViewTransformerNetworkSelectiveWeight(multi_xformer, shared_bert)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_183": {
                "dataset": {
                    "value": "subset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_213": {
                "f": {
                    "value": "f'{args.pretrained_model}/model_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Subset_180": {
                "dataset": {
                    "value": "dset_choices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset_indices[d][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "emnlp_final_experiments/sentiment-analysis/analyze_expert_predictions.py": {
        "sklearn": {},
        "torch": {
            "device_63": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_57": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_58": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_66": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_dsets[i]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataParallel_96": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MultiViewTransformerNetworkAveragingIndividuals(bert_model, bert_config, len(all_dsets) - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_107": {
                "f": {
                    "value": "f'{args.pretrained_model}/model_{domain}_{len(all_dsets) - 1}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_106": {
                "f": {
                    "value": "f'{args.pretrained_model}/model_{domain}_{v}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "emnlp_final_experiments/sentiment-analysis/analyze_expert_predictions_cnn.py": {
        "sklearn": {},
        "torch": {
            "device_75": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_69": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_70": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_78": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_dsets[i]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_cnn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataParallel_104": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MultiViewCNNAveragingIndividuals(args, embeddings, len(all_dsets) - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_115": {
                "f": {
                    "value": "f'{args.pretrained_model}/model_{domain}_{len(all_dsets) - 1}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_114": {
                "f": {
                    "value": "f'{args.pretrained_model}/model_{domain}_{v}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "emnlp_final_experiments/sentiment-analysis/train_multi_view_averaging_individuals.py": {
        "sklearn": {
            "ParameterSampler_164": {
                "variable": {
                    "value": "grid_search_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "param_distributions": {
                    "value": "param_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{1: list(range(0, 11)), 2: list(range(0, 11)), 3: list(range(0, 11)), 4: list(range(0, 11))}",
                            "Dict"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "n_epochs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.n_epochs",
                            "Attribute"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_230": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_224": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_225": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_233": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_337": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MultiViewTransformerNetworkAveragingIndividuals(bert_model, bert_config, len(train_dls))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_322": {
                "dataset": {
                    "value": "subset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_379": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_{domain}_{len(train_dls)}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_377": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_{domain}_{v}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_128": {
                "obj": {
                    "value": "model.module.domain_experts[v].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}_{v}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_131": {
                "obj": {
                    "value": "model.module.shared_bert.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}_{v}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Subset_319": {
                "dataset": {
                    "value": "dset_choices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset_indices[d][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "emnlp_final_experiments/sentiment-analysis/train_multi_view_averaging_individuals_cnn.py": {
        "sklearn": {
            "ParameterSampler_166": {
                "variable": {
                    "value": "grid_search_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "param_distributions": {
                    "value": "param_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{1: list(range(0, 11)), 2: list(range(0, 11)), 3: list(range(0, 11)), 4: list(range(0, 11))}",
                            "Dict"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "n_epochs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.n_epochs",
                            "Attribute"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_233": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_227": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_228": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_236": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_336": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MultiViewCNNAveragingIndividuals(args, embeddings, len(train_dls))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_353": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AdamW(optimizer_grouped_parameters, lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_323": {
                "dataset": {
                    "value": "subset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_cnn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_374": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_{domain}_{len(train_dls)}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_372": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_{domain}_{v}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_130": {
                "obj": {
                    "value": "model.module.domain_experts[v].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}_{v}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_133": {
                "obj": {
                    "value": "model.module.shared_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}_{v}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Subset_320": {
                "dataset": {
                    "value": "dset_choices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset_indices[d][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "emnlp_final_experiments/sentiment-analysis/train_multi_view_domainclassifier_individuals.py": {
        "sklearn": {},
        "torch": {
            "device_262": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_256": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_257": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_265": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConcatDataset_364": {
                "variable": {
                    "value": "domain_classifier_train_dset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[subset[0] for subset in subsets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataLoader_365": {
                "variable": {
                    "value": "domain_classifier_train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "domain_classifier_train_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ConcatDataset([subset[0] for subset in subsets])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConcatDataset_371": {
                "variable": {
                    "value": "domain_classifier_val_dset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[subset[1] for subset in subsets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataParallel_407": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MultiViewTransformerNetworkDomainClassifierIndividuals(bert_model, bert_config, shared_bert, len(train_dls))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_207": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_domainclassifier_{domain_name}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "DataLoader_347": {
                "dataset": {
                    "value": "subset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_402": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_domainclassifier_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_130": {
                "obj": {
                    "value": "model.module.domain_experts[v].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}_{v}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_133": {
                "obj": {
                    "value": "model.module.shared_bert.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}_{v}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Subset_344": {
                "dataset": {
                    "value": "dset_choices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset_indices[d][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_417": {
                "f": {
                    "value": "f'{args.pretrained_model}/model_{domain}_{v}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_453": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_{domain}_{v}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "emnlp_final_experiments/sentiment-analysis/train_multi_view_selective_weighting.py": {
        "sklearn": {
            "ParameterSampler_53": {
                "variable": {
                    "value": "grid_search_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "param_distributions": {
                    "value": "param_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{1: list(range(0, 11)), 2: list(range(0, 11)), 3: list(range(0, 11)), 4: list(range(0, 11))}",
                            "Dict"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "n_epochs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.n_epochs",
                            "Attribute"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_105": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_99": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_100": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_108": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_203": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MultiViewTransformerNetworkSelectiveWeight(multi_xformer, shared_bert)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_181": {
                "dataset": {
                    "value": "subset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_208": {
                "f": {
                    "value": "f'{args.pretrained_model}/model_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Subset_178": {
                "dataset": {
                    "value": "dset_choices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset_indices[d][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "metrics.py": {
        "sklearn": {
            "precision_recall_fscore_support_26": {
                "variable": {
                    "value": "(P, R, F1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray(labels).reshape(-1)",
                            "Call"
                        ],
                        [
                            "batch[2]",
                            "Subscript"
                        ],
                        [
                            "batch[2]",
                            "Subscript"
                        ],
                        [
                            "batch[2]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.argmax(logits, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "average",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'binary' if logits.shape[1] == 2 else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_74": {
                "variable": {
                    "value": "(P, R, F1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.stored_labels",
                            "Attribute"
                        ],
                        [
                            "np.asarray(labels_all).reshape(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.stored_labels",
                            "Attribute"
                        ],
                        [
                            "np.asarray(labels_all).reshape(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.stored_labels",
                            "Attribute"
                        ],
                        [
                            "np.asarray(labels_all).reshape(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.argmax(logits_all, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_164": {
                "variable": {
                    "value": "(P, R, F1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.stored_labels",
                            "Attribute"
                        ],
                        [
                            "np.asarray(labels_all).reshape(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.stored_labels",
                            "Attribute"
                        ],
                        [
                            "np.asarray(labels_all).reshape(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.stored_labels",
                            "Attribute"
                        ],
                        [
                            "np.asarray(labels_all).reshape(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.argmax(logits_all, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_254": {
                "variable": {
                    "value": "(P, R, F1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.stored_labels",
                            "Attribute"
                        ],
                        [
                            "np.asarray(labels_all).reshape(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.stored_labels",
                            "Attribute"
                        ],
                        [
                            "np.asarray(labels_all).reshape(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.stored_labels",
                            "Attribute"
                        ],
                        [
                            "np.asarray(labels_all).reshape(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.argmax(logits_all, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_238": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_146": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "datareader.py": {
        "torch": {
            "tensor_79": {
                "data": {
                    "value": "domains",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[i[3] for i in input_data]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "datareader_cnn.py": {
        "torch": {
            "tensor_77": {
                "data": {
                    "value": "domains",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[i[3] for i in input_data]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "emnlp_final_experiments/claim-detection/train_basic.py": {
        "torch": {
            "device_176": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_170": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_171": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_179": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_120": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "DataLoader_271": {
                "dataset": {
                    "value": "subset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_325": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Subset_268": {
                "dataset": {
                    "value": "dset_choices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset_indices[d][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_287": {
                "f": {
                    "value": "args.pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "emnlp_final_experiments/claim-detection/train_basic_domain_adversarial.py": {
        "torch": {
            "device_181": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_175": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_176": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_184": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_294": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "DomainAdversarialBert(bert, n_domains=len(train_dls), supervision_layer=args.supervision_layer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_123": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "DataLoader_267": {
                "dataset": {
                    "value": "subset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_274": {
                "dataset": {
                    "value": "test_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_dsets[i]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_331": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Subset_265": {
                "dataset": {
                    "value": "dset_choices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset_indices[d][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_290": {
                "f": {
                    "value": "args.pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "emnlp_final_experiments/claim-detection/train_multi_view.py": {
        "torch": {
            "device_188": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_182": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_183": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_191": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_308": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model_class(multi_xformer, shared_bert)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_127": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "DataLoader_272": {
                "dataset": {
                    "value": "subset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_343": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Subset_269": {
                "dataset": {
                    "value": "dset_choices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset_indices[d][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_288": {
                "f": {
                    "value": "args.pretrained_bert",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "emnlp_final_experiments/claim-detection/train_multi_view_domain_adversarial.py": {
        "torch": {
            "device_189": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_183": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_184": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_192": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_309": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MultiViewTransformerNetworkProbabilitiesAdversarial(multi_xformer, shared_bert, supervision_layer=args.supervision_layer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_130": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "DataLoader_273": {
                "dataset": {
                    "value": "subset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_280": {
                "dataset": {
                    "value": "test_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_dsets[i]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_345": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Subset_270": {
                "dataset": {
                    "value": "dset_choices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset_indices[d][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_296": {
                "f": {
                    "value": "args.pretrained_bert",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "emnlp_final_experiments/claim-detection/train_multi_view_domain_classifier.py": {
        "torch": {
            "CrossEntropyLoss_62": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.FloatTensor(class_weights).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_259": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_253": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_254": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_262": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConcatDataset_370": {
                "variable": {
                    "value": "domain_classifier_train_dset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[subset[0] for subset in subsets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataLoader_371": {
                "variable": {
                    "value": "domain_classifier_train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "domain_classifier_train_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ConcatDataset([subset[0] for subset in subsets])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConcatDataset_377": {
                "variable": {
                    "value": "domain_classifier_val_dset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[subset[1] for subset in subsets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataParallel_421": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MultiViewTransformerNetworkDomainClassifierAttention(multi_xformer, shared_bert)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_98": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_domainclassifier_{domain_name}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "DataLoader_344": {
                "dataset": {
                    "value": "subset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_408": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_domainclassifier_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_456": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Subset_341": {
                "dataset": {
                    "value": "dset_choices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset_indices[d][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_361": {
                "f": {
                    "value": "args.pretrained_bert",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "emnlp_final_experiments/sentiment-analysis/train_basic.py": {
        "torch": {
            "device_176": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_170": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_171": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_179": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_120": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "DataLoader_271": {
                "dataset": {
                    "value": "subset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_323": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_289": {
                "f": {
                    "value": "f'{args.pretrained_model}/model_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Subset_268": {
                "dataset": {
                    "value": "dset_choices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset_indices[d][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "emnlp_final_experiments/sentiment-analysis/train_basic_domain_adversarial.py": {
        "torch": {
            "device_181": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_175": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_176": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_184": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_289": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "DomainAdversarialBert(bert, n_domains=len(train_dls), supervision_layer=args.supervision_layer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_123": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "DataLoader_267": {
                "dataset": {
                    "value": "subset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_274": {
                "dataset": {
                    "value": "test_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_dsets[i]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_329": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_295": {
                "f": {
                    "value": "f'{args.pretrained_model}/model_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Subset_265": {
                "dataset": {
                    "value": "dset_choices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset_indices[d][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "emnlp_final_experiments/sentiment-analysis/train_multi_view.py": {
        "torch": {
            "device_188": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_182": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_183": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_191": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_310": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model_class(multi_xformer, shared_bert)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_127": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "DataLoader_272": {
                "dataset": {
                    "value": "subset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_348": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_292": {
                "f": {
                    "value": "f'{args.pretrained_multi_xformer}/model_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_299": {
                "f": {
                    "value": "f'{args.pretrained_bert}/model_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Subset_269": {
                "dataset": {
                    "value": "dset_choices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset_indices[d][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "emnlp_final_experiments/sentiment-analysis/train_multi_view_domain_adversarial.py": {
        "torch": {
            "device_189": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_183": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_184": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_192": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_313": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MultiViewTransformerNetworkProbabilitiesAdversarial(multi_xformer, shared_bert, supervision_layer=args.supervision_layer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_130": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "DataLoader_276": {
                "dataset": {
                    "value": "subset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_283": {
                "dataset": {
                    "value": "test_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_dsets[i]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_351": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_303": {
                "f": {
                    "value": "f'{args.pretrained_multi_xformer}/model_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_309": {
                "f": {
                    "value": "f'{args.pretrained_bert}/model_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Subset_273": {
                "dataset": {
                    "value": "dset_choices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset_indices[d][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "emnlp_final_experiments/sentiment-analysis/train_multi_view_domain_classifier.py": {
        "torch": {
            "device_256": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_250": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_251": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_259": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConcatDataset_359": {
                "variable": {
                    "value": "domain_classifier_train_dset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[subset[0] for subset in subsets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataLoader_360": {
                "variable": {
                    "value": "domain_classifier_train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "domain_classifier_train_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ConcatDataset([subset[0] for subset in subsets])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConcatDataset_366": {
                "variable": {
                    "value": "domain_classifier_val_dset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[subset[1] for subset in subsets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataParallel_408": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MultiViewTransformerNetworkDomainClassifierAttention(multi_xformer, shared_bert)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_95": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_domainclassifier_{domain_name}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{model_dir}/{Path(wandb.run.dir).name}/model_{domain_name}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "DataLoader_341": {
                "dataset": {
                    "value": "subset[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch_transformer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_397": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_domainclassifier_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_445": {
                "f": {
                    "value": "f'{args.model_dir}/{Path(wandb.run.dir).name}/model_{domain}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Subset_338": {
                "dataset": {
                    "value": "dset_choices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "subset_indices[d][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Linear_59": {
                "variable": {
                    "value": "self.domain_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_domains",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_85": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TransformerEncoder_126": {
                "variable": {
                    "value": "self.xformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "nn.TransformerEncoderLayer(d_model, n_heads, dim_feedforward=ff_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_156": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TransformerEncoder_182": {
                "variable": {
                    "value": "self.xformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "nn.TransformerEncoderLayer(d_model, n_heads, dim_feedforward=ff_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_240": {
                "variable": {
                    "value": "self.xformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.TransformerEncoder(nn.TransformerEncoderLayer(d_model, n_heads, dim_feedforward=ff_dim), n_layers) for d in range(n_domains)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_306": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(d_model, n_classes) for d in range(n_domains)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_355": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DistilBertModel.from_pretrained(model_name, config=config) for d in range(n_domains)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_405": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(config.hidden_size, n_classes) for d in range(n_domains)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_463": {
                "variable": {
                    "value": "self.xformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.TransformerEncoder(nn.TransformerEncoderLayer(d_model, n_heads, dim_feedforward=ff_dim), n_layers) for d in range(n_domains)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_473": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(d_model, n_classes) for d in range(n_domains)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_531": {
                "variable": {
                    "value": "self.dim_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([self.multi_xformer.d_model])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_536": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((self.multi_xformer.d_model, self.multi_xformer.d_model))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_538": {
                "variable": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((self.multi_xformer.d_model, self.multi_xformer.d_model))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_540": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((self.multi_xformer.d_model, self.multi_xformer.d_model))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_543": {
                "variable": {
                    "value": "self.task_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.multi_xformer.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_564": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pooled_outputs + [shared_output]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_575": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn.unsqueeze(-1) * v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_603": {
                "variable": {
                    "value": "self.dim_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([multi_xformer.d_model])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_622": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_632": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[softmax(logs) for logs in logits]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_634": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds * attn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_666": {
                "variable": {
                    "value": "self.dim_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([multi_xformer.d_model])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_669": {
                "variable": {
                    "value": "self.alpha_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.n_domains + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_686": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_700": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[softmax(logs) for logs in logits]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_702": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds * attn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_729": {
                "variable": {
                    "value": "self.domain_experts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DistilBertForSequenceClassification.from_pretrained(bert_model, config=bert_config)] * n_domains",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_751": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_793": {
                "variable": {
                    "value": "self.domain_experts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DistilBertForSequenceClassification.from_pretrained(bert_model, config=bert_config)] * n_domains",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_809": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_848": {
                "variable": {
                    "value": "self.dim_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([multi_xformer.d_model])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_869": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_880": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[softmax(logs) for logs in logits]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_882": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds * attn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_914": {
                "variable": {
                    "value": "self.dim_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([multi_xformer.d_model])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_919": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((multi_xformer.d_model, multi_xformer.d_model))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_921": {
                "variable": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((multi_xformer.d_model, multi_xformer.d_model))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_923": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((multi_xformer.d_model, multi_xformer.d_model))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_965": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_974": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[softmax(logs) for logs in logits]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_976": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds * attn.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1009": {
                "variable": {
                    "value": "self.domain_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "multi_xformer.n_domains + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_1012": {
                "variable": {
                    "value": "self.dim_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([multi_xformer.d_model])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1017": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((multi_xformer.d_model, multi_xformer.d_model))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1019": {
                "variable": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((multi_xformer.d_model, multi_xformer.d_model))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1021": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((multi_xformer.d_model, multi_xformer.d_model))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_1068": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_1076": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[softmax(logs) for logs in logits]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1078": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds * attn.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_1119": {
                "variable": {
                    "value": "self.dim_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([multi_xformer.d_model])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_1138": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1143": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[softmax(logs) for logs in logits]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1145": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds * attn.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_1170": {
                "variable": {
                    "value": "self.dim_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([multi_xformer.d_model])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1177": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((multi_xformer.d_model, multi_xformer.d_model))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1179": {
                "variable": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((multi_xformer.d_model, multi_xformer.d_model))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1181": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((multi_xformer.d_model, multi_xformer.d_model))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1184": {
                "variable": {
                    "value": "self.domain_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_domains",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1185": {
                "variable": {
                    "value": "self.task_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "multi_xformer.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_1209": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pooled_outputs + [shared_output]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1220": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn.unsqueeze(-1) * v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1232": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1256": {
                "variable": {
                    "value": "self.domain_experts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[NLICNN(embeddings, args, n_classes)] * n_domains",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_1278": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_1349": {
                "data": {
                    "value": "torch.tensor(embedding_matrix, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_1357": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "embeddings.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embeddings.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_1358": {
                "variable": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(embeddings, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_1360": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_1362": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Conv2d(args.in_channels, args.out_channels, (kernel_height, embeddings.shape[1]), args.stride, args.padding) for kernel_height in args.kernel_heights]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_1368": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "len(args.kernel_heights) * args.out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "n_labels",
                            "Name"
                        ]
                    ]
                }
            },
            "relu_1372": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_out.squeeze(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool1d_1373": {
                "variable": {
                    "value": "max_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(conv_out.squeeze(3))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "activation.size()[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_1373": {
                "variable": {
                    "value": "max_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1385": {
                "variable": {
                    "value": "all_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "conv_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_layer(input)",
                            "Call"
                        ],
                        [
                            "[self.conv_block(input, self.conv_layers[i]) for i in range(len(self.conv_layers))]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_213": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_320": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_330": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_331": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([loss_fn(logits, labels) for logits in logits_all])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_333": {
                "variable": {
                    "value": "votes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(votes)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(votes)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(votes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_337": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(votes)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(votes)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(votes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_419": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_429": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_430": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([loss_fn(logits, labels) for logits in logits_all])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_432": {
                "variable": {
                    "value": "votes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(votes)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(votes)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(votes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_436": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(votes)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(votes)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(votes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_494": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_505": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_506": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([loss_fn(logits, labels) for logits in logits_all])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_508": {
                "variable": {
                    "value": "votes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(votes)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(votes)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(votes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_512": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(votes)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(votes)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.nn.Softmax(dim=-1)(votes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_582": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_638": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_692": {
                "variable": {
                    "value": "alpha_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.cuda.LongTensor(indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "NLLLoss_706": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_770": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[softmax(logs) for logs in logits]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_772": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds * attn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_777": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_778": {
                "variable": {
                    "value": "xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_818": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_820": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[softmax(logs) for logs in logits]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_822": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds * attn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_827": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_828": {
                "variable": {
                    "value": "xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_886": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_952": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attend_values + [shared_output]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_954": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pooled_outputs + [shared_output]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_980": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_1056": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attend_values + [shared_output]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1058": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pooled_outputs + [shared_output]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_1082": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_1150": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_1297": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[softmax(logs) for logs in logits]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1299": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds * attn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_1304": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1305": {
                "variable": {
                    "value": "xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_1349": {
                "data": {
                    "value": "embedding_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((len(tokenizer), embedding_dim))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TransformerEncoderLayer_127": {
                "d_model": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "nhead": {
                    "value": "n_heads",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "ff_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TransformerEncoderLayer_183": {
                "d_model": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "nhead": {
                    "value": "n_heads",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "ff_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_536": {
                "*size": {
                    "value": "(self.multi_xformer.d_model, self.multi_xformer.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_538": {
                "*size": {
                    "value": "(self.multi_xformer.d_model, self.multi_xformer.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_540": {
                "*size": {
                    "value": "(self.multi_xformer.d_model, self.multi_xformer.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_570": {
                "input": {
                    "value": "k.view(-1, self.n_domains + 1, self.d_model) * q.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_570": {
                "input": {
                    "value": "self.dim_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_571": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_644": {
                "variable": {
                    "value": "xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_669": {
                "*size": {
                    "value": "self.n_domains + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_712": {
                "variable": {
                    "value": "xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_892": {
                "variable": {
                    "value": "xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_919": {
                "*size": {
                    "value": "(multi_xformer.d_model, multi_xformer.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_921": {
                "*size": {
                    "value": "(multi_xformer.d_model, multi_xformer.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_923": {
                "*size": {
                    "value": "(multi_xformer.d_model, multi_xformer.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_961": {
                "input": {
                    "value": "k.view(-1, v.shape[1], self.d_model) * q.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_961": {
                "input": {
                    "value": "self.dim_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_963": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_986": {
                "variable": {
                    "value": "xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_1017": {
                "*size": {
                    "value": "(multi_xformer.d_model, multi_xformer.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_1019": {
                "*size": {
                    "value": "(multi_xformer.d_model, multi_xformer.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_1021": {
                "*size": {
                    "value": "(multi_xformer.d_model, multi_xformer.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_1064": {
                "input": {
                    "value": "k.view(-1, v.shape[1], self.d_model) * q.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_1064": {
                "input": {
                    "value": "self.dim_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_1066": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1086": {
                "variable": {
                    "value": "xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1096": {
                "variable": {
                    "value": "xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_1136": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_1177": {
                "*size": {
                    "value": "(multi_xformer.d_model, multi_xformer.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_1179": {
                "*size": {
                    "value": "(multi_xformer.d_model, multi_xformer.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_1181": {
                "*size": {
                    "value": "(multi_xformer.d_model, multi_xformer.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_1215": {
                "input": {
                    "value": "k.view(-1, self.n_xformers + 1, self.d_model) * q.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_1215": {
                "input": {
                    "value": "self.dim_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_1216": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_1358": {
                "data": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TransformerEncoder_240": {
                "encoder_layer": {
                    "value": "nn.TransformerEncoderLayer(d_model, n_heads, dim_feedforward=ff_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_306": {
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_331": {
                "tensors": {
                    "value": "[loss_fn(logits, labels) for logits in logits_all]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Softmax_336": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_405": {
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_430": {
                "tensors": {
                    "value": "[loss_fn(logits, labels) for logits in logits_all]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Softmax_435": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "TransformerEncoder_463": {
                "encoder_layer": {
                    "value": "nn.TransformerEncoderLayer(d_model, n_heads, dim_feedforward=ff_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_473": {
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_506": {
                "tensors": {
                    "value": "[loss_fn(logits, labels) for logits in logits_all]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Softmax_511": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_829": {
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_1151": {
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_1362": {
                "in_channels": {
                    "value": "args.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_height, embeddings.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "args.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "args.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TransformerEncoderLayer_241": {
                "d_model": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "nhead": {
                    "value": "n_heads",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "ff_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TransformerEncoderLayer_464": {
                "d_model": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "nhead": {
                    "value": "n_heads",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "ff_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_639": {
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_707": {
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_779": {
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_887": {
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_981": {
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_1083": {
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_1306": {
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "softmax(logits)",
                            "Call"
                        ],
                        [
                            "torch.stack([softmax(logs) for logs in logits], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(preds * attn, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_818": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}