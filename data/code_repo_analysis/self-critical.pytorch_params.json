{
    "captioning/data/dataloader.py": {
        "torch": {
            "DataLoader_317": {
                "variable": {
                    "value": "self.loaders[split]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MySampler(self.dataset.split_ix[split], shuffle=True, wrap=True)",
                            "Call"
                        ],
                        [
                            "MySampler(self.dataset.split_ix[split], shuffle=False, wrap=False)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "partial(self.dataset.collate_func, split=split)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_49": {
                "variable": {
                    "value": "self.feat_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "db_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "db_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_258": {
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "captioning/data/dataloaderraw.py": {
        "torch": {
            "from_numpy_113": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.transpose([2, 0, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_37": {
                "f": {
                    "value": "./data/imagenet_weights/ + self.cnn_model + .pth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v in enumerate(self.coco_annotation['images'])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "captioning/data/pth_loader.py": {
        "torch": {
            "load_45": {
                "variable": {
                    "value": "self.feat_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "db_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "db_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_250": {
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "captioning/models/AoAModel.py": {
        "torch": {
            "Linear_36": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_54": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTMCell_138": {
                "variable": {
                    "value": "self.att_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "opt.input_encoding_size + opt.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_139": {
                "variable": {
                    "value": "self.out_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "ctx_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att, h_att]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.aoa_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear((1 + scale) * d_model, 2 * d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.att2ctx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.d_model * opt.multi_head_scale + opt.rnn_size, 2 * opt.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_159": {
                "variable": {
                    "value": "self.ctx_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.ctx2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * opt.multi_head_scale * opt.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_44": {
                "variable": {
                    "value": "self.dropout_aoa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_aoa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTMCell_146": {
                "variable": {
                    "value": "self.att2ctx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.d_model * opt.multi_head_scale + opt.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self.att2ctx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.d_model * opt.multi_head_scale + opt.rnn_size, opt.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_165": {
                "tensors": {
                    "value": "[xt, mean_feats + self.ctx_drop(state[0][1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_217": {
                "variable": {
                    "value": "mean_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_att(att_feats, att_masks)",
                            "Call"
                        ],
                        [
                            "pack_wrapper(self.att_embed, att_feats, att_masks)",
                            "Call"
                        ],
                        [
                            "self.refiner(att_feats, att_masks)",
                            "Call"
                        ],
                        [
                            "att_feats",
                            "Method Argument"
                        ],
                        [
                            "att_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "(1 + scale) * d_model",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * d_model",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_143": {
                "in_features": {
                    "value": "self.d_model * opt.multi_head_scale + opt.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * opt.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GLU_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_175": {
                "tensors": {
                    "value": "(c_att, c_logic)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_179": {
                "tensors": {
                    "value": "(c_att, state[1][1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_92": {
                "tensors": {
                    "value": "[x, query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "in_features": {
                    "value": "self.d_model * opt.multi_head_scale + opt.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_219": {
                "input": {
                    "value": "att_masks.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "captioning/models/AttEnsemble.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "models",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_56": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[F.softmax(m.logit(output[i]), dim=1) for (i, m) in enumerate(self.models)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_56": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_56": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weights.sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_56": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_27": {
                "data": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights or [1.0] * len(self.models)",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_56": {
                "input": {
                    "value": "m.logit(output[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "captioning/models/AttModel.py": {
        "torch": {
            "sort_33": {
                "variable": {
                    "value": "(sorted_lengths, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_34": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[indices]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sorted_lengths.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_36": {
                "variable": {
                    "value": "inv_ix[indices]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_40": {
                "variable": {
                    "value": "(tmp, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Embedding(self.vocab_size + 1, self.input_encoding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.fc_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.fc_feat_size, self.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.att_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*((nn.BatchNorm1d(self.att_feat_size),) if self.use_bn else ()) + (nn.Linear(self.att_feat_size, self.rnn_size), nn.ReLU(), nn.Dropout(self.drop_prob_lm)) + ((nn.BatchNorm1d(self.rnn_size),) if self.use_bn == 2 else ())",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.ctx2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_466": {
                "variable": {
                    "value": "self.w2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "(4 + (use_maxout == True)) * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_467": {
                "variable": {
                    "value": "self.v2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "(4 + (use_maxout == True)) * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_469": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.rnn_size, (4 + (use_maxout == True)) * self.rnn_size) for _ in range(self.num_layers - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_470": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.rnn_size, (4 + (use_maxout == True)) * self.rnn_size) for _ in range(self.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_478": {
                "variable": {
                    "value": "self.r_h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_532": {
                "variable": {
                    "value": "top_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hs[-1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(top_h, self.drop_prob_lm, self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_533": {
                "variable": {
                    "value": "fake_region",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_region",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(fake_region, self.drop_prob_lm, self.training)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(n5) * tanh_nex_c",
                            "BinOp"
                        ],
                        [
                            "self.fr_linear(fake_region)",
                            "Call"
                        ],
                        [
                            "fake_region",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_549": {
                "variable": {
                    "value": "self.fr_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.rnn_size, self.input_encoding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_553": {
                "variable": {
                    "value": "self.fr_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_556": {
                "variable": {
                    "value": "self.ho_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.rnn_size, self.input_encoding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_560": {
                "variable": {
                    "value": "self.ho_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_562": {
                "variable": {
                    "value": "self.alpha_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_563": {
                "variable": {
                    "value": "self.att2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_581": {
                "variable": {
                    "value": "img_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_region.view(-1, 1, self.input_encoding_size), conv_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_582": {
                "variable": {
                    "value": "img_all_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_region_embed.view(-1, 1, self.input_encoding_size), conv_feat_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_584": {
                "variable": {
                    "value": "hA",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_all_embed + txt_replicate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_585": {
                "variable": {
                    "value": "hA",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(img_all_embed + txt_replicate)",
                            "Call"
                        ],
                        [
                            "F.dropout(hA, self.drop_prob_lm, self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_588": {
                "variable": {
                    "value": "PI",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hAflat.view(-1, att_size + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_595": {
                "variable": {
                    "value": "visAtt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "PI.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "img_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([fake_region.view(-1, 1, self.input_encoding_size), conv_feat], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_600": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.att2h(atten_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_601": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.att2h(atten_out))",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.drop_prob_lm, self.training)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_620": {
                "variable": {
                    "value": "self.att_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "opt.input_encoding_size + opt.rnn_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_621": {
                "variable": {
                    "value": "self.lang_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "opt.rnn_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_626": {
                "variable": {
                    "value": "att_lstm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_h, fc_feats, xt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_632": {
                "variable": {
                    "value": "lang_lstm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att, h_att]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_637": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_lang",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lang_lstm(lang_lstm_input, (state[0][1], state[1][1]))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_668": {
                "variable": {
                    "value": "self.emb2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_698": {
                "variable": {
                    "value": "self.emb2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_701": {
                "variable": {
                    "value": "self.fusion1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(opt.rnn_size * 2, opt.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_705": {
                "variable": {
                    "value": "self.fusion2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(opt.rnn_size * 3, opt.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_725": {
                "variable": {
                    "value": "self.h2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_726": {
                "variable": {
                    "value": "self.alpha_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_736": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att + att_h",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ],
                        [
                            "self.alpha_net(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, att_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_741": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att + att_h",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ],
                        [
                            "self.alpha_net(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, att_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_746": {
                "variable": {
                    "value": "att_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "att_feats_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_feats.view(-1, att_size, att_feats.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_746": {
                "variable": {
                    "value": "att_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_763": {
                "variable": {
                    "value": "self.a2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_764": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_765": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_766": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_775": {
                "variable": {
                    "value": "sigmoid_chunk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmoid_chunk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ],
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ],
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_782": {
                "variable": {
                    "value": "in_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_transform.narrow(1, 0, self.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_796": {
                "variable": {
                    "value": "self.a2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_815": {
                "variable": {
                    "value": "self.a2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_816": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_817": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_818": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_827": {
                "variable": {
                    "value": "sigmoid_chunk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmoid_chunk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ],
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ],
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_833": {
                "variable": {
                    "value": "in_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_transform.narrow(1, 0, self.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_890": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_893": {
                "variable": {
                    "value": "self.ctx2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_907": {
                "variable": {
                    "value": "self.fc_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_908": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_953": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*reduce(lambda x, y: x + y, self.logit) + [nn.Linear(self.rnn_size, self.vocab_size + 1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "log_softmax_172": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_474": {
                "variable": {
                    "value": "self.r_w2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_475": {
                "variable": {
                    "value": "self.r_v2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_477": {
                "variable": {
                    "value": "self.r_i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_501": {
                "variable": {
                    "value": "sigmoid_chunk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmoid_chunk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ],
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ],
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_517": {
                "variable": {
                    "value": "tanh_nex_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forget_gate * prev_c + in_gate * in_transform",
                            "BinOp"
                        ],
                        [
                            "forget_gate * state[1][-1] + in_gate * in_transform",
                            "BinOp"
                        ],
                        [
                            "forget_gate * state[1][-1] + in_gate * in_transform",
                            "BinOp"
                        ]
                    ]
                }
            },
            "PackedSequence_47": {
                "data": {
                    "value": "module(packed[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_sizes": {
                    "value": "packed[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_74": {
                "num_embeddings": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_76": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "self.fc_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_79": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_323": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logprobs.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_449": {
                "tensors": {
                    "value": "seqLogprobs_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[fc_feats.new_zeros(batch_size, self.seq_length) for _ in range(group_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_449": {
                "input": {
                    "value": "batch_size * group_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_495": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xt",
                            "variable"
                        ],
                        [
                            "hs[-1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(x, self.drop_prob_lm, self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_508": {
                "variable": {
                    "value": "in_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_input_sums.narrow(1, 3 * self.rnn_size, self.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_511": {
                "variable": {
                    "value": "in_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_transform.narrow(1, 0, self.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_535": {
                "tensors": {
                    "value": "[_.unsqueeze(0) for _ in hs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_536": {
                "tensors": {
                    "value": "[_.unsqueeze(0) for _ in cs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_550": {
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_551": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_552": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_557": {
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_558": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_559": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_638": {
                "tensors": {
                    "value": "[c_att, c_lang]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_672": {
                "tensors": {
                    "value": "[xt, fc_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_674": {
                "tensors": {
                    "value": "[h_0, att_res_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_676": {
                "tensors": {
                    "value": "[h_1, att_res_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_701": {
                "in_features": {
                    "value": "opt.rnn_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_702": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_703": {
                "p": {
                    "value": "opt.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_705": {
                "in_features": {
                    "value": "opt.rnn_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_706": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_707": {
                "p": {
                    "value": "opt.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_711": {
                "tensors": {
                    "value": "[xt, fc_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_713": {
                "tensors": {
                    "value": "[h_0, att_res_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_715": {
                "tensors": {
                    "value": "[h_0, h_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_786": {
                "input": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forget_gate * prev_c + in_gate * in_transform",
                            "BinOp"
                        ],
                        [
                            "forget_gate * state[1][-1] + in_gate * in_transform",
                            "BinOp"
                        ],
                        [
                            "forget_gate * state[1][-1] + in_gate * in_transform",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_837": {
                "input": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forget_gate * prev_c + in_gate * in_transform",
                            "BinOp"
                        ],
                        [
                            "forget_gate * state[1][-1] + in_gate * in_transform",
                            "BinOp"
                        ],
                        [
                            "forget_gate * state[1][-1] + in_gate * in_transform",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_153": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[:, i - 1].detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_389": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_469": {
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "(4 + (use_maxout == True)) * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_470": {
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "(4 + (use_maxout == True)) * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_592": {
                "tensors": {
                    "value": "[att_masks[:, :1], att_masks]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_678": {
                "tensors": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(input, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self._core(fc_feats, state)",
                            "Call"
                        ],
                        [
                            "self._core(fc_feats, state)",
                            "Call"
                        ],
                        [
                            "self._core(fc_feats, state)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_717": {
                "tensors": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(input, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self._core(fc_feats, state)",
                            "Call"
                        ],
                        [
                            "self._core(fc_feats, state)",
                            "Call"
                        ],
                        [
                            "self._core(fc_feats, state)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_91": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_426": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logprobs.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_525": {
                "input": {
                    "value": "n5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i2h + self.r_h2h(prev_h)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_930": {
                "input": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(input, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self._core(fc_feats, state)",
                            "Call"
                        ],
                        [
                            "self._core(fc_feats, state)",
                            "Call"
                        ],
                        [
                            "self._core(fc_feats, state)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_154": {
                "input": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[:, i - 1].detach())",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_154": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "sample_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_mask.nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_303": {
                "ndarray": {
                    "value": "prev_bad.astype('uint8')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_85": {
                "num_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_81": {
                "num_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_407": {
                "ndarray": {
                    "value": "prev_bad.astype('uint8')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "captioning/models/BertCapModel.py": {
        "torch": {
            "cat_99": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state[0][0], it.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "captioning/models/CaptionModel.py": {
        "torch": {
            "sort_80": {
                "variable": {
                    "value": "(ys, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "candidate_logprobs.reshape(candidate_logprobs.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "beam_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[beam_seq, selected_ix.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "beam_seq_logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[beam_seq_logprobs, beam_logprobs.reshape(batch_size, -1, 1, vocab_size)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_239": {
                "variable": {
                    "value": "(ys, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobsf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logprobs_table[divm]",
                            "Subscript"
                        ],
                        [
                            "logprobsf",
                            "Method Argument"
                        ],
                        [
                            "logprobsf",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_372": {
                "variable": {
                    "value": "(sampleLogprobs, it)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_logprobs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beam_seq_table[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "beam_logprobs_sum.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "bdash",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_size // group_size",
                            "BinOp"
                        ],
                        [
                            "beam_size // group_size",
                            "BinOp"
                        ],
                        [
                            "bdash",
                            "Method Argument"
                        ],
                        [
                            "bdash",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_292": {
                "*size": {
                    "value": "bdash",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_size // group_size",
                            "BinOp"
                        ],
                        [
                            "beam_size // group_size",
                            "BinOp"
                        ],
                        [
                            "bdash",
                            "Method Argument"
                        ],
                        [
                            "bdash",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_383": {
                "variable": {
                    "value": "(_, it)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "_logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Categorical_405": {
                "variable": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logprobs.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_204": {
                "variable": {
                    "value": "logprobs_table[divm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs_table[divm] / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_363": {
                "variable": {
                    "value": "logprobs_table[divm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs_table[divm] / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_377": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_381": {
                "input": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_391": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logprobs_table[divm]",
                            "Subscript"
                        ],
                        [
                            "add_diversity(beam_seq_table, logprobs, t, divm, diversity_lambda, bdash)",
                            "Call"
                        ],
                        [
                            "logprobs - change * diversity_lambda",
                            "BinOp"
                        ],
                        [
                            "logprobs - self.repeat_tensor(bdash, change) * diversity_lambda",
                            "BinOp"
                        ],
                        [
                            "logprobs.reshape(batch_size, -1, vocab_size)",
                            "Call"
                        ],
                        [
                            "logprobs / temperature",
                            "BinOp"
                        ],
                        [
                            "tmp",
                            "variable"
                        ],
                        [
                            "logprobs",
                            "Method Argument"
                        ],
                        [
                            "logprobs",
                            "Method Argument"
                        ],
                        [
                            "logprobs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_392": {
                "variable": {
                    "value": "(sorted_probs, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logprobs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_395": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones_like(mask[:, :1]), mask[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_401": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logprobs_table[divm]",
                            "Subscript"
                        ],
                        [
                            "add_diversity(beam_seq_table, logprobs, t, divm, diversity_lambda, bdash)",
                            "Call"
                        ],
                        [
                            "logprobs - change * diversity_lambda",
                            "BinOp"
                        ],
                        [
                            "logprobs - self.repeat_tensor(bdash, change) * diversity_lambda",
                            "BinOp"
                        ],
                        [
                            "logprobs.reshape(batch_size, -1, vocab_size)",
                            "Call"
                        ],
                        [
                            "logprobs / temperature",
                            "BinOp"
                        ],
                        [
                            "tmp",
                            "variable"
                        ],
                        [
                            "logprobs",
                            "Method Argument"
                        ],
                        [
                            "logprobs",
                            "Method Argument"
                        ],
                        [
                            "logprobs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "topk_402": {
                "variable": {
                    "value": "(topk, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logprobs_table[divm]",
                            "Subscript"
                        ],
                        [
                            "add_diversity(beam_seq_table, logprobs, t, divm, diversity_lambda, bdash)",
                            "Call"
                        ],
                        [
                            "logprobs - change * diversity_lambda",
                            "BinOp"
                        ],
                        [
                            "logprobs - self.repeat_tensor(bdash, change) * diversity_lambda",
                            "BinOp"
                        ],
                        [
                            "logprobs.reshape(batch_size, -1, vocab_size)",
                            "Call"
                        ],
                        [
                            "logprobs / temperature",
                            "BinOp"
                        ],
                        [
                            "tmp",
                            "variable"
                        ],
                        [
                            "logprobs",
                            "Method Argument"
                        ],
                        [
                            "logprobs",
                            "Method Argument"
                        ],
                        [
                            "logprobs",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "the_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(top_num)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_378": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_84": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_logprobs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "beam_seq_table[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "beam_logprobs_sum.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_84": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_157": {
                "ndarray": {
                    "value": "np.isin(beam_seq_table[divm][:, :, t - divm - 1].cpu().numpy(), self.bad_endings_ix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_157": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_319": {
                "ndarray": {
                    "value": "np.isin(beam_seq_table[divm][t - divm - 1].cpu().numpy(), self.bad_endings_ix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_395": {
                "input": {
                    "value": "mask[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "captioning/models/FCModel.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_29": {
                "variable": {
                    "value": "sigmoid_chunk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmoid_chunk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_input_sums.narrow(1, 0, 3 * self.rnn_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sigmoid_chunk)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_34": {
                "variable": {
                    "value": "in_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_input_sums.narrow(1, 3 * self.rnn_size, self.rnn_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.img_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_60": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_122": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_112": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_115": {
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in outputs[1:]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_174": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_38": {
                "input": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forget_gate * state[1][-1] + in_gate * in_transform",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_softmax_146": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_180": {
                "variable": {
                    "value": "(sampleLogprobs, it)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_188": {
                "variable": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data).cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature)).cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_184": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_187": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(logprobs.data, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_102": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_103": {
                "input": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data).cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature)).cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_103": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "sample_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_mask.nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_187": {
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('temperature', 1.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "captioning/models/M2Transformer.py": {
        "torch": {
            "cat_79": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state[0][0], it.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "captioning/models/ShowTellModel.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.img_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_29": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_92": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output.squeeze(0)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_82": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output.squeeze(0)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in outputs[1:]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_144": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output.squeeze(0)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_116": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output.squeeze(0)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_150": {
                "variable": {
                    "value": "(sampleLogprobs, it)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_158": {
                "variable": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data).cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature)).cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_154": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_157": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(logprobs.data, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_72": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_73": {
                "input": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data).cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature)).cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_73": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "sample_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_mask.nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_157": {
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('temperature', 1.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "captioning/models/TransformerModel.py": {
        "torch": {
            "softmax_159": {
                "variable": {
                    "value": "p_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab",
                            "Method Argument"
                        ],
                        [
                            "vocab",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_61": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_81": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_97": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_174": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_ff",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_ff",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_203": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_211": {
                "variable": {
                    "value": "self.lut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab",
                            "Method Argument"
                        ],
                        [
                            "vocab",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_221": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_224": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_225": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_225": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_226": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * -(math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_228": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_229": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_274": {
                "variable": {
                    "value": "self.att_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*((nn.BatchNorm1d(self.att_feat_size),) if self.use_bn else ()) + (nn.Linear(self.att_feat_size, self.d_model), nn.ReLU(), nn.Dropout(self.drop_prob_lm)) + ((nn.BatchNorm1d(self.d_model),) if self.use_bn == 2 else ())",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "log_softmax_57": {
                "input": {
                    "value": "self.proj(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_150": {
                "ndarray": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subsequent_mask",
                            "Call"
                        ],
                        [
                            "np.triu(np.ones(attn_shape), k=1).astype('uint8')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_155": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_162": {
                "input": {
                    "value": "p_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(p_attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_358": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state[0][0], it.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_80": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_81": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_172": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_251": {
                "*args": {
                    "value": "Embeddings(d_model, tgt_vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_206": {
                "input": {
                    "value": "self.w_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_226": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_276": {
                "in_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_278": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_279": {
                "num_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_275": {
                "num_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "captioning/models/__init__.py": {
        "torch": {}
    },
    "captioning/models/cachedTransformer.py": {
        "torch": {
            "softmax_184": {
                "variable": {
                    "value": "p_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab",
                            "Method Argument"
                        ],
                        [
                            "vocab",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_61": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_81": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_97": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_199": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_248": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_ff",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_249": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_ff",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_250": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_258": {
                "variable": {
                    "value": "self.lut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab",
                            "Method Argument"
                        ],
                        [
                            "vocab",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_268": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_271": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_272": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_272": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_273": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * -(math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_275": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_276": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_321": {
                "variable": {
                    "value": "self.att_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*((nn.BatchNorm1d(self.att_feat_size),) if self.use_bn else ()) + (nn.Linear(self.att_feat_size, self.d_model), nn.ReLU(), nn.Dropout(self.drop_prob_lm)) + ((nn.BatchNorm1d(self.d_model),) if self.use_bn == 2 else ())",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "log_softmax_57": {
                "input": {
                    "value": "self.proj(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_175": {
                "ndarray": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subsequent_mask",
                            "Call"
                        ],
                        [
                            "np.triu(np.ones(attn_shape), k=1).astype('uint8')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_180": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linears[0](query)",
                            "Call"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_187": {
                "input": {
                    "value": "p_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(p_attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_past[1]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((past_value, value), dim=1)",
                            "Call"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_215": {
                "variable": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key, value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_key, key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_value, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_226": {
                "variable": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key, value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_413": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state[0][0], it.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_80": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_81": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_197": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_298": {
                "*args": {
                    "value": "Embeddings(d_model, tgt_vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_253": {
                "input": {
                    "value": "self.w_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_273": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_145": {
                "tensors": {
                    "value": "present[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_323": {
                "in_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_325": {
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_326": {
                "num_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_322": {
                "num_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "captioning/models/utils.py": {
        "torch": {
            "is_tensor_8": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(-1, n, *[-1] * len(x.shape[2:]))",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0] * n, *x.shape[2:])",
                            "Call"
                        ],
                        [
                            "[repeat_tensors(n, _) for _ in x]",
                            "ListComp"
                        ],
                        [
                            "x.reshape(x.shape[0] // n, n, *x.shape[1:]).unbind(1)",
                            "Call"
                        ],
                        [
                            "[split_tensors(n, _) for _ in x]",
                            "ListComp"
                        ],
                        [
                            "[None] * n",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_18": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(-1, n, *[-1] * len(x.shape[2:]))",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0] * n, *x.shape[2:])",
                            "Call"
                        ],
                        [
                            "[repeat_tensors(n, _) for _ in x]",
                            "ListComp"
                        ],
                        [
                            "x.reshape(x.shape[0] // n, n, *x.shape[1:]).unbind(1)",
                            "Call"
                        ],
                        [
                            "[split_tensors(n, _) for _ in x]",
                            "ListComp"
                        ],
                        [
                            "[None] * n",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "captioning/modules/loss_wrapper.py": {
        "torch": {
            "tensor_28": {
                "variable": {
                    "value": "lm_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_self_critical_reward(greedy_res, gts, gen_result, self.opt)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(reward).to(sample_logprobs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_40": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "captioning/modules/losses.py": {
        "torch": {
            "cat_17": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask.new(mask.size(0), 1).fill_(1), mask[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_17": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask.new_full((mask.size(0), 1), 1), mask[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_scores(data_gts, seq, self.opt)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scores).type_as(input).view(-1, seq_per_img)",
                            "Call"
                        ],
                        [
                            "scores + self.opt.entropy_reward_weight * entropy.view(-1, seq_per_img)",
                            "BinOp"
                        ],
                        [
                            "scores - baseline",
                            "BinOp"
                        ],
                        [
                            "scores + self.opt.self_cider_reward_weight * _scores",
                            "BinOp"
                        ]
                    ]
                }
            },
            "KLDivLoss_207": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_23": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(seq > 0).to(input)",
                            "Call"
                        ],
                        [
                            "torch.cat([mask.new(mask.size(0), 1).fill_(1), mask[:, :-1]], 1).reshape(-1)",
                            "Call"
                        ],
                        [
                            "(seq > 0).to(input)",
                            "Call"
                        ],
                        [
                            "torch.cat([mask.new_full((mask.size(0), 1), 1), mask[:, :-1]], 1)",
                            "Call"
                        ],
                        [
                            "mask.reshape(-1, mask.shape[2])",
                            "Call"
                        ],
                        [
                            "mask[:, :input.size(1)].to(input)",
                            "Call"
                        ],
                        [
                            "mask[:, :input.size(1)]",
                            "Subscript"
                        ],
                        [
                            "mask.reshape(-1).to(input)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_198": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(seq > 0).to(input)",
                            "Call"
                        ],
                        [
                            "torch.cat([mask.new(mask.size(0), 1).fill_(1), mask[:, :-1]], 1).reshape(-1)",
                            "Call"
                        ],
                        [
                            "(seq > 0).to(input)",
                            "Call"
                        ],
                        [
                            "torch.cat([mask.new_full((mask.size(0), 1), 1), mask[:, :-1]], 1)",
                            "Call"
                        ],
                        [
                            "mask.reshape(-1, mask.shape[2])",
                            "Call"
                        ],
                        [
                            "mask[:, :input.size(1)].to(input)",
                            "Call"
                        ],
                        [
                            "mask[:, :input.size(1)]",
                            "Subscript"
                        ],
                        [
                            "mask.reshape(-1).to(input)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_239": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(seq > 0).to(input)",
                            "Call"
                        ],
                        [
                            "torch.cat([mask.new(mask.size(0), 1).fill_(1), mask[:, :-1]], 1).reshape(-1)",
                            "Call"
                        ],
                        [
                            "(seq > 0).to(input)",
                            "Call"
                        ],
                        [
                            "torch.cat([mask.new_full((mask.size(0), 1), 1), mask[:, :-1]], 1)",
                            "Call"
                        ],
                        [
                            "mask.reshape(-1, mask.shape[2])",
                            "Call"
                        ],
                        [
                            "mask[:, :input.size(1)].to(input)",
                            "Call"
                        ],
                        [
                            "mask[:, :input.size(1)]",
                            "Subscript"
                        ],
                        [
                            "mask.reshape(-1).to(input)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_self_cider_scores(data_gts, seq, self.opt)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(_scores).type_as(scores).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "_scores.expand_as(scores - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_175": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(seq > 0).to(input)",
                            "Call"
                        ],
                        [
                            "torch.cat([mask.new(mask.size(0), 1).fill_(1), mask[:, :-1]], 1).reshape(-1)",
                            "Call"
                        ],
                        [
                            "(seq > 0).to(input)",
                            "Call"
                        ],
                        [
                            "torch.cat([mask.new_full((mask.size(0), 1), 1), mask[:, :-1]], 1)",
                            "Call"
                        ],
                        [
                            "mask.reshape(-1, mask.shape[2])",
                            "Call"
                        ],
                        [
                            "mask[:, :input.size(1)].to(input)",
                            "Call"
                        ],
                        [
                            "mask[:, :input.size(1)]",
                            "Subscript"
                        ],
                        [
                            "mask.reshape(-1).to(input)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "captioning/utils/eval_multi.py": {
        "torch": {}
    },
    "captioning/utils/eval_utils.py": {
        "torch": {
            "save_220": {
                "obj": {
                    "value": "(predictions, n_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('eval_results/', '.saved_pred_' + eval_kwargs['id'] + '_' + split + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_245": {
                "tensors": {
                    "value": "[model.done_beams[k][_]['seq'] for _ in range(sample_n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_267": {
                "tensors": {
                    "value": "[model.done_beams[k][_]['seq'] for _ in range(0, sample_n * beam_size, beam_size)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "softmax_173": {
                "input": {
                    "value": "seq_logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(fc_feats, att_feats, att_masks, opt=tmp_eval_kwargs, mode='sample')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "captioning/utils/misc.py": {
        "torch": {
            "device_48": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_94": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoint_path, 'model%s.pth' % append)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_97": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "optimizer_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoint_path, 'optimizer%s.pth' % append)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_204": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'min'",
                            "Method Argument"
                        ]
                    ]
                },
                "factor": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "factor",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "patience": {
                    "value": "patience",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "threshold": {
                    "value": "verbose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "threshold_mode": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "cooldown": {
                    "value": "threshold_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'rel'",
                            "Method Argument"
                        ]
                    ]
                },
                "min_lr": {
                    "value": "cooldown",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "min_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RMSprop_116": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "opt.optim_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt.optim_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_118": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_120": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_122": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt.optim_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_124": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt.optim_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_126": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.optim_alpha, opt.optim_beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt.optim_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamW_128": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.optim_alpha, opt.optim_beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt.optim_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "captioning/utils/resnet.py": {
        "torch": {
            "MaxPool2d_9": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "captioning/utils/resnet_utils.py": {
        "torch": {
            "adaptive_avg_pool2d_24": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.layer4(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "[att_size, att_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_24": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "permute_24": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "captioning/utils/rewards.py": {
        "torch": {}
    },
    "scripts/build_bpe_subword_nmt.py": {
        "torch": {}
    },
    "scripts/dump_to_lmdb.py": {
        "torch": {
            "DataLoader_150": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Folder(directory, loader=raw_npz_reader, extension='.npz', fn_list=fn_list)",
                            "Call"
                        ],
                        [
                            "Folder(directory, loader=raw_npy_reader, extension='.npy', fn_list=fn_list)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_239": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "folder_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FolderLMDB(args.folder + '.lmdb', list(found_ids))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/prepro_feats.py": {
        "torch": {
            "from_numpy_71": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "I.transpose([2, 0, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_44": {
                "f": {
                    "value": "os.path.join(params['model_root'], params['model'] + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/prepro_labels.py": {
        "torch": {}
    },
    "test/test_pth_loader.py": {
        "torch": {
            "Subset_8": {
                "variable": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CaptionDataset(x['opt'])",
                            "Call"
                        ],
                        [
                            "CaptionDataset(x['opt'])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "dataset.split_ix['train']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Subset_15": {
                "variable": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CaptionDataset(x['opt'])",
                            "Call"
                        ],
                        [
                            "CaptionDataset(x['opt'])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "dataset.split_ix['train']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tools/eval.py": {
        "torch": {
            "load_73": {
                "variable": {
                    "value": "(predictions, n_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "pred_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('eval_results/', '.saved_pred_' + opt.id + '_' + opt.split + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_83": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pred_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('eval_results/', '.saved_pred_' + opt.id + '_' + opt.split + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_96": {
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tools/eval_ensemble.py": {
        "torch": {
            "load_71": {
                "f": {
                    "value": "model_paths[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {
            "SummaryWriter_70": {
                "variable": {
                    "value": "tb_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "opt.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_86": {
                "variable": {
                    "value": "dp_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.setup(opt).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_88": {
                "variable": {
                    "value": "dp_lw_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "lw_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LossWrapper(model, opt)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_80": {
                "f": {
                    "value": "os.path.join(opt.start_from, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_105": {
                "f": {
                    "value": "os.path.join(opt.start_from, 'optimizer.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "synchronize_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_191": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_185": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(data['gts'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_191": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_out['loss'].mean()",
                            "Call"
                        ],
                        [
                            "model_out['loss']",
                            "Subscript"
                        ],
                        [
                            "torch.topk(loss, k=int(loss.shape[0] * (1 - opt.drop_worst_rate)), largest=False)[0].mean()",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "int(loss.shape[0] * (1 - opt.drop_worst_rate))",
                    "type": "Call",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_pl.py": {
        "torch": {
            "Subset_59": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.dataset.split_ix['train']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(self.dataset, self.dataset.split_ix['train'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.dataset.collate_func",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Subset_74": {
                "variable": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.dataset.split_ix[split]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(self.dataset, self.dataset.split_ix[split])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.dataset.collate_func",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "data_time",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.trainer.profiler.recorded_durations['get_train_batch'][-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(data_time)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "logger_logs[scheduled_sampling_prob]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.model.ss_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_448": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_105": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_447": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_472": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_100": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(data['gts'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_237": {
                "obj": {
                    "value": "(predictions, n_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('eval_results/', '.saved_pred_' + opt.id + '_' + split + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_484": {
                "f": {
                    "value": "resume_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.start_from, f'{opt.id}_last.ckpt')",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_263": {
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logger_logs.items()",
                            "Call"
                        ],
                        [
                            "out.items()",
                            "Call"
                        ],
                        [
                            "out.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_263": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logger_logs.items()",
                            "Call"
                        ],
                        [
                            "out.items()",
                            "Call"
                        ],
                        [
                            "out.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_105": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_out.pop('loss').mean()",
                            "Call"
                        ],
                        [
                            "model_out.pop('loss')",
                            "Call"
                        ],
                        [
                            "torch.topk(loss, k=int(loss.shape[0] * (1 - self.opt.drop_worst_rate)), largest=False)[0].mean()",
                            "Call"
                        ],
                        [
                            "torch.tensor(0)",
                            "Call"
                        ],
                        [
                            "crit(model(fc_feats, att_feats, labels[..., :-1], att_masks), labels[..., 1:], masks[..., 1:])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "int(loss.shape[0] * (1 - self.opt.drop_worst_rate))",
                    "type": "Call",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_167": {
                "input": {
                    "value": "seq_logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(fc_feats, att_feats, att_masks, opt=tmp_eval_kwargs, mode='sample')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}