{
    "evaluations/inception_score_tf.py": {
        "tensorflow": {
            "matmul_116": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(pool3, [1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.get_operation_by_name('softmax/logits/MatMul').inputs[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_117": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.squeeze(pool3, [1, 2]), w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_88": {
                "name": {
                    "value": "os.path.join(MODEL_DIR, 'classify_image_graph_def.pb')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_91": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_93": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_116": {
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name('pool_3:0')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_90": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TensorShape_112": {
                "variable": {
                    "value": "o._shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorShape_114": {
                "variable": {
                    "value": "o._shape_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "dataloader/data_loader.py": {
        "torch": {
            "DataLoader_79": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CreateDataset(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "not opt.no_shuffle",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.nThreads)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "evaluations/fid_score_torch.py": {
        "torch": {
            "from_numpy_92": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_102": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "evaluations/inception_score_torch.py": {
        "torch": {
            "Upsample_37": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "imgs[i * batch_size:min((i + 1) * batch_size, N)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_47": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up(x)",
                            "Call"
                        ],
                        [
                            "inception_model(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "gui/ui_model.py": {
        "torch": {
            "unsqueeze_327": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_357": {
                "variable": {
                    "value": "q_distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "distributions[-1][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "distributions[-1][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/base_function.py": {
        "torch": {
            "ReLU_54": {
                "variable": {
                    "value": "nonlinearity_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LambdaLR_72": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataParallel_98": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(net, gpu_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_154": {
                "variable": {
                    "value": "xx_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_155": {
                "variable": {
                    "value": "yy_cahnnel",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "y_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_155": {
                "variable": {
                    "value": "yy_cahnnel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, xx_channel, yy_cahnnel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_222": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.bypass",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_252": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_279": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.bypass",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_317": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "input_nc // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_318": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_319": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_321": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_337": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_query",
                            "variable"
                        ]
                    ]
                }
            },
            "bmm_341": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(B, -1, W * H)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SELU_56": {
                "variable": {
                    "value": "nonlinearity_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_74": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_165": {
                "variable": {
                    "value": "rr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx_channel ** 2 + yy_cahnnel ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ret, rr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_218": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nonlinearity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(input_nc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_248": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_250": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_275": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nonlinearity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_277": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(input_nc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_300": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nonlinearity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_302": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "norm_layer(input_nc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_348": {
                "variable": {
                    "value": "context_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre.view(B, -1, W * H)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_58": {
                "variable": {
                    "value": "nonlinearity_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_76": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_nc * 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_181": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_nc * 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "PixelShuffle_204": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_252": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_270": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "output_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_271": {
                "in_channels": {
                    "value": "hidden_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "output_nc if hidden_nc is None else hidden_nc",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_nc * 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_272": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc + 2",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_nc * 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_318": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_319": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_60": {
                "variable": {
                    "value": "nonlinearity_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_206": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_248": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_250": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_300": {
                "padding": {
                    "value": "int(kernel_size / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_302": {
                "padding": {
                    "value": "int(kernel_size / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_350": {
                "tensors": {
                    "value": "[out, context_flow]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/base_model.py": {
        "torch": {
            "save_101": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_116": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_114": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/external_function.py": {
        "torch": {
            "l1_loss_176": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GramMatrix(input)",
                            "Call"
                        ],
                        [
                            "img_crop(input)",
                            "Call"
                        ],
                        [
                            "layer(input)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.detach()",
                            "Call"
                        ],
                        [
                            "GramMatrix(target).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_183": {
                "variable": {
                    "value": "features_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(s[0], s[1], s[2] * s[3])",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_184": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(s[0], s[1], s[2] * s[3])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "features_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(features, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_184": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s[1] * s[2] * s[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l1_loss_191": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GramMatrix(input)",
                            "Call"
                        ],
                        [
                            "img_crop(input)",
                            "Call"
                        ],
                        [
                            "layer(input)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.detach()",
                            "Call"
                        ],
                        [
                            "GramMatrix(target).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "upsample_196": {
                "variable": {
                    "value": "input_cropped",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GramMatrix(input)",
                            "Call"
                        ],
                        [
                            "img_crop(input)",
                            "Call"
                        ],
                        [
                            "layer(input)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(size, size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(width).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_62": {
                "variable": {
                    "value": "w_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_159": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "disc_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD(interpolatesv)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolatesv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_data",
                            "variable"
                        ],
                        [
                            "fake_data",
                            "variable"
                        ],
                        [
                            "alpha * real_data + (1 - alpha) * fake_data",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size()).type_as(real_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_216": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "vgg[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_217": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "vgg[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_218": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "vgg[10]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_219": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "vgg[17]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "vgg[24]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MSELoss_100": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_96": {
                "data": {
                    "value": "target_real_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_97": {
                "data": {
                    "value": "target_fake_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_102": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mv_37": {
                "input": {
                    "value": "torch.t(w.view(height, -1).data)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_38": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "v.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_151": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_160": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_37": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/network.py": {
        "torch": {
            "softplus_122": {
                "input": {
                    "value": "q_std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softplus_135": {
                "input": {
                    "value": "p_std",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/pluralistic_model.py": {
        "torch": {}
    },
    "options/base_options.py": {
        "torch": {
            "set_device_77": {
                "device": {
                    "value": "opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "util/task.py": {
        "torch": {
            "ones_like_17": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((size[1], size[2], 1), np.uint8)",
                            "Call"
                        ],
                        [
                            "img.reshape(size[2], size[1])",
                            "Call"
                        ],
                        [
                            "Image.fromarray(img * 255)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_33": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((size[1], size[2], 1), np.uint8)",
                            "Call"
                        ],
                        [
                            "img.reshape(size[2], size[1])",
                            "Call"
                        ],
                        [
                            "Image.fromarray(img * 255)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_47": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((size[1], size[2], 1), np.uint8)",
                            "Call"
                        ],
                        [
                            "img.reshape(size[2], size[1])",
                            "Call"
                        ],
                        [
                            "Image.fromarray(img * 255)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_95": {
                "variable": {
                    "value": "scaled_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((size[1], size[2], 1), np.uint8)",
                            "Call"
                        ],
                        [
                            "img.reshape(size[2], size[1])",
                            "Call"
                        ],
                        [
                            "Image.fromarray(img * 255)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.size()",
                            "Call"
                        ],
                        [
                            "img.size()",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "util/util.py": {
        "torch": {}
    }
}