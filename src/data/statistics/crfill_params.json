{
    "util/visualizer.py": {
        "tensorflow": {
            "FileWriter_28": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data/__init__.py": {
        "torch": {}
    },
    "data/base_dataset.py": {
        "torch": {}
    },
    "data/image_folder.py": {
        "torch": {}
    },
    "data/testimage_dataset.py": {
        "torch": {}
    },
    "data/valimage_dataset.py": {
        "torch": {}
    },
    "demo.py": {
        "torch": {
            "clamp_62": {
                "variable": {
                    "value": "generated",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "generated",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(generated, -1, 1)",
                            "Call"
                        ],
                        [
                            "(generated + 1) / 2 * 255",
                            "BinOp"
                        ],
                        [
                            "generated.cpu().numpy().astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "generated[0].transpose((1, 2, 0))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_52": {}
        }
    },
    "models/__init__.py": {
        "torch": {}
    },
    "models/arrange_model.py": {
        "torch": {
            "Adam_48": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.netG.get_param_list(opt.update_part)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "G_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(self.netD.parameters()) + list(self.netD_aux.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "D_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/inpaint_model.py": {
        "torch": {
            "Adam_89": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.netG.get_param_list(opt.update_part)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "G_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_90": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(self.netD.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "D_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "fake_and_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_concat, real_concat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_264": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_265": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_47": {
                "variable": {
                    "value": "self.criterionFeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "mask_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_174": {
                "input": {
                    "value": "coarse_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "real_image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "l1_loss_176": {
                "input": {
                    "value": "fake_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fake_image.detach()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "real_image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/__init__.py": {
        "torch": {
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/base_network.py": {
        "torch": {}
    },
    "models/networks/inpaint_d.py": {
        "torch": {
            "spectral_norm_14": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "dis_conv(4, cnum)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_15": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "dis_conv(cnum, cnum * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_16": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "dis_conv(cnum * 2, cnum * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_17": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "dis_conv(cnum * 4, cnum * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_18": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "dis_conv(cnum * 4, cnum * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_19": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "dis_conv(cnum * 4, cnum * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, ones_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_24": {
                "variable": {
                    "value": "ones_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/inpaint_g.py": {
        "torch": {
            "avg_pool2d_77": {
                "variable": {
                    "value": "mask_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_94": {
                "variable": {
                    "value": "xb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bconv1(xnow)",
                            "Call"
                        ],
                        [
                            "self.bconv2_downsample(xb)",
                            "Call"
                        ],
                        [
                            "self.bconv3(xb)",
                            "Call"
                        ],
                        [
                            "self.bconv4_downsample(xb)",
                            "Call"
                        ],
                        [
                            "self.conv13_upsample_conv(xb)",
                            "Call"
                        ],
                        [
                            "self.conv14(torch.cat((xb, x_skip2), 1))",
                            "Call"
                        ],
                        [
                            "self.conv15_upsample_conv(xb)",
                            "Call"
                        ],
                        [
                            "self.conv16(torch.cat((xb, x_skip1), 1))",
                            "Call"
                        ],
                        [
                            "self.conv16_2(xb)",
                            "Call"
                        ],
                        [
                            "self.conv17(xb)",
                            "Call"
                        ],
                        [
                            "torch.tanh(xb)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_199": {
                "variable": {
                    "value": "ones_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, ones_x, ones_x * mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_221": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([x, ones_x, ones_x * mask], 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "self.conv7_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv8_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv9_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv10_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv11(x)",
                            "Call"
                        ],
                        [
                            "self.conv12(x)",
                            "Call"
                        ],
                        [
                            "self.conv13_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv14(x)",
                            "Call"
                        ],
                        [
                            "self.conv15_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv16(x)",
                            "Call"
                        ],
                        [
                            "self.conv17(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "x * mask + xin[:, 0:3, :, :] * (1.0 - mask)",
                            "BinOp"
                        ],
                        [
                            "self.xconv1(xnow)",
                            "Call"
                        ],
                        [
                            "self.xconv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.xconv3(x)",
                            "Call"
                        ],
                        [
                            "self.xconv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.xconv5(x)",
                            "Call"
                        ],
                        [
                            "self.xconv6(x)",
                            "Call"
                        ],
                        [
                            "self.xconv7_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv8_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv9_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv10_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv1(xnow)",
                            "Call"
                        ],
                        [
                            "self.pmconv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv3(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv5(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv6(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv9(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv10(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_hallu, pm], 1)",
                            "Call"
                        ],
                        [
                            "self.allconv11(x)",
                            "Call"
                        ],
                        [
                            "self.allconv12(x)",
                            "Call"
                        ],
                        [
                            "self.allconv13_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.allconv14(x)",
                            "Call"
                        ],
                        [
                            "self.allconv15_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.allconv16(x)",
                            "Call"
                        ],
                        [
                            "self.allconv17(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, ones_x, ones_x * mask], 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "self.conv7_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv8_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv9_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv10_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv11(x)",
                            "Call"
                        ],
                        [
                            "self.conv12(x)",
                            "Call"
                        ],
                        [
                            "self.conv13_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv14(x)",
                            "Call"
                        ],
                        [
                            "self.conv15_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv16(x)",
                            "Call"
                        ],
                        [
                            "self.conv17(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "x * mask + xin[:, 0:3, :, :] * (1.0 - mask)",
                            "BinOp"
                        ],
                        [
                            "self.xconv1(xnow)",
                            "Call"
                        ],
                        [
                            "self.xconv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.xconv3(x)",
                            "Call"
                        ],
                        [
                            "self.xconv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.xconv5(x)",
                            "Call"
                        ],
                        [
                            "self.xconv6(x)",
                            "Call"
                        ],
                        [
                            "self.xconv7_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv8_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv9_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv10_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv1(xnow)",
                            "Call"
                        ],
                        [
                            "self.pmconv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv3(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv5(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv6(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv9(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv10(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_hallu, pm], 1)",
                            "Call"
                        ],
                        [
                            "self.allconv11(x)",
                            "Call"
                        ],
                        [
                            "self.allconv12(x)",
                            "Call"
                        ],
                        [
                            "self.allconv13_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.allconv14(x)",
                            "Call"
                        ],
                        [
                            "self.allconv15_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.allconv16(x)",
                            "Call"
                        ],
                        [
                            "self.allconv17(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_254": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_hallu, pm]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_266": {
                "variable": {
                    "value": "x_stage2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([x, ones_x, ones_x * mask], 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "self.conv7_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv8_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv9_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv10_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv11(x)",
                            "Call"
                        ],
                        [
                            "self.conv12(x)",
                            "Call"
                        ],
                        [
                            "self.conv13_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv14(x)",
                            "Call"
                        ],
                        [
                            "self.conv15_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv16(x)",
                            "Call"
                        ],
                        [
                            "self.conv17(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "x * mask + xin[:, 0:3, :, :] * (1.0 - mask)",
                            "BinOp"
                        ],
                        [
                            "self.xconv1(xnow)",
                            "Call"
                        ],
                        [
                            "self.xconv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.xconv3(x)",
                            "Call"
                        ],
                        [
                            "self.xconv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.xconv5(x)",
                            "Call"
                        ],
                        [
                            "self.xconv6(x)",
                            "Call"
                        ],
                        [
                            "self.xconv7_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv8_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv9_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv10_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv1(xnow)",
                            "Call"
                        ],
                        [
                            "self.pmconv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv3(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv5(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv6(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv9(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv10(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_hallu, pm], 1)",
                            "Call"
                        ],
                        [
                            "self.allconv11(x)",
                            "Call"
                        ],
                        [
                            "self.allconv12(x)",
                            "Call"
                        ],
                        [
                            "self.allconv13_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.allconv14(x)",
                            "Call"
                        ],
                        [
                            "self.allconv15_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.allconv16(x)",
                            "Call"
                        ],
                        [
                            "self.allconv17(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, ones_x, ones_x * mask], 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "self.conv7_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv8_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv9_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv10_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv11(x)",
                            "Call"
                        ],
                        [
                            "self.conv12(x)",
                            "Call"
                        ],
                        [
                            "self.conv13_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv14(x)",
                            "Call"
                        ],
                        [
                            "self.conv15_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv16(x)",
                            "Call"
                        ],
                        [
                            "self.conv17(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "x * mask + xin[:, 0:3, :, :] * (1.0 - mask)",
                            "BinOp"
                        ],
                        [
                            "self.xconv1(xnow)",
                            "Call"
                        ],
                        [
                            "self.xconv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.xconv3(x)",
                            "Call"
                        ],
                        [
                            "self.xconv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.xconv5(x)",
                            "Call"
                        ],
                        [
                            "self.xconv6(x)",
                            "Call"
                        ],
                        [
                            "self.xconv7_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv8_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv9_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv10_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv1(xnow)",
                            "Call"
                        ],
                        [
                            "self.pmconv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv3(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv5(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv6(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv9(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv10(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_hallu, pm], 1)",
                            "Call"
                        ],
                        [
                            "self.allconv11(x)",
                            "Call"
                        ],
                        [
                            "self.allconv12(x)",
                            "Call"
                        ],
                        [
                            "self.allconv13_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.allconv14(x)",
                            "Call"
                        ],
                        [
                            "self.allconv15_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.allconv16(x)",
                            "Call"
                        ],
                        [
                            "self.allconv17(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_351": {
                "variable": {
                    "value": "ones_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_352": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, ones_x, ones_x * mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_373": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([x, ones_x, ones_x * mask], 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "self.conv7_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv8_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv9_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv10_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv11(x)",
                            "Call"
                        ],
                        [
                            "self.conv12(x)",
                            "Call"
                        ],
                        [
                            "self.conv13_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv14(x)",
                            "Call"
                        ],
                        [
                            "self.conv15_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv16(x)",
                            "Call"
                        ],
                        [
                            "self.conv17(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "x * mask + xin[:, 0:3, :, :] * (1.0 - mask)",
                            "BinOp"
                        ],
                        [
                            "self.xconv1(xnow)",
                            "Call"
                        ],
                        [
                            "self.xconv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.xconv3(x)",
                            "Call"
                        ],
                        [
                            "self.xconv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.xconv5(x)",
                            "Call"
                        ],
                        [
                            "self.xconv6(x)",
                            "Call"
                        ],
                        [
                            "self.xconv7_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv8_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv9_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv10_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv1(xnow)",
                            "Call"
                        ],
                        [
                            "self.pmconv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv3(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv5(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv6(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv9(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv10(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_hallu, pm], 1)",
                            "Call"
                        ],
                        [
                            "self.allconv11(x)",
                            "Call"
                        ],
                        [
                            "self.allconv12(x)",
                            "Call"
                        ],
                        [
                            "self.allconv13_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.allconv14(x)",
                            "Call"
                        ],
                        [
                            "self.allconv15_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.allconv16(x)",
                            "Call"
                        ],
                        [
                            "self.allconv17(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, ones_x, ones_x * mask], 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "self.conv7_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv8_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv9_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv10_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv11(x)",
                            "Call"
                        ],
                        [
                            "self.conv12(x)",
                            "Call"
                        ],
                        [
                            "self.conv13_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv14(x)",
                            "Call"
                        ],
                        [
                            "self.conv15_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv16(x)",
                            "Call"
                        ],
                        [
                            "self.conv17(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "x * mask + xin[:, 0:3, :, :] * (1.0 - mask)",
                            "BinOp"
                        ],
                        [
                            "self.xconv1(xnow)",
                            "Call"
                        ],
                        [
                            "self.xconv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.xconv3(x)",
                            "Call"
                        ],
                        [
                            "self.xconv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.xconv5(x)",
                            "Call"
                        ],
                        [
                            "self.xconv6(x)",
                            "Call"
                        ],
                        [
                            "self.xconv7_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv8_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv9_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv10_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv1(xnow)",
                            "Call"
                        ],
                        [
                            "self.pmconv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv3(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv5(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv6(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv9(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv10(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_hallu, pm], 1)",
                            "Call"
                        ],
                        [
                            "self.allconv11(x)",
                            "Call"
                        ],
                        [
                            "self.allconv12(x)",
                            "Call"
                        ],
                        [
                            "self.allconv13_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.allconv14(x)",
                            "Call"
                        ],
                        [
                            "self.allconv15_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.allconv16(x)",
                            "Call"
                        ],
                        [
                            "self.allconv17(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_404": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_hallu, pm]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_413": {
                "variable": {
                    "value": "x_stage2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([x, ones_x, ones_x * mask], 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "self.conv7_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv8_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv9_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv10_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv11(x)",
                            "Call"
                        ],
                        [
                            "self.conv12(x)",
                            "Call"
                        ],
                        [
                            "self.conv13_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv14(x)",
                            "Call"
                        ],
                        [
                            "self.conv15_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv16(x)",
                            "Call"
                        ],
                        [
                            "self.conv17(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "x * mask + xin[:, 0:3, :, :] * (1.0 - mask)",
                            "BinOp"
                        ],
                        [
                            "self.xconv1(xnow)",
                            "Call"
                        ],
                        [
                            "self.xconv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.xconv3(x)",
                            "Call"
                        ],
                        [
                            "self.xconv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.xconv5(x)",
                            "Call"
                        ],
                        [
                            "self.xconv6(x)",
                            "Call"
                        ],
                        [
                            "self.xconv7_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv8_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv9_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv10_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv1(xnow)",
                            "Call"
                        ],
                        [
                            "self.pmconv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv3(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv5(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv6(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv9(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv10(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_hallu, pm], 1)",
                            "Call"
                        ],
                        [
                            "self.allconv11(x)",
                            "Call"
                        ],
                        [
                            "self.allconv12(x)",
                            "Call"
                        ],
                        [
                            "self.allconv13_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.allconv14(x)",
                            "Call"
                        ],
                        [
                            "self.allconv15_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.allconv16(x)",
                            "Call"
                        ],
                        [
                            "self.allconv17(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, ones_x, ones_x * mask], 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "self.conv7_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv8_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv9_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv10_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.conv11(x)",
                            "Call"
                        ],
                        [
                            "self.conv12(x)",
                            "Call"
                        ],
                        [
                            "self.conv13_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv14(x)",
                            "Call"
                        ],
                        [
                            "self.conv15_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv16(x)",
                            "Call"
                        ],
                        [
                            "self.conv17(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "x * mask + xin[:, 0:3, :, :] * (1.0 - mask)",
                            "BinOp"
                        ],
                        [
                            "self.xconv1(xnow)",
                            "Call"
                        ],
                        [
                            "self.xconv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.xconv3(x)",
                            "Call"
                        ],
                        [
                            "self.xconv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.xconv5(x)",
                            "Call"
                        ],
                        [
                            "self.xconv6(x)",
                            "Call"
                        ],
                        [
                            "self.xconv7_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv8_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv9_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.xconv10_atrous(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv1(xnow)",
                            "Call"
                        ],
                        [
                            "self.pmconv2_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv3(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv4_downsample(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv5(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv6(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv9(x)",
                            "Call"
                        ],
                        [
                            "self.pmconv10(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_hallu, pm], 1)",
                            "Call"
                        ],
                        [
                            "self.allconv11(x)",
                            "Call"
                        ],
                        [
                            "self.allconv12(x)",
                            "Call"
                        ],
                        [
                            "self.allconv13_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.allconv14(x)",
                            "Call"
                        ],
                        [
                            "self.allconv15_upsample_conv(x)",
                            "Call"
                        ],
                        [
                            "self.allconv16(x)",
                            "Call"
                        ],
                        [
                            "self.allconv17(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_248": {
                "variable": {
                    "value": "mask_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_87": {
                "tensors": {
                    "value": "(xb, x_skip2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "(xb, x_skip1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/loss.py": {
        "torch": {
            "binary_cross_entropy_with_logits_61": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_101": {
                "variable": {
                    "value": "new_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_tensor.view(bs, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_65": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_69": {
                "variable": {
                    "value": "minval",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_72": {
                "variable": {
                    "value": "minval",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-input - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_76": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softplus_81": {
                "input": {
                    "value": "-input",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_83": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_70": {
                "input": {
                    "value": "minval",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.min(input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ],
                        [
                            "torch.min(-input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_73": {
                "input": {
                    "value": "minval",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.min(input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ],
                        [
                            "torch.min(-input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks/splitcam.py": {
        "torch": {
            "max_9": {
                "variable": {
                    "value": "(val_max, id_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "similar",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(sb == id_max).float().detach()",
                            "Call"
                        ],
                        [
                            "ss.view(b, n_h * s_h * n_w * s_w, n_h * s_h, n_w * s_w)",
                            "Call"
                        ],
                        [
                            "self.cam_1(q_im, k_im, msk_q)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_11": {
                "variable": {
                    "value": "sb",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_41": {
                "variable": {
                    "value": "_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x / torch.sqrt((x ** 2).sum(3, keepdim=True).sum(2, keepdim=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "label_up % (wt // sf) * sf + offset_x.to(label.device) % sf",
                            "BinOp"
                        ],
                        [
                            "(x + 1) / float(wt + 1) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pd, self.pd, self.pd, self.pd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unfold_42": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.pad(x, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.bkg_patch_size, self.bkg_patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.ufstride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_49": {
                "variable": {
                    "value": "_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.ones(batch, 1, h_small, w_small).to(f.device)",
                            "Call"
                        ],
                        [
                            "1 - mask",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pd, self.pd, self.pd, self.pd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unfold_50": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(mask, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(mask, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(mask, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.bkg_patch_size, self.bkg_patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.ufstride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_68": {
                "variable": {
                    "value": "_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(self.pd, self.pd, self.pd, self.pd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_105": {
                "variable": {
                    "value": "cos_similar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_similar * softmax_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_126": {
                "variable": {
                    "value": "_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pd, self.pd, self.pd, self.pd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unfold_127": {
                "variable": {
                    "value": "bkg_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(b, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(b, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.aux_patch_size, self.aux_patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.ufstride_aux",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_134": {
                "variable": {
                    "value": "_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.ones(batch, 1, h_small, w_small).to(f.device)",
                            "Call"
                        ],
                        [
                            "1 - mask",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pd, self.pd, self.pd, self.pd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unfold_135": {
                "variable": {
                    "value": "msk_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(mask, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(mask, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(mask, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.bkg_patch_size, self.bkg_patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.ufstride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_138": {
                "variable": {
                    "value": "_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pd, self.pd, self.pd, self.pd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unfold_139": {
                "variable": {
                    "value": "bkg_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(b, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(b, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.bkg_patch_size, self.bkg_patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.ufstride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_155": {
                "variable": {
                    "value": "norm_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.bkg_patch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.bkg_patch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_156": {
                "variable": {
                    "value": "weight_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "ws",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv_transpose2d_157": {
                "variable": {
                    "value": "weight_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(1, 1, hs, ws).to(mask.device)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(weight_map, norm_kernel, stride=self.stride)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "norm_kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(1, 1, self.bkg_patch_size, self.bkg_patch_size).to(mask.device)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_204": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.grid_size, self.grid_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.grid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_245": {
                "variable": {
                    "value": "(offset_y, offset_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(ht)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(wt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_252": {
                "variable": {
                    "value": "recon_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "torch.stack((x, y), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_61": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h_small",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w_small",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_74": {
                "variable": {
                    "value": "fuse_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.fuse_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_77": {
                "variable": {
                    "value": "cos_similar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_similar",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batch_conv2d(_f, weight=kernel, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "cos_similar.view(-1, cs, hs * ws)[:, None, ...]",
                            "Subscript"
                        ],
                        [
                            "F.conv2d(cos_similar, fuse_weight, stride=1, padding=1)",
                            "Call"
                        ],
                        [
                            "cos_similar.view(batch, 1, hb, wb, hs, ws)",
                            "Call"
                        ],
                        [
                            "cos_similar.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "cos_similar.transpose(4, 5)",
                            "Call"
                        ],
                        [
                            "cos_similar.reshape(batch, 1, cs, hs * ws)",
                            "Call"
                        ],
                        [
                            "F.conv2d(cos_similar, fuse_weight, stride=1, padding=1)",
                            "Call"
                        ],
                        [
                            "cos_similar.view(batch, 1, hb, wb, hs, ws)",
                            "Call"
                        ],
                        [
                            "cos_similar.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "cos_similar.transpose(4, 5)",
                            "Call"
                        ],
                        [
                            "cos_similar.squeeze(1)",
                            "Call"
                        ],
                        [
                            "cos_similar.reshape(batch, cs, hs, ws)",
                            "Call"
                        ],
                        [
                            "cos_similar * mm",
                            "BinOp"
                        ],
                        [
                            "F.softmax(cos_similar * softmax_scale, dim=1)",
                            "Call"
                        ],
                        [
                            "hardmax(cos_similar)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "fuse_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.eye(self.fuse_k).to(f.device)",
                            "Call"
                        ],
                        [
                            "fuse_weight[None, None, ...]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_82": {
                "variable": {
                    "value": "cos_similar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_similar",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batch_conv2d(_f, weight=kernel, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "cos_similar.view(-1, cs, hs * ws)[:, None, ...]",
                            "Subscript"
                        ],
                        [
                            "F.conv2d(cos_similar, fuse_weight, stride=1, padding=1)",
                            "Call"
                        ],
                        [
                            "cos_similar.view(batch, 1, hb, wb, hs, ws)",
                            "Call"
                        ],
                        [
                            "cos_similar.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "cos_similar.transpose(4, 5)",
                            "Call"
                        ],
                        [
                            "cos_similar.reshape(batch, 1, cs, hs * ws)",
                            "Call"
                        ],
                        [
                            "F.conv2d(cos_similar, fuse_weight, stride=1, padding=1)",
                            "Call"
                        ],
                        [
                            "cos_similar.view(batch, 1, hb, wb, hs, ws)",
                            "Call"
                        ],
                        [
                            "cos_similar.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "cos_similar.transpose(4, 5)",
                            "Call"
                        ],
                        [
                            "cos_similar.squeeze(1)",
                            "Call"
                        ],
                        [
                            "cos_similar.reshape(batch, cs, hs, ws)",
                            "Call"
                        ],
                        [
                            "cos_similar * mm",
                            "BinOp"
                        ],
                        [
                            "F.softmax(cos_similar * softmax_scale, dim=1)",
                            "Call"
                        ],
                        [
                            "hardmax(cos_similar)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "fuse_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.eye(self.fuse_k).to(f.device)",
                            "Call"
                        ],
                        [
                            "fuse_weight[None, None, ...]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_92": {
                "variable": {
                    "value": "_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.ones(batch, 1, h_small, w_small).to(f.device)",
                            "Call"
                        ],
                        [
                            "1 - mask",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pd, self.pd, self.pd, self.pd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unfold_93": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(mask, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(mask, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(mask, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.bkg_patch_size, self.bkg_patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_embed_232": {
                "variable": {
                    "value": "ss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Tensor(range(num)).long().to(similar.device)",
                            "Call"
                        ],
                        [
                            "sb[None, ..., None, None]",
                            "Subscript"
                        ],
                        [
                            "_similar.view(b, n_h * n_w, -1).transpose(1, 2).reshape(b, s_h, s_w, s_h, s_w, n_h * n_w)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim2": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_244": {
                "input": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "sf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ht // hs * self.patch_size",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_245": {
                "start": {
                    "value": "wt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_252": {
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_40": {
                "input": {
                    "value": "(x ** 2).sum(3, keepdim=True).sum(2, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_46": {
                "input": {
                    "value": "(kernel ** 2).sum(3, keepdim=True).sum(4, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks/utils.py": {
        "torch": {
            "conv2d_91": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x[None, ...].view(1, b_i * c, h, w)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, weight=weight, bias=None, stride=stride, dilation=dilation, groups=b_i, padding=padding)",
                            "Call"
                        ],
                        [
                            "out.view(b_i, out_channels, out.shape[-2], out.shape[-1])",
                            "Call"
                        ],
                        [
                            "out + bias.unsqueeze(2).unsqueeze(3)",
                            "BinOp"
                        ],
                        [
                            "x[None, ...].view(1, b_i * c, h, w)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(out, weight=weight, bias=None, stride=stride, dilation=dilation, groups=b_i, padding=padding, output_padding=output_padding)",
                            "Call"
                        ],
                        [
                            "out.view(b_i, out_channels, out.shape[-2], out.shape[-1])",
                            "Call"
                        ],
                        [
                            "out + bias.unsqueeze(2).unsqueeze(3)",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "weight.contiguous().view(b_i * out_channels, in_channels, kernel_height_size, kernel_width_size)",
                            "Call"
                        ],
                        [
                            "weight.contiguous().view(in_channels * b_i, out_channels, kernel_height_size, kernel_width_size)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "b_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv_transpose2d_121": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x[None, ...].view(1, b_i * c, h, w)",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, weight=weight, bias=None, stride=stride, dilation=dilation, groups=b_i, padding=padding)",
                            "Call"
                        ],
                        [
                            "out.view(b_i, out_channels, out.shape[-2], out.shape[-1])",
                            "Call"
                        ],
                        [
                            "out + bias.unsqueeze(2).unsqueeze(3)",
                            "BinOp"
                        ],
                        [
                            "x[None, ...].view(1, b_i * c, h, w)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(out, weight=weight, bias=None, stride=stride, dilation=dilation, groups=b_i, padding=padding, output_padding=output_padding)",
                            "Call"
                        ],
                        [
                            "out.view(b_i, out_channels, out.shape[-2], out.shape[-1])",
                            "Call"
                        ],
                        [
                            "out + bias.unsqueeze(2).unsqueeze(3)",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "weight.contiguous().view(b_i * out_channels, in_channels, kernel_height_size, kernel_width_size)",
                            "Call"
                        ],
                        [
                            "weight.contiguous().view(in_channels * b_i, out_channels, kernel_height_size, kernel_width_size)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "b_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_133": {
                "variable": {
                    "value": "(val_max, id_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "similar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(sb == id_max).float().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_135": {
                "variable": {
                    "value": "sb",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_29": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "super(gen_conv, self).forward(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x * y",
                            "BinOp"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "super(gen_deconv, self).forward(x)",
                            "Call"
                        ],
                        [
                            "super(dis_conv, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "x / torch.sqrt((x ** 2).sum(3, keepdim=True).sum(2, keepdim=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "int(self.out_channels / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_31": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "super(gen_conv, self).forward(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x * y",
                            "BinOp"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "super(gen_deconv, self).forward(x)",
                            "Call"
                        ],
                        [
                            "super(dis_conv, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "x / torch.sqrt((x ** 2).sum(3, keepdim=True).sum(2, keepdim=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "super(gen_conv, self).forward(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x * y",
                            "BinOp"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "super(gen_deconv, self).forward(x)",
                            "Call"
                        ],
                        [
                            "super(dis_conv, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "x / torch.sqrt((x ** 2).sum(3, keepdim=True).sum(2, keepdim=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pad_158": {
                "variable": {
                    "value": "_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "super(gen_conv, self).forward(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x * y",
                            "BinOp"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "super(gen_deconv, self).forward(x)",
                            "Call"
                        ],
                        [
                            "super(dis_conv, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "x / torch.sqrt((x ** 2).sum(3, keepdim=True).sum(2, keepdim=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pd, self.pd, self.pd, self.pd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unfold_159": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.pad(x, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.bkg_patch_size, self.bkg_patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.ufstride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_163": {
                "variable": {
                    "value": "_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.ones(batch, 1, h_small, w_small).to(f.device)",
                            "Call"
                        ],
                        [
                            "1 - mask",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pd, self.pd, self.pd, self.pd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unfold_164": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(mask, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(mask, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(mask, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.bkg_patch_size, self.bkg_patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.ufstride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_182": {
                "variable": {
                    "value": "_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(self.pd, self.pd, self.pd, self.pd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_203": {
                "variable": {
                    "value": "_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.ones(batch, 1, h_small, w_small).to(f.device)",
                            "Call"
                        ],
                        [
                            "1 - mask",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pd, self.pd, self.pd, self.pd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unfold_204": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(mask, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(mask, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(mask, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.bkg_patch_size, self.bkg_patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_216": {
                "variable": {
                    "value": "cos_similar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_similar * softmax_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_234": {
                "variable": {
                    "value": "_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.ones(batch, 1, h_small, w_small).to(f.device)",
                            "Call"
                        ],
                        [
                            "1 - mask",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pd, self.pd, self.pd, self.pd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unfold_235": {
                "variable": {
                    "value": "msk_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(mask, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(mask, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(mask, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.bkg_patch_size, self.bkg_patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.ufstride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_238": {
                "variable": {
                    "value": "_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(self.pd, self.pd, self.pd, self.pd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unfold_239": {
                "variable": {
                    "value": "bkg_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.pad(b, (self.pd, self.pd, self.pd, self.pd), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.bkg_patch_size, self.bkg_patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.ufstride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_254": {
                "variable": {
                    "value": "norm_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.bkg_patch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.bkg_patch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_255": {
                "variable": {
                    "value": "weight_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "ws",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv_transpose2d_256": {
                "variable": {
                    "value": "weight_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(1, 1, hs, ws).to(mask.device)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(weight_map, norm_kernel, stride=self.stride)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "norm_kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(1, 1, self.bkg_patch_size, self.bkg_patch_size).to(mask.device)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ELU_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_175": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h_small",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w_small",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_188": {
                "variable": {
                    "value": "fuse_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.fuse_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_191": {
                "variable": {
                    "value": "cos_similar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_similar",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batch_conv2d(_f, weight=kernel, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "cos_similar.view(-1, cs, hs * ws)[:, None, ...]",
                            "Subscript"
                        ],
                        [
                            "F.conv2d(cos_similar, fuse_weight, stride=1, padding=1)",
                            "Call"
                        ],
                        [
                            "cos_similar.view(batch, 1, hb, wb, hs, ws)",
                            "Call"
                        ],
                        [
                            "cos_similar.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "cos_similar.transpose(4, 5)",
                            "Call"
                        ],
                        [
                            "cos_similar.reshape(batch, 1, cs, hs * ws)",
                            "Call"
                        ],
                        [
                            "F.conv2d(cos_similar, fuse_weight, stride=1, padding=1)",
                            "Call"
                        ],
                        [
                            "cos_similar.view(batch, 1, hb, wb, hs, ws)",
                            "Call"
                        ],
                        [
                            "cos_similar.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "cos_similar.transpose(4, 5)",
                            "Call"
                        ],
                        [
                            "cos_similar.squeeze(1)",
                            "Call"
                        ],
                        [
                            "cos_similar.reshape(batch, cs, hs, ws)",
                            "Call"
                        ],
                        [
                            "cos_similar * mm",
                            "BinOp"
                        ],
                        [
                            "F.softmax(cos_similar * softmax_scale, dim=1)",
                            "Call"
                        ],
                        [
                            "hardmax(cos_similar)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "fuse_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.eye(self.fuse_k).to(f.device)",
                            "Call"
                        ],
                        [
                            "fuse_weight[None, None, ...]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_196": {
                "variable": {
                    "value": "cos_similar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_similar",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batch_conv2d(_f, weight=kernel, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "cos_similar.view(-1, cs, hs * ws)[:, None, ...]",
                            "Subscript"
                        ],
                        [
                            "F.conv2d(cos_similar, fuse_weight, stride=1, padding=1)",
                            "Call"
                        ],
                        [
                            "cos_similar.view(batch, 1, hb, wb, hs, ws)",
                            "Call"
                        ],
                        [
                            "cos_similar.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "cos_similar.transpose(4, 5)",
                            "Call"
                        ],
                        [
                            "cos_similar.reshape(batch, 1, cs, hs * ws)",
                            "Call"
                        ],
                        [
                            "F.conv2d(cos_similar, fuse_weight, stride=1, padding=1)",
                            "Call"
                        ],
                        [
                            "cos_similar.view(batch, 1, hb, wb, hs, ws)",
                            "Call"
                        ],
                        [
                            "cos_similar.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "cos_similar.transpose(4, 5)",
                            "Call"
                        ],
                        [
                            "cos_similar.squeeze(1)",
                            "Call"
                        ],
                        [
                            "cos_similar.reshape(batch, cs, hs, ws)",
                            "Call"
                        ],
                        [
                            "cos_similar * mm",
                            "BinOp"
                        ],
                        [
                            "F.softmax(cos_similar * softmax_scale, dim=1)",
                            "Call"
                        ],
                        [
                            "hardmax(cos_similar)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "fuse_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.eye(self.fuse_k).to(f.device)",
                            "Call"
                        ],
                        [
                            "fuse_weight[None, None, ...]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_157": {
                "input": {
                    "value": "(x ** 2).sum(3, keepdim=True).sum(2, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "options/base_options.py": {
        "torch": {
            "set_device_166": {
                "device": {
                    "value": "opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "clamp_23": {
                "variable": {
                    "value": "generated",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "generated",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(generated, -1, 1)",
                            "Call"
                        ],
                        [
                            "(generated + 1) / 2 * 255",
                            "BinOp"
                        ],
                        [
                            "generated.cpu().numpy().astype(np.uint8)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "clamp_66": {
                "variable": {
                    "value": "vis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vis",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(make_grid(inp[:num_print]) + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "(make_grid(infer_out[:num_print]) + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(vis, 0, 1)",
                            "Call"
                        ],
                        [
                            "make_grid(v[:num_print].expand(-1, 3, -1, -1))[0]",
                            "Subscript"
                        ],
                        [
                            "(make_grid(v[:num_print]) + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(vis, 0, 1)",
                            "Call"
                        ],
                        [
                            "make_grid(v[:num_print])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_82": {
                "variable": {
                    "value": "vis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vis",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(make_grid(inp[:num_print]) + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "(make_grid(infer_out[:num_print]) + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(vis, 0, 1)",
                            "Call"
                        ],
                        [
                            "make_grid(v[:num_print].expand(-1, 3, -1, -1))[0]",
                            "Subscript"
                        ],
                        [
                            "(make_grid(v[:num_print]) + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(vis, 0, 1)",
                            "Call"
                        ],
                        [
                            "make_grid(v[:num_print])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log10_111": {
                "input": {
                    "value": "255.0 * 255.0 / (mse + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "trainers/stylegan2_trainer.py": {
        "torch": {
            "Tensor_21": {
                "variable": {
                    "value": "self.mean_path_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "util/util.py": {
        "torch": {
            "load_204": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoints_dir, opt.name, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_221": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoints_dir, opt.name, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_199": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoints_dir, opt.name, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_294": {
                "variable": {
                    "value": "self.cmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}