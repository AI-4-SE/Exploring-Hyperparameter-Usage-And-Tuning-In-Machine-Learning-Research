{
    "train.py": {
        "torch": {
            "DataLoader_89": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.__dict__[args.dataset.upper()]('../data', train=True, download=True, transform=transform_train)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_93": {
                "variable": {
                    "value": "val_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.__dict__[args.dataset.upper()]('../data', train=False, transform=transform_test)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_126": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SGD_127": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_132": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), args.lr, momentum=args.momentum, nesterov=args.nesterov, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "len(train_loader) * args.epochs",
                    "possible_values": []
                }
            },
            "save_246": {
                "obj": {
                    "value": "state",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "possible_values": [
                        [
                            "directory + filename",
                            "BinOp"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_114": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "possible_values": []
                }
            },
            "no_grad_211": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "pad_69": {
                "input": {
                    "value": "x.unsqueeze(0)",
                    "possible_values": []
                },
                "pad": {
                    "value": "(4, 4, 4, 4)",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "possible_values": []
                }
            },
            "squeeze_69": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "wideresnet.py": {
        "torch": {
            "BasicBlock_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "BatchNorm2d_10": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "in_planes",
                        "possible_values": []
                    }
                },
                "ReLU_11": {
                    "variable": {
                        "value": "self.relu1",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Conv2d_12": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_14": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "out_planes",
                        "possible_values": []
                    }
                },
                "ReLU_15": {
                    "variable": {
                        "value": "self.relu2",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Conv2d_16": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "out_planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "self.droprate": {
                    "value": "dropRate",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "NetworkBlock_33": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "WideResNet_45": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "block": {
                    "value": "BasicBlock",
                    "possible_values": []
                },
                "Conv2d_53": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "3",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "nChannels[0]",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_62": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "nChannels[3]",
                        "possible_values": []
                    }
                },
                "ReLU_63": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Linear_64": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "nChannels[3]",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": []
                    }
                }
            },
            "avg_pool2d_81": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "possible_values": []
                }
            },
            "dropout_29": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "add_31": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_41": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    }
}