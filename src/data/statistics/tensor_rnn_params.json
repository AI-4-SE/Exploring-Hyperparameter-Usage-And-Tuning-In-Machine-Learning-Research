{
    "tensor_rnn/example/polymusic/run_cpgru.py": {
        "sklearn": {
            "ParameterGrid_17": {
                "param_grid": {
                    "value": "hparams",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[{'data': ['jsb', 'nottingham', 'pianomidi', 'musedata'], 'inmodes': ['4 4 4 4'], 'outmodes': ['8 4 4 4'], 'rnntype': ['cpgru'], 'order': [50, 80, 110], 'lr': [0.005, 0.01], 'do': [0.2, 0.5]}]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "tensor_rnn/example/polymusic/run_gru.py": {
        "sklearn": {
            "ParameterGrid_17": {
                "param_grid": {
                    "value": "hparams",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[{'data': ['jsb', 'nottingham'], 'inmodes': [256], 'outmodes': [512], 'rnntype': ['gru'], 'lr': [0.0025], 'do': [0.3], 'epochs': [100]}]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "tensor_rnn/example/polymusic/run_ttgru.py": {
        "sklearn": {
            "ParameterGrid_19": {
                "param_grid": {
                    "value": "hparams",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[{'data': ['pianomidi', 'musedata'], 'inmodes': ['4 4 4 4'], 'outmodes': ['8 4 4 4'], 'rnntype': ['ttgru'], 'ranks': ['1 11 11 11 1'], 'lr': [0.005, 0.01], 'do': [0.2, 0.5], 'batchsize': [8]}]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "tensor_rnn/example/polymusic/run_tuckergru.py": {
        "sklearn": {
            "ParameterGrid_17": {
                "param_grid": {
                    "value": "hparams",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[{'data': ['jsb', 'nottingham', 'pianomidi', 'musedata'], 'inmodes': ['4 4 4 4'], 'outmodes': ['8 4 4 4', '8 4 8 4'], 'rnntype': ['tuckergru'], 'ranks': ['2 2 2 2', '2 4 2 4'], 'lr': [0.005, 0.01], 'do': [0.2, 0.5]}]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "tensor_rnn/example/decomposition/decomposition_cptensor.py": {
        "torch": {
            "device_9": {
                "variable": {
                    "value": "MAIN_DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_30": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pred_factors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "candecomp._create_candecomp_cores_unconstrained(M, order=ORDER)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.005",
                    "type": "Constant",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tensor_rnn/example/polymusic/poly_allrnn.py": {
        "torch": {
            "manual_seed_56": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.prenet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "88",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_sizes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(np.prod(in_modes))",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_77": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.postnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_sizes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(np.prod(out_modes))",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "88",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_106": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prenet(x.view(-1, 88)).view(batch, max_seq_len, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_117": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_115": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Call",
                    "possible_values": [
                        [
                            "res[:, ii].contiguous()",
                            "Call"
                        ],
                        [
                            "self.rnn[jj](hidden)",
                            "Call"
                        ],
                        [
                            "hidden[0]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(hidden, p=dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.do",
                            "Attribute"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "ndarray": {
                    "value": "curr_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(tensorauto(model, torch.from_numpy(curr_input)))",
                            "Call"
                        ],
                        [
                            "Variable(tensorauto(model, torch.from_numpy(curr_input)))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_148": {
                "ndarray": {
                    "value": "curr_target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(tensorauto(model, torch.from_numpy(curr_target)))",
                            "Call"
                        ],
                        [
                            "Variable(tensorauto(model, torch.from_numpy(curr_target)))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_149": {
                "ndarray": {
                    "value": "curr_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(tensorauto(model, torch.from_numpy(curr_mask)))",
                            "Call"
                        ],
                        [
                            "Variable(tensorauto(model, torch.from_numpy(curr_mask)))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_181": {
                "ndarray": {
                    "value": "curr_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(tensorauto(model, torch.from_numpy(curr_input)))",
                            "Call"
                        ],
                        [
                            "Variable(tensorauto(model, torch.from_numpy(curr_input)))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_182": {
                "ndarray": {
                    "value": "curr_target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(tensorauto(model, torch.from_numpy(curr_target)))",
                            "Call"
                        ],
                        [
                            "Variable(tensorauto(model, torch.from_numpy(curr_target)))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_183": {
                "ndarray": {
                    "value": "curr_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(tensorauto(model, torch.from_numpy(curr_mask)))",
                            "Call"
                        ],
                        [
                            "Variable(tensorauto(model, torch.from_numpy(curr_mask)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_160": {
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(curr_input)",
                            "Call"
                        ],
                        [
                            "model(curr_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_190": {
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(curr_input)",
                            "Call"
                        ],
                        [
                            "model(curr_input)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tensor_rnn/modules/candecomp.py": {
        "torch": {
            "ParameterList_17": {
                "variable": {
                    "value": "list_cores",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "list_cores",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "ParameterList(list_cores)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "ParameterList(list_cores)",
                            "Call"
                        ]
                    ]
                }
            },
            "ParameterList_25": {
                "variable": {
                    "value": "list_cores",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "list_cores",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "ParameterList(list_cores)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "ParameterList(list_cores)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(int(np.prod(out_modes)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_91": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.W_linear.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bilinear_125": {
                "input1": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input2": {
                    "value": "input2",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "data": {
                    "value": "torch.Tensor(mm, order).zero_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "data": {
                    "value": "torch.Tensor(mm, order).zero_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_72": {
                "mean": {
                    "value": "self.factors[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "std": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "CONST",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(0.05 / self.order ** 0.5) ** (1.0 / (len(self.in_modes) + len(self.out_modes)))",
                            "BinOp"
                        ],
                        [
                            "(0.05 / self.order ** 0.5) ** (1.0 / 3.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "normal_115": {
                "mean": {
                    "value": "self.factors[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "std": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "CONST",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(0.05 / self.order ** 0.5) ** (1.0 / (len(self.in_modes) + len(self.out_modes)))",
                            "BinOp"
                        ],
                        [
                            "(0.05 / self.order ** 0.5) ** (1.0 / 3.0)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tensor_rnn/modules/composite/cprnn.py": {
        "torch": {
            "split_61": {
                "variable": {
                    "value": "(pre_rih, pre_zih, pre_nih)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.weight_ih(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_62": {
                "variable": {
                    "value": "(pre_rhh, pre_zhh, pre_nhh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.weight_hh(h0)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_63": {
                "variable": {
                    "value": "r_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_rih + pre_rhh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_64": {
                "variable": {
                    "value": "z_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_zih + pre_zhh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_65": {
                "variable": {
                    "value": "c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_nih + r_t * pre_nhh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_119": {
                "variable": {
                    "value": "(pre_iih, pre_fih, pre_gih, pre_oih)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.weight_ih(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_120": {
                "variable": {
                    "value": "(pre_ihh, pre_fhh, pre_ghh, pre_ohh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.weight_hh(h0)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_121": {
                "variable": {
                    "value": "i_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_iih + pre_ihh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "variable": {
                    "value": "f_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_fih + pre_fhh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "variable": {
                    "value": "o_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_oih + pre_ohh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_124": {
                "variable": {
                    "value": "g_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_gih + pre_ghh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_126": {
                "input": {
                    "value": "c_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.tanh(pre_nih + r_t * pre_nhh)",
                            "Call"
                        ],
                        [
                            "f_t * c0 + i_t * g_t",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tensor_rnn/modules/composite/ttrnn.py": {
        "torch": {
            "split_53": {
                "variable": {
                    "value": "(pre_rih, pre_zih, pre_nih)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.weight_ih(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_54": {
                "variable": {
                    "value": "(pre_rhh, pre_zhh, pre_nhh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.weight_hh(h0)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_55": {
                "variable": {
                    "value": "r_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_rih + pre_rhh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "variable": {
                    "value": "z_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_zih + pre_zhh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_57": {
                "variable": {
                    "value": "c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_nih + r_t * pre_nhh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_102": {
                "variable": {
                    "value": "(pre_iih, pre_fih, pre_gih, pre_oih)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.weight_ih(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_103": {
                "variable": {
                    "value": "(pre_ihh, pre_fhh, pre_ghh, pre_ohh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.weight_hh(h0)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_104": {
                "variable": {
                    "value": "i_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_iih + pre_ihh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_105": {
                "variable": {
                    "value": "f_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_fih + pre_fhh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_106": {
                "variable": {
                    "value": "o_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_oih + pre_ohh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_107": {
                "variable": {
                    "value": "g_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_gih + pre_ghh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_109": {
                "input": {
                    "value": "c_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.tanh(pre_nih + r_t * pre_nhh)",
                            "Call"
                        ],
                        [
                            "f_t * c0 + i_t * g_t",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tensor_rnn/modules/composite/tuckerrnn.py": {
        "torch": {
            "split_60": {
                "variable": {
                    "value": "(pre_rih, pre_zih, pre_nih)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.weight_ih(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_61": {
                "variable": {
                    "value": "(pre_rhh, pre_zhh, pre_nhh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.weight_hh(h0)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_62": {
                "variable": {
                    "value": "r_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_rih + pre_rhh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_63": {
                "variable": {
                    "value": "z_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_zih + pre_zhh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_64": {
                "variable": {
                    "value": "c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_nih + r_t * pre_nhh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_117": {
                "variable": {
                    "value": "(pre_iih, pre_fih, pre_gih, pre_oih)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.weight_ih(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_118": {
                "variable": {
                    "value": "(pre_ihh, pre_fhh, pre_ghh, pre_ohh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.weight_hh(h0)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_119": {
                "variable": {
                    "value": "i_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_iih + pre_ihh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_120": {
                "variable": {
                    "value": "f_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_fih + pre_fhh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_121": {
                "variable": {
                    "value": "o_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_oih + pre_ohh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_122": {
                "variable": {
                    "value": "g_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_gih + pre_ghh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_124": {
                "input": {
                    "value": "c_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.tanh(pre_nih + r_t * pre_nhh)",
                            "Call"
                        ],
                        [
                            "f_t * c0 + i_t * g_t",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tensor_rnn/modules/loss.py": {
        "torch": {}
    },
    "tensor_rnn/modules/rnn.py": {
        "torch": {
            "LSTMCell_33": {
                "variable": {
                    "value": "self.rnn_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GRUCell_66": {
                "variable": {
                    "value": "self.rnn_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tensor_rnn/modules/tensor_train.py": {
        "torch": {
            "ParameterList_15": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "list_tt_cores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_28": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "res",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "res.view(-1, int(np.prod(in_modes)))",
                            "Call"
                        ],
                        [
                            "res.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "res.contiguous()",
                            "Call"
                        ],
                        [
                            "res.view(ranks[ii] * in_modes[ii], -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(weight[ii], res)",
                            "Call"
                        ],
                        [
                            "res.view(out_modes[ii], -1)",
                            "Call"
                        ],
                        [
                            "res.transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "res.contiguous()",
                            "Call"
                        ],
                        [
                            "res.view(-1, int(np.prod(out_modes)))",
                            "Call"
                        ],
                        [
                            "res + bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(int(np.prod(out_modes)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_14": {
                "data": {
                    "value": "torch.Tensor(out_modes[ii] * ranks[ii + 1], in_modes[ii] * ranks[ii])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_64": {
                "mean": {
                    "value": "self.weight[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "std": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "CONST",
                    "type": "Name",
                    "possible_values": [
                        [
                            "((0.05 ** 2 / np.prod(self.ranks)) ** (1 / (len(self.ranks) - 1))) ** 0.5",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tensor_rnn/modules/tucker.py": {
        "torch": {
            "Parameter_12": {
                "variable": {
                    "value": "core",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*list(ranks + ranks)).normal_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ParameterList_16": {
                "variable": {
                    "value": "factors",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "factors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "ParameterList(factors)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(int(np.prod(out_modes)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_65": {
                "mean": {
                    "value": "self.core",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "CONST",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0.05 / np.prod(self.ranks + self.ranks) ** 0.5) ** (1.0 / (len(self.in_modes) + len(self.out_modes) + 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_86": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.W_linear.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "data": {
                    "value": "torch.Tensor(mm, rr).normal_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_67": {
                "mean": {
                    "value": "self.factors[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "std": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "CONST",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0.05 / np.prod(self.ranks + self.ranks) ** 0.5) ** (1.0 / (len(self.in_modes) + len(self.out_modes) + 1))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tensor_rnn/utils/helper.py": {
        "torch": {}
    }
}