{
    "classification.py": {
        "sklearn": {
            "train_test_split_63": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.pop('seeds')",
                            "Call"
                        ]
                    ]
                }
            },
            "SVC_64": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_67": {
                "variable": {
                    "value": "(precision, recall, f1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(X_test)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "euclidean_distances_54": {
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "twembeddings/clustering_algo.py": {
        "sklearn": {
            "normalize_12": {
                "variable": {
                    "value": "x_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "copy": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_13": {
                "variable": {
                    "value": "y_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "copy": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "NearestNeighbors_63": {
                "variable": {
                    "value": "nn",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "brute",
                    "type": "str",
                    "possible_values": []
                },
                "metric": {
                    "value": "self.distance",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "twembeddings/embeddings.py": {
        "sklearn": {
            "CountVectorizer_145": {
                "variable": {
                    "value": "fit_model",
                    "type": "variable",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "self.stop_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "self.tokenizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CountVectorizer_157": {
                "variable": {
                    "value": "count_model",
                    "type": "variable",
                    "possible_values": []
                },
                "binary": {
                    "value": "self.binary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vocabulary": {
                    "value": "self.features_names",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "self.tokenizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TfidfTransformer_195": {
                "variable": {
                    "value": "transformer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TruncatedSVD_202": {
                "variable": {
                    "value": "svd",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normalizer_203": {
                "variable": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "make_pipeline_204": {
                "variable": {
                    "value": "lsa",
                    "type": "variable",
                    "possible_values": []
                },
                "*steps": {
                    "value": "svd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TruncatedSVD(n_components=n_components, random_state=42)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "memory": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normalizer(copy=False)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "Graph_288": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_302": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_290": {
                "variable": {
                    "value": "self.text_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_298": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[tf.global_variables_initializer(), tf.tables_initializer()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_255": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "twembeddings/eval.py": {
        "sklearn": {
            "OrdinalEncoder_63": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distances_25": {
                "variable": {
                    "value": "pairwise_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "vectors[data.label == ilabel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "Y": {
                    "value": "vectors[data.label == jlabel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "metric": {
                    "value": "cosine",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}