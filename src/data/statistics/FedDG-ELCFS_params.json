{
    "dataloaders/fundus_dataloader.py": {
        "torch": {
            "from_numpy_201": {
                "ndarray": {
                    "value": "sample['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_202": {
                "ndarray": {
                    "value": "sample['onehot_label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_204": {
                "ndarray": {
                    "value": "sample['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dataloaders/utils.py": {
        "torch": {
            "from_numpy_77": {
                "variable": {
                    "value": "rgb_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(rgb_masks).transpose([0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_128": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_130": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.from_numpy(np.array(weight)).float().cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_156": {
                "variable": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "match == 2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_157": {
                "variable": {
                    "value": "un",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "match > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_130": {
                "ndarray": {
                    "value": "np.array(weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_180": {
                "input": {
                    "value": "pred_tmp ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_195": {
                "input": {
                    "value": "pred_tmp ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "networks/layers.py": {
        "torch": {
            "conv2d_47": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.cuda()",
                            "Call"
                        ],
                        [
                            "weight.cuda()",
                            "Call"
                        ],
                        [
                            "weight.cuda()",
                            "Call"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias.cuda()",
                            "Call"
                        ],
                        [
                            "bias.cuda()",
                            "Call"
                        ],
                        [
                            "bias.cuda()",
                            "Call"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv_transpose2d_56": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.cuda()",
                            "Call"
                        ],
                        [
                            "weight.cuda()",
                            "Call"
                        ],
                        [
                            "weight.cuda()",
                            "Call"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias.cuda()",
                            "Call"
                        ],
                        [
                            "bias.cuda()",
                            "Call"
                        ],
                        [
                            "bias.cuda()",
                            "Call"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_59": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_63": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_67": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_norm_70": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "running_mean",
                            "Method Argument"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "running_var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "instance_norm_80": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "group_norm_83": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout2d_86": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_89": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "upsample_92": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linear_35": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight - grad_weight * meta_step_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias_adapt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias - grad_bias * meta_step_size",
                            "BinOp"
                        ],
                        [
                            "bias",
                            "variable"
                        ],
                        [
                            "bias - grad_bias * meta_step_size",
                            "BinOp"
                        ],
                        [
                            "bias",
                            "variable"
                        ]
                    ]
                }
            },
            "linear_39": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs.cuda()",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.cuda()",
                            "Call"
                        ],
                        [
                            "weight.cuda()",
                            "Call"
                        ],
                        [
                            "weight.cuda()",
                            "Call"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias.cuda()",
                            "Call"
                        ],
                        [
                            "bias.cuda()",
                            "Call"
                        ],
                        [
                            "bias.cuda()",
                            "Call"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_18": {
                "outputs": {
                    "value": "meta_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.cuda()",
                            "Call"
                        ],
                        [
                            "weight.cuda()",
                            "Call"
                        ],
                        [
                            "weight.cuda()",
                            "Call"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_21": {
                "outputs": {
                    "value": "meta_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias.cuda()",
                            "Call"
                        ],
                        [
                            "bias.cuda()",
                            "Call"
                        ],
                        [
                            "bias.cuda()",
                            "Call"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_27": {
                "outputs": {
                    "value": "meta_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.cuda()",
                            "Call"
                        ],
                        [
                            "weight.cuda()",
                            "Call"
                        ],
                        [
                            "weight.cuda()",
                            "Call"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_30": {
                "outputs": {
                    "value": "meta_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias.cuda()",
                            "Call"
                        ],
                        [
                            "bias.cuda()",
                            "Call"
                        ],
                        [
                            "bias.cuda()",
                            "Call"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "networks/unet2d.py": {
        "torch": {
            "BatchNorm2d_19": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "variable": {
                    "value": "self.seg1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_182": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(y1, self.seg1.weight, self.seg1.bias, kernel_size=None, stride=1, padding=0)",
                            "Call"
                        ],
                        [
                            "conv2d(y1, weights['seg1.weight'], weights['seg1.bias'], kernel_size=None, stride=1, padding=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "GroupNorm_21": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_23": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "test_ELCFS.py": {
        "torch": {
            "from_numpy_82": {
                "variable": {
                    "value": "image_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.expand_dims(image.transpose(2, 0, 1), axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image_test).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_62": {
                "f": {
                    "value": "save_mode_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_path + '/model', 'epoch_' + str(test_net_idx) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_ELCFS.py": {
        "torch": {}
    },
    "utils/losses.py": {
        "torch": {
            "sum_22": {
                "variable": {
                    "value": "intersect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score * target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_23": {
                "variable": {
                    "value": "y_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_24": {
                "variable": {
                    "value": "z_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score",
                            "Method Argument"
                        ],
                        [
                            "score",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_32": {
                "variable": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1 * torch.sum(p * torch.log(p + 1e-06), dim=1) / torch.tensor(np.log(C)).cuda()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_45": {
                "variable": {
                    "value": "input_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_logits",
                            "Method Argument"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_46": {
                "variable": {
                    "value": "target_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_logits",
                            "Method Argument"
                        ],
                        [
                            "target_logits",
                            "Method Argument"
                        ],
                        [
                            "target_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_69": {
                "variable": {
                    "value": "input_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_logits",
                            "Method Argument"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_70": {
                "variable": {
                    "value": "target_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_logits",
                            "Method Argument"
                        ],
                        [
                            "target_logits",
                            "Method Argument"
                        ],
                        [
                            "target_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_84": {
                "variable": {
                    "value": "input_log_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_logits",
                            "Method Argument"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ],
                        [
                            "input_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_85": {
                "variable": {
                    "value": "target_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_logits",
                            "Method Argument"
                        ],
                        [
                            "target_logits",
                            "Method Argument"
                        ],
                        [
                            "target_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_88": {
                "variable": {
                    "value": "kl_div",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_log_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(input_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(target_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_11": {
                "variable": {
                    "value": "intersect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score[:, i, ...] * target[:, i, ...]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_12": {
                "variable": {
                    "value": "z_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score[:, i, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_13": {
                "variable": {
                    "value": "y_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target[:, i, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_101": {
                "input": {
                    "value": "(input1 - input2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "np.log(C)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "np.log(C)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "p * torch.log(p + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_57": {
                "input": {
                    "value": "p * torch.log(p + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_31": {
                "input": {
                    "value": "p + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_57": {
                "input": {
                    "value": "p + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/util.py": {
        "torch": {
            "load_26": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_path.split(',')",
                            "Call"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}