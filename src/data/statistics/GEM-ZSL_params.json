{
    "GEMZSL/data/build.py": {
        "sklearn": {},
        "torch": {
            "from_numpy_104": {
                "variable": {
                    "value": "att_unseen",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "att_unseen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attribute[test_id]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(att_unseen).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "test_label_seen",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_label_seen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label[test_seen_loc].astype(int)",
                            "Call"
                        ],
                        [
                            "idx",
                            "Name"
                        ],
                        [
                            "torch.tensor(test_label_seen)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "test_label_unseen",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_label_unseen",
                    "type": "Call",
                    "possible_values": [
                        [
                            "label[test_unseen_loc].astype(int)",
                            "Call"
                        ],
                        [
                            "idx + num_train",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(test_label_unseen)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "train_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label[trainvalloc].astype(int)",
                            "Call"
                        ],
                        [
                            "idx",
                            "Name"
                        ],
                        [
                            "torch.tensor(train_label)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_108": {
                "variable": {
                    "value": "att_seen",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_att_unique",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attribute[train_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_179": {
                "variable": {
                    "value": "tu_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tu_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TestDataset(test_img_unseen, test_label_unseen, transforms)",
                            "Call"
                        ],
                        [
                            "TestDataset(test_img_unseen, test_label_unseen, transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.TEST.IMS_PER_BATCH",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_185": {
                "variable": {
                    "value": "ts_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ts_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TestDataset(test_img_seen, test_label_seen, transforms)",
                            "Call"
                        ],
                        [
                            "TestDataset(test_img_seen, test_label_seen, transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.TEST.IMS_PER_BATCH",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedSampler_191": {
                "variable": {
                    "value": "tu_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tu_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TestDataset(test_img_unseen, test_label_unseen, transforms)",
                            "Call"
                        ],
                        [
                            "TestDataset(test_img_unseen, test_label_unseen, transforms)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "tu_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tu_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TestDataset(test_img_unseen, test_label_unseen, transforms)",
                            "Call"
                        ],
                        [
                            "TestDataset(test_img_unseen, test_label_unseen, transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.TEST.IMS_PER_BATCH",
                            "Attribute"
                        ]
                    ]
                },
                "sampler": {
                    "value": "tu_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset=tu_data, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedSampler_198": {
                "variable": {
                    "value": "ts_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ts_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TestDataset(test_img_seen, test_label_seen, transforms)",
                            "Call"
                        ],
                        [
                            "TestDataset(test_img_seen, test_label_seen, transforms)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_199": {
                "variable": {
                    "value": "ts_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ts_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TestDataset(test_img_seen, test_label_seen, transforms)",
                            "Call"
                        ],
                        [
                            "TestDataset(test_img_seen, test_label_seen, transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.TEST.IMS_PER_BATCH",
                            "Attribute"
                        ]
                    ]
                },
                "sampler": {
                    "value": "ts_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset=ts_data, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RandomSampler_136": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "args['dataset']",
                            "Subscript"
                        ],
                        [
                            "RandDataset(train_img, train_att, train_label, transforms)",
                            "Call"
                        ],
                        [
                            "EpiDataset(train_img, train_att, train_label, transforms)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchSampler_138": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset, shuffle=True)",
                            "Call"
                        ],
                        [
                            "CategoriesSampler(train_label, n_batch, ways, shots, ep_per_batch)",
                            "Call"
                        ],
                        [
                            "DCategoriesSampler(train_label, n_batch, ways, shots, ep_per_batch)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "ways * shots",
                            "BinOp"
                        ],
                        [
                            "ways * shots",
                            "BinOp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "tr_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "args['dataset']",
                            "Subscript"
                        ],
                        [
                            "RandDataset(train_img, train_att, train_label, transforms)",
                            "Call"
                        ],
                        [
                            "EpiDataset(train_img, train_att, train_label, transforms)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.BatchSampler(sampler, batch_size=batch, drop_last=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_145": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "args['dataset']",
                            "Subscript"
                        ],
                        [
                            "RandDataset(train_img, train_att, train_label, transforms)",
                            "Call"
                        ],
                        [
                            "EpiDataset(train_img, train_att, train_label, transforms)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_147": {
                "variable": {
                    "value": "tr_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "args['dataset']",
                            "Subscript"
                        ],
                        [
                            "RandDataset(train_img, train_att, train_label, transforms)",
                            "Call"
                        ],
                        [
                            "EpiDataset(train_img, train_att, train_label, transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "ways * shots",
                            "BinOp"
                        ],
                        [
                            "ways * shots",
                            "BinOp"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset, shuffle=True)",
                            "Call"
                        ],
                        [
                            "CategoriesSampler(train_label, n_batch, ways, shots, ep_per_batch)",
                            "Call"
                        ],
                        [
                            "DCategoriesSampler(train_label, n_batch, ways, shots, ep_per_batch)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_170": {
                "variable": {
                    "value": "tr_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "args['dataset']",
                            "Subscript"
                        ],
                        [
                            "RandDataset(train_img, train_att, train_label, transforms)",
                            "Call"
                        ],
                        [
                            "EpiDataset(train_img, train_att, train_label, transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset, shuffle=True)",
                            "Call"
                        ],
                        [
                            "CategoriesSampler(train_label, n_batch, ways, shots, ep_per_batch)",
                            "Call"
                        ],
                        [
                            "DCategoriesSampler(train_label, n_batch, ways, shots, ep_per_batch)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "GEMZSL/engine/inferencer.py": {
        "sklearn": {
            "accuracy_score_33": {
                "y_true": {
                    "value": "labels[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "outpred[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_9": {
                "variable": {
                    "value": "cpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_17": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, dim=0)",
                            "Call"
                        ],
                        [
                            "scores - bias",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_18": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "labels.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "bias_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, cls_seen_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "bias_u",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, cls_unseen_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_s, bias_u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(att_seen, att_unseen)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "GEMZSL/data/episode_dataset/dataset.py": {
        "torch": {
            "tensor_11": {
                "variable": {
                    "value": "self.atts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "atts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_12": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "GEMZSL/data/episode_dataset/samplers.py": {
        "torch": {
            "stack_36": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch)",
                            "Call"
                        ],
                        [
                            "batch.view(-1)",
                            "Call"
                        ],
                        [
                            "batch[offset:offset + self.num_samples]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_84": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch)",
                            "Call"
                        ],
                        [
                            "batch.view(-1)",
                            "Call"
                        ],
                        [
                            "batch[offset:offset + self.num_samples]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_34": {
                "variable": {
                    "value": "episode",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "episode",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(episode)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(episode)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_82": {
                "variable": {
                    "value": "episode",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "episode",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(episode)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(episode)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_33": {
                "ndarray": {
                    "value": "l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.choice(self.catlocs[c], self.n_per, replace=False)",
                            "Call"
                        ],
                        [
                            "np.random.choice(self.catlocs[c], self.n_per, replace=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_81": {
                "ndarray": {
                    "value": "l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.choice(self.catlocs[c], self.n_per, replace=False)",
                            "Call"
                        ],
                        [
                            "np.random.choice(self.catlocs[c], self.n_per, replace=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "GEMZSL/data/random_dataset/dataset.py": {
        "torch": {
            "tensor_11": {
                "variable": {
                    "value": "self.atts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "atts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_12": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "GEMZSL/data/test_dataset.py": {
        "torch": {
            "tensor_11": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "GEMZSL/engine/trainer.py": {
        "torch": {
            "stack_24": {
                "variable": {
                    "value": "all_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_losses, dim=0)",
                            "Call"
                        ],
                        [
                            "all_losses / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_file_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "GEMZSL/modeling/GEMModel/GEMNet.py": {
        "torch": {
            "device_222": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "self.w2v_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "w2v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "nn.init.normal_(torch.empty(self.w2v_att.shape[1], self.feat_channel))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "nn.init.normal_(torch.empty(self.feat_channel, self.attritube_num))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MSELoss_56": {
                "variable": {
                    "value": "self.Reg_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_57": {
                "variable": {
                    "value": "self.CLS_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_71": {
                "variable": {
                    "value": "global_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(N, C, W * H)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_73": {
                "variable": {
                    "value": "gs_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bc,cd->bd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "global_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, kernel_size=(W, H))",
                            "Call"
                        ],
                        [
                            "global_feat.view(N, C)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_75": {
                "variable": {
                    "value": "gs_feat_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gs_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('bc,cd->bd', global_feat, self.V)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "variable": {
                    "value": "gs_feat_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_78": {
                "variable": {
                    "value": "temp_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seen_att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_78": {
                "variable": {
                    "value": "temp_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_81": {
                "variable": {
                    "value": "cos_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bd,nd->bn",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "gs_feat_normalized",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gs_feat.div(gs_feat_norm + 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_92": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lw,wv->lv",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.w2v_att",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_94": {
                "variable": {
                    "value": "atten_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lv,bvr->blr",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('lw,wv->lv', self.w2v_att, self.W)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "atten_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "atten_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.einsum('lv,bvr->blr', query, x)",
                            "Call"
                        ],
                        [
                            "F.softmax(atten_map, -1)",
                            "Call"
                        ],
                        [
                            "atten_map.view(N, -1, W, H)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_99": {
                "variable": {
                    "value": "part_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blr,brv->blv",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "atten_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.einsum('lv,bvr->blr', query, x)",
                            "Call"
                        ],
                        [
                            "F.softmax(atten_map, -1)",
                            "Call"
                        ],
                        [
                            "atten_map.view(N, -1, W, H)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_100": {
                "variable": {
                    "value": "part_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "part_feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.einsum('blr,brv->blv', atten_map, x)",
                            "Call"
                        ],
                        [
                            "F.normalize(part_feat, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pool2d_103": {
                "variable": {
                    "value": "atten_attr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "atten_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.einsum('lv,bvr->blr', query, x)",
                            "Call"
                        ],
                        [
                            "F.softmax(atten_map, -1)",
                            "Call"
                        ],
                        [
                            "atten_map.view(N, -1, W, H)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(W, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "xp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(range(W))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_130": {
                "variable": {
                    "value": "xp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "yp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(range(H))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_131": {
                "variable": {
                    "value": "yp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1) * 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_115": {
                "variable": {
                    "value": "channel_l2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proto_each_group",
                    "type": "Name",
                    "possible_values": [
                        [
                            "query[group]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_172": {
                "variable": {
                    "value": "Lad",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.MODEL.SCALE",
                            "Attribute"
                        ],
                        [
                            "self.scale.item()",
                            "Call"
                        ],
                        [
                            "20.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_49": {
                "*size": {
                    "value": "self.w2v_att.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_channel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_53": {
                "*size": {
                    "value": "self.feat_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.attritube_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "GEMZSL/modeling/backbone/resnet_features.py": {
        "torch": {
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_133": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_134": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_135": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_172": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "GEMZSL/modeling/lossModule/gazeloss.py": {
        "torch": {
            "BCELoss_8": {
                "variable": {
                    "value": "self.bce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cdist_30": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "M0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "M.flatten(0, 1).flatten(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "G0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "G.flatten(0, 1).flatten(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "batch_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.full_like(src, i) for (i, (src, _)) in enumerate(indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "src_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src for (src, _) in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "tgt_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt for (_, tgt) in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "as_tensor_34": {
                "data": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_like_36": {
                "input": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "GEMZSL/solver/build.py": {
        "torch": {
            "SGD_16": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params_to_update",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.SOLVER.BASE_LR",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.SOLVER.WEIGHT_DECAY",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.SOLVER.MOMENTUM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "StepLR_25": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.SGD(params_to_update, lr=lr, weight_decay=weight_decay, momentum=momentum)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.SOLVER.STEPS",
                            "Attribute"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.SOLVER.GAMMA",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "GEMZSL/utils/comm.py": {
        "torch": {
            "cat_80": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "GEMZSL/utils/utils.py": {
        "torch": {
            "load_238": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(lambda storage, loc: storage) if load_to_cpu else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_tensor_50": {
                "obj": {
                    "value": "vt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_265": {
                "obj": {
                    "value": "ckpt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(ckpt_file, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "dict(state_dicts=state_dicts, ep=ep, scores=scores)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_505": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataParallel_412": {
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_30": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "214",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_31": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "214",
                            "Constant"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_47": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "build_zsl_pipeline(cfg)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[local_rank], output_device=local_rank, broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "train_model(cfg, args.local_rank, args.distributed)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "local_rank",
                    "type": "Variable",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_device_103": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}