{
    "src/lm.py": {
        "torch": {
            "Embedding_17": {
                "variable": {
                    "value": "self.word_embs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "word_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "word_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTMCell_21": {
                "variable": {
                    "value": "self.fw_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "word_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTMCell_22": {
                "variable": {
                    "value": "self.bw_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "word_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "word_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_45": {
                "variable": {
                    "value": "fw_hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fw_hs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "fw_hs + [ht]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(fw_hs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_53": {
                "variable": {
                    "value": "bw_hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bw_hs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[ht] + bw_hs",
                            "BinOp"
                        ],
                        [
                            "torch.stack(bw_hs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fw_hs[:, :-2], bw_hs[:, 2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_68": {
                "variable": {
                    "value": "batch_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ps.view(batch_size * seq_len, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "ys",
                    "type": "Name",
                    "possible_values": [
                        [
                            "text[:, 1:-1].contiguous().view(batch_size * seq_len)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/model.py": {
        "torch": {
            "Embedding_19": {
                "variable": {
                    "value": "self.word_embs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "word_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "word_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_24": {
                "variable": {
                    "value": "self.fw_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "word_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTMCell_25": {
                "variable": {
                    "value": "self.bw_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "word_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.dns_att_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.dns_att_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.dns_pnt_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.dns_pnt_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fse_att_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.fse_pnt_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fse_att_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.fse_pnt_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.dsc_intermediate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.dsc_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "disc_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTMCell_44": {
                "variable": {
                    "value": "self.att_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "word_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.att_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.att_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.att_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.att_ctx_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "word_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.att_hid_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "word_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.att_coverage",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTMCell_56": {
                "variable": {
                    "value": "self.pnt_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "word_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.pnt_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.pnt_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.pnt_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.pnt_ctx_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "word_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.pnt_hid_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "word_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.pnt_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 3 // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.pnt_coverage",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.final_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 3 // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_71": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_101": {
                "variable": {
                    "value": "fw_hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fw_hs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "fw_hs + [ht]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(fw_hs, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "fw_hs + [ht]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(fw_hs, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "fw_hs + [ht]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(fw_hs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_112": {
                "variable": {
                    "value": "bw_hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bw_hs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[ht] + bw_hs",
                            "BinOp"
                        ],
                        [
                            "torch.stack(bw_hs, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[ht] + bw_hs",
                            "BinOp"
                        ],
                        [
                            "torch.stack(bw_hs, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[ht] + bw_hs",
                            "BinOp"
                        ],
                        [
                            "torch.stack(bw_hs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fw_hs[:, :-2], bw_hs[:, 2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_125": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.att_ctx_classifier(hs) + self.pnt_ctx_classifier(hs)",
                            "BinOp"
                        ],
                        [
                            "ps.view(batch_size * inp_len, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(ps, dim=1)",
                            "Call"
                        ],
                        [
                            "ps.view(batch_size * inp_len, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(ps, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "ys",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input[:, 1:-1].contiguous().view(batch_size * inp_len)",
                            "Call"
                        ],
                        [
                            "input[:, 1:].contiguous().view(batch_size * inp_len)",
                            "Call"
                        ],
                        [
                            "self.word_embs(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(ys)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_154": {
                "variable": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.att_ctx_classifier(hs) + self.pnt_ctx_classifier(hs)",
                            "BinOp"
                        ],
                        [
                            "ps.view(batch_size * inp_len, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(ps, dim=1)",
                            "Call"
                        ],
                        [
                            "ps.view(batch_size * inp_len, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(ps, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_161": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.att_ctx_classifier(hs) + self.pnt_ctx_classifier(hs)",
                            "BinOp"
                        ],
                        [
                            "ps.view(batch_size * inp_len, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(ps, dim=1)",
                            "Call"
                        ],
                        [
                            "ps.view(batch_size * inp_len, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(ps, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "ys",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input[:, 1:-1].contiguous().view(batch_size * inp_len)",
                            "Call"
                        ],
                        [
                            "input[:, 1:].contiguous().view(batch_size * inp_len)",
                            "Call"
                        ],
                        [
                            "self.word_embs(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(ys)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_179": {
                "variable": {
                    "value": "enc_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_mask.new([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_199": {
                "variable": {
                    "value": "fw_hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fw_hs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "fw_hs + [ht]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(fw_hs, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "fw_hs + [ht]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(fw_hs, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "fw_hs + [ht]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(fw_hs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_212": {
                "variable": {
                    "value": "bw_hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bw_hs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[ht] + bw_hs",
                            "BinOp"
                        ],
                        [
                            "torch.stack(bw_hs, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[ht] + bw_hs",
                            "BinOp"
                        ],
                        [
                            "torch.stack(bw_hs, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[ht] + bw_hs",
                            "BinOp"
                        ],
                        [
                            "torch.stack(bw_hs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "ht",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fw_hs[:, -1], bw_hs[:, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fw_hs, bw_hs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_324": {
                "variable": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.att_ctx_classifier(hs) + self.pnt_ctx_classifier(hs)",
                            "BinOp"
                        ],
                        [
                            "ps.view(batch_size * inp_len, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(ps, dim=1)",
                            "Call"
                        ],
                        [
                            "ps.view(batch_size * inp_len, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(ps, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_325": {
                "variable": {
                    "value": "gammas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gammas",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(gammas).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_325": {
                "variable": {
                    "value": "gammas",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_326": {
                "variable": {
                    "value": "deltas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "deltas",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(deltas).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_326": {
                "variable": {
                    "value": "deltas",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_328": {
                "variable": {
                    "value": "log_ps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.att_ctx_classifier(hs) + self.pnt_ctx_classifier(hs)",
                            "BinOp"
                        ],
                        [
                            "ps.view(batch_size * inp_len, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(ps, dim=1)",
                            "Call"
                        ],
                        [
                            "ps.view(batch_size * inp_len, -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(ps, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_329": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_ps.view(-1, self.word_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "output[:, 1:].contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_355": {
                "variable": {
                    "value": "enc_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_mask.new([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_375": {
                "variable": {
                    "value": "fw_hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fw_hs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "fw_hs + [ht]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(fw_hs, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "fw_hs + [ht]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(fw_hs, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "fw_hs + [ht]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(fw_hs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_388": {
                "variable": {
                    "value": "bw_hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bw_hs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[ht] + bw_hs",
                            "BinOp"
                        ],
                        [
                            "torch.stack(bw_hs, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[ht] + bw_hs",
                            "BinOp"
                        ],
                        [
                            "torch.stack(bw_hs, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[ht] + bw_hs",
                            "BinOp"
                        ],
                        [
                            "torch.stack(bw_hs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_391": {
                "variable": {
                    "value": "ht",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fw_hs[:, -1], bw_hs[:, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_392": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fw_hs, bw_hs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "st",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[st_pnt, st_pnt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_252": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dsc_intermediate(st).tanh()",
                            "Call"
                        ],
                        [
                            "self.dropout(z)",
                            "Call"
                        ],
                        [
                            "self.dsc_classifier(z)",
                            "Call"
                        ],
                        [
                            "F.softmax(z, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_253": {
                "variable": {
                    "value": "disc_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-category * torch.log(z)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_253": {
                "variable": {
                    "value": "disc_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_283": {
                "variable": {
                    "value": "vt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "at * hs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_289": {
                "variable": {
                    "value": "p_wasa",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_wasa",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.att_ctx_classifier(vt) + self.att_hid_classifier(st_att)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(p_wasa, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.att_ctx_classifier(vt) + self.att_hid_classifier(st_att)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(p_wasa, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_303": {
                "variable": {
                    "value": "vt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "at * hs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_309": {
                "variable": {
                    "value": "p_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_g",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.pnt_ctx_classifier(vt) + self.pnt_hid_classifier(st_pnt)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(p_g, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.pnt_ctx_classifier(vt) + self.pnt_hid_classifier(st_pnt)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(p_g, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_311": {
                "variable": {
                    "value": "p_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.word_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_313": {
                "variable": {
                    "value": "b_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_313": {
                "variable": {
                    "value": "b_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_314": {
                "variable": {
                    "value": "s_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "doc_len * tok_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_314": {
                "variable": {
                    "value": "s_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_314": {
                "variable": {
                    "value": "s_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_539": {
                "tensors": {
                    "value": "finished['sequence']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_231": {
                "input": {
                    "value": "self.fse_att_key(ht_att)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_239": {
                "input": {
                    "value": "self.fse_pnt_key(ht_pnt)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_407": {
                "input": {
                    "value": "self.fse_att_key(ht_att)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_415": {
                "input": {
                    "value": "self.fse_pnt_key(ht_pnt)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_471": {
                "variable": {
                    "value": "vt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "at * hs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_476": {
                "variable": {
                    "value": "p_wasa",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_wasa",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.att_ctx_classifier(vt) + self.att_hid_classifier(st_att)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(p_wasa, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.att_ctx_classifier(vt) + self.att_hid_classifier(st_att)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(p_wasa, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_489": {
                "variable": {
                    "value": "vt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "at * hs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_494": {
                "variable": {
                    "value": "p_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_g",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.pnt_ctx_classifier(vt) + self.pnt_hid_classifier(st_pnt)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(p_g, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.pnt_ctx_classifier(vt) + self.pnt_hid_classifier(st_pnt)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(p_g, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_496": {
                "variable": {
                    "value": "p_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.word_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_498": {
                "variable": {
                    "value": "b_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_498": {
                "variable": {
                    "value": "b_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_499": {
                "variable": {
                    "value": "s_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "doc_len * tok_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_499": {
                "variable": {
                    "value": "s_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_499": {
                "variable": {
                    "value": "s_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_506": {
                "variable": {
                    "value": "(ps, ys)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.att_hid_classifier(st_att) + self.pnt_hid_classifier(st_pnt)",
                            "BinOp"
                        ],
                        [
                            "p_pee",
                            "Name"
                        ],
                        [
                            "p_pee",
                            "Name"
                        ]
                    ]
                },
                "k": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_280": {
                "input": {
                    "value": "kt_att + qt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_281": {
                "input": {
                    "value": "at",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.att_weight(torch.tanh(kt_att + qt))",
                            "Call"
                        ],
                        [
                            "F.softmax(at, dim=1) * tok_att_mask",
                            "BinOp"
                        ],
                        [
                            "at / at.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.pnt_weight(torch.tanh(kt_pnt + qt))",
                            "Call"
                        ],
                        [
                            "F.softmax(at, dim=1) * tok_pnt_mask",
                            "BinOp"
                        ],
                        [
                            "at / at.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.att_weight(torch.tanh(kt_att + qt))",
                            "Call"
                        ],
                        [
                            "F.softmax(at, dim=1) * tok_att_mask",
                            "BinOp"
                        ],
                        [
                            "at / at.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.pnt_weight(torch.tanh(kt_pnt + qt))",
                            "Call"
                        ],
                        [
                            "F.softmax(at, dim=1) * tok_pnt_mask",
                            "BinOp"
                        ],
                        [
                            "at / at.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_285": {
                "input": {
                    "value": "cov_att",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ys.new_zeros(batch_size, doc_len * tok_len, 1)",
                            "Call"
                        ],
                        [
                            "cov_att + at",
                            "BinOp"
                        ],
                        [
                            "xs.new_zeros(batch_size, doc_len * tok_len, 1)",
                            "Call"
                        ],
                        [
                            "cov_att + at",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_300": {
                "input": {
                    "value": "kt_pnt + qt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_301": {
                "input": {
                    "value": "at",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.att_weight(torch.tanh(kt_att + qt))",
                            "Call"
                        ],
                        [
                            "F.softmax(at, dim=1) * tok_att_mask",
                            "BinOp"
                        ],
                        [
                            "at / at.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.pnt_weight(torch.tanh(kt_pnt + qt))",
                            "Call"
                        ],
                        [
                            "F.softmax(at, dim=1) * tok_pnt_mask",
                            "BinOp"
                        ],
                        [
                            "at / at.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.att_weight(torch.tanh(kt_att + qt))",
                            "Call"
                        ],
                        [
                            "F.softmax(at, dim=1) * tok_att_mask",
                            "BinOp"
                        ],
                        [
                            "at / at.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.pnt_weight(torch.tanh(kt_pnt + qt))",
                            "Call"
                        ],
                        [
                            "F.softmax(at, dim=1) * tok_pnt_mask",
                            "BinOp"
                        ],
                        [
                            "at / at.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_305": {
                "input": {
                    "value": "cov_pnt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ys.new_zeros(batch_size, doc_len * tok_len, 1)",
                            "Call"
                        ],
                        [
                            "cov_pnt + at",
                            "BinOp"
                        ],
                        [
                            "xs.new_zeros(batch_size, doc_len * tok_len, 1)",
                            "Call"
                        ],
                        [
                            "cov_pnt + at",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_340": {
                "tensors": {
                    "value": "cov_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(cov_loss).mean() * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_468": {
                "input": {
                    "value": "kt_att + qt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_469": {
                "input": {
                    "value": "at",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.att_weight(torch.tanh(kt_att + qt))",
                            "Call"
                        ],
                        [
                            "F.softmax(at, dim=1) * tok_att_mask",
                            "BinOp"
                        ],
                        [
                            "at / at.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.pnt_weight(torch.tanh(kt_pnt + qt))",
                            "Call"
                        ],
                        [
                            "F.softmax(at, dim=1) * tok_pnt_mask",
                            "BinOp"
                        ],
                        [
                            "at / at.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.att_weight(torch.tanh(kt_att + qt))",
                            "Call"
                        ],
                        [
                            "F.softmax(at, dim=1) * tok_att_mask",
                            "BinOp"
                        ],
                        [
                            "at / at.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.pnt_weight(torch.tanh(kt_pnt + qt))",
                            "Call"
                        ],
                        [
                            "F.softmax(at, dim=1) * tok_pnt_mask",
                            "BinOp"
                        ],
                        [
                            "at / at.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_486": {
                "input": {
                    "value": "kt_pnt + qt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_487": {
                "input": {
                    "value": "at",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.att_weight(torch.tanh(kt_att + qt))",
                            "Call"
                        ],
                        [
                            "F.softmax(at, dim=1) * tok_att_mask",
                            "BinOp"
                        ],
                        [
                            "at / at.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.pnt_weight(torch.tanh(kt_pnt + qt))",
                            "Call"
                        ],
                        [
                            "F.softmax(at, dim=1) * tok_pnt_mask",
                            "BinOp"
                        ],
                        [
                            "at / at.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.att_weight(torch.tanh(kt_att + qt))",
                            "Call"
                        ],
                        [
                            "F.softmax(at, dim=1) * tok_att_mask",
                            "BinOp"
                        ],
                        [
                            "at / at.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.pnt_weight(torch.tanh(kt_pnt + qt))",
                            "Call"
                        ],
                        [
                            "F.softmax(at, dim=1) * tok_pnt_mask",
                            "BinOp"
                        ],
                        [
                            "at / at.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_291": {
                "tensors": {
                    "value": "[st_att, vt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_317": {
                "tensors": {
                    "value": "[st_pnt, vt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_253": {
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dsc_intermediate(st).tanh()",
                            "Call"
                        ],
                        [
                            "self.dropout(z)",
                            "Call"
                        ],
                        [
                            "self.dsc_classifier(z)",
                            "Call"
                        ],
                        [
                            "F.softmax(z, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_478": {
                "tensors": {
                    "value": "[st_att, vt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_502": {
                "tensors": {
                    "value": "[st_pnt, vt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_531": {
                "input": {
                    "value": "pt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.att_hid_classifier(st_att) + self.pnt_hid_classifier(st_pnt)",
                            "BinOp"
                        ],
                        [
                            "p_pee",
                            "Name"
                        ],
                        [
                            "p_pee",
                            "Name"
                        ]
                    ]
                }
            },
            "log_532": {
                "input": {
                    "value": "pt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.att_hid_classifier(st_att) + self.pnt_hid_classifier(st_pnt)",
                            "BinOp"
                        ],
                        [
                            "p_pee",
                            "Name"
                        ],
                        [
                            "p_pee",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "src/noise_functions.py": {
        "torch": {
            "load_247": {
                "variable": {
                    "value": "best_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'model/%s/lm.model' % dataset",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_281": {
                "variable": {
                    "value": "ps_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ps_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(x_batch, x_mask, ps_only=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(ps_batch, dim=-1)",
                            "Call"
                        ],
                        [
                            "list(ps_batch.cpu().detach().numpy())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_lm.py": {
        "torch": {
            "Adagrad_25": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_29": {
                "variable": {
                    "value": "best_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "x_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(x_batch).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x_batch).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "x_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(x_mask).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x_mask).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__60": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "x_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(x_batch).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x_batch).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "x_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(x_mask).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x_mask).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_87": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_sum.py": {
        "torch": {}
    }
}