{
    "2_keypoint_annotator/opt.py": {
        "torch": {}
    },
    "3_6Dpose_estimator/KPD/src/main_fast_inference.py": {
        "torch": {
            "load_36": {
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./exp/final_model/' + allpaths[obj_id] + '.pkl'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "3_6Dpose_estimator/KPD/src/models/FastPose.py": {
        "torch": {
            "PixelShuffle_21": {
                "variable": {
                    "value": "self.suffle1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.DIM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.nClasses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/KPD/src/models/hg-prm.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "self.low1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_36": {
                "variable": {
                    "value": "self.up2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.lowerBranch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.low1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.cnv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.r1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResidualPyramid(64, 128, opt.inputResH / 2, opt.inputResW / 2, stride=1, net_type='no_preact', useConv=False, baseWidth=B, cardinality=C)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.preact",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.cnv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "*args": {
                    "value": "*layer_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "lin",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "hg",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "tmpOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.nClasses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_27": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_78": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "lin_",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "variable": {
                    "value": "tmpOut_",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "opt.nClasses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "num_features": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/KPD/src/models/hgPRM.py": {
        "torch": {
            "Sequential_27": {
                "variable": {
                    "value": "low1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_37": {
                "variable": {
                    "value": "up2",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.lowerBranch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "low1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_59": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._make_residual(self.ResidualUp, False, inputResH, inputResW)",
                            "Call"
                        ],
                        [
                            "self.upperBranch(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "up2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.UpsamplingNearest2d(scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.lowerBranch(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "cnv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "r1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResidualPyramid(64, 128, opt.inputResH / 2, opt.inputResW / 2, stride=1, net_type='no_preact', useConv=False, baseWidth=B, cardinality=C)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.preact",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "cnv1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_98": {
                "variable": {
                    "value": "self.stack_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_99": {
                "variable": {
                    "value": "self.stack_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_100": {
                "variable": {
                    "value": "self.stack_lin_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_101": {
                "variable": {
                    "value": "self.stack_out_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "cnv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "r1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResidualPyramid(64, 128, opt.inputResH / 2, opt.inputResW / 2, stride=1, net_type='no_preact', useConv=False, baseWidth=B, cardinality=C)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_172": {
                "variable": {
                    "value": "self.preact",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "cnv1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_179": {
                "variable": {
                    "value": "self.stack_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_180": {
                "variable": {
                    "value": "self.stack_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_181": {
                "variable": {
                    "value": "self.stack_lin_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_182": {
                "variable": {
                    "value": "self.stack_out_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "*args": {
                    "value": "*layer_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "lin",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "hg",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "variable": {
                    "value": "tmpOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.nClasses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_187": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_191": {
                "variable": {
                    "value": "lin",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "hg",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "variable": {
                    "value": "tmpOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.nClasses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_28": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_85": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "lin_",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "variable": {
                    "value": "tmpOut_",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "opt.nClasses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_160": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_166": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_206": {
                "variable": {
                    "value": "lin_",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "variable": {
                    "value": "tmpOut_",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "opt.nClasses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "num_features": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "num_features": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_193": {
                "num_features": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_194": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_196": {
                "num_features": {
                    "value": "opt.nFeats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_197": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/KPD/src/models/layers/DUC.py": {
        "torch": {
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PixelShuffle_16": {
                "variable": {
                    "value": "self.pixel_shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "upscale_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "3_6Dpose_estimator/KPD/src/models/layers/PRM.py": {
        "torch": {
            "Conv2d_33": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(numIn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "numOut // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numOut // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "numOut // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*s_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(numIn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.floor(numOut // baseWidth)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.floor(numOut // baseWidth)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "numOut // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*s_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "elewiswAdd",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "addTable",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numOut // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "numOut",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(numOut)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "elewiswAdd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "pyra",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "pyraTable",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.floor(numOut // baseWidth)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.floor(numOut // baseWidth)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.FractionalMaxPool2d(2, output_ratio=(scaled, scaled))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "numOut // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.floor(numOut // baseWidth)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.floor(numOut // baseWidth)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "num_features": {
                    "value": "numOut // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(numIn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "numOut",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(numOut)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(numIn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(numIn)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(numIn)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_56": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "FractionalMaxPool2d_103": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_ratio": {
                    "value": "(scaled, scaled)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_105": {
                "size": {
                    "value": "(int(inputResH), int(inputResW))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "num_features": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(numIn)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_127": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/KPD/src/models/layers/Residual.py": {
        "torch": {
            "Conv2d_20": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "numOut // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numOut // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "numOut // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numOut // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "numOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_11": {
                "*args": {
                    "value": "con",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "*args": {
                    "value": "*s_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "numOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "numOut // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "numOut // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "*args": {
                    "value": "nn.BatchNorm2d(numIn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/KPD/src/models/layers/Resnet.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_22": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_47": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/KPD/src/models/layers/SE_Resnet.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_59": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/KPD/src/models/layers/SE_module.py": {
        "torch": {
            "AdaptiveAvgPool2d_7": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_8": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_9": {
                "in_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sigmoid_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/KPD/src/models/layers/util_models.py": {
        "torch": {
            "ModuleList_10": {
                "variable": {
                    "value": "self.modules_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "module_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ParameterList_34": {
                "variable": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_28": {
                "tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_28": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/KPD/src/opt.py": {
        "torch": {
            "load_99": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'../exp/{}/{}/option.pkl'.format(opt.dataset, opt.expID)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/KPD/src/utils/dataset/coco.py": {
        "torch": {}
    },
    "3_6Dpose_estimator/KPD/src/utils/dataset/mpii.py": {
        "torch": {}
    },
    "3_6Dpose_estimator/KPD/src/utils/eval.py": {
        "torch": {
            "zeros_43": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(idxs) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_61": {
                "variable": {
                    "value": "(maxval, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "hm.view(hm.size(0), hm.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_69": {
                "variable": {
                    "value": "preds[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(preds[:, :, 1] - 1) / hm.size(3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "preds.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "preds.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_119": {
                "variable": {
                    "value": "(maxval, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "hms.view(hms.size(0), hms.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_127": {
                "variable": {
                    "value": "preds[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(preds[:, :, 1] - 1) / hms.size(3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "preds_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "preds.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_160": {
                "variable": {
                    "value": "(maxval, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_hms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hms.view(hms.size(0), hms.size(1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_168": {
                "variable": {
                    "value": "preds[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(preds[:, :, 1] - 1) / hms.size(3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_194": {
                "variable": {
                    "value": "preds_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "preds.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "preds.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_106": {
                "variable": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_138": {
                "variable": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dist_83": {
                "input": {
                    "value": "preds[n, c, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "target[n, c, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/KPD/src/utils/img.py": {
        "torch": {}
    },
    "3_6Dpose_estimator/KPD/src/utils/pose.py": {
        "torch": {
            "Tensor_30": {
                "variable": {
                    "value": "upLeft",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_31": {
                "variable": {
                    "value": "bottomRight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "out_bigcircle",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nJoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.outputResH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "opt.outputResW",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "out_smallcircle",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nJoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.outputResH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "opt.outputResW",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nJoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.outputResH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "opt.outputResW",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "setMask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nJoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.outputResH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "opt.outputResW",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.inputResH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "opt.inputResW",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/betapose_evaluate.py": {
        "torch": {
            "cat_172": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hm)",
                            "Call"
                        ],
                        [
                            "hm.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/dataloader.py": {
        "torch": {
            "Tensor_806": {
                "variable": {
                    "value": "upLeft",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_808": {
                "variable": {
                    "value": "bottomRight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(img)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(img)",
                            "Call"
                        ],
                        [
                            "img.cuda()",
                            "Call"
                        ],
                        [
                            "Image.open(im_name[0])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Variable(torch.cat(img)).cuda()",
                            "Call"
                        ],
                        [
                            "orig_img",
                            "Name"
                        ]
                    ]
                }
            },
            "cat_260": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(img)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(img)",
                            "Call"
                        ],
                        [
                            "img.cuda()",
                            "Call"
                        ],
                        [
                            "Image.open(im_name[0])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Variable(torch.cat(img)).cuda()",
                            "Call"
                        ],
                        [
                            "orig_img",
                            "Name"
                        ]
                    ]
                }
            },
            "index_select_355": {
                "variable": {
                    "value": "im_dim_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_dim_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(im_dim_list).repeat(1, 2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(im_dim_list).repeat(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(im_dim_list, 0, dets[:, 0].long())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(im_dim_list).repeat(1, 2)",
                            "Call"
                        ],
                        [
                            "im_dim_list.cuda()",
                            "Call"
                        ],
                        [
                            "torch.index_select(im_dim_list, 0, dets[:, 0].long())",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([dim]).repeat(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "dets[:, 0].long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_396": {
                "variable": {
                    "value": "inps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "boxes_k.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "opt.inputResH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "opt.inputResW",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_397": {
                "variable": {
                    "value": "pt1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "boxes_k.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_398": {
                "variable": {
                    "value": "pt2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "boxes_k.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_551": {
                "variable": {
                    "value": "im_dim_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_dim_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(im_dim_list).repeat(1, 2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(im_dim_list).repeat(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(im_dim_list, 0, dets[:, 0].long())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(im_dim_list).repeat(1, 2)",
                            "Call"
                        ],
                        [
                            "im_dim_list.cuda()",
                            "Call"
                        ],
                        [
                            "torch.index_select(im_dim_list, 0, dets[:, 0].long())",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([dim]).repeat(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "dets[:, 0].long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_442": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_532": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_560": {
                "variable": {
                    "value": "dets[j, [1, 3]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "dets[j, [1, 3]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "im_dim_list[j, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_561": {
                "variable": {
                    "value": "dets[j, [2, 4]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "dets[j, [2, 4]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "im_dim_list[j, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_536": {
                "tensors": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(img)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(img)",
                            "Call"
                        ],
                        [
                            "img.cuda()",
                            "Call"
                        ],
                        [
                            "Image.open(im_name[0])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Variable(torch.cat(img)).cuda()",
                            "Call"
                        ],
                        [
                            "orig_img",
                            "Name"
                        ]
                    ]
                }
            },
            "min_552": {
                "input": {
                    "value": "self.det_inp_dim / im_dim_list",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/fn.py": {
        "torch": {
            "stack_52": {
                "tensors": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_61": {
                "tensors": {
                    "value": "[torch.from_numpy(b) for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "ndarray": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/occlusion_betapose_evaluate.py": {
        "torch": {
            "cat_172": {
                "variable": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hm)",
                            "Call"
                        ],
                        [
                            "hm.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/opt.py": {
        "torch": {}
    },
    "3_6Dpose_estimator/pPose_nms.py": {
        "torch": {
            "max_129": {
                "variable": {
                    "value": "max_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_pick[ids, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_138": {
                "variable": {
                    "value": "max_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "merge_score[ids]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_169": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.pow(ref_pose[np.newaxis, :] - cluster_preds, 2), dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "final_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kp_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "final_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kp_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                }
            },
            "sqrt_216": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.pow(ref_pose[np.newaxis, :] - cluster_preds, 2), dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_225": {
                "variable": {
                    "value": "final_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kp_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_226": {
                "variable": {
                    "value": "final_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kp_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                }
            },
            "mul_238": {
                "variable": {
                    "value": "final_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "normed_scores.repeat(1, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_238": {
                "variable": {
                    "value": "final_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_239": {
                "variable": {
                    "value": "final_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cluster_scores.mul(mask.float().unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "normed_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cluster_joint_scores / torch.sum(cluster_joint_scores)",
                            "BinOp"
                        ],
                        [
                            "masked_scores / torch.sum(masked_scores, dim=0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_239": {
                "variable": {
                    "value": "final_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_246": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.pow(pick_preds[np.newaxis, :] - all_preds, 2), dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_253": {
                "variable": {
                    "value": "score_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "all_preds.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_264": {
                "variable": {
                    "value": "point_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * dist / delta2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_271": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.pow(pick_pred[np.newaxis, :] - all_preds, 2), dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_276": {
                "variable": {
                    "value": "num_match_keypoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist / ref_dist <= 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_60": {
                "variable": {
                    "value": "pick_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "human_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pose_scores.mean(dim=1)",
                            "Call"
                        ],
                        [
                            "np.delete(human_scores, delete_ids, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_93": {
                "variable": {
                    "value": "max_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_pick[j, ids, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_103": {
                "variable": {
                    "value": "max_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "merge_score[ids]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dot_196": {
                "variable": {
                    "value": "final_pose[i, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_joint_location[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "normed_scores.squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_197": {
                "variable": {
                    "value": "final_pose[i, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_joint_location[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "normed_scores.squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_199": {
                "variable": {
                    "value": "final_score[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_joint_scores.transpose(0, 1).squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "normed_scores.squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_169": {
                "input": {
                    "value": "torch.pow(ref_pose[np.newaxis, :] - cluster_preds, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_216": {
                "input": {
                    "value": "torch.pow(ref_pose[np.newaxis, :] - cluster_preds, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_236": {
                "input": {
                    "value": "masked_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cluster_scores.mul(mask.float().unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_246": {
                "input": {
                    "value": "torch.pow(pick_preds[np.newaxis, :] - all_preds, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_262": {
                "input": {
                    "value": "keypoint_scores[mask] / delta1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_265": {
                "input": {
                    "value": "point_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-1 * dist / delta2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_271": {
                "input": {
                    "value": "torch.pow(pick_pred[np.newaxis, :] - all_preds, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "ndarray": {
                    "value": "np.arange(human_scores.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_170": {
                "input": {
                    "value": "ref_pose[np.newaxis, :] - cluster_preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_193": {
                "input": {
                    "value": "cluster_joint_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cluster_scores[:, i][mask[:, i]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_217": {
                "input": {
                    "value": "ref_pose[np.newaxis, :] - cluster_preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_247": {
                "input": {
                    "value": "pick_preds[np.newaxis, :] - all_preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_272": {
                "input": {
                    "value": "pick_pred[np.newaxis, :] - all_preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_153": {
                "input": {
                    "value": "merge_score",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_190": {
                "input": {
                    "value": "mask[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_119": {
                "input": {
                    "value": "merge_score",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/train_KPD/src/evaluation.py": {
        "torch": {
            "DataLoader_52": {
                "variable": {
                    "value": "minival_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Mscoco_minival()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "tmp_inp[im_name[0]][inps]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inps, inp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "tmp_inp[im_name[0]][pt1s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pt1s, pt1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "tmp_inp[im_name[0]][pt2s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pt2s, pt2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "tmp_inp[im_name[0]][ori_inps]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ori_inps, ori_inp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "tmp_inp[im_name[0]][boxes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxes, box)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "kp_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kp_preds1, kp_preds2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/train_KPD/src/models/FastPose.py": {
        "torch": {
            "PixelShuffle_27": {
                "variable": {
                    "value": "self.suffle1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.conv_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.nClasses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/train_KPD/src/models/layers/DUC.py": {
        "torch": {
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PixelShuffle_21": {
                "variable": {
                    "value": "self.pixel_shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "upscale_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "3_6Dpose_estimator/train_KPD/src/models/layers/SE_Resnet.py": {
        "torch": {
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_64": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_92": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/train_KPD/src/models/layers/SE_module.py": {
        "torch": {
            "AdaptiveAvgPool2d_12": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sigmoid_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/train_KPD/src/predict/p_poseNMS.py": {
        "torch": {
            "max_121": {
                "variable": {
                    "value": "max_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_pick[ids, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_130": {
                "variable": {
                    "value": "max_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "merge_score[ids]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_161": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.pow(ref_pose[np.newaxis, :] - cluster_preds, 2), dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "final_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kp_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "final_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kp_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                }
            },
            "sqrt_211": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.pow(ref_pose[np.newaxis, :] - cluster_preds, 2), dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "variable": {
                    "value": "final_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kp_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_221": {
                "variable": {
                    "value": "final_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kp_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                }
            },
            "mul_233": {
                "variable": {
                    "value": "final_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "normed_scores.repeat(1, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_233": {
                "variable": {
                    "value": "final_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_235": {
                "variable": {
                    "value": "final_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cluster_scores.mul(mask.float().unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "normed_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cluster_joint_scores / torch.sum(cluster_joint_scores)",
                            "BinOp"
                        ],
                        [
                            "masked_scores / torch.sum(masked_scores, dim=0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_235": {
                "variable": {
                    "value": "final_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_242": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.pow(pick_preds[np.newaxis, :] - all_preds, 2), dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_249": {
                "variable": {
                    "value": "score_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "all_preds.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_261": {
                "variable": {
                    "value": "point_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * dist / delta2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_269": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.pow(pick_pred[np.newaxis, :] - all_preds, 2), dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_274": {
                "variable": {
                    "value": "num_match_keypoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist / ref_dist <= 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_54": {
                "variable": {
                    "value": "pick_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "human_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pose_scores.mean(dim=1)",
                            "Call"
                        ],
                        [
                            "np.delete(human_scores, delete_ids, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_86": {
                "variable": {
                    "value": "max_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_pick[j, ids, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_96": {
                "variable": {
                    "value": "max_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "merge_score[ids]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dot_188": {
                "variable": {
                    "value": "final_pose[i, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_joint_location[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "normed_scores.squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_190": {
                "variable": {
                    "value": "final_pose[i, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_joint_location[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "normed_scores.squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_193": {
                "variable": {
                    "value": "final_score[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_joint_scores.transpose(0, 1).squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "normed_scores.squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_161": {
                "input": {
                    "value": "torch.pow(ref_pose[np.newaxis, :] - cluster_preds, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_211": {
                "input": {
                    "value": "torch.pow(ref_pose[np.newaxis, :] - cluster_preds, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_231": {
                "input": {
                    "value": "masked_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cluster_scores.mul(mask.float().unsqueeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_242": {
                "input": {
                    "value": "torch.pow(pick_preds[np.newaxis, :] - all_preds, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_258": {
                "input": {
                    "value": "pred_scores[mask] / delta1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_259": {
                "input": {
                    "value": "keypoint_scores[mask] / delta1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_262": {
                "input": {
                    "value": "score_dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(all_preds.shape[0], 50)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_269": {
                "input": {
                    "value": "torch.pow(pick_pred[np.newaxis, :] - all_preds, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "ndarray": {
                    "value": "np.arange(human_scores.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_162": {
                "input": {
                    "value": "ref_pose[np.newaxis, :] - cluster_preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_185": {
                "input": {
                    "value": "cluster_joint_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cluster_scores[:, i][mask[:, i]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_212": {
                "input": {
                    "value": "ref_pose[np.newaxis, :] - cluster_preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_243": {
                "input": {
                    "value": "pick_preds[np.newaxis, :] - all_preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_263": {
                "input": {
                    "value": "point_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-1 * dist / delta2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_270": {
                "input": {
                    "value": "pick_pred[np.newaxis, :] - all_preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_145": {
                "input": {
                    "value": "merge_score",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_182": {
                "input": {
                    "value": "mask[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_111": {
                "input": {
                    "value": "merge_score",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/train_KPD/src/train.py": {
        "torch": {
            "MSELoss_132": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_155": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coco.Mscoco(train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.trainBatch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.nThreads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_158": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coco.Mscoco(train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.validBatch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.nThreads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_162": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "createModel().cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(m).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "m.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weightDecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_140": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "m.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.LR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_116": {
                "f": {
                    "value": "opt.loadModel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_192": {
                "obj": {
                    "value": "m_dev.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'../exp/{}/{}/model_{}.pkl'.format(opt.dataset, opt.expID, opt.epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_194": {
                "obj": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'../exp/{}/{}/option.pkl'.format(opt.dataset, opt.expID, opt.epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_196": {
                "obj": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.RMSprop(m.parameters(), lr=opt.LR, momentum=opt.momentum, weight_decay=opt.weightDecay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(m.parameters(), lr=opt.LR)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'../exp/{}/{}/optimizer.pkl'.format(opt.dataset, opt.expID)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/train_KPD/src/utils/dataset/coco.py": {
        "torch": {}
    },
    "3_6Dpose_estimator/train_KPD/src/utils/eval.py": {
        "torch": {
            "zeros_56": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(idxs) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_74": {
                "variable": {
                    "value": "(maxval, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "hm.view(hm.size(0), hm.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_82": {
                "variable": {
                    "value": "preds[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(preds[:, :, 1] - 1) / hm.size(3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "preds.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "preds.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_129": {
                "variable": {
                    "value": "(maxval, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "hms.view(hms.size(0), hms.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_137": {
                "variable": {
                    "value": "preds[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(preds[:, :, 1] - 1) / hms.size(3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "variable": {
                    "value": "preds_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "preds.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_53": {
                "*size": {
                    "value": "preds.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_119": {
                "variable": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_149": {
                "variable": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dist_96": {
                "input": {
                    "value": "preds[n, c, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "target[n, c, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/train_KPD/src/utils/img.py": {
        "torch": {
            "zeros_94": {
                "variable": {
                    "value": "center",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "_pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "center",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "new_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_147": {
                "variable": {
                    "value": "v_Img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_Img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(newImg)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(v_Img, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_44": {
                "obj": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_180": {
                "ndarray": {
                    "value": "x.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_54": {
                "ndarray": {
                    "value": "ndarray",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_55": {
                "obj": {
                    "value": "ndarray",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "upsample_150": {
                "input": {
                    "value": "v_Img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(newImg)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(v_Img, 0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(resH), int(resW))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_153": {
                "input": {
                    "value": "v_Img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(newImg)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(v_Img, 0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(resH), int(resW))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/train_KPD/src/utils/pose.py": {
        "torch": {
            "Tensor_30": {
                "variable": {
                    "value": "upLeft",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_31": {
                "variable": {
                    "value": "bottomRight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nJoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "outputResH",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "outputResW",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "setMask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nJoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "outputResH",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "outputResW",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inputResH",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputResW",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/yolo/bbox.py": {
        "torch": {
            "cat_17": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(result, max_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_25": {
                "variable": {
                    "value": "conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cond_1 + cond_2",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(conf, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "conf.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_62": {
                "variable": {
                    "value": "inter_rect_x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1_x1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_63": {
                "variable": {
                    "value": "inter_rect_y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1_y1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_64": {
                "variable": {
                    "value": "inter_rect_x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1_x2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_65": {
                "variable": {
                    "value": "inter_rect_y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1_y2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nonzero_82": {
                "variable": {
                    "value": "ind_nz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[:, :, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_82": {
                "variable": {
                    "value": "ind_nz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_16": {
                "input": {
                    "value": "result[:, :, 5:25]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_69": {
                "input": {
                    "value": "inter_rect_y2 - inter_rect_y1 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "*size": {
                    "value": "inter_rect_x2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/yolo/cam_demo.py": {
        "torch": {
            "from_numpy_21": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[:, :, ::-1].transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "img_[np.newaxis, :, :, :] / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img_).float()",
                            "Call"
                        ],
                        [
                            "Variable(img_)",
                            "Call"
                        ],
                        [
                            "img_.cuda()",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose((2, 0, 1)).copy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_).float().div(255.0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[:, :, ::-1].transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "img_[np.newaxis, :, :, :] / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img_).float()",
                            "Call"
                        ],
                        [
                            "Variable(img_)",
                            "Call"
                        ],
                        [
                            "img_.cuda()",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose((2, 0, 1)).copy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_).float().div(255.0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_40": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_40": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_82": {
                "variable": {
                    "value": "CUDA",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_141": {
                "input": {
                    "value": "output[:, 1:5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "float(inp_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/yolo/darknet.py": {
        "torch": {
            "from_numpy_40": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[:, :, ::-1].transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "img_[np.newaxis, :, :, :] / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img_).float()",
                            "Call"
                        ],
                        [
                            "Variable(img_)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.middle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(5, 5) for x in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "fwd",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_90": {
                "variable": {
                    "value": "padded_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1)",
                            "Call"
                        ],
                        [
                            "x.view(bs, nA, num_attrs, gs, gs).permute(0, 1, 3, 4, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H, 1, W, 1).expand(B, C, H, stride, W, stride).contiguous().view(B, C, H * stride, W * stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H // hs, hs, W // ws, ws).transpose(-2, -3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H // hs * W // ws, hs, ws)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H // hs * W // ws, hs * ws).transpose(-1, -2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, ws * hs, H // ws, W // ws).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C * ws * hs, H // ws, W // ws)",
                            "Call"
                        ],
                        [
                            "self.module_list[i](x)",
                            "Call"
                        ],
                        [
                            "outputs[i - 1] + outputs[i + int(block['from'])]",
                            "BinOp"
                        ],
                        [
                            "outputs[i + layers[0]]",
                            "Subscript"
                        ],
                        [
                            "self.module_list[i][0](x)",
                            "Call"
                        ],
                        [
                            "torch.cat((map1, map2), 1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding, padding, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_152": {
                "variable": {
                    "value": "scaled_anchors",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_153": {
                "variable": {
                    "value": "grid_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "gs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_154": {
                "variable": {
                    "value": "grid_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "gs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "t_154": {
                "variable": {
                    "value": "grid_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_160": {
                "variable": {
                    "value": "detections",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_166": {
                "variable": {
                    "value": "detections[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_167": {
                "variable": {
                    "value": "detections[..., 5:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[..., 5:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_232": {
                "variable": {
                    "value": "module_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_327": {
                "variable": {
                    "value": "detections",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_382": {
                "variable": {
                    "value": "header",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "header",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.fromfile(fp, dtype=np.int32, count=4)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(header)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_237": {
                "variable": {
                    "value": "module",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_91": {
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_161": {
                "input": {
                    "value": "x[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_162": {
                "input": {
                    "value": "x[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_163": {
                "input": {
                    "value": "x[..., 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_164": {
                "input": {
                    "value": "x[..., 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_252": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "out_channels_list[idx + start]",
                            "Subscript"
                        ],
                        [
                            "out_channels_list[idx + start] + out_channels_list[end]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(block['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.reso // gs",
                            "BinOp"
                        ],
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(self.pad / 2)",
                            "Call"
                        ],
                        [
                            "(kernel_size - 1) // 2 if block['pad'] else 0",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_429": {
                "variable": {
                    "value": "conv_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights[ptr:ptr + num_weights]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_401": {
                "variable": {
                    "value": "bn_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights[ptr:ptr + num_bn_biases]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_406": {
                "variable": {
                    "value": "bn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights[ptr:ptr + num_bn_biases]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_411": {
                "variable": {
                    "value": "bn_running_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights[ptr:ptr + num_bn_biases]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_416": {
                "variable": {
                    "value": "bn_running_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights[ptr:ptr + num_bn_biases]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_423": {
                "variable": {
                    "value": "conv_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights[ptr:ptr + num_biases]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MaxPool2d_266": {
                "variable": {
                    "value": "maxpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(block['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.reso // gs",
                            "BinOp"
                        ],
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Upsample_275": {
                "variable": {
                    "value": "upsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.reso // gs",
                            "BinOp"
                        ],
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm2d_256": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "out_channels_list[idx + start]",
                            "Subscript"
                        ],
                        [
                            "out_channels_list[idx + start] + out_channels_list[end]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LeakyReLU_259": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(map1, map2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_360": {
                "tensors": {
                    "value": "(detections, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/yolo/detect.py": {
        "torch": {
            "is_available_28": {
                "variable": {
                    "value": "CUDA",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_88": {
                "variable": {
                    "value": "im_dim_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_dim_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x[2] for x in batches]",
                            "ListComp"
                        ],
                        [
                            "torch.FloatTensor(im_dim_list).repeat(1, 2)",
                            "Call"
                        ],
                        [
                            "im_dim_list.cuda()",
                            "Call"
                        ],
                        [
                            "torch.index_select(im_dim_list, 0, output[:, 0].long())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "output[:, 0].long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_99": {
                "variable": {
                    "value": "output[i, [1, 3]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "output[i, [1, 3]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "im_dim_list[i, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_100": {
                "variable": {
                    "value": "output[i, [2, 4]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "output[i, [2, 4]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "im_dim_list[i, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_90": {
                "input": {
                    "value": "inp_dim / im_dim_list",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/yolo/preprocess.py": {
        "torch": {
            "from_numpy_45": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[:, :, ::-1].transpose((2, 0, 1)).copy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_).float().div(255.0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose((2, 0, 1)).copy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_).float().div(255.0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_45": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_45": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[:, :, ::-1].transpose((2, 0, 1)).copy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_).float().div(255.0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose((2, 0, 1)).copy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_).float().div(255.0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_60": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_60": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/yolo/util.py": {
        "torch": {
            "sigmoid_46": {
                "variable": {
                    "value": "prediction[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_47": {
                "variable": {
                    "value": "prediction[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_48": {
                "variable": {
                    "value": "prediction[:, :, 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[:, :, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "x_y_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_offset, y_offset)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_63": {
                "variable": {
                    "value": "x_y_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_77": {
                "variable": {
                    "value": "prediction[:, :, 5:5 + num_classes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[:, :, 5:5 + num_classes]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "unique_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "unique_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.unique(tensor_np)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_248": {
                "variable": {
                    "value": "prediction[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_249": {
                "variable": {
                    "value": "prediction[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_250": {
                "variable": {
                    "value": "prediction[:, :, 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[:, :, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "x_y_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_offset, y_offset)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_264": {
                "variable": {
                    "value": "x_y_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_123": {
                "variable": {
                    "value": "ind_nz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[:, :, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_123": {
                "variable": {
                    "value": "ind_nz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_146": {
                "variable": {
                    "value": "(max_conf, max_conf_score)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "image_pred[:, 5:5 + num_classes]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "image_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(image_pred[:, :5], max_conf, max_conf_score)",
                            "Tuple"
                        ],
                        [
                            "(batch_ind, image_pred_class)",
                            "Tuple"
                        ],
                        [
                            "(image_pred[:, :5], max_conf, max_conf_score)",
                            "Tuple"
                        ],
                        [
                            "(batch_ind, image_pred_class)",
                            "Tuple"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_153": {
                "variable": {
                    "value": "non_zero_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_pred[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_291": {
                "variable": {
                    "value": "ind_nz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[:, :, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_291": {
                "variable": {
                    "value": "ind_nz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_319": {
                "variable": {
                    "value": "(max_conf, max_conf_score)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "image_pred[:, 5:5 + num_classes]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "image_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(image_pred[:, :5], max_conf, max_conf_score)",
                            "Tuple"
                        ],
                        [
                            "(batch_ind, image_pred_class)",
                            "Tuple"
                        ],
                        [
                            "(image_pred[:, :5], max_conf, max_conf_score)",
                            "Tuple"
                        ],
                        [
                            "(batch_ind, image_pred_class)",
                            "Tuple"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_327": {
                "variable": {
                    "value": "non_zero_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_pred[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_74": {
                "input": {
                    "value": "prediction[:, :, 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_170": {
                "variable": {
                    "value": "class_mask_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_mask[:, -2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_170": {
                "variable": {
                    "value": "class_mask_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(image_pred[:, :5], max_conf, max_conf_score)",
                            "Tuple"
                        ],
                        [
                            "(batch_ind, image_pred_class)",
                            "Tuple"
                        ],
                        [
                            "(image_pred[:, :5], max_conf, max_conf_score)",
                            "Tuple"
                        ],
                        [
                            "(batch_ind, image_pred_class)",
                            "Tuple"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_275": {
                "input": {
                    "value": "prediction[:, :, 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_343": {
                "variable": {
                    "value": "class_mask_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_mask[:, -2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_343": {
                "variable": {
                    "value": "class_mask_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, out)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softmax_278": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_388": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(image_pred[:, :5], max_conf, max_conf_score)",
                            "Tuple"
                        ],
                        [
                            "(batch_ind, image_pred_class)",
                            "Tuple"
                        ],
                        [
                            "(image_pred[:, :5], max_conf, max_conf_score)",
                            "Tuple"
                        ],
                        [
                            "(batch_ind, image_pred_class)",
                            "Tuple"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_391": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(image_pred[:, :5], max_conf, max_conf_score)",
                            "Tuple"
                        ],
                        [
                            "(batch_ind, image_pred_class)",
                            "Tuple"
                        ],
                        [
                            "(image_pred[:, :5], max_conf, max_conf_score)",
                            "Tuple"
                        ],
                        [
                            "(batch_ind, image_pred_class)",
                            "Tuple"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_392": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, out)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sort_176": {
                "input": {
                    "value": "image_pred_class[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_351": {
                "input": {
                    "value": "image_pred_class[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_374": {
                "variable": {
                    "value": "non_zero_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_pred_class[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_374": {
                "variable": {
                    "value": "non_zero_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_196": {
                "tensors": {
                    "value": "max_detections",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "3_6Dpose_estimator/yolo/video_demo.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[:, :, ::-1].transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "img_[np.newaxis, :, :, :] / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img_).float()",
                            "Call"
                        ],
                        [
                            "Variable(img_)",
                            "Call"
                        ],
                        [
                            "img_.cuda()",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose((2, 0, 1)).copy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_).float().div(255.0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[:, :, ::-1].transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "img_[np.newaxis, :, :, :] / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img_).float()",
                            "Call"
                        ],
                        [
                            "Variable(img_)",
                            "Call"
                        ],
                        [
                            "img_.cuda()",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose((2, 0, 1)).copy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_).float().div(255.0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_41": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_41": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_90": {
                "variable": {
                    "value": "CUDA",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_94": {
                "variable": {
                    "value": "CUDA",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_163": {
                "variable": {
                    "value": "output[i, [1, 3]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "output[i, [1, 3]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "im_dim[i, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_164": {
                "variable": {
                    "value": "output[i, [2, 4]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "output[i, [2, 4]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "im_dim[i, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_155": {
                "input": {
                    "value": "inp_dim / im_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "3_6Dpose_estimator/yolo/video_demo_half.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[:, :, ::-1].transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "img_[np.newaxis, :, :, :] / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img_).float()",
                            "Call"
                        ],
                        [
                            "Variable(img_)",
                            "Call"
                        ],
                        [
                            "img_.cuda()",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose((2, 0, 1)).copy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_).float().div(255.0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[:, :, ::-1].transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "img_[np.newaxis, :, :, :] / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img_).float()",
                            "Call"
                        ],
                        [
                            "Variable(img_)",
                            "Call"
                        ],
                        [
                            "img_.cuda()",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose((2, 0, 1)).copy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_).float().div(255.0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_41": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_41": {
                "variable": {
                    "value": "img_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_90": {
                "variable": {
                    "value": "CUDA",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_94": {
                "variable": {
                    "value": "CUDA",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_165": {
                "variable": {
                    "value": "output[i, [1, 3]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "output[i, [1, 3]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "im_dim[i, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_166": {
                "variable": {
                    "value": "output[i, [2, 4]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "output[i, [2, 4]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "im_dim[i, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_157": {
                "input": {
                    "value": "inp_dim / im_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}