{
    "pl_transporter.py": {
        "torch": {
            "Dataset_244": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "config.dataset_root",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transform": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms.ToTensor()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_246": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(config.dataset_root, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Sampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_270": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "MSELoss_293": {
                "variable": {
                    "value": "self.metric",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_309": {
                "variable": {
                    "value": "self.metric",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_253": {
                "f": {
                    "value": "vqvae_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VQVAE_unnorm_trained.pth'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "torchradon.py": {
        "torch": {
            "cat_20": {
                "variable": {
                    "value": "image_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(1, size / 2 + 1, 2, dtype=torch.int), torch.arange(size / 2 - 1, 0, -2, dtype=torch.int)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "image_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fft_29": {
                "variable": {
                    "value": "fourier_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(size, dtype=torch.double)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_10": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "atan_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_40": {
                "variable": {
                    "value": "padded_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (pad_width[0], pad_width[1], pad_width[0], pad_width[1]))",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, pad_width)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_64": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "fourier_ramp.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "ramp_filter(filter_size).view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "len(self.theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "variable": {
                    "value": "shift_fwd",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1, 0, -1 / grid_size], [0, 1, -1 / grid_size], [0, 0, 1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "shift_bwd",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1, 0, 1 / grid_size], [0, 1, 1 / grid_size], [0, 0, 1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "hom_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[matrix, torch.tensor([[[0, 0, 1]]], dtype=self.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "variable": {
                    "value": "reco",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "ch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "it_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_54": {
                "input": {
                    "value": "fourier_ramp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_90": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_111": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (pad_width[0], pad_width[1], pad_width[0], pad_width[1]))",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad_width[0], pad_width[1], pad_width[0], pad_width[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grid_sample_124": {
                "variable": {
                    "value": "rotated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (pad_width[0], pad_width[1], pad_width[0], pad_width[1]))",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "self.all_grids[i].repeat(N, 1, 1, 1).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_140": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[theta.cos(), theta.sin(), 0], [-theta.sin(), theta.cos(), 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_219": {
                "variable": {
                    "value": "reco",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reco",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(x.shape[0], ch_size, it_size, it_size, device=x.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "reco * (PI.to(reco.device) / (2 * len(self.theta)))",
                            "BinOp"
                        ],
                        [
                            "F.pad(reco, (-pad_width[0], -pad_width[1], -pad_width[0], -pad_width[1]))",
                            "Call"
                        ],
                        [
                            "F.pad(reco, (pad, pad, pad, pad))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(-pad_width[0], -pad_width[1], -pad_width[0], -pad_width[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_235": {
                "variable": {
                    "value": "reco",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reco",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(x.shape[0], ch_size, it_size, it_size, device=x.device, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "reco * (PI.to(reco.device) / (2 * len(self.theta)))",
                            "BinOp"
                        ],
                        [
                            "F.pad(reco, (-pad_width[0], -pad_width[1], -pad_width[0], -pad_width[1]))",
                            "Call"
                        ],
                        [
                            "F.pad(reco, (pad, pad, pad, pad))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad, pad, pad, pad)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "meshgrid_249": {
                "*tensors": {
                    "value": "unitrange",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(torch.eye(3)[None, :2], (1, 1, 2, in_size), align_corners=self.scikit)[0, 0, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "indexing": {
                    "value": "unitrange",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(torch.eye(3)[None, :2], (1, 1, 2, in_size), align_corners=self.scikit)[0, 0, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_11": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_21": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "size / 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_22": {
                "start": {
                    "value": "size / 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fft_44": {
                "input": {
                    "value": "padded_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (0, 0, 0, pad_width))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ifft_45": {
                "input": {
                    "value": "projection_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.fft.fft(padded_tensor, dim=2) * fourier_filter",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fft_77": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (pad_width[0], pad_width[1], pad_width[0], pad_width[1]))",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_173": {
                "start": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_203": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (pad_width[0], pad_width[1], pad_width[0], pad_width[1]))",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "self.all_grids[i_theta].repeat(reco.shape[0], 1, 1, 1).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.scikit",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "affine_grid_248": {
                "theta": {
                    "value": "torch.eye(3)[None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 1, 2, in_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.scikit",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "affine_grid_260": {
                "theta": {
                    "value": "torch.eye(3)[None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 1, 2, len(self.theta))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.scikit",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "affine_grid_146": {
                "theta": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[[theta.cos(), theta.sin(), 0], [-theta.sin(), theta.cos(), 0]]], dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self._apply_pixel_shift(R, grid_size)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "grid_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, grid_size, grid_size]",
                            "List"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "data": {
                    "value": "[[[0, 0, 1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "data": {
                    "value": "diagonal - W",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ceil_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_262": {
                "*size": {
                    "value": "[grid_size] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_264": {
                "tensors": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_264": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ifft_78": {
                "input": {
                    "value": "projection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.fft.ifft(projection_fft, axis=2)[:, :, :input_size]",
                            "Subscript"
                        ],
                        [
                            "torch.fft.fft(x, dim=2) * fourier_filter",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_248": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_260": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "transporter.py": {
        "torch": {
            "linspace_118": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mu.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mu.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mu.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mu.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-1.0, 1.0, height, dtype=mu.dtype, device=mu.device)",
                            "Call"
                        ],
                        [
                            "torch.reshape(y, [1, 1, height, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_123": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-1.0, 1.0, width, dtype=mu.dtype, device=mu.device)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [1, 1, 1, width])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_126": {
                "variable": {
                    "value": "g_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y - mu_y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_127": {
                "variable": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - mu_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_129": {
                "variable": {
                    "value": "g_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-dist",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(in_channels, 32, kernel_size=(7, 7), stride=1, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(in_channels, 32, kernel_size=(7, 7), stride=1, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.regressor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(128, 128, kernel_size=(3, 3), stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_110": {
                "tensors": {
                    "value": "(u_row, u_col)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_160": {
                "variable": {
                    "value": "self.hlam_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.reshape(torch.Tensor([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]), (1, nkpts, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_17": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-1.0, 1.0, width, dtype=mu.dtype, device=mu.device)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [1, 1, 1, width])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "unbind_148": {
                "input": {
                    "value": "target_keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gaussian_map(spatial_softmax(self.point_net(target_images)), std=self.hlam_weights)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_87": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_90": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "input": {
                    "value": "torch.Tensor([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, nkpts, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linspace_107": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "S_row.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "features.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_109": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "S_col.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "features.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transporter_orig.py": {
        "torch": {
            "linspace_118": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mu.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mu.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mu.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mu.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-1.0, 1.0, height, dtype=mu.dtype, device=mu.device)",
                            "Call"
                        ],
                        [
                            "torch.reshape(y, [1, 1, height, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_123": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-1.0, 1.0, width, dtype=mu.dtype, device=mu.device)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [1, 1, 1, width])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_126": {
                "variable": {
                    "value": "g_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y - mu_y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_127": {
                "variable": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - mu_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_129": {
                "variable": {
                    "value": "g_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-dist",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(in_channels, 32, kernel_size=(7, 7), stride=1, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(in_channels, 32, kernel_size=(7, 7), stride=1, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.regressor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(128, 128, kernel_size=(3, 3), stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_110": {
                "tensors": {
                    "value": "(u_row, u_col)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_17": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-1.0, 1.0, width, dtype=mu.dtype, device=mu.device)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [1, 1, 1, width])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "unbind_148": {
                "input": {
                    "value": "target_keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gaussian_map(spatial_softmax(self.point_net(target_images)), std=self.std)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_87": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_90": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_107": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "S_row.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "features.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_109": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "S_col.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "features.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "softmax_15": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.reshape(features.shape[:-2] + (-1,))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "vqvae.py": {
        "torch": {
            "Embedding_11": {
                "variable": {
                    "value": "self._embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self._num_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self._embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_55": {
                "variable": {
                    "value": "self._embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self._num_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self._embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "self._ema_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_embeddings, self._embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self._block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_137": {
                "variable": {
                    "value": "self._layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Residual(in_channels, num_hiddens, num_residual_hiddens) for _ in range(self._num_residual_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "self._conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_hiddens // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "variable": {
                    "value": "self._conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_hiddens // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "variable": {
                    "value": "self._conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "variable": {
                    "value": "self._conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_190": {
                "variable": {
                    "value": "self._conv_trans_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_hiddens // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_195": {
                "variable": {
                    "value": "self._conv_trans_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_hiddens // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_221": {
                "variable": {
                    "value": "self._pre_vq_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_99": {
                "variable": {
                    "value": "self._ema_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self._ema_w * self._decay + (1 - self._decay) * dw",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "self._embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self._ema_w / self._ema_cluster_size.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_residual_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "num_residual_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}