{
    "data.py": {
        "sklearn": {
            "NearestNeighbors_56": {
                "variable": {
                    "value": "nbrs1",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "num_subsampled_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                },
                "metric": {
                    "value": "lambda x, y: minkowski(x, y)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "NearestNeighbors_60": {
                "variable": {
                    "value": "nbrs2",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "num_subsampled_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                },
                "metric": {
                    "value": "lambda x, y: minkowski(x, y)",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "main.py": {
        "torch": {
            "Adam_105": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_106": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(net.parameters(), lr=0.0001, weight_decay=0.001)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[30]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_165": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelNet40(partition='train', alpha=args.alpha, gaussian_noise=args.gaussian_noise, unseen=args.unseen, factor=args.factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_168": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelNet40(partition='test', alpha=args.alpha, gaussian_noise=args.gaussian_noise, unseen=args.unseen, factor=args.factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_118": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'checkpoints/%s/models/model.%d.t7' % (args.exp_name, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "from_numpy_34": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((xyz.shape[0], 33, xyz.shape[1]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(res).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_41": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_42": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_55": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_83": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_135": {
                "variable": {
                    "value": "self.reflect",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_142": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_centered * weights.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "src_corr_centered.transpose(2, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_161": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(U, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(V, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_163": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(S, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_164": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(R, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.eye(3).unsqueeze(0).expand(src.size(0), -1, -1).cuda().float()",
                            "Call"
                        ],
                        [
                            "torch.matmul(rotation_ab, R)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_178": {
                "variable": {
                    "value": "self.sim_mat_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Conv2DBlock((self.emb_dims * 2 + 4, 32, 32), 1) for _ in range(self.num_iter)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_179": {
                "variable": {
                    "value": "self.sim_mat_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Conv2DBlock((32, 32, 1), 1) for _ in range(self.num_iter)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_180": {
                "variable": {
                    "value": "self.weight_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Conv1DBlock((32, 32, 1), 1) for _ in range(self.num_iter)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "eye_239": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_239": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_240": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "src.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "svd_148": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "H[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_149": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(v, self.reflect)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "u.transpose(1, 0).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "det_150": {
                "variable": {
                    "value": "r_det",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(v, u.transpose(1, 0).contiguous())",
                            "Call"
                        ],
                        [
                            "torch.matmul(v, u.transpose(1, 0).contiguous())",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_196": {
                "variable": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(min_dist)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_250": {
                "variable": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_src_emb, _tgt_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_256": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_gt.unsqueeze(-1) - tgt.unsqueeze(-2)",
                            "BinOp"
                        ],
                        [
                            "(diff ** 2).sum(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(dist)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_261": {
                "variable": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[similarity_matrix, dist, diff]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_307": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "similarity_matrix.max(-1)[0]",
                            "Subscript"
                        ],
                        [
                            "self.weight_fc[i](weights).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(weights)",
                            "Call"
                        ],
                        [
                            "weights * (weights >= weights.median(-1, keepdim=True)[0]).float()",
                            "BinOp"
                        ],
                        [
                            "weights / (weights.sum(-1, keepdim=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_317": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rotation_ab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_ab.detach()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(R, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.eye(3).unsqueeze(0).expand(src.size(0), -1, -1).cuda().float()",
                            "Call"
                        ],
                        [
                            "torch.matmul(rotation_ab, R)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_58": {
                "in_channels": {
                    "value": "channels[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "channels[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_135": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "svd_152": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "H[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_153": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(v, self.reflect)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.reflect",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_154": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(v, self.reflect)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "u.transpose(1, 0).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_166": {
                "input": {
                    "value": "-R",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "(weights.unsqueeze(1) * src).sum(dim=2, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_278": {
                "variable": {
                    "value": "src_neg_ent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([_src_emb, _tgt_emb], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([similarity_matrix, dist, diff], 1)",
                            "Call"
                        ],
                        [
                            "self.sim_mat_conv1[i](similarity_matrix)",
                            "Call"
                        ],
                        [
                            "self.sim_mat_conv2[i](similarity_matrix)",
                            "Call"
                        ],
                        [
                            "similarity_matrix.squeeze(1)",
                            "Call"
                        ],
                        [
                            "similarity_matrix.clamp(min=-20, max=20)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_280": {
                "variable": {
                    "value": "tgt_neg_ent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([_src_emb, _tgt_emb], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([similarity_matrix, dist, diff], 1)",
                            "Call"
                        ],
                        [
                            "self.sim_mat_conv1[i](similarity_matrix)",
                            "Call"
                        ],
                        [
                            "self.sim_mat_conv2[i](similarity_matrix)",
                            "Call"
                        ],
                        [
                            "similarity_matrix.squeeze(1)",
                            "Call"
                        ],
                        [
                            "similarity_matrix.clamp(min=-20, max=20)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_287": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([_src_emb, _tgt_emb], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([similarity_matrix, dist, diff], 1)",
                            "Call"
                        ],
                        [
                            "self.sim_mat_conv1[i](similarity_matrix)",
                            "Call"
                        ],
                        [
                            "self.sim_mat_conv2[i](similarity_matrix)",
                            "Call"
                        ],
                        [
                            "similarity_matrix.squeeze(1)",
                            "Call"
                        ],
                        [
                            "similarity_matrix.clamp(min=-20, max=20)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_302": {
                "variable": {
                    "value": "weight_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "similarity_matrix.max(-1)[0]",
                            "Subscript"
                        ],
                        [
                            "self.weight_fc[i](weights).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(weights)",
                            "Call"
                        ],
                        [
                            "weights * (weights >= weights.median(-1, keepdim=True)[0]).float()",
                            "BinOp"
                        ],
                        [
                            "weights / (weights.sum(-1, keepdim=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "weight_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(corr_idx == torch.arange(corr_idx.size(1)).cuda().unsqueeze(0)).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_193": {
                "input": {
                    "value": "R_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src[batch_idx, :, src_idx].transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(rotation_ab, src) + translation_ab.unsqueeze(-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_316": {
                "input": {
                    "value": "rotation_ab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_ab.detach()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src[batch_idx, :, src_idx].transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(rotation_ab, src) + translation_ab.unsqueeze(-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_318": {
                "input": {
                    "value": "rotation_ab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_ab.detach()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "t.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_282": {
                "input": {
                    "value": "src_sig_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.significance_fc(src_embedding).squeeze(1)",
                            "Call"
                        ],
                        [
                            "src_sig_score[batch_idx, src_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "src_neg_ent.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_289": {
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(similarity_matrix, dim=-1)",
                            "Call"
                        ],
                        [
                            "temp[:, np.arange(temp.size(-2)), np.arange(temp.size(-1))]",
                            "Subscript"
                        ],
                        [
                            "-torch.log(temp)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "log_279": {
                "input": {
                    "value": "src_neg_ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(similarity_matrix, dim=-1)",
                            "Call"
                        ],
                        [
                            "(src_neg_ent * torch.log(src_neg_ent)).sum(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_281": {
                "input": {
                    "value": "tgt_neg_ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(similarity_matrix, dim=-2)",
                            "Call"
                        ],
                        [
                            "(tgt_neg_ent * torch.log(tgt_neg_ent)).sum(-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_301": {
                "start": {
                    "value": "corr_idx.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_301": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "torch": {
            "stack_21": {
                "variable": {
                    "value": "rotMat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w2 + x2 - y2 - z2, 2 * xy - 2 * wz, 2 * wy + 2 * xz, 2 * wz + 2 * xy, w2 - x2 + y2 - z2, 2 * yz - 2 * wx, 2 * xz - 2 * wy, 2 * wx + 2 * yz, w2 - x2 - y2 + z2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "variable": {
                    "value": "rotMat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quat.size(0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_72": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_32": {
                "input": {
                    "value": "rot_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quat2mat(rotation)",
                            "Call"
                        ],
                        [
                            "rotation",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "input": {
                    "value": "src.transpose(-1, -2).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "src ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "input": {
                    "value": "src.transpose(1, 0).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_63": {
                "input": {
                    "value": "src ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "input": {
                    "value": "x.transpose(2, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_55": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_63": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}