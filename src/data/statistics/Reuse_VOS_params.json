{
    "evaluate.py": {
        "torch": {
            "zeros_121": {
                "variable": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "480",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "854",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_186": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(paths['models']).expanduser().resolve() / args.model",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_120": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "480",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "854",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/Tensor_logger.py": {
        "torch": {
            "SummaryWriter_30": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/_npp/__init__.py": {
        "torch": {
            "load_16": {
                "variable": {
                    "value": "nppig_cpp",
                    "type": "variable",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "nppig_cpp",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "[_srcdir / 'nppig.cpp']",
                    "type": "List",
                    "possible_values": []
                },
                "extra_ldflags": {
                    "value": "['-lnppc', '-lnppig']",
                    "type": "List",
                    "possible_values": []
                },
                "with_cuda": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "build_directory": {
                    "value": "_build_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path.home() / 'tmp'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lib/datasets.py": {
        "torch": {
            "unique_100": {
                "variable": {
                    "value": "obj_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imread(self.anno_path / seq / (f0 + '.png'))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/image.py": {
        "torch": {
            "from_numpy_20": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(Image.open(filename))",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(np.atleast_3d(im).transpose(2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(im)",
                            "Call"
                        ],
                        [
                            "im.detach().cpu().view(-1, *im.shape[-2:]).permute(1, 2, 0).numpy()",
                            "Call"
                        ],
                        [
                            "Image.fromarray(im.detach().cpu().squeeze().numpy(), 'P')",
                            "Call"
                        ],
                        [
                            "im",
                            "Method Argument"
                        ],
                        [
                            "im",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_53": {
                "ndarray": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.astype(np.float32)[:2, :]",
                            "Subscript"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/tensorlist.py": {
        "torch": {}
    },
    "lib/training.py": {
        "torch": {
            "load_62": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "file",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(file, map_location='cpu')",
                            "Call"
                        ],
                        [
                            "dict(name=self.name, epoch=self.epoch, stats=self.stats, model=self.model.state_dict(), optimizer=self.optimizer.state_dict(), scheduler=self.scheduler.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.checkpoints_path / ('%s_ep%04d.pth' % (self.name, self.epoch))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SummaryWriter_119": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "str(self.log_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConcatDataset_153": {
                "variable": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[eval(cls)(**params) for (cls, params) in self.dataset]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataLoader_155": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset([eval(cls)(**params) for (cls, params) in self.dataset])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_tensor_84": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.to(self.model.device)",
                            "Call"
                        ],
                        [
                            "[recurse_scan(x) for x in v]",
                            "ListComp"
                        ],
                        [
                            "{k: recurse_scan(x) for (k, x) in v.items()}",
                            "DictComp"
                        ],
                        [
                            "new_stats.items()",
                            "Call"
                        ],
                        [
                            "self.stats.items()",
                            "Call"
                        ],
                        [
                            "self.stats.items()",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_50": {
                "f": {
                    "value": "Init_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "lib/training_datasets.py": {
        "torch": {
            "save_86": {
                "obj": {
                    "value": "meta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(frame_names=frame_names, occlusions=occlusions)",
                            "Call"
                        ],
                        [
                            "meta",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "meta_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(__file__).resolve().parent / (self.name + '_meta.pth')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_188": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_193": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(Image.open(lb_path))",
                            "Call"
                        ],
                        [
                            "np.array(Image.open(self.anno_path / spec.seq_name / (frame + '.png')))",
                            "Call"
                        ],
                        [
                            "(lb == spec.obj_id).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lb, dtype=torch.float32).view(1, 1, *lb.shape[:2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(lb, (480, 854), mode='nearest').byte().squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_194": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(Image.open(lb_path))",
                            "Call"
                        ],
                        [
                            "np.array(Image.open(self.anno_path / spec.seq_name / (frame + '.png')))",
                            "Call"
                        ],
                        [
                            "(lb == spec.obj_id).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lb, dtype=torch.float32).view(1, 1, *lb.shape[:2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(lb, (480, 854), mode='nearest').byte().squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(480, 854)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_194": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_48": {
                "f": {
                    "value": "meta_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(__file__).resolve().parent / (self.name + '_meta.pth')",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lib/utils.py": {
        "torch": {
            "cat_40": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolate(t, sz) for t in seq]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ic",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.out_channels",
                            "Attribute"
                        ],
                        [
                            "get_out_channels(layer._modules)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "oc",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ksize",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "ksize // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_30": {
                "negative_slope": {
                    "value": "negative_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.convBlend",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.out_channels",
                            "Attribute"
                        ],
                        [
                            "get_out_channels(layer._modules)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "oc",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[in1, in2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_34": {
                "obj": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sz.tolist() if torch.is_tensor(sz) else sz",
                            "IfExp"
                        ],
                        [
                            "seq[ref_tensor].shape[-2:]",
                            "Subscript"
                        ],
                        [
                            "sz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_35": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([interpolate(t, sz) for t in seq], dim=dim)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sz.tolist() if torch.is_tensor(sz) else sz",
                            "IfExp"
                        ],
                        [
                            "seq[ref_tensor].shape[-2:]",
                            "Subscript"
                        ],
                        [
                            "sz",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "isnan_63": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([interpolate(t, sz) for t in seq], dim=dim)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "isinf_63": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([interpolate(t, sz) for t in seq], dim=dim)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "*conv_args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_90": {
                "tensors": {
                    "value": "[Recept1, Recept2, Recept3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/GumbelModule.py": {
        "torch": {
            "rand_27": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "soft_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gumble_trick_log_prob_samples / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(logits.size()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_37": {
                "input": {
                    "value": "uniform_samples_tensor + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_63": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "len(logits.size()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/augmenter.py": {
        "torch": {
            "from_numpy_337": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_338": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_552": {
                "variable": {
                    "value": "aug_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aug_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[aug_images[i] for i in iis]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(aug_images)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_553": {
                "variable": {
                    "value": "aug_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aug_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[aug_labels[i] for i in iis]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(aug_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_349": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(kernel, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(kernel).float().view(1, 1, fh, fw).to(image.device)",
                            "Call"
                        ],
                        [
                            "kernel",
                            "Method Argument"
                        ],
                        [
                            "kernel",
                            "Method Argument"
                        ],
                        [
                            "kernel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_350": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(kernel, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(kernel).float().view(1, 1, fh, fw).to(image.device)",
                            "Call"
                        ],
                        [
                            "kernel",
                            "Method Argument"
                        ],
                        [
                            "kernel",
                            "Method Argument"
                        ],
                        [
                            "kernel",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "fpad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(fh // 2, fw // 2)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "squeeze_350": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/discriminator.py": {
        "torch": {
            "interpolate_48": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(self.x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(s, self.y_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.y_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_150": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wf * y + wb * (1 - y)",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_114": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.float()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "isnan_105": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "isinf_105": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_171": {
                "*args": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/feature_extractor.py": {
        "torch": {
            "tensor_28": {
                "variable": {
                    "value": "stds",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(0.229, 0.224, 0.225)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_28": {
                "variable": {
                    "value": "stds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(0.485, 0.456, 0.406)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_29": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_132": {
                "tensors": {
                    "value": "[out[L] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "split_131": {
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "chunk_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/memory.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "self.samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "capacity",
                            "Call"
                        ],
                        [
                            "capacity",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "*feature_size",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_14": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "capacity",
                            "Call"
                        ],
                        [
                            "capacity",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_15": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "capacity",
                            "Call"
                        ],
                        [
                            "capacity",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "*labels_size",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_16": {
                "variable": {
                    "value": "self.pixel_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "capacity",
                            "Call"
                        ],
                        [
                            "capacity",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "*labels_size",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_80": {
                "variable": {
                    "value": "(_, r_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weights",
                            "Attribute"
                        ],
                        [
                            "sw / (1 - lr)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "model/optimizer.py": {
        "torch": {
            "ones_29": {
                "variable": {
                    "value": "self.rho",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "self.residuals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "self.gradient_mags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_95": {
                "variable": {
                    "value": "self.rho",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_156": {
                "variable": {
                    "value": "dfdx_x",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "self.dfdxt_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p * alpha",
                            "BinOp"
                        ],
                        [
                            "x + self.p * alpha",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_84": {
                "outputs": {
                    "value": "self.f0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_157": {
                "outputs": {
                    "value": "self.f0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "dfdx_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(self.dfdxt_g, self.g, x, retain_graph=True)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/seg_network.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(fc, oc, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(nc, nc, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.convreluconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(2 * oc, oc, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_33": {
                "variable": {
                    "value": "shallow_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shallower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shallower",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, (2 * x.shape[-2], 2 * x.shape[-1]), mode='bicubic', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, image_size[-2:], mode='bicubic', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "d + torch.arange(-1, 3, dtype=torch.float32)",
                            "BinOp"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.up1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.up2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, image_size[-2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "TransprevX * gate.unsqueeze(2).unsqueeze(2).expand_as(prevX) + curr_x * (1 - gate).unsqueeze(2).unsqueeze(2).expand_as(curr_x)",
                            "BinOp"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.Diff_process(prevX, Diff)",
                            "Call"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(2 * x.shape[-2], 2 * x.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, (2 * x.shape[-2], 2 * x.shape[-1]), mode='bicubic', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, image_size[-2:], mode='bicubic', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "d + torch.arange(-1, 3, dtype=torch.float32)",
                            "BinOp"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.up1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.up2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, image_size[-2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "TransprevX * gate.unsqueeze(2).unsqueeze(2).expand_as(prevX) + curr_x * (1 - gate).unsqueeze(2).unsqueeze(2).expand_as(curr_x)",
                            "BinOp"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.Diff_process(prevX, Diff)",
                            "Call"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "image_size[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_126": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(2, 2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_128": {
                "variable": {
                    "value": "I00",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.75",
                            "UnaryOp"
                        ],
                        [
                            "F.pad(input, (2, 2, 2, 2), 'replicate')",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W00",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_129": {
                "variable": {
                    "value": "I01",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.75",
                            "UnaryOp"
                        ],
                        [
                            "F.pad(input, (2, 2, 2, 2), 'replicate')",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W01",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_130": {
                "variable": {
                    "value": "I10",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.75",
                            "UnaryOp"
                        ],
                        [
                            "F.pad(input, (2, 2, 2, 2), 'replicate')",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_131": {
                "variable": {
                    "value": "I11",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.75",
                            "UnaryOp"
                        ],
                        [
                            "F.pad(input, (2, 2, 2, 2), 'replicate')",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_135": {
                "variable": {
                    "value": "J0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(I00, I01)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_136": {
                "variable": {
                    "value": "J1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(I10, I11)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_137": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(J0, J1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_139": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs + interpolate(deeper, inputs.shape[-2:])",
                            "BinOp"
                        ],
                        [
                            "torch.stack((J0, J1), dim=-2).view(n, c, 2 * h, 2 * w)",
                            "Call"
                        ],
                        [
                            "F.pad(out, (-1, -1, -1, -1))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(-1, -1, -1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_156": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_158": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, (2 * x.shape[-2], 2 * x.shape[-1]), mode='bicubic', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, image_size[-2:], mode='bicubic', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "d + torch.arange(-1, 3, dtype=torch.float32)",
                            "BinOp"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.up1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.up2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, image_size[-2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "TransprevX * gate.unsqueeze(2).unsqueeze(2).expand_as(prevX) + curr_x * (1 - gate).unsqueeze(2).unsqueeze(2).expand_as(curr_x)",
                            "BinOp"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.Diff_process(prevX, Diff)",
                            "Call"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "image_size[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleDict_172": {
                "variable": {
                    "value": "self.TSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_173": {
                "variable": {
                    "value": "self.RRB1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_174": {
                "variable": {
                    "value": "self.CAB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_175": {
                "variable": {
                    "value": "self.RRB2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "global_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shallow_pool, deeper_pool, att_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "global_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shallow_pool, deeper_pool)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.bblock",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(oc, oc, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.bblock",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(oc, oc, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_58": {
                "input": {
                    "value": "h + self.bblock(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_98": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, (2 * x.shape[-2], 2 * x.shape[-1]), mode='bicubic', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, image_size[-2:], mode='bicubic', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "d + torch.arange(-1, 3, dtype=torch.float32)",
                            "BinOp"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.up1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.up2(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, image_size[-2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "TransprevX * gate.unsqueeze(2).unsqueeze(2).expand_as(prevX) + curr_x * (1 - gate).unsqueeze(2).unsqueeze(2).expand_as(curr_x)",
                            "BinOp"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.Diff_process(prevX, Diff)",
                            "Call"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.RRB2[L](h)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_17": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reduce(ft)",
                            "Call"
                        ],
                        [
                            "adaptive_cat((h, score), dim=1, ref_tensor=0)",
                            "Call"
                        ],
                        [
                            "self.transform(h)",
                            "Call"
                        ],
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_multi(x1, y1)",
                            "Call"
                        ],
                        [
                            "self.TSE[L](ft.repeat(num_targets, 1, 1, 1), s, x)",
                            "Call"
                        ],
                        [
                            "self.TSE[L](ft, s, x)",
                            "Call"
                        ],
                        [
                            "self.RRB1[L](h)",
                            "Call"
                        ],
                        [
                            "self.CAB[L](hpool, h)",
                            "Call"
                        ],
                        [
                            "self.TSE[L](ft.repeat(num_targets, 1, 1, 1), s, x)",
                            "Call"
                        ],
                        [
                            "self.TSE[L](ft, s, x)",
                            "Call"
                        ],
                        [
                            "self.RRB1[L](h)",
                            "Call"
                        ],
                        [
                            "self.CAB[L](hpool, h)",
                            "Call"
                        ],
                        [
                            "self.TSE[L](ft.repeat(num_targets, 1, 1, 1), s, x)",
                            "Call"
                        ],
                        [
                            "self.TSE[L](ft, s, x)",
                            "Call"
                        ],
                        [
                            "self.RRB1[L](h)",
                            "Call"
                        ],
                        [
                            "self.CAB[L](hpool, h)",
                            "Call"
                        ],
                        [
                            "self.TSE[L](ft.repeat(num_targets, 1, 1, 1), s, x)",
                            "Call"
                        ],
                        [
                            "self.TSE[L](ft, s, x)",
                            "Call"
                        ],
                        [
                            "self.TSE[L](ft.repeat(num_targets, 1, 1, 1), s, x)",
                            "Call"
                        ],
                        [
                            "self.TSE[L](ft, s, x)",
                            "Call"
                        ],
                        [
                            "self.RRB1[L](h)",
                            "Call"
                        ],
                        [
                            "self.CAB[L](hpool, h)",
                            "Call"
                        ],
                        [
                            "self.RRB1[L](h)",
                            "Call"
                        ],
                        [
                            "self.CAB[L](hpool, h)",
                            "Call"
                        ],
                        [
                            "self.TSE[L](ft.repeat(num_targets, 1, 1, 1), s, x)",
                            "Call"
                        ],
                        [
                            "self.TSE[L](ft, s, x)",
                            "Call"
                        ],
                        [
                            "self.RRB1[L](h)",
                            "Call"
                        ],
                        [
                            "self.CAB[L](hpool, h)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_34": {
                "input": {
                    "value": "deeper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deeper",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_40": {
                "input": {
                    "value": "conv_1x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convreluconv(global_pool)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "oc",
                            "Method Argument"
                        ],
                        [
                            "oc",
                            "Method Argument"
                        ],
                        [
                            "oc",
                            "Method Argument"
                        ],
                        [
                            "oc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_97": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/template_matching.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "self.conv_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ch_in, ch_key, 1, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.conv_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ch_in, ch_val, 1, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_29": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(val_mm, key_mm).mul(1.0 / math.sqrt(H * W))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.conv_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ch_in, ch_key, 1, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.conv_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ch_in, ch_feat, 1, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.blend",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ch_val + ch_feat, ch_val + ch_feat, 5, 1, 2, groups=(ch_val + ch_feat) // 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_61": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "template",
                    "type": "variable",
                    "possible_values": [
                        [
                            "template",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "key_mm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.reshape(B, K, -1).permute((0, 2, 1)).contiguous()",
                            "Call"
                        ],
                        [
                            "key.reshape(B, K, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.blend(torch.cat([feat, similarity], dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "ch_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_key",
                            "Method Argument"
                        ],
                        [
                            "ch_key",
                            "Method Argument"
                        ],
                        [
                            "ch_key",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_11": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "ch_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_key",
                            "Method Argument"
                        ],
                        [
                            "ch_key",
                            "Method Argument"
                        ],
                        [
                            "ch_key",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_key",
                            "Method Argument"
                        ],
                        [
                            "ch_key",
                            "Method Argument"
                        ],
                        [
                            "ch_key",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "ch_key // group_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "ch_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_val",
                            "Method Argument"
                        ],
                        [
                            "ch_val",
                            "Method Argument"
                        ],
                        [
                            "ch_val",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_16": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "ch_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_val",
                            "Method Argument"
                        ],
                        [
                            "ch_val",
                            "Method Argument"
                        ],
                        [
                            "ch_val",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_val",
                            "Method Argument"
                        ],
                        [
                            "ch_val",
                            "Method Argument"
                        ],
                        [
                            "ch_val",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "ch_val // group_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_29": {
                "input": {
                    "value": "val_mm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val.reshape(B, V, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "key_mm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key.reshape(B, K, -1).permute((0, 2, 1)).contiguous()",
                            "Call"
                        ],
                        [
                            "key.reshape(B, K, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_29": {
                "input": {
                    "value": "1.0 / math.sqrt(H * W)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "ch_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_key",
                            "Method Argument"
                        ],
                        [
                            "ch_key",
                            "Method Argument"
                        ],
                        [
                            "ch_key",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "ch_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_key",
                            "Method Argument"
                        ],
                        [
                            "ch_key",
                            "Method Argument"
                        ],
                        [
                            "ch_key",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_key",
                            "Method Argument"
                        ],
                        [
                            "ch_key",
                            "Method Argument"
                        ],
                        [
                            "ch_key",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "ch_key // group_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_42": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "ch_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_feat",
                            "Method Argument"
                        ],
                        [
                            "ch_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "ch_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_feat",
                            "Method Argument"
                        ],
                        [
                            "ch_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_feat",
                            "Method Argument"
                        ],
                        [
                            "ch_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "ch_feat // group_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_48": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "ch_val + ch_feat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch_val + ch_feat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "(ch_val + ch_feat) // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "ch_val + ch_feat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_feat",
                            "Method Argument"
                        ],
                        [
                            "ch_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "[feat, similarity]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/tracker.py": {
        "torch": {
            "Conv2d_92": {
                "variable": {
                    "value": "self.Convert_Diff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "Tmat_params.Tmat_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "variable": {
                    "value": "object_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] + sequence.obj_ids",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "self.current_masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(self.targets) + len(new_objects) + 1, *image.shape[-2:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_339": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.current_masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_341": {
                "variable": {
                    "value": "segs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p / (1 - p)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "Tmat_params.Tmat_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "fc1bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.convGS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "empty_cache_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_265": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_322": {
                "variable": {
                    "value": "S_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Sout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.squeeze(0).squeeze(0)",
                            "Call"
                        ],
                        [
                            "(255 * (Sout - S_min) / (S_max - S_min)).cpu().byte().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_323": {
                "variable": {
                    "value": "S_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Sout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.squeeze(0).squeeze(0)",
                            "Call"
                        ],
                        [
                            "(255 * (Sout - S_min) / (S_max - S_min)).cpu().byte().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_329": {
                "variable": {
                    "value": "self.current_masks[target.index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.refiner.Test_Forward(s, features, gate, self.prevRefine[obj_id], Diff, im_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_340": {
                "input": {
                    "value": "1 - p[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_76": {
                "output_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_79": {
                "output_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_211": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.current_masks",
                            "Attribute"
                        ],
                        [
                            "torch.clamp(masks, 1e-07, 1 - 1e-07)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_213": {
                "variable": {
                    "value": "segs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks / (1 - masks)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_276": {
                "size": {
                    "value": "(self.H8, self.W8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_280": {
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_298": {
                "size": {
                    "value": "(self.H8, self.W8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_299": {
                "tensors": {
                    "value": "[ft8, PrevScore8]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_212": {
                "input": {
                    "value": "1 - masks[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/training_model.py": {
        "torch": {
            "Conv2d_74": {
                "variable": {
                    "value": "self.Convert_Diff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "Tmat_params.Tmat_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_81": {
                "variable": {
                    "value": "self.compute_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_83": {
                "variable": {
                    "value": "self.L1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_84": {
                "variable": {
                    "value": "self.L2_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "Reuse_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "visdom_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(images) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h16",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PrevScore16.size()",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "w16",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PrevScore16.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "visdom_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(images) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h16",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PrevScore16.size()",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "w16",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PrevScore16.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "visdom_img",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(images) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "images[0].size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "images[0].size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "visdom_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(images) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h16",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PrevScore16.size()",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "w16",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PrevScore16.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_174": {
                "variable": {
                    "value": "visdom_Tscore",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(images) - 1, 1, h16, w16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "visdom_Oscore",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(images) - 1, 1, h16, w16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_176": {
                "variable": {
                    "value": "visdom_Fscore",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(images) - 1, 1, h16, w16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_341": {
                "variable": {
                    "value": "final_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._forward(images[i].to(self.device), Template, prevSeg8, PrevScore16, prevX, PrevFeature)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_scores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_342": {
                "variable": {
                    "value": "Mixed_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Mixed_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(Mixed_score, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_343": {
                "variable": {
                    "value": "org_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "org_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._forward(images[i].to(self.device), Template, prevSeg8, PrevScore16, prevX, PrevFeature)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(org_score, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "Tmat_params.Tmat_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "fc1bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.convGS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "gt_TargetP",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_sameRatio.unsqueeze(1), (1 - gt_sameRatio).unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_220": {
                "variable": {
                    "value": "visdom_gt[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_221": {
                "variable": {
                    "value": "visdom_seg[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_307": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.shape[0]",
                            "Subscript"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_369": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.load_target_model(specs[i], L)",
                            "Call"
                        ],
                        [
                            "torch.load(fname, map_location=self.device) if fname.exists() else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "state_dict",
                            "Method Argument"
                        ],
                        [
                            "state_dict",
                            "Method Argument"
                        ],
                        [
                            "state_dict",
                            "Method Argument"
                        ],
                        [
                            "state_dict",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tmodel_filename(spec, layer_name)",
                            "Call"
                        ],
                        [
                            "self.tmodel_filename(spec, layer_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "isinf_147": {
                "input": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i / u",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_148": {
                "input": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i / u",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Upsample_277": {
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_279": {
                "size": {
                    "value": "(int(np.ceil(H / 2)), int(np.ceil(W / 2)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_299": {
                "size": {
                    "value": "(ft8.size(2), ft8.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_300": {
                "tensors": {
                    "value": "[ft8, PrevScore8]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_350": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_label.float()",
                            "Call"
                        ],
                        [
                            "self.refiner(final_scores, Refine_layers, gate, prevX, Diff, image.shape, Mixed_score)",
                            "Call"
                        ],
                        [
                            "interpolate(y, image.shape[-2:])",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveMaxPool2d_65": {
                "output_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_68": {
                "output_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_188": {
                "input": {
                    "value": "union.view(b, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_197": {
                "input": {
                    "value": "gt_TargetP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([gt_sameRatio.unsqueeze(1), (1 - gt_sameRatio).unsqueeze(1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Upsample_205": {
                "size": {
                    "value": "(h16, w16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_360": {
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tmodel_filename(spec, layer_name)",
                            "Call"
                        ],
                        [
                            "self.tmodel_filename(spec, layer_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_196": {
                "input": {
                    "value": "gate_prob - gt_TargetP",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Upsample_220": {
                "size": {
                    "value": "(h16, w16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_221": {
                "size": {
                    "value": "(h16, w16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_229": {
                "input": {
                    "value": "Reuse_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((b, 1)).to(self.device)",
                            "Call"
                        ],
                        [
                            "Reuse_gates + reuse_gate",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_154": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.convGS.parameters(), 'lr': 0.0005, 'betas': (0.9, 0.999), 'weight_decay': 0, 'amsgrad': True}, {'params': model.Tmatching.parameters()}, {'params': model.Convert_Diff.parameters()}, {'params': model.refiner.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StepLR_161": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam([{'params': model.convGS.parameters(), 'lr': 0.0005, 'betas': (0.9, 0.999), 'weight_decay': 0, 'amsgrad': True}, {'params': model.Tmatching.parameters()}, {'params': model.Convert_Diff.parameters()}, {'params': model.refiner.parameters()}], lr=0.0005, betas=(0.9, 0.999), weight_decay=1e-05, amsgrad=True)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "127",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}