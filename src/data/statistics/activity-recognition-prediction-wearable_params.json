{
    "Classifiers/HMM/src/hmm_model.py": {
        "sklearn": {}
    },
    "Classifiers/HMM/src/model_fisher.py": {
        "sklearn": {}
    },
    "Classifiers/HMM/src/model_pca.py": {
        "sklearn": {
            "StandardScaler_116": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_117": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "type": "Name",
                    "possible_values": [
                        [
                            [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15
                            ],
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Classifiers/HMM/src/model_wrapper.py": {
        "sklearn": {}
    },
    "Classifiers/HMM/src/tools.py": {
        "sklearn": {
            "train_test_split_159": {
                "variable": {
                    "value": "(id_train, id_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(nbr_sequences)",
                    "type": null,
                    "possible_values": []
                },
                "train_size": {
                    "value": "ratio[0] / 100",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "train_test_split_111": {
                "variable": {
                    "value": "(id_train, id_subset)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(nbr_sequences)",
                    "type": null,
                    "possible_values": []
                },
                "train_size": {
                    "value": "ratio[0] / 100",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "train_test_split_112": {
                "variable": {
                    "value": "(id_test, id_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "id_subset",
                    "type": null,
                    "possible_values": []
                },
                "train_size": {
                    "value": "ratio[2] * 100 / (100 - ratio[0]) / 100",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "train_test_split_129": {
                "variable": {
                    "value": "(id_train, id_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(nbr_sequences)",
                    "type": null,
                    "possible_values": []
                },
                "train_size": {
                    "value": "ratio[0] / 100",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matthews_corrcoef_375": {
                "y_true": {
                    "value": "index_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list_states.index(real_labels[j])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "index_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list_states.index(pred_labels[j])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "f1_score_381": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "list_states",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sorted(list_states)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pickle.load(input)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "VTSFE/app/models/common.py": {
        "tensorflow": {}
    },
    "VTSFE/app/params.py": {
        "tensorflow": {}
    },
    "VTSFE/app/params_vae_only.py": {
        "tensorflow": {}
    },
    "VTSFE/src/launcher.py": {
        "tensorflow": {
            "set_random_seed_19": {
                "seed": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reset_default_graph_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "VTSFE/src/lib/useful_functions.py": {
        "tensorflow": {
            "constant_37": {
                "variable": {
                    "value": "minus_one",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_26": {
                "x": {
                    "value": "tf.nn.relu(tf.subtract(x, lim))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "lim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_mul_38": {
                "scalar": {
                    "value": "minus_one",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(-1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.subtract(tf.nn.relu(tf.subtract(lim, inferior_limiter(x, tf.scalar_mul(minus_one, lim)))), lim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_26": {
                "features": {
                    "value": "tf.subtract(x, lim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_40": {
                "x": {
                    "value": "tf.nn.relu(tf.subtract(lim, inferior_limiter(x, tf.scalar_mul(minus_one, lim))))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "lim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "subtract_26": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "lim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_41": {
                "features": {
                    "value": "tf.subtract(lim, inferior_limiter(x, tf.scalar_mul(minus_one, lim)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_42": {
                "x": {
                    "value": "lim",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "inferior_limiter(x, tf.scalar_mul(minus_one, lim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_46": {
                "scalar": {
                    "value": "minus_one",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(-1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "lim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "VTSFE/src/models_dmp.py": {
        "tensorflow": {
            "constant_62": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0 - self.alpha * self.beta * np.square(self.vtsfe.delta) / self.tau, self.vtsfe.delta * (1.0 - self.alpha * self.vtsfe.delta / self.tau)], [-self.alpha * self.beta * self.vtsfe.delta / self.tau, 1.0 - self.alpha * self.vtsfe.delta / self.tau]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_109": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(hs, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(hs, [-1, self.nb_frames_mvt * self.f_architecture['h']])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(hs, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(hs, [-1, self.nb_frames_mvt * self.f_architecture['h']])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.nb_frames_mvt * self.f_architecture['h']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mod_207": {
                "variable": {
                    "value": "f_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "tf.add(self.vtsfe.sub_sequence_origin, frame_number)",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "self.nb_frames_mvt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_229": {
                "variable": {
                    "value": "base_functions_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "base_functions_samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.get_base_functions_samples(frame_number - 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(base_functions_samples, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_239": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.divide(f, tf.reduce_sum(base_functions_samples))",
                            "Call"
                        ],
                        [
                            "tf.transpose(f)",
                            "Call"
                        ],
                        [
                            "self.forcing_term_network(t, weights=w)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_sum(base_functions_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_245": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.divide(f, tf.reduce_sum(base_functions_samples))",
                            "Call"
                        ],
                        [
                            "tf.transpose(f)",
                            "Call"
                        ],
                        [
                            "self.forcing_term_network(t, weights=w)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_mul_300": {
                "variable": {
                    "value": "n_input_log_2pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "scalar": {
                    "value": "tf.constant(self.vtsfe.vae_architecture['n_z'], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.log(2.0 * np.pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_304": {
                "variable": {
                    "value": "half",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_305": {
                "variable": {
                    "value": "log_inf",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_69": {
                "variable": {
                    "value": "self.divider",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0 + self.alpha * self.vtsfe.delta * self.tau / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_70": {
                "variable": {
                    "value": "self.c_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "2.0 - self.alpha * self.beta * self.tau * np.square(self.vtsfe.delta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_71": {
                "variable": {
                    "value": "self.c_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.alpha * self.vtsfe.delta * self.tau / 2.0 - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_72": {
                "variable": {
                    "value": "self.c_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.tau * np.square(self.vtsfe.delta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_73": {
                "variable": {
                    "value": "self.c_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.alpha * self.beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_75": {
                "variable": {
                    "value": "self.c_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.vtsfe.delta ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_126": {
                "a": {
                    "value": "tf.reshape(w_out, [-1, self.base_functions['n'], self.vtsfe.vae_architecture['n_z']])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_146": {
                "variable": {
                    "value": "all_weights[weights][w_out]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "w_out",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "glorot_init(nb_frames * h, n_out * n_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_147": {
                "variable": {
                    "value": "all_weights[biases][b_w_out]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "b_w_out",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([n_out * n_z], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_203": {
                "a": {
                    "value": "tf.constant(psis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_235": {
                "variable": {
                    "value": "f_component",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f_weights[i]",
                            "Subscript"
                        ],
                        [
                            "self.forcing_term_weights_network(x_seq, reuse_weights=True)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "base_functions_samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.get_base_functions_samples(frame_number - 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(base_functions_samples, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_361": {
                "variable": {
                    "value": "f_cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add_n(f_costs[t])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(nb_recurrence_iter_goal * nb_recurrence_iter ** 2, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "vae_dmp.encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "self.system_noise_log_scale_sq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "system_noise_log_scale_sq",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1, n_z], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_56": {
                "variable": {
                    "value": "self.system_noise_log_scale_sq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros([1, n_z], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_116": {
                "x": {
                    "value": "tf.matmul(hs, weights['w_out'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b_w_out']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "tensor": {
                    "value": "w_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.output_function(tf.add(tf.matmul(hs, weights['w_out']), biases['b_w_out']))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.base_functions['n'], self.vtsfe.vae_architecture['n_z']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "dmp.gaussian_mixture_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_weights",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_143": {
                "variable": {
                    "value": "all_weights[weights][h + str(n).zfill(nb_digits)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'h' + str(n).zfill(nb_digits)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "glorot_init(n_input, h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_144": {
                "variable": {
                    "value": "all_weights[biases][b + str(n).zfill(nb_digits)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'b' + str(n).zfill(nb_digits)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([h], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_203": {
                "value": {
                    "value": "psis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "add_208": {
                "x": {
                    "value": "self.vtsfe.sub_sequence_origin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "frame_number",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_241": {
                "input_tensor": {
                    "value": "base_functions_samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.get_base_functions_samples(frame_number - 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(base_functions_samples, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_301": {
                "value": {
                    "value": "self.vtsfe.vae_architecture['n_z']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_302": {
                "x": {
                    "value": "2.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "a": {
                    "value": "hs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(hs, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(hs, [-1, self.nb_frames_mvt * self.f_architecture['h']])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['w_out']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_237": {
                "tensor": {
                    "value": "f_component",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(w, base_functions_samples)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_362": {
                "inputs": {
                    "value": "f_costs[t]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_365": {
                "value": {
                    "value": "nb_recurrence_iter_goal * nb_recurrence_iter ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "shape": {
                    "value": "[1, n_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_58": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_99": {
                "x": {
                    "value": "tf.matmul(x_sequence[n], weights['h' + str(n).zfill(nb_digits)])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b' + str(n).zfill(nb_digits)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "shape": {
                    "value": "[n_out * n_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_320": {
                "variable": {
                    "value": "x_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[list(x_reconstr_sequence)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_321": {
                "variable": {
                    "value": "x_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_reconstr_sequence_pre, x_seq, x_reconstr_sequence_post]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "shape": {
                    "value": "[1, n_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "a": {
                    "value": "x_sequence[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "weights['h' + str(n).zfill(nb_digits)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "shape": {
                    "value": "[h]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_311": {
                "device_name": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.vtsfe.devices[k % len(self.vtsfe.devices)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "add_328": {
                "variable": {
                    "value": "system_noise_log_scale_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vae.one_plus_t_minus_2_K_sq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "vae.system_noise_log_scale_sq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_334": {
                "variable": {
                    "value": "reconstr_loss_sq_sub",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(f, vae.f)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "f_reconstr_loss_sq_sub",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "divide_336": {
                "variable": {
                    "value": "reconstr_loss_division",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reconstr_loss_sq_sub",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(f, vae.f), name='f_reconstr_loss_sq_sub')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.exp(system_noise_log_scale_sq)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "f_reconstr_loss_division",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_mul_338": {
                "variable": {
                    "value": "reconstr_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "scalar": {
                    "value": "half",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(0.5, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.add(reconstr_loss_division, tf.add(system_noise_log_scale_sq, tf.log(2.0 * np.pi)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_334": {
                "x": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.divide(f, tf.reduce_sum(base_functions_samples))",
                            "Call"
                        ],
                        [
                            "tf.transpose(f)",
                            "Call"
                        ],
                        [
                            "self.forcing_term_network(t, weights=w)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "vae.f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_336": {
                "x": {
                    "value": "system_noise_log_scale_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(vae.one_plus_t_minus_2_K_sq, vae.system_noise_log_scale_sq)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_340": {
                "x": {
                    "value": "reconstr_loss_division",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.divide(reconstr_loss_sq_sub, tf.exp(system_noise_log_scale_sq), name='f_reconstr_loss_division')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.add(system_noise_log_scale_sq, tf.log(2.0 * np.pi))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_352": {
                "scalar": {
                    "value": "tf.constant(np.pi, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "reconstr_loss_sq_sub",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(f, vae.f), name='f_reconstr_loss_sq_sub')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_342": {
                "x": {
                    "value": "system_noise_log_scale_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(vae.one_plus_t_minus_2_K_sq, vae.system_noise_log_scale_sq)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.log(2.0 * np.pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_353": {
                "value": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_344": {
                "x": {
                    "value": "2.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "VTSFE/src/models_dmp_vae.py": {
        "tensorflow": {
            "constant_54": {
                "variable": {
                    "value": "half",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_70": {
                "variable": {
                    "value": "self.system_noise_log_scale_sq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model.system_noise_log_scale_sq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "system_noise_log_scale_sq_replication",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_71": {
                "variable": {
                    "value": "self.system_noise_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.scalar_mul(half, self.system_noise_log_scale_sq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_357": {
                "variable": {
                    "value": "without_noise_part",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.scalar_mul(m.c_1, z), tf.scalar_mul(m.c_2, previous_z))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.scalar_mul(m.c_3, tf.add(tf.scalar_mul(m.c_4, z_goal), self.f))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_416": {
                "variable": {
                    "value": "b_sum_zg_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.scalar_mul(tf.constant(m.alpha * m.beta, dtype=tf.float32), z_goal)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_424": {
                "variable": {
                    "value": "b_sq_deltau",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.square(self.vtsfe.delta) / m.tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_425": {
                "variable": {
                    "value": "b_deltau",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.vtsfe.delta / m.tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_474": {
                "variable": {
                    "value": "next_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "next_z",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(next_z, perm=[1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_476": {
                "variable": {
                    "value": "next_z_derivative",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "next_z_derivative",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(next_z_derivative, perm=[1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_520": {
                "variable": {
                    "value": "sys_noise_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(hidden_layer, weights['out_mean'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['out_mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_522": {
                "variable": {
                    "value": "sys_noise_log_sigma_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(hidden_layer, weights['out_log_sigma'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['out_log_sigma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_543": {
                "variable": {
                    "value": "one",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_544": {
                "variable": {
                    "value": "half",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_555": {
                "variable": {
                    "value": "K_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.model.c_3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_556": {
                "variable": {
                    "value": "self.one_plus_t_minus_2_K_sq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "one",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.scalar_mul(K_sq, tf.constant(self.frame_number - 2, dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_619": {
                "variable": {
                    "value": "latent_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add_n(latent_loss_addn)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(nb_samples, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_653": {
                "variable": {
                    "value": "self.reconstr_loss_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "reconstr_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_654": {
                "variable": {
                    "value": "self.model_loss_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(self.x)[0], self.vae_architecture['n_z']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_mul_659": {
                "variable": {
                    "value": "self.reconstr_loss_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scalar": {
                    "value": "c_ta",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.vtsfe.annealing_schedule",
                            "Attribute"
                        ],
                        [
                            "self.vtsfe.annealing_schedule",
                            "Attribute"
                        ]
                    ]
                },
                "x": {
                    "value": "self.reconstr_loss_raw",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_660": {
                "variable": {
                    "value": "self.continuity_loss_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.z.get_shape()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_665": {
                "variable": {
                    "value": "self.reconstr_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.reconstr_loss_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_669": {
                "variable": {
                    "value": "self.latent_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.latent_loss_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_673": {
                "variable": {
                    "value": "self.model_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.model_loss_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_677": {
                "variable": {
                    "value": "self.cost_add",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[self.reconstr_loss, self.latent_loss, self.model_loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_684": {
                "variable": {
                    "value": "self.model_loss_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.model_loss_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "moments_689": {
                "variable": {
                    "value": "(self.model_loss_avg, self.model_loss_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "self.model_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_693": {
                "variable": {
                    "value": "self.continuity_loss_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.z.get_shape()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_702": {
                "variable": {
                    "value": "self.cost_add",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.cost_add",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(self.continuity_loss_per_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_711": {
                "variable": {
                    "value": "self.var_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.vae_architecture['n_z']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sys_noise_target",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_712": {
                "variable": {
                    "value": "self.var_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(self.var_to_correct, self.var_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_718": {
                "variable": {
                    "value": "self.var_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scalar": {
                    "value": "tf.constant(self.model_continuity_error_coeff, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(self.var_correction, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_725": {
                "variable": {
                    "value": "self.continuity_loss_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.continuity_loss_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.var_correction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_430": {
                "variable": {
                    "value": "b_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b_sum_zg_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(tf.scalar_mul(tf.constant(m.alpha * m.beta, dtype=tf.float32), z_goal), self.f)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sys_noises[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_451": {
                "variable": {
                    "value": "zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.slice(z, [0, i], [-1, 1]), tf.slice(z_derivative, [0, i], [-1, 1])]",
                            "List"
                        ],
                        [
                            "tf.reshape(zs, [2, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_56": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_mul_72": {
                "scalar": {
                    "value": "half",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(0.5, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.5, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "self.system_noise_log_scale_sq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_358": {
                "x": {
                    "value": "tf.scalar_mul(m.c_1, z)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.scalar_mul(m.c_2, previous_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_368": {
                "scalar": {
                    "value": "m.c_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.scalar_mul(m.c_4, z_goal), self.f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_417": {
                "scalar": {
                    "value": "tf.constant(m.alpha * m.beta, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "z_goal",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "slice_457": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "bs[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, i]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_459": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(bs[j], [0, 0, i], [-1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [2, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_462": {
                "variable": {
                    "value": "next_zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(A, zs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(bs[j], [0, 0, i], [-1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [2, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_511": {
                "x": {
                    "value": "tf.matmul(tf.concat([self.x, model_noise_information], 1), weights['h1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_520": {
                "a": {
                    "value": "hidden_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.activation_function(tf.add(tf.matmul(layer_1, weights['h2']), biases['b2']))",
                            "Call"
                        ],
                        [
                            "layer_1",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['out_mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_522": {
                "a": {
                    "value": "hidden_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.activation_function(tf.add(tf.matmul(layer_1, weights['h2']), biases['b2']))",
                            "Call"
                        ],
                        [
                            "layer_1",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['out_log_sigma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_mul_558": {
                "scalar": {
                    "value": "K_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.square(self.model.c_3)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.constant(self.frame_number - 2, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_620": {
                "inputs": {
                    "value": "latent_loss_addn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_621": {
                "value": {
                    "value": "nb_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.nb_recurrence_iter_goal * self.nb_recurrence_iter ** 2",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_704": {
                "input_tensor": {
                    "value": "self.continuity_loss_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_713": {
                "x": {
                    "value": "self.var_to_correct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.var_target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_719": {
                "value": {
                    "value": "self.model_continuity_error_coeff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_720": {
                "input_tensor": {
                    "value": "self.var_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_325": {
                "x": {
                    "value": "tf.add(tf.scalar_mul(self.model.c_3, tf.add(self.f, sys_noises[i])), tf.scalar_mul(tf.constant(2, dtype=tf.float32), z))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "previous_z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_mul_359": {
                "scalar": {
                    "value": "m.c_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_mul_363": {
                "scalar": {
                    "value": "m.c_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "previous_z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_370": {
                "x": {
                    "value": "tf.scalar_mul(m.c_4, z_goal)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_384": {
                "x": {
                    "value": "tf.subtract(without_noise_part, tf.scalar_mul(m.c_3, sys_noises[i]))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "m.divider",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_418": {
                "value": {
                    "value": "m.alpha * m.beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_447": {
                "input_": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, i]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_448": {
                "input_": {
                    "value": "z_derivative",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, i]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_511": {
                "a": {
                    "value": "tf.concat([self.x, model_noise_information], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "weights['h1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_515": {
                "x": {
                    "value": "tf.matmul(layer_1, weights['h2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_560": {
                "value": {
                    "value": "self.frame_number - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_166": {
                "variable": {
                    "value": "sys_noise_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.exp(encoded_inputs[1]), sys_noise_var_recurrence)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_326": {
                "x": {
                    "value": "tf.scalar_mul(self.model.c_3, tf.add(self.f, sys_noises[i]))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.scalar_mul(tf.constant(2, dtype=tf.float32), z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_371": {
                "scalar": {
                    "value": "m.c_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "z_goal",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "subtract_385": {
                "x": {
                    "value": "without_noise_part",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(tf.scalar_mul(m.c_1, z), tf.scalar_mul(m.c_2, previous_z)), tf.scalar_mul(m.c_3, tf.add(tf.scalar_mul(m.c_4, z_goal), self.f)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.scalar_mul(m.c_3, sys_noises[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_437": {
                "scalar": {
                    "value": "b_sq_deltau",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(np.square(self.vtsfe.delta) / m.tau, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "b_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(b_sum_zg_f, sys_noises[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_mul_438": {
                "scalar": {
                    "value": "b_deltau",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(self.vtsfe.delta / m.tau, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "b_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(b_sum_zg_f, sys_noises[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_462": {
                "a": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "m.A",
                            "Attribute"
                        ]
                    ]
                },
                "b": {
                    "value": "zs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.slice(z, [0, i], [-1, 1]), tf.slice(z_derivative, [0, i], [-1, 1])]",
                            "List"
                        ],
                        [
                            "tf.reshape(zs, [2, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_511": {
                "values": {
                    "value": "[self.x, model_noise_information]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_515": {
                "a": {
                    "value": "layer_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.activation_function(tf.add(tf.matmul(tf.concat([self.x, model_noise_information], 1), weights['h1']), biases['b1']))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['h2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_654": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_120": {
                "device_name": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.vtsfe.devices[k % len(self.vtsfe.devices)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_132": {
                "variable": {
                    "value": "model_noise_information",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.f, z_grand_parent, z_parent]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_155": {
                "variable": {
                    "value": "sys_noise_var_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sys_noise_var_recurrence",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.parent_vae.sys_noise_var_recurrence[i, j, k]",
                            "Subscript"
                        ],
                        [
                            "tf.add(sys_noise_var_recurrence, tf.scalar_mul(tf.square(self.model.c_3), sys_noise_var_parent))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.scalar_mul(tf.square(self.model.c_3), sys_noise_var_parent)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_164": {
                "variable": {
                    "value": "sys_noise_var_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_mul_327": {
                "scalar": {
                    "value": "self.model.c_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(self.f, sys_noises[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_334": {
                "scalar": {
                    "value": "tf.constant(2, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_mul_387": {
                "scalar": {
                    "value": "m.c_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "sys_noises[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_mul_571": {
                "scalar": {
                    "value": "half",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(0.5, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.5, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.add(tf.scalar_mul(tf.log(2 * np.pi), tf.subtract(c_ta, one)), tf.subtract(tf.scalar_mul(c_ta, tf.add(tf.log(self.one_plus_t_minus_2_K_sq), tf.divide(tf.add(tf.square(self.sys_noise_unit_means[i, j, k]), tf.exp(self.sys_noise_log_unit_sigma_sqs[i, j, k])), self.one_plus_t_minus_2_K_sq))), tf.add(one, self.sys_noise_log_unit_sigma_sqs[i, j, k])))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "model_noise_information",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.vtsfe.goal_vae.z[i], model_noise_information]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_146": {
                "variable": {
                    "value": "sys_noise_var_recurrence",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_153": {
                "variable": {
                    "value": "sys_noise_var_parent",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.parent_vae.sys_noise_log_unit_sigma_sqs[i, j, k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_167": {
                "x": {
                    "value": "tf.exp(encoded_inputs[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "sys_noise_var_recurrence",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.parent_vae.sys_noise_var_recurrence[i, j, k]",
                            "Subscript"
                        ],
                        [
                            "tf.add(sys_noise_var_recurrence, tf.scalar_mul(tf.square(self.model.c_3), sys_noise_var_parent))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_176": {
                "x": {
                    "value": "self.system_noise_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "sys_noise_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoded_inputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add(tf.matmul(hidden_layer, weights['out_mean']), biases['out_mean'])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_185": {
                "x": {
                    "value": "self.system_noise_log_scale_sq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "sys_noise_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(tf.add(tf.exp(encoded_inputs[1]), sys_noise_var_recurrence))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_194": {
                "x": {
                    "value": "tf.scalar_mul(half, sys_noise_log_sigma_sqs_l3[k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_329": {
                "x": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "sys_noises[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_335": {
                "value": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_573": {
                "x": {
                    "value": "tf.scalar_mul(tf.log(2 * np.pi), tf.subtract(c_ta, one))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(tf.scalar_mul(c_ta, tf.add(tf.log(self.one_plus_t_minus_2_K_sq), tf.divide(tf.add(tf.square(self.sys_noise_unit_means[i, j, k]), tf.exp(self.sys_noise_log_unit_sigma_sqs[i, j, k])), self.one_plus_t_minus_2_K_sq))), tf.add(one, self.sys_noise_log_unit_sigma_sqs[i, j, k]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_148": {
                "variable": {
                    "value": "sys_noise_var_parent",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_150": {
                "variable": {
                    "value": "sys_noise_var_parent",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.parent_vae.sys_noise_log_unit_sigma_sqs[i, j, k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_mul_157": {
                "scalar": {
                    "value": "tf.square(self.model.c_3)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "sys_noise_var_parent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.exp(self.parent_vae.sys_noise_log_unit_sigma_sqs[i, j, k])",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.exp(self.parent_vae.sys_noise_log_unit_sigma_sqs[i, j, k])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_168": {
                "x": {
                    "value": "encoded_inputs[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_mul_195": {
                "scalar": {
                    "value": "half",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(0.5, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.5, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "sys_noise_log_sigma_sqs_l3[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_209": {
                "x": {
                    "value": "sys_noise_means_l3[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(sys_noise_sigmas_l3[k], eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_575": {
                "scalar": {
                    "value": "tf.log(2 * np.pi)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(c_ta, one)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_582": {
                "x": {
                    "value": "tf.scalar_mul(c_ta, tf.add(tf.log(self.one_plus_t_minus_2_K_sq), tf.divide(tf.add(tf.square(self.sys_noise_unit_means[i, j, k]), tf.exp(self.sys_noise_log_unit_sigma_sqs[i, j, k])), self.one_plus_t_minus_2_K_sq)))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.add(one, self.sys_noise_log_unit_sigma_sqs[i, j, k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_158": {
                "x": {
                    "value": "self.model.c_3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_211": {
                "x": {
                    "value": "sys_noise_sigmas_l3[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_normal([batch_size, n_z], mean=0.0, stddev=1.0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_576": {
                "x": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_577": {
                "x": {
                    "value": "c_ta",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.vtsfe.annealing_schedule",
                            "Attribute"
                        ],
                        [
                            "self.vtsfe.annealing_schedule",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "one",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_mul_584": {
                "scalar": {
                    "value": "c_ta",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.vtsfe.annealing_schedule",
                            "Attribute"
                        ],
                        [
                            "self.vtsfe.annealing_schedule",
                            "Attribute"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.add(tf.log(self.one_plus_t_minus_2_K_sq), tf.divide(tf.add(tf.square(self.sys_noise_unit_means[i, j, k]), tf.exp(self.sys_noise_log_unit_sigma_sqs[i, j, k])), self.one_plus_t_minus_2_K_sq))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_602": {
                "x": {
                    "value": "one",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.sys_noise_log_unit_sigma_sqs[i, j, k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_586": {
                "x": {
                    "value": "tf.log(self.one_plus_t_minus_2_K_sq)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.divide(tf.add(tf.square(self.sys_noise_unit_means[i, j, k]), tf.exp(self.sys_noise_log_unit_sigma_sqs[i, j, k])), self.one_plus_t_minus_2_K_sq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_587": {
                "x": {
                    "value": "self.one_plus_t_minus_2_K_sq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_588": {
                "x": {
                    "value": "tf.add(tf.square(self.sys_noise_unit_means[i, j, k]), tf.exp(self.sys_noise_log_unit_sigma_sqs[i, j, k]))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.one_plus_t_minus_2_K_sq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_589": {
                "x": {
                    "value": "tf.square(self.sys_noise_unit_means[i, j, k])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.exp(self.sys_noise_log_unit_sigma_sqs[i, j, k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_590": {
                "x": {
                    "value": "self.sys_noise_unit_means[i, j, k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_593": {
                "x": {
                    "value": "self.sys_noise_log_unit_sigma_sqs[i, j, k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "VTSFE/src/vae_standalone/input_data.py": {
        "tensorflow": {}
    },
    "VTSFE/src/vae_standalone/main.py": {
        "tensorflow": {}
    },
    "VTSFE/src/vae_standalone/vae.py": {
        "tensorflow": {
            "constant_118": {
                "variable": {
                    "value": "half",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_119": {
                "variable": {
                    "value": "z_sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.scalar_mul(half, self.z_log_sigma_sq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_260": {
                "variable": {
                    "value": "z_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(hidden_layer, weights['out_mean'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['out_mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_263": {
                "variable": {
                    "value": "z_log_sigma_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(hidden_layer, weights['out_log_sigma'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['out_log_sigma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_n_403": {
                "variable": {
                    "value": "reconstr_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "reconstr_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_407": {
                "variable": {
                    "value": "nb_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "nb_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_409": {
                "variable": {
                    "value": "reconstr_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reconstr_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.scalar_mul(-1, self.x_target * tf.log(1e-10 + x_reconstr_means[i]) + (1 - x_target) * tf.log(1e-10 + 1 - x_reconstr_means[i]))",
                            "Call"
                        ],
                        [
                            "tf.add_n(reconstr_losses)",
                            "Call"
                        ],
                        [
                            "tf.divide(reconstr_loss, nb_s)",
                            "Call"
                        ],
                        [
                            "tf.scalar_mul(half, tf.add(reconstr_loss_division, tf.add(x_reconstr_log_sigma_sqs[i], log_2pi)))",
                            "Call"
                        ],
                        [
                            "tf.scalar_mul(pi, tf.square(tf.subtract(x_reconstr_means[i], self.x_target), name='reconstr_loss_sq_sub'))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nb_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(nb_samples, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_420": {
                "variable": {
                    "value": "one",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_421": {
                "variable": {
                    "value": "half",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_mul_425": {
                "variable": {
                    "value": "latent_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "scalar": {
                    "value": "half",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(0.5, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.5, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.5, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.subtract(tf.add(tf.square(self.z_mean), tf.exp(self.z_log_sigma_sq)), tf.add(self.z_log_sigma_sq, one))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_463": {
                "variable": {
                    "value": "self.continuity_loss_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.z.get_shape()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_468": {
                "variable": {
                    "value": "self.reconstr_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.reconstr_loss_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_472": {
                "variable": {
                    "value": "self.latent_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.latent_loss_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_476": {
                "variable": {
                    "value": "self.cost_add",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.reconstr_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.latent_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_483": {
                "variable": {
                    "value": "self.reconstr_loss_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.reconstr_loss_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_487": {
                "variable": {
                    "value": "self.latent_loss_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.latent_loss_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "moments_492": {
                "variable": {
                    "value": "(self.reconstr_loss_avg, self.reconstr_loss_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "self.reconstr_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_493": {
                "variable": {
                    "value": "(self.latent_loss_avg, self.latent_loss_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "self.latent_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_494": {
                "variable": {
                    "value": "self.continuity_loss_avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.continuity_loss_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "moments_495": {
                "variable": {
                    "value": "(self.cost, self.variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "self.cost_add",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_499": {
                "variable": {
                    "value": "self.continuity_loss_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.z.get_shape()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_504": {
                "variable": {
                    "value": "self.cost_add",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.cost_add",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(self.continuity_loss_per_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_513": {
                "variable": {
                    "value": "self.z_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.vae_architecture['n_z']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "z_target",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_514": {
                "variable": {
                    "value": "self.z_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(self.z, self.z_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_520": {
                "variable": {
                    "value": "self.z_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scalar": {
                    "value": "tf.constant(self.z_continuity_error_coeff, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(self.z_correction, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_527": {
                "variable": {
                    "value": "self.continuity_loss_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.continuity_loss_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.z_correction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_534": {
                "variable": {
                    "value": "self.z_derivative_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.vae_architecture['n_z']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "z_derivative_target",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_535": {
                "variable": {
                    "value": "self.z_derivative_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(self.z_derivative, self.z_derivative_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_541": {
                "variable": {
                    "value": "self.z_derivative_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scalar": {
                    "value": "tf.constant(self.z_continuity_error_coeff, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(self.z_derivative_correction, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_548": {
                "variable": {
                    "value": "self.continuity_loss_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.continuity_loss_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.z_derivative_correction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.vae_architecture['n_input']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_274": {
                "variable": {
                    "value": "z_derivative_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(hidden_layer, weights['out_derivative_mean'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['out_derivative_mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_461": {
                "variable": {
                    "value": "self.latent_loss_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(self.x)[0], self.vae_architecture['n_z']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_624": {
                "variable": {
                    "value": "self.save_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_624": {
                "variable": {
                    "value": "self.save_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "obj": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "export_dir": {
                    "value": "./tmp/model-vae.ckpt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_mul_120": {
                "scalar": {
                    "value": "half",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(0.5, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.5, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.5, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "self.z_log_sigma_sq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "base_scope + '.' + scope_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_weights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_169": {
                "variable": {
                    "value": "all_weights[weights_ + scope_name][h2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "h2",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "glorot_init(n_hidden_1, n_hidden_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_170": {
                "variable": {
                    "value": "all_weights[biases_ + scope_name][b2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "b2",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([n_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_251": {
                "x": {
                    "value": "tf.matmul(self.x, weights['h1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_260": {
                "a": {
                    "value": "hidden_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.activation_function(tf.add(tf.matmul(layer_1, weights['h2']), biases['b2']))",
                            "Call"
                        ],
                        [
                            "layer_1",
                            "Name"
                        ],
                        [
                            "self.activation_function(tf.add(tf.matmul(layer_1, weights['h2']), biases['b2']))",
                            "Call"
                        ],
                        [
                            "layer_1",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['out_mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_263": {
                "a": {
                    "value": "hidden_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.activation_function(tf.add(tf.matmul(layer_1, weights['h2']), biases['b2']))",
                            "Call"
                        ],
                        [
                            "layer_1",
                            "Name"
                        ],
                        [
                            "self.activation_function(tf.add(tf.matmul(layer_1, weights['h2']), biases['b2']))",
                            "Call"
                        ],
                        [
                            "layer_1",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['out_log_sigma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_328": {
                "variable": {
                    "value": "x_reconstr_log_sigma_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(hidden_layer, weights['out_log_sigma'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['out_log_sigma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_mul_354": {
                "variable": {
                    "value": "reconstr_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "scalar": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_target * tf.log(1e-10 + x_reconstr_means[i]) + (1 - x_target) * tf.log(1e-10 + 1 - x_reconstr_means[i])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_365": {
                "variable": {
                    "value": "log_2pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_366": {
                "variable": {
                    "value": "half",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_386": {
                "variable": {
                    "value": "pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_427": {
                "x": {
                    "value": "tf.add(tf.square(self.z_mean), tf.exp(self.z_log_sigma_sq))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.add(self.z_log_sigma_sq, one)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_506": {
                "input_tensor": {
                    "value": "self.continuity_loss_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_515": {
                "x": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.z_target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_521": {
                "value": {
                    "value": "self.z_continuity_error_coeff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_522": {
                "input_tensor": {
                    "value": "self.z_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_536": {
                "x": {
                    "value": "self.z_derivative",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.z_derivative_target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_542": {
                "value": {
                    "value": "self.z_continuity_error_coeff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_543": {
                "input_tensor": {
                    "value": "self.z_derivative_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_559": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Adam",
                    "type": "Constant",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_617": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_626": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_626": {
                "obj": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "export_dir": {
                    "value": "self.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_635": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_130": {
                "input": {
                    "value": "self.z_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_134": {
                "x": {
                    "value": "self.z_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(z_sigma, eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_161": {
                "name": {
                    "value": "h1",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "glorot_init(n_in, n_hidden_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_165": {
                "name": {
                    "value": "b1",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([n_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_251": {
                "a": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "weights['h1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_255": {
                "x": {
                    "value": "tf.matmul(layer_1, weights['h2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_274": {
                "a": {
                    "value": "hidden_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.activation_function(tf.add(tf.matmul(layer_1, weights['h2']), biases['b2']))",
                            "Call"
                        ],
                        [
                            "layer_1",
                            "Name"
                        ],
                        [
                            "self.activation_function(tf.add(tf.matmul(layer_1, weights['h2']), biases['b2']))",
                            "Call"
                        ],
                        [
                            "layer_1",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['out_derivative_mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_295": {
                "x": {
                    "value": "tf.matmul(z, weights['h1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_318": {
                "x": {
                    "value": "tf.matmul(hidden_layer, weights['out_mean'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['out_mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_369": {
                "variable": {
                    "value": "reconstr_loss_divider",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_reconstr_log_sigma_sqs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "reconstr_loss_divider",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_370": {
                "variable": {
                    "value": "reconstr_loss_sq_sub",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(x_reconstr_means[i], self.x_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "reconstr_loss_sq_sub",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "divide_371": {
                "variable": {
                    "value": "reconstr_loss_division",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reconstr_loss_sq_sub",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(x_reconstr_means[i], self.x_target), name='reconstr_loss_sq_sub')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "reconstr_loss_divider",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(x_reconstr_log_sigma_sqs[i], name='reconstr_loss_divider')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "reconstr_loss_division",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_mul_373": {
                "variable": {
                    "value": "reconstr_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "scalar": {
                    "value": "half",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(0.5, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.5, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.5, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.add(reconstr_loss_division, tf.add(x_reconstr_log_sigma_sqs[i], log_2pi))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_389": {
                "variable": {
                    "value": "reconstr_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "scalar": {
                    "value": "pi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(np.pi, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.square(tf.subtract(x_reconstr_means[i], self.x_target), name='reconstr_loss_sq_sub')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_428": {
                "x": {
                    "value": "tf.square(self.z_mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.exp(self.z_log_sigma_sq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_432": {
                "x": {
                    "value": "self.z_log_sigma_sq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "one",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_558": {
                "name_or_scope": {
                    "value": "adam_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "str(np.random.rand())",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_614": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_136": {
                "x": {
                    "value": "z_sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(tf.scalar_mul(half, self.z_log_sigma_sq))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(self.z_mean), mean=0.0, stddev=1.0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_176": {
                "name": {
                    "value": "out_mean_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "glorot_init(n_hidden, n_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_180": {
                "name": {
                    "value": "out_mean_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([n_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_255": {
                "a": {
                    "value": "layer_1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.activation_function(tf.add(tf.matmul(self.x, weights['h1']), biases['b1']))",
                            "Call"
                        ],
                        [
                            "self.activation_function(tf.add(tf.matmul(z, weights['h1']), biases['b1']))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['h2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_296": {
                "a": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z_samples",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['h1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_306": {
                "x": {
                    "value": "tf.matmul(layer_1, weights['h2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_319": {
                "a": {
                    "value": "hidden_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.activation_function(tf.add(tf.matmul(layer_1, weights['h2']), biases['b2']))",
                            "Call"
                        ],
                        [
                            "layer_1",
                            "Name"
                        ],
                        [
                            "self.activation_function(tf.add(tf.matmul(layer_1, weights['h2']), biases['b2']))",
                            "Call"
                        ],
                        [
                            "layer_1",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['out_mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_329": {
                "a": {
                    "value": "hidden_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.activation_function(tf.add(tf.matmul(layer_1, weights['h2']), biases['b2']))",
                            "Call"
                        ],
                        [
                            "layer_1",
                            "Name"
                        ],
                        [
                            "self.activation_function(tf.add(tf.matmul(layer_1, weights['h2']), biases['b2']))",
                            "Call"
                        ],
                        [
                            "layer_1",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['out_log_sigma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_429": {
                "x": {
                    "value": "self.z_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_430": {
                "x": {
                    "value": "self.z_log_sigma_sq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "shape": {
                    "value": "[n_hidden_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "shape": {
                    "value": "[n_hidden_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_185": {
                "name": {
                    "value": "out_log_sigma_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "glorot_init(n_hidden, n_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_189": {
                "name": {
                    "value": "out_log_sigma_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([n_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_194": {
                "name": {
                    "value": "out_derivative_mean_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "glorot_init(n_hidden, n_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_197": {
                "name": {
                    "value": "out_derivative_mean_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([n_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_307": {
                "a": {
                    "value": "layer_1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.activation_function(tf.add(tf.matmul(self.x, weights['h1']), biases['b1']))",
                            "Call"
                        ],
                        [
                            "self.activation_function(tf.add(tf.matmul(z, weights['h1']), biases['b1']))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['h2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "subtract_370": {
                "x": {
                    "value": "x_reconstr_means[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x_target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_375": {
                "x": {
                    "value": "reconstr_loss_division",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.divide(reconstr_loss_sq_sub, reconstr_loss_divider, name='reconstr_loss_division')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.add(x_reconstr_log_sigma_sqs[i], log_2pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_391": {
                "x": {
                    "value": "tf.subtract(x_reconstr_means[i], self.x_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "reconstr_loss_sq_sub",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_461": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_180": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_354": {
                "x": {
                    "value": "1e-10 + x_reconstr_means[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_355": {
                "x": {
                    "value": "1e-10 + 1 - x_reconstr_means[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_377": {
                "x": {
                    "value": "x_reconstr_log_sigma_sqs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "log_2pi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(2.0 * np.pi)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_392": {
                "x": {
                    "value": "x_reconstr_means[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x_target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "VTSFE/src/vtsfe.py": {
        "tensorflow": {
            "constant_57": {
                "variable": {
                    "value": "self.log_sigma_sq_values_limit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.log_sigma_sq_values_limit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.sub_sequence_origin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sub_sequence_origin",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.x_sequence",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.nb_frames, None, self.vae_architecture['n_input']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_sequence",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.annealing_schedule",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "annealing_schedule",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_116": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_415": {
                "variable": {
                    "value": "self.vae_subsequence[0].continuity_loss_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.vae_subsequence[0].continuity_loss_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.initial_z_derivative_correction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_419": {
                "variable": {
                    "value": "self.vae_subsequence[0].continuity_loss_avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.vae_subsequence[0].continuity_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_420": {
                "variable": {
                    "value": "self.vae_subsequence[0].cost_add",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.vae_subsequence[0].cost_add",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.vae_subsequence[0].continuity_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "moments_424": {
                "variable": {
                    "value": "(self.vae_subsequence[0].cost, self.vae_subsequence[0].variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "self.vae_subsequence[0].cost_add",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_551": {
                "variable": {
                    "value": "self.reconstr_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.reconstr_cost_per_vae",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_552": {
                "variable": {
                    "value": "self.latent_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.latent_cost_per_vae",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_557": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.cost_per_vae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_558": {
                "variable": {
                    "value": "self.cost_per_dim_and_frame",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.reconstr_cost_per_dim, self.latent_cost_per_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_579": {
                "variable": {
                    "value": "self.decoder_cost_per_dim_and_frame",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.reconstr_cost_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_586": {
                "variable": {
                    "value": "self.encoder_cost_per_dim_and_frame",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.latent_cost_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_592": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Adam",
                    "type": "Constant",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_365": {
                "variable": {
                    "value": "zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "zs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(zs, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zs, [-1, self.n_estimate_deriv * n_z])",
                            "Call"
                        ],
                        [
                            "np.array([[np.array(y, dtype=np.float32) for y in x] for x in values[:, 3::4]], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_367": {
                "variable": {
                    "value": "zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(zs, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zs, [-1, self.n_estimate_deriv * n_z])",
                            "Call"
                        ],
                        [
                            "np.array([[np.array(y, dtype=np.float32) for y in x] for x in values[:, 3::4]], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_estimate_deriv * n_z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_370": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "z_derivative_estimation_weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "glorot_init(self.input_sequence_size * n_z, n_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_371": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "z_derivative_estimation_biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([n_z])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_382": {
                "variable": {
                    "value": "z_derivative",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(zs, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('z_derivative_estimation_biases', initializer=tf.zeros([n_z]), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_407": {
                "variable": {
                    "value": "self.reduced_initial_z_derivative_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.initial_z_derivative_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "moments_411": {
                "variable": {
                    "value": "(self.initial_z_derivative_cost, self.initial_z_derivative_variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "self.reduced_initial_z_derivative_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "initial_z_derivative_cost_and_variance",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_555": {
                "variable": {
                    "value": "self.model_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.model_cost_per_vae",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_564": {
                "variable": {
                    "value": "self.cost_per_dim_and_frame",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.cost_per_dim_and_frame, self.model_cost_per_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_570": {
                "variable": {
                    "value": "self.continuity_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.continuity_cost_per_vae",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_571": {
                "variable": {
                    "value": "self.cost_per_dim_and_frame",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.cost_per_dim_and_frame, self.continuity_cost_per_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_575": {
                "variable": {
                    "value": "self.continuity_cost_per_dim_and_frame",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.continuity_cost_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_583": {
                "variable": {
                    "value": "self.model_cost_per_dim_and_frame",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model_cost_per_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_145": {
                "values": {
                    "value": "seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_391": {
                "variable": {
                    "value": "self.initial_z_derivative_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.vae_architecture['n_z']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "initial_z_derivative_target",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_392": {
                "variable": {
                    "value": "self.initial_z_derivative_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(z_derivative, self.initial_z_derivative_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_398": {
                "variable": {
                    "value": "self.initial_z_derivative_correction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scalar": {
                    "value": "tf.constant(self.z_continuity_error_coeff, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.initial_z_derivative_correction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_451": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_453": {
                "variable": {
                    "value": "model_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.vae_architecture['n_z']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_828": {
                "variable": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_1452": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_1459": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_1459": {
                "obj": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "'./checkpoints/' + self.save_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.vae_architecture['n_input']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'x' + str(n)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_383": {
                "a": {
                    "value": "zs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(zs, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(zs, [-1, self.n_estimate_deriv * n_z])",
                            "Call"
                        ],
                        [
                            "np.array([[np.array(y, dtype=np.float32) for y in x] for x in values[:, 3::4]], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('z_derivative_estimation_weights', initializer=glorot_init(self.input_sequence_size * n_z, n_z))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_474": {
                "x": {
                    "value": "model_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([self.vae_architecture['n_z']])",
                            "Call"
                        ],
                        [
                            "vae.model_loss_per_dim",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "lat_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vae.latent_loss_per_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "AdamOptimizer_807": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_1449": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_371": {
                "shape": {
                    "value": "[n_z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_393": {
                "x": {
                    "value": "z_derivative",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.vae_subsequence[0].z_derivative",
                            "Attribute"
                        ],
                        [
                            "tf.add(tf.matmul(zs, weights), biases)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.initial_z_derivative_target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_399": {
                "value": {
                    "value": "self.z_continuity_error_coeff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_686": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add_n(self.cost_per_vae[:i])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cost",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.cost_per_vae[i]",
                            "Subscript"
                        ],
                        [
                            "tf.add(tf.add_n(self.cost_per_vae[:i]), cost)",
                            "Call"
                        ],
                        [
                            "tf.add(cost, self.cost_per_vae[-1])",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "add_688": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cost",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.cost_per_vae[i]",
                            "Subscript"
                        ],
                        [
                            "tf.add(tf.add_n(self.cost_per_vae[:i]), cost)",
                            "Call"
                        ],
                        [
                            "tf.add(cost, self.cost_per_vae[-1])",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "self.cost_per_vae[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "AdamOptimizer_774": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_787": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_137": {
                "x": {
                    "value": "offset",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "self.sub_sequence_origin",
                            "Attribute"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "offset + (self.sub_sequences_size - len(self.std_vae_indices))",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "len(p)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1 + len(self.std_vaes_like_origin)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "k",
                    "type": "Call",
                    "possible_values": [
                        [
                            "indices",
                            "Name"
                        ],
                        [
                            "indices",
                            "Name"
                        ],
                        [
                            "range(self.input_sequence_size)",
                            "Call"
                        ],
                        [
                            "range(self.input_sequence_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "k + 1",
                            "BinOp"
                        ],
                        [
                            "range(nb_vaes)",
                            "Call"
                        ],
                        [
                            "range(nb_vaes)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_686": {
                "inputs": {
                    "value": "self.cost_per_vae[:i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}