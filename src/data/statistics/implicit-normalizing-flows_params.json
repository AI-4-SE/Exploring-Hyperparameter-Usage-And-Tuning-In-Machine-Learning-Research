{
    "lib/toy_data.py": {
        "sklearn": {
            "make_swiss_roll_11": {
                "n_samples": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                },
                "noise": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_circles_17": {
                "n_samples": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_moons_53": {
                "n_samples": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                },
                "noise": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "preprocessing/extract_celeba_from_tfrecords.py": {
        "tensorflow": {
            "InteractiveSession_5": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tf_record_iterator_14": {
                "variable": {
                    "value": "record_iterator",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "tfr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'data/celebahq/celeba-tfr/train/train-r08-s-{:04d}-of-0120.tfrecords'.format(i)",
                            "Call"
                        ],
                        [
                            "'data/celebahq/celeba-tfr/validation/validation-r08-s-{:04d}-of-0040.tfrecords'.format(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "tf_record_iterator_37": {
                "variable": {
                    "value": "record_iterator",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "tfr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'data/celebahq/celeba-tfr/train/train-r08-s-{:04d}-of-0120.tfrecords'.format(i)",
                            "Call"
                        ],
                        [
                            "'data/celebahq/celeba-tfr/validation/validation-r08-s-{:04d}-of-0040.tfrecords'.format(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "Example_17": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "decode_raw_22": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "image_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example.features.feature['data'].bytes_list.value[0]",
                            "Subscript"
                        ],
                        [
                            "example.features.feature['data'].bytes_list.value[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_23": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(image_bytes, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [256, 256, 3])",
                            "Call"
                        ],
                        [
                            "img.eval()",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(image_bytes, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [256, 256, 3])",
                            "Call"
                        ],
                        [
                            "img.eval()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[256, 256, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Example_40": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "decode_raw_45": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "image_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example.features.feature['data'].bytes_list.value[0]",
                            "Subscript"
                        ],
                        [
                            "example.features.feature['data'].bytes_list.value[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(image_bytes, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [256, 256, 3])",
                            "Call"
                        ],
                        [
                            "img.eval()",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(image_bytes, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [256, 256, 3])",
                            "Call"
                        ],
                        [
                            "img.eval()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[256, 256, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_29": {
                "variable": {
                    "value": "train_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(train_imgs)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_imgs).permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_29": {
                "variable": {
                    "value": "train_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "validation_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "validation_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(validation_imgs)",
                            "Call"
                        ],
                        [
                            "torch.tensor(validation_imgs).permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_52": {
                "variable": {
                    "value": "validation_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_30": {
                "obj": {
                    "value": "train_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(train_imgs)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_imgs).permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "data/celebahq/celeba256_train.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_53": {
                "obj": {
                    "value": "validation_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(validation_imgs)",
                            "Call"
                        ],
                        [
                            "torch.tensor(validation_imgs).permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "data/celebahq/celeba256_validation.pth",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "lib/datasets.py": {
        "torch": {
            "load_9": {
                "variable": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_64": {
                "variable": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.LOC",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_64": {
                "variable": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "31",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/implicit_flow.py": {
        "torch": {
            "ModuleList_186": {
                "variable": {
                    "value": "self.classification_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "classification_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.logit_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.classification_hdim * len(classification_heads)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.view(o.size()[0], -1) for o in out]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_469": {
                "variable": {
                    "value": "self.nnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*nnet",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Softplus_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_10": {
                "inplace": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_139": {
                "modules": {
                    "value": "transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_215": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "class_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_215": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "*args": {
                    "value": "nn.Conv2d(hshape[1], self.classification_hdim, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "z_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_prev, zs[idx])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "z_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_prev, zs[idx])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_451": {
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_462": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "in_channels": {
                    "value": "hshape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.classification_hdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_182": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_183": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_399": {
                "*args": {
                    "value": "*nnet",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tensor_451": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_365": {
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout2d_391": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_365": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "lib/layers/act_norm.py": {
        "torch": {
            "Parameter_14": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_29": {
                "variable": {
                    "value": "batch_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1).contiguous().view(c, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "var_30": {
                "variable": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1).contiguous().view(c, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_33": {
                "variable": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.var(x_t, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.max(batch_var, torch.tensor(0.2).to(batch_var))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_42": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(*self.shape).expand_as(x)",
                            "Call"
                        ],
                        [
                            "self.weight.view(*self.shape).expand_as(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_54": {
                "input": {
                    "value": "-weight",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_36": {
                "input": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.var(x_t, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.max(batch_var, torch.tensor(0.2).to(batch_var))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/layers/base/activations.py": {
        "torch": {
            "linspace_77": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_79": {
                "variable": {
                    "value": "(dd, dbeta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "yy.sum() * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[xx, m.beta]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_50": {
                "variable": {
                    "value": "beta_sigm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_60": {
                "variable": {
                    "value": "grad_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_output * (x * output - output * output)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_37": {
                "tensors": {
                    "value": "[max_vals, min_vals]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_85": {
                "input": {
                    "value": "dd.detach().abs() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sort_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_35": {
                "input": {
                    "value": "x.view(b, d // 2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_36": {
                "input": {
                    "value": "x.view(b, d // 2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sin_12": {
                "input": {
                    "value": "2.0 * math.pi * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_85": {
                "input": {
                    "value": "dd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softplus_71": {
                "input": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/layers/base/lipschitz.py": {
        "torch": {
            "max_463": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(1) * 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_83": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "F.conv2d(v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_output_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(u_s.view(-1), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mv(weight, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_87": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(1).to(weight.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_119": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_202": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "F.conv2d(v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_output_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(u_s.view(-1), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mv(weight, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_206": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(1).to(weight.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_249": {
                "variable": {
                    "value": "weight_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.view(1, c, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dot_251": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weight_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(v.view(1, c, h, w), weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "weight_v.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_255": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(1).to(weight.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_305": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(1).to(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_354": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(1).to(self.weight.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_93": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_121": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_262": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_311": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_360": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_396": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "_logit(w_scale / self.coeff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_405": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_444": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "_logit(w_scale / self.coeff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_453": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_463": {
                "input": {
                    "value": "torch.ones(1) * 0.9",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_464": {
                "input": {
                    "value": "1 - p + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_35": {
                "input": {
                    "value": "self.weight.new_empty(h).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_36": {
                "input": {
                    "value": "self.weight.new_empty(w).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mv_83": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_input_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(v_s.view(-1), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_87": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_144": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(num_input_dim).to(self.weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_146": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.view(1, c, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "normalize_150": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(num_output_dim).to(self.weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mv_202": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_input_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(v_s.view(-1), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_206": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_255": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_296": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_305": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_345": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_354": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_441": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_449": {
                "input": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_463": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_69": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mv(weight.t(), u)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_input_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(v_s.view(-1), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_70": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mv(weight, v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "F.conv2d(v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_output_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(u_s.view(-1), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_138": {
                "input": {
                    "value": "self.weight.new_empty(self.out_channels).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_139": {
                "input": {
                    "value": "self.weight.new_empty(self.in_channels).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_188": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mv(weight.t(), u)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_input_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(v_s.view(-1), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_189": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mv(weight, v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "F.conv2d(v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_output_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(u_s.view(-1), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv_transpose2d_231": {
                "variable": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u.view(self.out_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_234": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_s.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_input_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(v_s.view(-1), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_235": {
                "variable": {
                    "value": "u_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.view(1, c, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "normalize_236": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_s.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "F.conv2d(v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_output_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(u_s.view(-1), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_260": {
                "data": {
                    "value": "input.shape[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_401": {
                "input": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_144": {
                "*size": {
                    "value": "num_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c * h * w",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_150": {
                "*size": {
                    "value": "num_output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.shape[0] * u.shape[1] * u.shape[2] * u.shape[3]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mv_69": {
                "input": {
                    "value": "weight.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "F.conv2d(v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_output_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(u_s.view(-1), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_70": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_input_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(v_s.view(-1), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_188": {
                "input": {
                    "value": "weight.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "F.conv2d(v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_output_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(u_s.view(-1), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_189": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=self.training)",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ],
                        [
                            "self.compute_weight()",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_input_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(v_s.view(-1), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_73": {
                "input": {
                    "value": "u - old_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_74": {
                "input": {
                    "value": "v - old_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_192": {
                "input": {
                    "value": "u - old_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_193": {
                "input": {
                    "value": "v - old_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_239": {
                "input": {
                    "value": "u - old_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_240": {
                "input": {
                    "value": "v - old_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_75": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "F.conv2d(v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_output_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(u_s.view(-1), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_76": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_input_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(v_s.view(-1), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_194": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "F.conv2d(v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_output_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(u_s.view(-1), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_195": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_input_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(v_s.view(-1), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_241": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "F.conv2d(v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_output_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight, v), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "F.normalize(u_s.view(-1), dim=0, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_242": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.randn(num_input_dim).to(self.weight), dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(torch.mv(weight.t(), u), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "F.normalize(v_s.view(-1), dim=0, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/layers/base/mixed_lipschitz.py": {
        "torch": {
            "argmax_408": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_481": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(2.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_126": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(u, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(u)",
                            "Call"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, float('inf'))",
                            "BinOp"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, codomain / (codomain - 1))",
                            "BinOp"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "F.conv2d(self.v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mv(weight, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_130": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(1).to(weight.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_168": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_320": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(u, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(u)",
                            "Call"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, float('inf'))",
                            "BinOp"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, codomain / (codomain - 1))",
                            "BinOp"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "F.conv2d(self.v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mv(weight, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_324": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(1).to(weight.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_378": {
                "variable": {
                    "value": "weight_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.view(1, c, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dot_380": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weight_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(v.view(1, c, h, w), weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "F.conv2d(v.view(1, c, h, w), weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "weight_v.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_384": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(1).to(weight.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_416": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(v, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(v)",
                            "Call"
                        ],
                        [
                            "vph * vabs / vector_norm(vabs, domain)",
                            "BinOp"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalize_431": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(u, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(u)",
                            "Call"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, float('inf'))",
                            "BinOp"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, codomain / (codomain - 1))",
                            "BinOp"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "F.conv2d(self.v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_69": {
                "obj": {
                    "value": "self.domain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dot_83": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(u, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(u)",
                            "Call"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, float('inf'))",
                            "BinOp"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, codomain / (codomain - 1))",
                            "BinOp"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "F.conv2d(self.v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mv(weight, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_136": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_170": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_181": {
                "obj": {
                    "value": "self.domain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_257": {
                "variable": {
                    "value": "u_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.view(1, c, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv_transpose2d_260": {
                "variable": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u.view(out_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_264": {
                "variable": {
                    "value": "weight_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.view(1, c, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_391": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_408": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(v, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(v)",
                            "Call"
                        ],
                        [
                            "vph * vabs / vector_norm(vabs, domain)",
                            "BinOp"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_420": {
                "variable": {
                    "value": "vabs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(v, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(v)",
                            "Call"
                        ],
                        [
                            "vph * vabs / vector_norm(vabs, domain)",
                            "BinOp"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_435": {
                "variable": {
                    "value": "uabs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(u, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(u)",
                            "Call"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, float('inf'))",
                            "BinOp"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, codomain / (codomain - 1))",
                            "BinOp"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "F.conv2d(self.v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_449": {
                "input": {
                    "value": "x ** p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_481": {
                "data": {
                    "value": "2.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mv_81": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(v, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(v)",
                            "Call"
                        ],
                        [
                            "vph * vabs / vector_norm(vabs, domain)",
                            "BinOp"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_82": {
                "input": {
                    "value": "weight.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(u, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(u)",
                            "Call"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, float('inf'))",
                            "BinOp"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, codomain / (codomain - 1))",
                            "BinOp"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "F.conv2d(self.v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_83": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(v, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(v)",
                            "Call"
                        ],
                        [
                            "vph * vabs / vector_norm(vabs, domain)",
                            "BinOp"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_126": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(v, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(v)",
                            "Call"
                        ],
                        [
                            "vph * vabs / vector_norm(vabs, domain)",
                            "BinOp"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_130": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_144": {
                "obj": {
                    "value": "self.domain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dot_251": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(u, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(u)",
                            "Call"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, float('inf'))",
                            "BinOp"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, codomain / (codomain - 1))",
                            "BinOp"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "F.conv2d(self.v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mv(weight, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_265": {
                "input": {
                    "value": "u.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weight_v.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mv_320": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(v, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(v)",
                            "Call"
                        ],
                        [
                            "vph * vabs / vector_norm(vabs, domain)",
                            "BinOp"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_324": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_384": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_401": {
                "obj": {
                    "value": "self.domain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_415": {
                "obj": {
                    "value": "domain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "asym_squash(self.domain)",
                            "Call"
                        ],
                        [
                            "asym_squash(self.domain)",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_430": {
                "obj": {
                    "value": "codomain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "asym_squash(self.codomain)",
                            "Call"
                        ],
                        [
                            "asym_squash(self.codomain)",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "elu_453": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_457": {
                "input": {
                    "value": "-leaky_elu(-x + 0.5493061829986572)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_210": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.v.view(1, c, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "mv_249": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(v, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(v)",
                            "Call"
                        ],
                        [
                            "vph * vabs / vector_norm(vabs, domain)",
                            "BinOp"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_250": {
                "input": {
                    "value": "weight.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(u, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(u)",
                            "Call"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, float('inf'))",
                            "BinOp"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, codomain / (codomain - 1))",
                            "BinOp"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "F.conv2d(self.v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_251": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(v, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(v)",
                            "Call"
                        ],
                        [
                            "vph * vabs / vector_norm(vabs, domain)",
                            "BinOp"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_352": {
                "variable": {
                    "value": "u_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.view(1, c, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv_transpose2d_356": {
                "variable": {
                    "value": "v_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u.view(out_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_389": {
                "data": {
                    "value": "input.shape[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_422": {
                "input": {
                    "value": "vph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v / vabs",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_423": {
                "input": {
                    "value": "vabs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(v)",
                            "Call"
                        ],
                        [
                            "vabs / torch.max(vabs)",
                            "BinOp"
                        ],
                        [
                            "vabs ** (1 / (domain - 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_437": {
                "input": {
                    "value": "uph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u / uabs",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_438": {
                "input": {
                    "value": "uabs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(u)",
                            "Call"
                        ],
                        [
                            "uabs / torch.max(uabs)",
                            "BinOp"
                        ],
                        [
                            "uabs ** (codomain - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mv_111": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(v, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(v)",
                            "Call"
                        ],
                        [
                            "vph * vabs / vector_norm(vabs, domain)",
                            "BinOp"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_112": {
                "input": {
                    "value": "weight.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(u, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(u)",
                            "Call"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, float('inf'))",
                            "BinOp"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, codomain / (codomain - 1))",
                            "BinOp"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "F.conv2d(self.v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_299": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ],
                        [
                            "self.weight.detach().view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "self.weight.detach()",
                            "Call"
                        ],
                        [
                            "self.weight.view(self.out_channels, self.in_channels)",
                            "Call"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight / factor",
                            "BinOp"
                        ],
                        [
                            "self.compute_weight(update=False)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(v, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(v)",
                            "Call"
                        ],
                        [
                            "vph * vabs / vector_norm(vabs, domain)",
                            "BinOp"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_300": {
                "input": {
                    "value": "weight.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(u, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(u)",
                            "Call"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, float('inf'))",
                            "BinOp"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, codomain / (codomain - 1))",
                            "BinOp"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "F.conv2d(self.v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_115": {
                "input": {
                    "value": "u - old_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_116": {
                "input": {
                    "value": "v - old_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_305": {
                "input": {
                    "value": "u - old_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_306": {
                "input": {
                    "value": "v - old_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_363": {
                "input": {
                    "value": "u - old_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_364": {
                "input": {
                    "value": "v - old_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_117": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(u, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(u)",
                            "Call"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, float('inf'))",
                            "BinOp"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, codomain / (codomain - 1))",
                            "BinOp"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "F.conv2d(self.v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_118": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(v, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(v)",
                            "Call"
                        ],
                        [
                            "vph * vabs / vector_norm(vabs, domain)",
                            "BinOp"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_230": {
                "*size": {
                    "value": "num_output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.shape[0] * u.shape[1] * u.shape[2] * u.shape[3]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_231": {
                "*size": {
                    "value": "num_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c * h * w",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_307": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(u, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(u)",
                            "Call"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, float('inf'))",
                            "BinOp"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, codomain / (codomain - 1))",
                            "BinOp"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "F.conv2d(self.v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_308": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(v, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(v)",
                            "Call"
                        ],
                        [
                            "vph * vabs / vector_norm(vabs, domain)",
                            "BinOp"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_365": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(u, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(u)",
                            "Call"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, float('inf'))",
                            "BinOp"
                        ],
                        [
                            "uph * uabs / vector_norm(uabs, codomain / (codomain - 1))",
                            "BinOp"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "F.conv2d(self.v.view(1, c, h, w), self.weight, stride=self.stride, padding=self.padding, bias=None)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain)",
                            "Call"
                        ],
                        [
                            "self.u.detach()",
                            "Call"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(torch.mv(weight, v), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "normalize_u(u_s.view(-1), codomain, out=u)",
                            "Call"
                        ],
                        [
                            "u.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_366": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(v, p=2, dim=0, out=out)",
                            "Call"
                        ],
                        [
                            "projmax_(v)",
                            "Call"
                        ],
                        [
                            "vph * vabs / vector_norm(vabs, domain)",
                            "BinOp"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "v.clone()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain)",
                            "Call"
                        ],
                        [
                            "self.v.detach()",
                            "Call"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(torch.mv(weight.t(), u), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ],
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "normalize_v(v_s.view(-1), domain, out=v)",
                            "Call"
                        ],
                        [
                            "v.clone(memory_format=torch.contiguous_format)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/layers/base/utils.py": {
        "torch": {}
    },
    "lib/layers/broyden.py": {
        "torch": {
            "einsum_108": {
                "variable": {
                    "value": "xTU",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bi, bij -> bj",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "einsum_119": {
                "variable": {
                    "value": "VTx",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bji, bi -> bj",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "part_VTs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "Us",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "total_hsize",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "LBFGS_thres",
                    "type": "variable",
                    "possible_values": [
                        [
                            "threshold",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "VTs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "LBFGS_thres",
                    "type": "variable",
                    "possible_values": [
                        [
                            "threshold",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "total_hsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_145": {
                "variable": {
                    "value": "new_objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g(x_est)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_21": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_157": {
                "variable": {
                    "value": "new_objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g(x_est)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_216": {
                "input": {
                    "value": "res_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_info['result']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "any_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_19": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "all_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_74": {
                "input": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-gx",
                            "UnaryOp"
                        ],
                        [
                            "-matvec(Us[:, :, :nstep], VTs[:, :nstep], gx)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "einsum_109": {
                "equation": {
                    "value": "bj, bji -> bi",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "xTU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bi, bij -> bj', x, part_Us)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_120": {
                "equation": {
                    "value": "bij, bj -> bi",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "part_Us",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_188": {
                "input": {
                    "value": "lowest_gx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_189": {
                "input": {
                    "value": "lowest_gx",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_73": {
                "input": {
                    "value": "g0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_209": {
                "input": {
                    "value": "res_est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_info['result']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "any_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_47": {
                "input": {
                    "value": "torch.abs(b ** 2 - 3 * a * derphi0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_176": {
                "equation": {
                    "value": "bi, bi -> b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "vT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmatvec(part_Us, part_VTs, delta_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_47": {
                "input": {
                    "value": "b ** 2 - 3 * a * derphi0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/layers/container.py": {
        "torch": {
            "ModuleList_10": {
                "variable": {
                    "value": "self.chain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layersList",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/layers/coupling.py": {
        "torch": {
            "sigmoid_65": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_a + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_73": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_a + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_119": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f[:, :self.d] + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_83": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(s_a + 2.0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(s_a + 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_83": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_152": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f[:, :self.d]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(f[:, :self.d] + 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_152": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[y_a, y_b] if not self.swap else [y_b, y_a]",
                            "IfExp"
                        ],
                        [
                            "(x * s + t) * (1 - b) + x_a",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_a, x_b] if not self.swap else [x_b, x_a]",
                            "IfExp"
                        ],
                        [
                            "y_a + (1 - b) * (y - t) / s",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_48": {
                "tensors": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[y_a, y_b] if not self.swap else [y_b, y_a]",
                            "IfExp"
                        ],
                        [
                            "(x * s + t) * (1 - b) + x_a",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_a, x_b] if not self.swap else [x_b, x_a]",
                            "IfExp"
                        ],
                        [
                            "y_a + (1 - b) * (y - t) / s",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/layers/elemwise.py": {
        "torch": {
            "as_tensor_30": {
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_31": {
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_71": {
                "input": {
                    "value": "1 - s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_77": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y + 0.5",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "torch.log(s) - torch.log(1 - s)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_84": {
                "input": {
                    "value": "s - s * s",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/layers/glow.py": {
        "torch": {
            "Parameter_11": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(dim)[torch.randperm(dim)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_14": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(y, self.weight.inverse())",
                            "Call"
                        ],
                        [
                            "F.conv2d(y, self.weight.inverse().view(self.dim, self.dim, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, self.weight)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight.view(self.dim, self.dim, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight.inverse()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(dim)[torch.randperm(dim)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_43": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(y, self.weight.inverse())",
                            "Call"
                        ],
                        [
                            "F.conv2d(y, self.weight.inverse().view(self.dim, self.dim, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight.view(self.dim, self.dim, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, self.weight)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight.view(self.dim, self.dim, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight.inverse().view(self.dim, self.dim, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_29": {
                "input": {
                    "value": "torch.abs(torch.det(self.weight))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_58": {
                "input": {
                    "value": "torch.abs(torch.det(self.weight))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_29": {
                "input": {
                    "value": "torch.det(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_58": {
                "input": {
                    "value": "torch.det(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_11": {
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randperm_11": {
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "det_29": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_40": {
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randperm_40": {
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "det_58": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/layers/implicit_block.py": {
        "torch": {
            "tensor_420": {
                "variable": {
                    "value": "logdetgrad",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_437": {
                "variable": {
                    "value": "logdetgrad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vjp_jac.view(x.shape[0], -1) * vareps.view(x.shape[0], -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_144": {
                "variable": {
                    "value": "self.geom_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(np.log(geom_p) - np.log(1.0 - geom_p))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.lamb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(lamb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_362": {
                "tensors": {
                    "value": "jac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_423": {
                "variable": {
                    "value": "tr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vjp.view(x.shape[0], -1) * vareps.view(x.shape[0], -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_21": {
                "input": {
                    "value": "(x - x_prev) ** 2 / tol < 1.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_like_205": {
                "variable": {
                    "value": "dl_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_436": {
                "outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda z: x_embed - nnet_z(z)",
                            "Lambda"
                        ],
                        [
                            "lambda z: x_embed - nnet_z(z) - z",
                            "Lambda"
                        ],
                        [
                            "gnet(x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RootFind.apply(self.nnet_x, self.nnet_z, x0, z, 'broyden', self.eps_sample, self.threshold)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.clone().detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "x.detach().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "neumann_vjp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vareps",
                            "Name"
                        ],
                        [
                            "neumann_vjp + (-1) ** k * coeff_fn(k) * vjp",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_499": {
                "tensors": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p.reshape(-1) for p in sequence]",
                            "ListComp"
                        ],
                        [
                            "[p.reshape(-1) if p is not None else torch.zeros_like(q).view(-1) for (p, q) in zip(sequence, like_sequence)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_499": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_504": {
                "tensors": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p.reshape(-1) for p in sequence]",
                            "ListComp"
                        ],
                        [
                            "[p.reshape(-1) if p is not None else torch.zeros_like(q).view(-1) for (p, q) in zip(sequence, like_sequence)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_504": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "empty_cache_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_73": {
                "input": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_160": {
                "*size": {
                    "value": "self.n_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_162": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logdet_254": {
                "variable": {
                    "value": "logdet_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Jx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_jacobian(Fx, x)",
                            "Call"
                        ],
                        [
                            "batch_jacobian(Fx, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "logdet_258": {
                "variable": {
                    "value": "logdet_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Jz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_jacobian(Fz, z)",
                            "Call"
                        ],
                        [
                            "batch_jacobian(Fz, z)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_262": {
                "variable": {
                    "value": "geom_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.geom_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_grad_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_386": {
                "variable": {
                    "value": "(grad_x, *grad_params)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "logdetgrad.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(x,) + g_params",
                    "type": "BinOp",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "enable_grad_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_422": {
                "outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda z: x_embed - nnet_z(z)",
                            "Lambda"
                        ],
                        [
                            "lambda z: x_embed - nnet_z(z) - z",
                            "Lambda"
                        ],
                        [
                            "gnet(x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RootFind.apply(self.nnet_x, self.nnet_z, x0, z, 'broyden', self.eps_sample, self.threshold)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.clone().detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "x.detach().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "vjp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vareps",
                            "Name"
                        ],
                        [
                            "torch.autograd.grad(g, x, vjp, create_graph=training, retain_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "vareps",
                            "Name"
                        ],
                        [
                            "torch.autograd.grad(g, x, vjp, retain_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.training",
                            "Attribute"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randint_487": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "y.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_503": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_25": {
                "input": {
                    "value": "x - x_prev",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_208": {
                "input": {
                    "value": "dl_dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(grad).to(grad)",
                            "Call"
                        ],
                        [
                            "result_info['result']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "enable_grad_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_334": {
                "variable": {
                    "value": "Jx_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Jx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_jacobian(Fx, x)",
                            "Call"
                        ],
                        [
                            "batch_jacobian(Fx, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Jx_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Jx",
                            "Name"
                        ],
                        [
                            "torch.bmm(Jx, Jx_k)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_341": {
                "variable": {
                    "value": "Jz_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Jz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_jacobian(Fz, z)",
                            "Call"
                        ],
                        [
                            "batch_jacobian(Fz, z)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Jz_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Jz",
                            "Name"
                        ],
                        [
                            "torch.bmm(Jz, Jz_k)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_390": {
                "variable": {
                    "value": "grad_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RootFind.apply(self.nnet_x, self.nnet_z, x0, z, 'broyden', self.eps_sample, self.threshold)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.clone().detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "x.detach().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_434": {
                "outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda z: x_embed - nnet_z(z)",
                            "Lambda"
                        ],
                        [
                            "lambda z: x_embed - nnet_z(z) - z",
                            "Lambda"
                        ],
                        [
                            "gnet(x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RootFind.apply(self.nnet_x, self.nnet_z, x0, z, 'broyden', self.eps_sample, self.threshold)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.clone().detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "x.detach().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "vjp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vareps",
                            "Name"
                        ],
                        [
                            "torch.autograd.grad(g, x, vjp, create_graph=training, retain_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "vareps",
                            "Name"
                        ],
                        [
                            "torch.autograd.grad(g, x, vjp, retain_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "data": {
                    "value": "np.log(geom_p) - np.log(1.0 - geom_p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "data": {
                    "value": "lamb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lamb.item()",
                            "Call"
                        ],
                        [
                            "self.lamb.item()",
                            "Call"
                        ],
                        [
                            "self.lamb.item()",
                            "Call"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_346": {
                "data": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_fn(self.n_samples)",
                            "Call"
                        ],
                        [
                            "sample_fn(self.n_samples)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_348": {
                "input": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logdetgrad.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_349": {
                "input": {
                    "value": "estimator ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Bernoulli_297": {
                "probs": {
                    "value": "torch.Tensor([0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_297": {
                "input": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_298": {
                "probs": {
                    "value": "torch.Tensor([0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_298": {
                "input": {
                    "value": "z.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_361": {
                "outputs": {
                    "value": "torch.sum(g[:, d])",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RootFind.apply(self.nnet_x, self.nnet_z, x0, z, 'broyden', self.eps_sample, self.threshold)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.clone().detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "x.detach().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "create_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_361": {
                "input": {
                    "value": "g[:, d]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/layers/iresblock.py": {
        "torch": {
            "tensor_240": {
                "variable": {
                    "value": "logdetgrad",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_257": {
                "variable": {
                    "value": "logdetgrad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vjp_jac.view(x.shape[0], -1) * vareps.view(x.shape[0], -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.geom_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(np.log(geom_p) - np.log(1.0 - geom_p))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.lamb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(lamb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_176": {
                "tensors": {
                    "value": "jac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "batch_jacobian(g, x)",
                            "Call"
                        ],
                        [
                            "batch_jacobian(g, x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_243": {
                "variable": {
                    "value": "tr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vjp.view(x.shape[0], -1) * vareps.view(x.shape[0], -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_222": {
                "variable": {
                    "value": "(dg_x, *dg_params)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nnet(x)",
                            "Call"
                        ],
                        [
                            "self.nnet(x)",
                            "Call"
                        ],
                        [
                            "self.nnet(x)",
                            "Call"
                        ],
                        [
                            "gnet(x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x] + g_params",
                    "type": "BinOp",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "grad_g",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_256": {
                "outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nnet(x)",
                            "Call"
                        ],
                        [
                            "self.nnet(x)",
                            "Call"
                        ],
                        [
                            "self.nnet(x)",
                            "Call"
                        ],
                        [
                            "gnet(x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._inverse_fixed_point(y)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.detach().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "neumann_vjp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vareps",
                            "Name"
                        ],
                        [
                            "neumann_vjp + (-1) ** k * coeff_fn(k) * vjp",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.training",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_319": {
                "tensors": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p.reshape(-1) for p in sequence]",
                            "ListComp"
                        ],
                        [
                            "[p.reshape(-1) if p is not None else torch.zeros_like(q).view(-1) for (p, q) in zip(sequence, like_sequence)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_319": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_324": {
                "tensors": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p.reshape(-1) for p in sequence]",
                            "ListComp"
                        ],
                        [
                            "[p.reshape(-1) if p is not None else torch.zeros_like(q).view(-1) for (p, q) in zip(sequence, like_sequence)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_324": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "np.log(geom_p) - np.log(1.0 - geom_p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "lamb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lamb.item()",
                            "Call"
                        ],
                        [
                            "self.lamb.item()",
                            "Call"
                        ],
                        [
                            "self.lamb.item()",
                            "Call"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "self.n_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_73": {
                "input": {
                    "value": "(x - x_prev) ** 2 / tol < 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "enable_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_97": {
                "variable": {
                    "value": "geom_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.geom_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_129": {
                "variable": {
                    "value": "vareps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._inverse_fixed_point(y)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.detach().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                }
            },
            "enable_grad_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_199": {
                "variable": {
                    "value": "(grad_x, *grad_params)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "logdetgrad.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(x,) + g_params",
                    "type": "BinOp",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "enable_grad_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_242": {
                "outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nnet(x)",
                            "Call"
                        ],
                        [
                            "self.nnet(x)",
                            "Call"
                        ],
                        [
                            "self.nnet(x)",
                            "Call"
                        ],
                        [
                            "gnet(x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._inverse_fixed_point(y)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.detach().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "vjp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vareps",
                            "Name"
                        ],
                        [
                            "torch.autograd.grad(g, x, vjp, create_graph=training, retain_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "vareps",
                            "Name"
                        ],
                        [
                            "torch.autograd.grad(g, x, vjp, retain_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.training",
                            "Attribute"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randint_307": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "y.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_323": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bmm_156": {
                "variable": {
                    "value": "jac_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "jac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "batch_jacobian(g, x)",
                            "Call"
                        ],
                        [
                            "batch_jacobian(g, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "jac_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jac",
                            "Name"
                        ],
                        [
                            "torch.bmm(jac, jac_k)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_203": {
                "variable": {
                    "value": "grad_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._inverse_fixed_point(y)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.detach().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_254": {
                "outputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nnet(x)",
                            "Call"
                        ],
                        [
                            "self.nnet(x)",
                            "Call"
                        ],
                        [
                            "self.nnet(x)",
                            "Call"
                        ],
                        [
                            "gnet(x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._inverse_fixed_point(y)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.detach().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "vjp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vareps",
                            "Name"
                        ],
                        [
                            "torch.autograd.grad(g, x, vjp, create_graph=training, retain_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "vareps",
                            "Name"
                        ],
                        [
                            "torch.autograd.grad(g, x, vjp, retain_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_94": {
                "input": {
                    "value": "torch.abs(batch_dets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "data": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_fn(self.n_samples)",
                            "Call"
                        ],
                        [
                            "sample_fn(self.n_samples)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_162": {
                "input": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logdetgrad.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_163": {
                "input": {
                    "value": "estimator ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_175": {
                "outputs": {
                    "value": "torch.sum(g[:, d])",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._inverse_fixed_point(y)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x.detach().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_175": {
                "input": {
                    "value": "g[:, d]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_94": {
                "input": {
                    "value": "batch_dets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(jac[:, 0, 0] + 1) * (jac[:, 1, 1] + 1) - jac[:, 0, 1] * jac[:, 1, 0]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lib/layers/mask_utils.py": {
        "torch": {
            "zeros_26": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_12": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_14": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/layers/normalization.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_41": {
                "variable": {
                    "value": "batch_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1).contiguous().view(c, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_22": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/layers/squeeze.py": {
        "torch": {
            "pixel_shuffle_29": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "upscale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/lr_scheduler.py": {
        "torch": {}
    },
    "lib/optimizers.py": {
        "torch": {
            "cat_178": {
                "variable": {
                    "value": "norm_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[exp_inf.mul_(beta2).unsqueeze(0), grad.abs().add_(eps).unsqueeze_(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_73": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_166": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_167": {
                "variable": {
                    "value": "state[exp_inf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_179": {
                "input": {
                    "value": "norm_buf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([exp_inf.mul_(beta2).unsqueeze(0), grad.abs().add_(eps).unsqueeze_(0)], 0)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "out": {
                    "value": "(exp_inf, exp_inf.new().long())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_259": {
                "variable": {
                    "value": "state[square_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_78": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_92": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_261": {
                "variable": {
                    "value": "state[momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_263": {
                "variable": {
                    "value": "state[grad_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/resflow.py": {
        "torch": {
            "ModuleList_187": {
                "variable": {
                    "value": "self.classification_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "classification_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.logit_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.classification_hdim * len(classification_heads)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.view(o.size()[0], -1) for o in out]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_452": {
                "variable": {
                    "value": "self.nnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*nnet",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Softplus_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_10": {
                "inplace": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_140": {
                "modules": {
                    "value": "transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_216": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "class_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_216": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "*args": {
                    "value": "nn.Conv2d(hshape[1], self.classification_hdim, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "z_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_prev, zs[idx])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "z_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_prev, zs[idx])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_434": {
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_445": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "in_channels": {
                    "value": "hshape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.classification_hdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_183": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_184": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_384": {
                "*args": {
                    "value": "*nnet",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tensor_434": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_603": {
                "*args": {
                    "value": "*nnet",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_349": {
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout2d_375": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_599": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_349": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "lib/tabular.py": {
        "torch": {
            "zeros_17": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_196": {
                "data": {
                    "value": "train_raw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize_raw_data(train_raw, mu, s)",
                            "Call"
                        ],
                        [
                            "pandas.read_csv(filepath_or_buffer=train_data_path, index_col=False)",
                            "Call"
                        ],
                        [
                            "train_raw[train_raw[train_raw.columns[0]] == 1]",
                            "Subscript"
                        ],
                        [
                            "train_raw.drop(train_raw.columns[0], axis=1)",
                            "Call"
                        ],
                        [
                            "normalize_raw_data(train_raw, mu, s).to_numpy()",
                            "Call"
                        ],
                        [
                            "train_raw[:, np.array([i for i in range(train_raw.shape[1]) if i not in features_to_remove])]",
                            "Subscript"
                        ],
                        [
                            "normalize_raw_data(train_raw, mu, s)",
                            "Call"
                        ],
                        [
                            "f['train'][()]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.get_default_dtype()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_198": {
                "data": {
                    "value": "valid_raw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize_raw_data(valid_raw, mu, s)",
                            "Call"
                        ],
                        [
                            "normalize_raw_data(valid_raw, mu, s)",
                            "Call"
                        ],
                        [
                            "f['validation'][()]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.get_default_dtype()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_200": {
                "data": {
                    "value": "test_raw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize_raw_data(test_raw, mu, s)",
                            "Call"
                        ],
                        [
                            "pandas.read_csv(filepath_or_buffer=test_data_path, index_col=False)",
                            "Call"
                        ],
                        [
                            "test_raw[test_raw[test_raw.columns[0]] == 1]",
                            "Subscript"
                        ],
                        [
                            "test_raw.drop(test_raw.columns[0], axis=1)",
                            "Call"
                        ],
                        [
                            "test_raw.drop(test_raw.columns[-1], axis=1)",
                            "Call"
                        ],
                        [
                            "normalize_raw_data(test_raw, mu, s).to_numpy()",
                            "Call"
                        ],
                        [
                            "test_raw[:, np.array([i for i in range(test_raw.shape[1]) if i not in features_to_remove])]",
                            "Subscript"
                        ],
                        [
                            "normalize_raw_data(test_raw, mu, s)",
                            "Call"
                        ],
                        [
                            "f['test'][()]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.get_default_dtype()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_dtype_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_dtype_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_dtype_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils.py": {
        "torch": {
            "save_94": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save, 'checkpt-%04d.pth' % epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_112": {
                "variable": {
                    "value": "(m, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_118": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_119": {
                "variable": {
                    "value": "sum_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(value - m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_116": {
                "input": {
                    "value": "torch.sum(torch.exp(value0), dim=dim, keepdim=keepdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_119": {
                "input": {
                    "value": "value - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_116": {
                "input": {
                    "value": "torch.exp(value0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_123": {
                "input": {
                    "value": "sum_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.exp(value - m))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_116": {
                "input": {
                    "value": "value0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value - m",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lib/visualize_flow.py": {
        "torch": {
            "Tensor_21": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([xx.reshape(-1, 1), yy.reshape(-1, 1)])",
                            "Call"
                        ],
                        [
                            "torch.Tensor(z)",
                            "Call"
                        ],
                        [
                            "np.hstack([xx.reshape(-1, 1), yy.reshape(-1, 1)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(z, requires_grad=True).type(torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat(z, 0)",
                            "Call"
                        ],
                        [
                            "prior_sample(npts * npts, 2).type(torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([xx.reshape(-1, 1), yy.reshape(-1, 1)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).type(torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_71": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([xx.reshape(-1, 1), yy.reshape(-1, 1)])",
                            "Call"
                        ],
                        [
                            "torch.Tensor(z)",
                            "Call"
                        ],
                        [
                            "np.hstack([xx.reshape(-1, 1), yy.reshape(-1, 1)])",
                            "Call"
                        ],
                        [
                            "torch.tensor(z, requires_grad=True).type(torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat(z, 0)",
                            "Call"
                        ],
                        [
                            "prior_sample(npts * npts, 2).type(torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "delta_logp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "delta_logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(delta_logp, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_93": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "z.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "zk",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(zk, 0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_72": {
                "tensor": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, x.shape[0]).to(torch.int64)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, z.shape[0]).to(torch.int64)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "int(memory ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_94": {
                "tensor": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, x.shape[0]).to(torch.int64)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, z.shape[0]).to(torch.int64)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "int(memory ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "logqz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_logdensity(z)",
                            "Call"
                        ],
                        [
                            "torch.sum(logqz, dim=1)[:, None]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(logqz, dim=1)[:, None]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "logqz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_logdensity(z)",
                            "Call"
                        ],
                        [
                            "torch.sum(logqz, dim=1)[:, None]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(logqz, dim=1)[:, None]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "preprocessing/convert_to_pth.py": {
        "torch": {
            "tensor_6": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.load(sys.argv[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_8": {
                "obj": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.load(sys.argv[1]))",
                            "Call"
                        ],
                        [
                            "img.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "re.sub('.npy$', '.pth', sys.argv[1])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "qualitative_samples.py": {
        "torch": {
            "device_89": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_424": {
                "variable": {
                    "value": "checkpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_421": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*input_size[1:]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "get_device_properties_94": {
                "variable": {
                    "value": "props",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(torch.cuda.device_count())",
                            "Call"
                        ],
                        [
                            "tqdm(range(args.nbatches))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_105": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_137": {
                "variable": {
                    "value": "logpu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.new_empty(x.shape[0], args.padding, x.shape[2], x.shape[3]).uniform_()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_137": {
                "variable": {
                    "value": "logpu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_153": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x / 2 ** (8 - args.nbits)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_208": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(args.dataroot, train=True, transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_214": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(args.dataroot, train=False, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_420": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_101": {
                "input": {
                    "value": "1 - p + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_226": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(args.dataroot, train=True, transform=transforms.Compose([transforms.Resize(args.imagesize), transforms.ToTensor(), add_noise]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_238": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(args.dataroot, train=False, transform=transforms.Compose([transforms.Resize(args.imagesize), transforms.ToTensor(), add_noise]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_442": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_446": {
                "variable": {
                    "value": "rand_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "(im_dim + args.padding) * args.imagesize * args.imagesize",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_count_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_138": {
                "tensors": {
                    "value": "[u, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_256": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "vdsets.SVHN(args.dataroot, split='train', download=True, transform=transforms.Compose([transforms.Resize(args.imagesize), transforms.RandomCrop(32, padding=4, padding_mode=args.rcrop_pad_mode), transforms.ToTensor(), add_noise]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_269": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "vdsets.SVHN(args.dataroot, split='test', download=True, transform=transforms.Compose([transforms.Resize(args.imagesize), transforms.ToTensor(), add_noise]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_286": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CelebAHQ(train=True, transform=transforms.Compose([transforms.ToPILImage(), transforms.RandomHorizontalFlip(), transforms.ToTensor(), reduce_bits, lambda x: add_noise(x, nvals=2 ** args.nbits)]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_297": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CelebAHQ(train=False, transform=transforms.Compose([reduce_bits, lambda x: add_noise(x, nvals=2 ** args.nbits)]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_313": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CelebA5bit(train=True, transform=transforms.Compose([transforms.ToPILImage(), transforms.RandomHorizontalFlip(), transforms.ToTensor(), lambda x: add_noise(x, nvals=32)]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_323": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CelebA5bit(train=False, transform=transforms.Compose([lambda x: add_noise(x, nvals=32)]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_336": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.Imagenet32(train=True, transform=transforms.Compose([add_noise]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_341": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.Imagenet32(train=False, transform=transforms.Compose([add_noise]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_354": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.Imagenet64(train=True, transform=transforms.Compose([add_noise]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_359": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.Imagenet64(train=False, transform=transforms.Compose([add_noise]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_classification.py": {
        "torch": {
            "device_74": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_72": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_73": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_319": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='data', train=True, download=True, transform=transforms.Compose(transform_train))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='data', train=True, download=True, transform=transforms.Compose(transform_train))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='data', train=True, download=True, transform=transforms.Compose(transform_mnist + transform_train + transform_mnist2))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_321": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='data', train=False, download=True, transform=transforms.Compose(transform_test))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='data', train=False, download=True, transform=transforms.Compose(transform_test))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='data', train=False, download=True, transform=transforms.Compose(transform_mnist + transform_test + transform_mnist2))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_434": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ImplicitResNet18(num_classes=args.num_classes).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_440": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_129": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.block1(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_196": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_197": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_198": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_199": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_201": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_203": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_211": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_212": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_215": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(x + self.block1(x))",
                            "Call"
                        ],
                        [
                            "out + self.block2(out)",
                            "BinOp"
                        ],
                        [
                            "self.downsample(out)",
                            "Call"
                        ],
                        [
                            "self.block(x)",
                            "Call"
                        ],
                        [
                            "self.block(x, restore=True)",
                            "Call"
                        ],
                        [
                            "self.downsample(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_224": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_225": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_230": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_241": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_246": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(x + self.block1(x))",
                            "Call"
                        ],
                        [
                            "out + self.block2(out)",
                            "BinOp"
                        ],
                        [
                            "self.downsample(out)",
                            "Call"
                        ],
                        [
                            "self.block(x)",
                            "Call"
                        ],
                        [
                            "self.block(x, restore=True)",
                            "Call"
                        ],
                        [
                            "self.downsample(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_258": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_263": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_274": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_279": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(x + self.block1(x))",
                            "Call"
                        ],
                        [
                            "out + self.block2(out)",
                            "BinOp"
                        ],
                        [
                            "self.downsample(out)",
                            "Call"
                        ],
                        [
                            "self.block(x)",
                            "Call"
                        ],
                        [
                            "self.block(x, restore=True)",
                            "Call"
                        ],
                        [
                            "self.downsample(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_325": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='data', train=True, download=True, transform=transforms.Compose(transform_train))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='data', train=True, download=True, transform=transforms.Compose(transform_train))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='data', train=True, download=True, transform=transforms.Compose(transform_mnist + transform_train + transform_mnist2))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_327": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='data', train=False, download=True, transform=transforms.Compose(transform_test))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='data', train=False, download=True, transform=transforms.Compose(transform_test))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='data', train=False, download=True, transform=transforms.Compose(transform_mnist + transform_test + transform_mnist2))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_357": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_175": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_205": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_238": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_271": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "DataLoader_333": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='data', train=True, download=True, transform=transforms.Compose(transform_train))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='data', train=True, download=True, transform=transforms.Compose(transform_train))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='data', train=True, download=True, transform=transforms.Compose(transform_mnist + transform_train + transform_mnist2))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_335": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='data', train=False, download=True, transform=transforms.Compose(transform_test))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='data', train=False, download=True, transform=transforms.Compose(transform_test))",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='data', train=False, download=True, transform=transforms.Compose(transform_mnist + transform_test + transform_mnist2))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_382": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_403": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_435": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "*args": {
                    "value": "*nnet",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_167": {
                "*args": {
                    "value": "*nnet",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cross_entropy_386": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_407": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_461": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_dir, 'model-wideres-epoch{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_463": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_dir, 'opt-wideres-checkpoint_epoch{}.tar'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "num_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_124": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_177": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_206": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_207": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_img.py": {
        "torch": {
            "device_110": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_514": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_122": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[math.log(2 * math.pi)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_144": {
                "variable": {
                    "value": "inv_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-log_std",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_244": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(args.dataroot, train=True, transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_250": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(args.dataroot, train=False, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_486": {
                "variable": {
                    "value": "checkpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_device_properties_116": {
                "variable": {
                    "value": "props",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(torch.cuda.device_count())",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_124": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_132": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "floor_156": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x / 2 ** (8 - args.nbits)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataParallel_204": {
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImplicitFlow(input_size, n_blocks=list(map(int, args.nblocks.split('-'))) if '-' in args.nblocks else [int(args.nblocks)], intermediate_dim=args.idim, factor_out=args.factor_out, quadratic=args.quadratic, init_layer=init_layer, actnorm=args.actnorm, fc_actnorm=args.fc_actnorm, batchnorm=args.batchnorm, dropout=args.dropout, fc=args.fc, coeff=args.coeff, vnorms=args.vnorms, n_lipschitz_iters=args.n_lipschitz_iters, sn_atol=args.sn_tol, sn_rtol=args.sn_tol, n_power_series=args.n_power_series, n_dist=args.n_dist, n_samples=args.n_samples, kernels=args.kernels, activation_fn=args.act, fc_end=args.fc_end, fc_idim=args.fc_idim, n_exact_terms=args.n_exact_terms, preact=args.preact, neumann_grad=args.neumann_grad, grad_in_forward=args.mem_eff, first_resblock=True, learn_p=args.learn_p, classification=args.task in ['classification', 'hybrid'], classification_hdim=args.cdim, n_classes=n_classes)",
                            "Call"
                        ],
                        [
                            "parallelize(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_260": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(args.dataroot, train=True, transform=transforms.Compose([transforms.Resize(args.imagesize), transforms.ToTensor(), add_noise]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_272": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(args.dataroot, train=False, transform=transforms.Compose([transforms.Resize(args.imagesize), transforms.ToTensor(), add_noise]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_484": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "*input_size[1:]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mean_551": {
                "variable": {
                    "value": "logpz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "standard_normal_logprob(z).view(z.size(0), -1).sum(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(logpz).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_552": {
                "variable": {
                    "value": "delta_logp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-delta_logp",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_767": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_real_imgs, fake_imgs, recon_imgs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_128": {
                "input": {
                    "value": "1 - p + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_185": {
                "variable": {
                    "value": "logpu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.new_empty(x.shape[0], args.padding, x.shape[2], x.shape[3]).uniform_()",
                            "Call"
                        ],
                        [
                            "x.new_empty(x.shape[0], args.padding, x.shape[2], x.shape[3]).normal_(nvals / 2, nvals / 8)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_185": {
                "variable": {
                    "value": "logpu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_288": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "vdsets.SVHN(args.dataroot, split='train', download=True, transform=transforms.Compose([transforms.Resize(args.imagesize), transforms.RandomCrop(32, padding=4, padding_mode=args.rcrop_pad_mode), transforms.ToTensor(), add_noise]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_301": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "vdsets.SVHN(args.dataroot, split='test', download=True, transform=transforms.Compose([transforms.Resize(args.imagesize), transforms.ToTensor(), add_noise]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_483": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_502": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_518": {
                "*size": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_519": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__652": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_693": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_715": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_752": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_787": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_852": {
                "obj": {
                    "value": "{'state_dict': model.module.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'args': args, 'ema': ema, 'test_bpd': test_bpd}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'models', 'most_recent.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_194": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_319": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CelebAHQ(train=True, transform=transforms.Compose([transforms.ToPILImage(), transforms.RandomHorizontalFlip(), transforms.ToTensor(), reduce_bits, lambda x: add_noise(x, nvals=2 ** args.nbits)]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_330": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CelebAHQ(train=False, transform=transforms.Compose([reduce_bits, lambda x: add_noise(x, nvals=2 ** args.nbits)]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_472": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_800": {
                "obj": {
                    "value": "domain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain.item()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_802": {
                "obj": {
                    "value": "codomain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "codomain.item()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_186": {
                "tensors": {
                    "value": "[x, u / nvals]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_344": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CelebA5bit(train=True, transform=transforms.Compose([transforms.ToPILImage(), transforms.RandomHorizontalFlip(), transforms.ToTensor(), lambda x: add_noise(x, nvals=32)]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_354": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CelebA5bit(train=False, transform=transforms.Compose([lambda x: add_noise(x, nvals=32)]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_474": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, betas=(0.9, 0.99), weight_decay=args.wd)",
                            "Call"
                        ],
                        [
                            "optim.Adamax(model.parameters(), lr=args.lr, betas=(0.9, 0.99), weight_decay=args.wd)",
                            "Call"
                        ],
                        [
                            "optim.RMSprop(model.parameters(), lr=args.lr, weight_decay=args.wd)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9, weight_decay=args.wd)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[60, 120, 160]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "args.begin_epoch - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_497": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_577": {
                "input": {
                    "value": "m.domain.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_190": {
                "tensors": {
                    "value": "[x, u / nvals]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_365": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.Imagenet32(train=True, transform=transforms.Compose([add_noise]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_370": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.Imagenet32(train=False, transform=transforms.Compose([add_noise]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_549": {
                "input": {
                    "value": "logpx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logpz - beta * delta_logp - np.log(nvals) * (args.imagesize * args.imagesize * (im_dim + args.padding)) - logpu",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_647": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_381": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.Imagenet64(train=True, transform=transforms.Compose([add_noise]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_386": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.Imagenet64(train=False, transform=transforms.Compose([add_noise]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_tabular.py": {
        "torch": {
            "device_98": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_395": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_110": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[math.log(2 * math.pi)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_132": {
                "variable": {
                    "value": "inv_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-log_std",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_194": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_201": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_372": {
                "variable": {
                    "value": "checkpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_400": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_device_properties_104": {
                "variable": {
                    "value": "props",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(torch.cuda.device_count())",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_112": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_120": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "floor_144": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x / 2 ** (8 - args.nbits)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataParallel_186": {
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model()",
                            "Call"
                        ],
                        [
                            "layers.SequentialFlow(blocks).to(device)",
                            "Call"
                        ],
                        [
                            "parallelize(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_211": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_218": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_311": {
                "*args": {
                    "value": "*nnet",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_370": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "data_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "43",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "21",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "63",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_116": {
                "input": {
                    "value": "1 - p + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_173": {
                "variable": {
                    "value": "logpu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.new_empty(x.shape[0], args.padding, x.shape[2], x.shape[3]).uniform_()",
                            "Call"
                        ],
                        [
                            "x.new_empty(x.shape[0], args.padding, x.shape[2], x.shape[3]).normal_(nvals / 2, nvals / 8)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_173": {
                "variable": {
                    "value": "logpu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_228": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_235": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_409": {
                "input": {
                    "value": "logpx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logpz - beta * delta_logp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_410": {
                "input": {
                    "value": "-delta_logp",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__491": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_525": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_547": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_575": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_637": {
                "obj": {
                    "value": "{'state_dict': model.module.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'args': args, 'ema': ema, 'test_bpd': test_bpd}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'models', 'most_recent.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_182": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_245": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_252": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_362": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_588": {
                "obj": {
                    "value": "domain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain.item()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_590": {
                "obj": {
                    "value": "codomain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "codomain.item()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_174": {
                "tensors": {
                    "value": "[x, u / nvals]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_262": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_269": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.val_batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_tensor_383": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_433": {
                "input": {
                    "value": "m.domain.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_178": {
                "tensors": {
                    "value": "[x, u / nvals]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_486": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_toy.py": {
        "torch": {
            "device_82": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_85": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_108": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "toy_data.inf_train_gen(args.data, batch_size=args.batch_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).type(torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "toy_data.inf_train_gen(args.data, batch_size=args.batch_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).type(torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "toy_data.inf_train_gen(args.data, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).type(torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_87": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_95": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "*args": {
                    "value": "*nnet",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_270": {
                "variable": {
                    "value": "checkpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_118": {
                "input": {
                    "value": "logpx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logpz - beta * delta_logp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_119": {
                "input": {
                    "value": "-delta_logp",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataParallel_242": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "layers.SequentialFlow(blocks).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_268": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "toy_data.inf_train_gen(args.data, batch_size=args.batch_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).type(torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "toy_data.inf_train_gen(args.data, batch_size=args.batch_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).type(torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "toy_data.inf_train_gen(args.data, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).type(torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_280": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "toy_data.inf_train_gen(args.data, batch_size=args.batch_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).type(torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "toy_data.inf_train_gen(args.data, batch_size=args.batch_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).type(torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "toy_data.inf_train_gen(args.data, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).type(torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_187": {
                "obj": {
                    "value": "domain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain.item()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_189": {
                "obj": {
                    "value": "codomain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "codomain.item()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_142": {
                "input": {
                    "value": "m.domain.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_151": {
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_151": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_153": {
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_327": {
                "obj": {
                    "value": "{'args': args, 'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'checkpt.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}