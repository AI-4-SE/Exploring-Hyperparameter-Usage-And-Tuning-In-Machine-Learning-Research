{
    "generate.py": {
        "torch": {
            "load_53": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_78": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(imgs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "imgsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgsets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[pil_to_tensor(guide1), img1, pil_to_tensor(guide2), out1, pil_to_tensor(guide3), img2, pil_to_tensor(guide4), out2, pil_to_tensor(guide5), out12, pil_to_tensor(guide6), out21]",
                            "List"
                        ],
                        [
                            "torch.cat(imgsets, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "ndarray": {
                    "value": "np.array(pil_img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_34": {
                "input": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_34": {
                "input": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_34": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_34": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_34": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "img_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_69": {
                "variable": {
                    "value": "img_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_69": {
                "variable": {
                    "value": "img_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Parameter_17": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(in_channel, out_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv_transpose2d_32": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_246": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*stem",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_248": {
                "variable": {
                    "value": "self.structure",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvLayer(ch, ch, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_252": {
                "variable": {
                    "value": "self.texture",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvLayer(ch, ch * 2, 3, downsample=True, padding='valid')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_263": {
                "variable": {
                    "value": "texture",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.texture(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_281": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_335": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_338": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "EqualLinear(channels[4] * 4 * 4, channels[4], activation='fused_lrelu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_376": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*encoder",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_378": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "EqualLinear(channel * 12 * 2 * feat_size, channel * 32, activation='fused_lrelu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_397": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_input, ref_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_398": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv_transpose2d(input, self.weight * self.scale, bias=self.bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.conv1(input, style, noise)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, style, noise)",
                            "Call"
                        ],
                        [
                            "self.conv1(input)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.stem(input)",
                            "Call"
                        ],
                        [
                            "structure",
                            "Name"
                        ],
                        [
                            "layer(out, texture, noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(out)",
                            "Call"
                        ],
                        [
                            "self.convs(input)",
                            "Call"
                        ],
                        [
                            "self.final_conv(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.final_linear(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((out_input, ref_input), 1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_18": {
                "*size": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channel",
                            "Name"
                        ],
                        [
                            "ch",
                            "Name"
                        ],
                        [
                            "channels[size]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "out": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_255": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_105": {
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "'zero'",
                            "MethodArgument"
                        ],
                        [
                            "'zero'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "stylegan2/calc_inception.py": {
        "torch": {
            "cat_71": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_77": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_91": {
                "variable": {
                    "value": "inception",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "inception",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_patched_inception_v3()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(inception).eval().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform=transform, resolution=args.size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_21": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "stylegan2/convert_weight.py": {
        "torch": {
            "from_numpy_52": {
                "variable": {
                    "value": "dic_torch[target_name + f.{start}.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_230": {
                "variable": {
                    "value": "latent_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g_ema.vars['dlatent_avg'].value().eval()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_267": {
                "variable": {
                    "value": "img_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_tf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "g_ema.run(z, None, **Gs_kwargs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_tf).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_273": {
                "variable": {
                    "value": "img_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_tf, img_pt, img_diff)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "dic_torch[target_name + . + k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flip_35": {
                "variable": {
                    "value": "dic_torch[target_name + .conv.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "dic_torch[target_name + '.conv.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "dic_torch[target_name + f.{start + 1}.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['bias']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "dic_torch[target_name + . + k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "dic_torch[target_name + . + k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_247": {
                "obj": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'g_ema': state_dict, 'latent_avg': latent_avg}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "name + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "ndarray": {
                    "value": "vars['G_synthesis/4x4/Const/const'].value().eval()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_191": {
                "ndarray": {
                    "value": "vars[f'G_synthesis/noise{i}'].value().eval()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_258": {
                "ndarray": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.RandomState(0).randn(n_sample, 512).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "stylegan2/dataset.py": {
        "torch": {}
    },
    "stylegan2/distributed.py": {
        "torch": {
            "cat_91": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_118": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(losses, 0)",
                            "Call"
                        ],
                        [
                            "losses / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "stylegan2/fid.py": {
        "torch": {
            "cat_29": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "extract_feature_from_samples(g, inception, args.truncation, mean_latent, args.batch, args.n_sample, device).numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_75": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_79": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Generator(args.size, 512, 8).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(g)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_89": {
                "variable": {
                    "value": "inception",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "load_patched_inception_v3()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_24": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tqdm(batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "stylegan2/generate.py": {
        "torch": {
            "load_45": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_12": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "stylegan2/inception.py": {
        "torch": {
            "ModuleList_77": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_210": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_238": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_271": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_306": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_215": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_310": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_89": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_98": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_122": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "stylegan2/lpips/__init__.py": {
        "torch": {
            "sqrt_43": {
                "variable": {
                    "value": "norm_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(in_feat ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "in_feat ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "stylegan2/lpips/base_model.py": {
        "torch": {
            "save_41": {
                "obj": {
                    "value": "network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(path, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_48": {
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(path, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "stylegan2/lpips/dist_model.py": {
        "torch": {
            "Adam_94": {
                "variable": {
                    "value": "self.optimizer_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.old_lr - lrd",
                            "BinOp"
                        ],
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_100": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[0]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_163": {
                "input": {
                    "value": "self.loss_total",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "backward_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_130": {
                "variable": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_73": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(os.path.join(inspect.getfile(self.initialize), '..', 'weights/v%s/%s.pth' % (version, net)))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "stylegan2/lpips/networks_basic.py": {
        "torch": {
            "Sequential_111": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BCELoss_136": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_24": {
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 * out_H / in_H",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_157": {
                "input": {
                    "value": "(in0 - in1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "in_channels": {
                    "value": "chn_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chn_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chn_mid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_120": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "in_channels": {
                    "value": "chn_mid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "chn_mid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_122": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "chn_mid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "(d0, d1, d0 - d1, d0 / (d1 + eps), d1 / (d0 + eps))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "stylegan2/lpips/pretrained_networks.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_11": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.slice6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.slice7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "stylegan2/model.py": {
        "torch": {
            "tensor_23": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(k, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "k[None, :] * k[:, None]",
                            "BinOp"
                        ],
                        [
                            "k / k.sum()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_100": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_115": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_138": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_dim, in_dim).div_(lr_mul)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_176": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_222": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_284": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_298": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, channel, size, size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_352": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_391": {
                "variable": {
                    "value": "self.style",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_414": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_415": {
                "variable": {
                    "value": "self.upsamples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_416": {
                "variable": {
                    "value": "self.to_rgbs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Module_417": {
                "variable": {
                    "value": "self.noises",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_464": {
                "variable": {
                    "value": "latent_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.style_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.input.input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_647": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_653": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "EqualLinear(channels[4] * 4 * 4, channels[4], activation='fused_lrelu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_666": {
                "variable": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stddev.var(0, unbiased=False) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_669": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, stddev]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_141": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_dim).fill_(bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_153": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_157": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias * self.lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_243": {
                "variable": {
                    "value": "demod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.pow(2).sum([2, 3, 4]) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv_transpose2d_258": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_522": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent, latent2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rsqrt_19": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=1, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_101": {
                "*size": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ],
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.channels[4]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "channels[size]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_138": {
                "*size": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_223": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ],
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.channels[4]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "channels[size]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_267": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_273": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_284": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_298": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_352": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_455": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.input.input.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ],
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_141": {
                "*size": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_424": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mean_19": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_459": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.input.input.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "stylegan2/non_leaking.py": {
        "torch": {
            "eye_28": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_28": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_29": {
                "variable": {
                    "value": "translate",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t_x, t_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_38": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_38": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_39": {
                "variable": {
                    "value": "sin_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_40": {
                "variable": {
                    "value": "cos_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_41": {
                "variable": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cos_t, -sin_t, sin_t, cos_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_50": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_50": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_60": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_60": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "translate",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t_x, t_y, t_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_72": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "cross",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(0, -u_z, u_y), (u_z, 0, -u_x), (-u_y, u_x, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "cross",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "outer",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "sin_77": {
                "variable": {
                    "value": "sin_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_78": {
                "variable": {
                    "value": "cos_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_82": {
                "variable": {
                    "value": "eye_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_82": {
                "variable": {
                    "value": "eye_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_91": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_91": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_102": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_102": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "axis + (0,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_112": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_112": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "axis + (0,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ger_114": {
                "variable": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                },
                "vec2": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "category",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "categories",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_126": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "high": {
                    "value": "len(categories)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_152": {
                "variable": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_152": {
                "variable": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_211": {
                "variable": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_211": {
                "variable": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_246": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_247": {
                "variable": {
                    "value": "grid[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "end": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_248": {
                "variable": {
                    "value": "grid[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "end": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_248": {
                "variable": {
                    "value": "grid[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_265": {
                "variable": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(width, height)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_tensor_321": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "antialiasing_kernel",
                            "Name"
                        ],
                        [
                            "torch.as_tensor(kernel)",
                            "Call"
                        ],
                        [
                            "torch.ger(kernel, kernel).to(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "ger_322": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "antialiasing_kernel",
                            "Name"
                        ],
                        [
                            "torch.as_tensor(kernel)",
                            "Call"
                        ],
                        [
                            "torch.ger(kernel, kernel).to(img)",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "antialiasing_kernel",
                            "Name"
                        ],
                        [
                            "torch.as_tensor(kernel)",
                            "Call"
                        ],
                        [
                            "torch.ger(kernel, kernel).to(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_323": {
                "variable": {
                    "value": "kernel_flip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "antialiasing_kernel",
                            "Name"
                        ],
                        [
                            "torch.as_tensor(kernel)",
                            "Call"
                        ],
                        [
                            "torch.ger(kernel, kernel).to(img)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grid_sample_355": {
                "variable": {
                    "value": "img_affine",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_2x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "upfirdn2d(img_pad, kernel_flip, up=2)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(n, h, w, 3, device=device)",
                            "Call"
                        ],
                        [
                            "make_grid(img_2x.shape, -2 * p_ux1 / w_o - 1, 2 * (w_p - p_ux1) / w_o - 1, -2 * p_uy1 / h_o - 1, 2 * (h_p - p_uy1) / h_o - 1, device=img_2x.device).to(img_2x)",
                            "Call"
                        ],
                        [
                            "affine_grid(grid, torch.inverse(G)[:, :2, :].to(img_2x))",
                            "Call"
                        ],
                        [
                            "grid * torch.tensor([w_o / w_p, h_o / h_p], device=grid.device) + torch.tensor([(w_o + 2 * p_ux1) / w_p - 1, (h_o + 2 * p_uy1) / h_p - 1], device=grid.device)",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_121": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor((width, height))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_132": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor((width, height))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_136": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor((width, height))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_140": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor((width, height))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_157": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor((width, height))",
                            "Call"
                        ]
                    ]
                }
            },
            "round_169": {
                "input": {
                    "value": "param * height",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_170": {
                "input": {
                    "value": "param * width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "data": {
                    "value": "[(-1.0, -1, 1), (-1, 1, 1), (1, -1, 1), (1, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "t_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_302": {
                "variable": {
                    "value": "img_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img_down[:, :, pad_y1:end_y, pad_x1:end_x]",
                            "Subscript"
                        ],
                        [
                            "img.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "img @ mat_mul + mat_add",
                            "BinOp"
                        ],
                        [
                            "img.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "apply_color(img, C.to(img))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad_x1 + pad_k, pad_x2 + pad_k, pad_y1 + pad_k, pad_y2 + pad_k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_351": {
                "data": {
                    "value": "[(w_o + 2 * p_ux1) / w_p - 1, (h_o + 2 * p_uy1) / h_p - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "grid.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ger_104": {
                "input": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                },
                "vec2": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "inverse_298": {
                "input": {
                    "value": "G_try",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "G",
                            "Name"
                        ],
                        [
                            "sample_affine(p, batch, height, width)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_349": {
                "data": {
                    "value": "[w_o / w_p, h_o / h_p]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "grid.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_348": {
                "input": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(3).unsqueeze(0).repeat(size, 1, 1)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p_rot, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p_rot, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "stylegan2/op/fused_act.py": {
        "torch": {
            "load_11": {
                "variable": {
                    "value": "fused",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fused",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(module_path, 'fused_bias_act.cpp'), os.path.join(module_path, 'fused_bias_act_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "*size": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "leaky_relu_90": {
                "input": {
                    "value": "input + bias.view(1, bias.shape[0], *rest_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "stylegan2/op/upfirdn2d.py": {
        "torch": {
            "load_10": {
                "variable": {
                    "value": "upfirdn2d_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "upfirdn2d",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(module_path, 'upfirdn2d.cpp'), os.path.join(module_path, 'upfirdn2d_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_169": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "upfirdn2d_native(input, kernel, up, up, down, down, pad[0], pad[1], pad[0], pad[1])",
                            "Call"
                        ],
                        [
                            "UpFirDn2d.apply(input, kernel, (up, up), (down, down), (pad[0], pad[1], pad[0], pad[1]))",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ],
                        [
                            "upfirdn2d_op.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_172": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "upfirdn2d_native(input, kernel, up, up, down, down, pad[0], pad[1], pad[0], pad[1])",
                            "Call"
                        ],
                        [
                            "UpFirDn2d.apply(input, kernel, (up, up), (down, down), (pad[0], pad[1], pad[0], pad[1]))",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ],
                        [
                            "upfirdn2d_op.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_186": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_187": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "upfirdn2d_native(input, kernel, up, up, down, down, pad[0], pad[1], pad[0], pad[1])",
                            "Call"
                        ],
                        [
                            "UpFirDn2d.apply(input, kernel, (up, up), (down, down), (pad[0], pad[1], pad[0], pad[1]))",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ],
                        [
                            "upfirdn2d_op.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.flip(kernel, [0, 1]).view(1, 1, kernel_h, kernel_w)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_101": {
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "stylegan2/ppl.py": {
        "torch": {
            "load_48": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_13": {
                "input": {
                    "value": "x.pow(2).sum(-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_20": {
                "input": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(a * b).sum(-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a * torch.cos(p) + c * torch.sin(p)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_68": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch * 2, latent_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_69": {
                "variable": {
                    "value": "lerp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tqdm(batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "cos_22": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "t * torch.acos(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_22": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "t * torch.acos(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_76": {
                "variable": {
                    "value": "latent_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent_e0, latent_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_87": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(image, size=(256, 256), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "stylegan2/projector.py": {
        "torch": {
            "stack_113": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(imgs, 0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_146": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[latent_in] + noises",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_121": {
                "variable": {
                    "value": "noise_sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_mean_latent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "mse_loss_172": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_gen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img_gen.reshape(batch, channel, height // factor, factor, width // factor, factor)",
                            "Call"
                        ],
                        [
                            "img_gen.mean([3, 5])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(imgs, 0).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_214": {
                "obj": {
                    "value": "result_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.splitext(os.path.basename(args.files[0]))[0] + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_56": {
                "input": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_116": {
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "roll_26": {
                "input": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "noises_single",
                            "Name"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "noise.reshape([-1, 1, size // 2, 2, size // 2, 2])",
                            "Call"
                        ],
                        [
                            "noise.mean([3, 5])",
                            "Call"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "torch.randn_like(latent) * strength",
                            "BinOp"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roll_25": {
                "input": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "noises_single",
                            "Name"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "noise.reshape([-1, 1, size // 2, 2, size // 2, 2])",
                            "Call"
                        ],
                        [
                            "noise.mean([3, 5])",
                            "Call"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "torch.randn_like(latent) * strength",
                            "BinOp"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "stylegan2/train.py": {
        "torch": {
            "softplus_64": {
                "variable": {
                    "value": "real_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-real_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_65": {
                "variable": {
                    "value": "fake_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "discriminator(fake_img)",
                            "Call"
                        ],
                        [
                            "discriminator(fake_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_71": {
                "variable": {
                    "value": "(grad_real,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "real_pred.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "real_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next(loader)",
                            "Call"
                        ],
                        [
                            "real_img.to(device)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softplus_80": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-fake_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_80": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_89": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "(fake_img * noise).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "latents",
                    "type": "Variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_92": {
                "variable": {
                    "value": "path_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad.pow(2).sum(2).mean(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_105": {
                "variable": {
                    "value": "noises",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loader",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "unbind_105": {
                "variable": {
                    "value": "noises",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "r1_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "path_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_138": {
                "variable": {
                    "value": "path_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "ada_augment",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_156": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.n_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_395": {
                "variable": {
                    "value": "g_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * g_reg_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0 ** g_reg_ratio, 0.99 ** g_reg_ratio)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_400": {
                "variable": {
                    "value": "d_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * d_reg_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0 ** d_reg_ratio, 0.99 ** d_reg_ratio)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_449": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler(dataset, shuffle=True, distributed=args.distributed)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_409": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_426": {
                "variable": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Generator(args.size, args.latent, args.n_mlp, channel_multiplier=args.channel_multiplier).to(device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(generator, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_433": {
                "variable": {
                    "value": "discriminator",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Discriminator(args.size, channel_multiplier=args.channel_multiplier).to(device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(discriminator, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_35": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RandomSampler_38": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_41": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_86": {
                "input": {
                    "value": "fake_img",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_103": {
                "*size": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loader",
                            "Name"
                        ]
                    ]
                },
                "out": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "set_device_371": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "data": {
                    "value": "(torch.sign(real_pred).sum().item(), real_pred.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "save_325": {
                "obj": {
                    "value": "{'g': g_module.state_dict(), 'd': d_module.state_dict(), 'g_ema': g_ema.state_dict(), 'g_optim': g_optim.state_dict(), 'd_optim': d_optim.state_dict(), 'args': args, 'ada_aug_p': ada_aug_p}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "f'checkpoint/{str(i).zfill(6)}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "sign_196": {
                "input": {
                    "value": "real_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "discriminator(real_img_aug)",
                            "Call"
                        ],
                        [
                            "discriminator(real_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "softplus_63": {
                "variable": {
                    "value": "real_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-real_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_64": {
                "variable": {
                    "value": "fake_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "discriminator(torch.cat((fake_img1, fake_img2), 0))",
                            "Call"
                        ],
                        [
                            "discriminator(torch.cat((fake_img1, fake_img2), 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_70": {
                "variable": {
                    "value": "(grad_real,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "real_pred.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "real_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next(loader)",
                            "Call"
                        ],
                        [
                            "real_img.to(device)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softplus_79": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-fake_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_79": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "patches",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "patches",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(patches, 1).view(-1, channel, target_h, target_w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "r1_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_391": {
                "variable": {
                    "value": "g_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(encoder.parameters()) + list(generator.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_396": {
                "variable": {
                    "value": "d_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(discriminator.parameters()) + list(cooccur.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * d_reg_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0 ** d_reg_ratio, 0.99 ** d_reg_ratio)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_467": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data.ConcatDataset(datasets)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler(dataset, shuffle=True, distributed=args.distributed)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_104": {
                "variable": {
                    "value": "cropped",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[:, :, c_y:c_y + c_h, c_x:c_x + c_w]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(cropped, size=(target_h, target_w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(target_h, target_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "l1_loss_238": {
                "variable": {
                    "value": "recon_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_img1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "generator(structure1, texture1)",
                            "Call"
                        ],
                        [
                            "generator(structure1, texture1)",
                            "Call"
                        ],
                        [
                            "g_ema(structure1, texture1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "real_img1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_405": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_425": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Encoder(args.channel).to(device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(encoder, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_432": {
                "variable": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Generator(args.channel).to(device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(generator, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_439": {
                "variable": {
                    "value": "discriminator",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Discriminator(args.size, channel_multiplier=args.channel_multiplier).to(device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(discriminator, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_446": {
                "variable": {
                    "value": "cooccur",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "cooccur",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CooccurDiscriminator(args.channel).to(device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(cooccur, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_34": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(path, transform, args.size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RandomSampler_37": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(path, transform, args.size)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_40": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(path, transform, args.size)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_365": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConcatDataset_468": {
                "datasets": {
                    "value": "datasets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "rand_91": {
                "*size": {
                    "value": "n_crop",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_178": {
                "tensors": {
                    "value": "(fake_img1, fake_img2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_240": {
                "tensors": {
                    "value": "(fake_img1, fake_img2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fake_img1, fake_img2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_320": {
                "obj": {
                    "value": "{'e': e_module.state_dict(), 'g': g_module.state_dict(), 'd': d_module.state_dict(), 'cooccur': c_module.state_dict(), 'e_ema': e_ema.state_dict(), 'g_ema': g_ema.state_dict(), 'g_optim': g_optim.state_dict(), 'd_optim': d_optim.state_dict(), 'args': args}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "f'checkpoint/{str(i).zfill(6)}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "no_grad_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}