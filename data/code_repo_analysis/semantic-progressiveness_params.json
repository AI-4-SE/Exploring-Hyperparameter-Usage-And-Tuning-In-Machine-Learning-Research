{
    "scripts/accessible/compoundwordsremoval.py": {
        "sklearn": {
            "CountVectorizer_16": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "ignore",
                    "type": "str",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(n, n)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/accessible/standardizeTokens.py": {
        "sklearn": {
            "CountVectorizer_29": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "decode_error": {
                    "value": "ignore",
                    "type": "str",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(n, n)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/accessible/standardizeTokensUsingNGrams.py": {
        "sklearn": {}
    },
    "scripts/courtlistener/bowfeatures.py": {
        "sklearn": {
            "CountVectorizer_92": {
                "variable": {
                    "value": "count_vect",
                    "type": "variable",
                    "possible_values": []
                },
                "max_features": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "min_df": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "max_df": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LinearRegression_96": {
                "variable": {
                    "value": "lm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/dblp/bowfeatures.py": {
        "sklearn": {
            "CountVectorizer_91": {
                "variable": {
                    "value": "count_vect",
                    "type": "variable",
                    "possible_values": []
                },
                "max_features": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "min_df": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "max_df": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LinearRegression_95": {
                "variable": {
                    "value": "lm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/properNameClassifier.py": {
        "sklearn": {},
        "torch": {
            "NLLLoss_88": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_89": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_15": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_45": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "NLLLoss_81": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_82": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/semanticscholar/bow_predictions.py": {
        "sklearn": {
            "Pipeline_53": {
                "variable": {
                    "value": "pipeline",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[(('vect', CountVectorizer()), ('regr', LinearRegression()))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GridSearchCV_64": {
                "variable": {
                    "value": "grid_search",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "pipeline",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pipeline([(('vect', CountVectorizer()), ('regr', LinearRegression()))])",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'vect__max_features': (25000, 50000, 75000, 100000), 'vect__min_tf': (10,), 'vect__min_df': (3,)}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CountVectorizer_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/semshiftwords.py": {
        "sklearn": {
            "normalize_132": {
                "variable": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "M1[[V1[w] for w in C], :]",
                            "Subscript"
                        ],
                        [
                            "intersection_align(M1, M2, V1, V2)",
                            "Call"
                        ],
                        [
                            "alignTwoModels(E, L, early_vocab, later_vocab)",
                            "Call"
                        ],
                        [
                            "normalize(X1, axis=1, norm='l2')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_133": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "M2[[V2[w] for w in C], :]",
                            "Subscript"
                        ],
                        [
                            "intersection_align(M1, M2, V1, V2)",
                            "Call"
                        ],
                        [
                            "alignTwoModels(E, L, early_vocab, later_vocab)",
                            "Call"
                        ],
                        [
                            "normalize(X2, axis=1, norm='l2')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "modules/propernames/classifier.py": {
        "torch": {
            "Linear_8": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_9": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_14": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear2(h)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "modules/pytorchsgns/difftime_models.py": {
        "torch": {
            "Parameter_15": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features, mid_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_40": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dims",
                            "Method Argument"
                        ],
                        [
                            "embed_dims",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "l1size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l1size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "l1size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l1size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "l2size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_52": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(input_time)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.final_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "final_input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "final_output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogSigmoid_73": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_81": {
                "variable": {
                    "value": "h3_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mod_linear(self.input_wc.forward(input_word))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "timevec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tc.forward(time)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_82": {
                "variable": {
                    "value": "h3_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mod_linear(self.output_wc.forward(output_word))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "timevec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tc.forward(time)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features, mid_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_53": {
                "input": {
                    "value": "self.linear2(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_53": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_30": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dot_87": {
                "input": {
                    "value": "usew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.final_layer.forward(h3_input)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "usec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.final_layer.forward(h3_output)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "modules/pytorchsgns/skipgram_models.py": {
        "torch": {
            "Embedding_7": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dims",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LogSigmoid_8": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dot_17": {
                "input": {
                    "value": "input_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings(input_word).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings(output_word).squeeze(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}