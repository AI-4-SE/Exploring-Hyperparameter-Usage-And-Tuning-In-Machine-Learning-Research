{
    "acs_joint_train.py": {
        "torch": {
            "set_num_threads_11": {
                "int": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConcatDataset_89": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(datasets[ds_a], datasets[ds_b], datasets[ds_c])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "train_dataloader_0",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.ConcatDataset((datasets[ds_a], datasets[ds_b], datasets[ds_c]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parse_args_as_dict(sys.argv[1:])",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "len(config['device_ids']) * config['n_workers']",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "acs_train.py": {
        "torch": {
            "set_num_threads_11": {
                "int": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConcatDataset_87": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(datasets[ds_a], datasets[ds_b])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "train_dataloader_0",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.ConcatDataset((datasets[ds_a], datasets[ds_b]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parse_args_as_dict(sys.argv[1:])",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "len(config['device_ids']) * config['n_workers']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "train_dataloader_1",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets[ds_c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parse_args_as_dict(sys.argv[1:])",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "len(config['device_ids']) * config['n_workers']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "StepLR_171": {
                "variable": {
                    "value": "model.unet_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "model.unet_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "nr_epochs - init_epoch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "args.py": {
        "torch": {
            "get_device_name_74": {
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "kd_train.py": {
        "torch": {
            "set_num_threads_12": {
                "int": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConcatDataset_87": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(datasets[ds_a], datasets[ds_b])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "train_dataloader_0",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.ConcatDataset((datasets[ds_a], datasets[ds_b]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parse_args_as_dict(sys.argv[1:])",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "len(config['device_ids']) * config['n_workers']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "train_dataloader_1",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets[ds_c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parse_args_as_dict(sys.argv[1:])",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "len(config['device_ids']) * config['n_workers']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "StepLR_159": {
                "variable": {
                    "value": "model.unet_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "model.unet_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "nr_epochs - init_epoch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mas_train.py": {
        "torch": {
            "set_num_threads_13": {
                "int": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConcatDataset_88": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(datasets[ds_a], datasets[ds_b])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "train_dataloader_0",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.ConcatDataset((datasets[ds_a], datasets[ds_b]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parse_args_as_dict(sys.argv[1:])",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "len(config['device_ids']) * config['n_workers']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "train_dataloader_1",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets[ds_c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parse_args_as_dict(sys.argv[1:])",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "len(config['device_ids']) * config['n_workers']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "StepLR_161": {
                "variable": {
                    "value": "model.unet_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "model.unet_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "nr_epochs - init_epoch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mp/agents/acs_agent.py": {
        "torch": {
            "mean_374": {
                "variable": {
                    "value": "loss_c_recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm((content_x - content_x_hat).view(-1, 1), p=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_385": {
                "variable": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "domain_z_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.forward_dom_dis(z_hat, domain_code)",
                            "Call"
                        ],
                        [
                            "self.model.forward_dom_dis(z_hat, domain_code)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_388": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "domain_z_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.forward_dom_dis(z_hat, domain_code)",
                            "Call"
                        ],
                        [
                            "self.model.forward_dom_dis(z_hat, domain_code)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(domain_z_hat)",
                            "Call"
                        ],
                        [
                            "all_ones.to(domain_z_hat.get_device())",
                            "Call"
                        ],
                        [
                            "torch.ones_like(domain_x)",
                            "Call"
                        ],
                        [
                            "all_ones.to(domain_x.get_device())",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_396": {
                "variable": {
                    "value": "loss_lcr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm((z - z_hat_sample).view(-1, 1), p=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_407": {
                "variable": {
                    "value": "domain_dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "domain_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.forward_con_dis(skip_connections_x, content_x)",
                            "Call"
                        ],
                        [
                            "self.model.forward_con_dis(skip_connections_x, content_x)",
                            "Call"
                        ],
                        [
                            "self.model.forward_dom_dis(x, domain_code)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_438": {
                "variable": {
                    "value": "(_, domain_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "domain_code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_inputs_targets(data, eval=False)",
                            "Call"
                        ],
                        [
                            "self.get_inputs_targets(data, eval=False)",
                            "Call"
                        ],
                        [
                            "domain_code.to(self.device)",
                            "Call"
                        ],
                        [
                            "domain_code",
                            "Method Argument"
                        ],
                        [
                            "domain_code",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_454": {
                "variable": {
                    "value": "domain_dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "domain_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.forward_con_dis(skip_connections_x, content_x)",
                            "Call"
                        ],
                        [
                            "self.model.forward_con_dis(skip_connections_x, content_x)",
                            "Call"
                        ],
                        [
                            "self.model.forward_dom_dis(x, domain_code)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_472": {
                "variable": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "domain_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.forward_con_dis(skip_connections_x, content_x)",
                            "Call"
                        ],
                        [
                            "self.model.forward_con_dis(skip_connections_x, content_x)",
                            "Call"
                        ],
                        [
                            "self.model.forward_dom_dis(x, domain_code)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_473": {
                "variable": {
                    "value": "all_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "domain_z_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.forward_dom_dis(z_hat, domain_code)",
                            "Call"
                        ],
                        [
                            "self.model.forward_dom_dis(z_hat, domain_code)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_479": {
                "variable": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "domain_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.forward_con_dis(skip_connections_x, content_x)",
                            "Call"
                        ],
                        [
                            "self.model.forward_con_dis(skip_connections_x, content_x)",
                            "Call"
                        ],
                        [
                            "self.model.forward_dom_dis(x, domain_code)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(domain_z_hat)",
                            "Call"
                        ],
                        [
                            "all_ones.to(domain_z_hat.get_device())",
                            "Call"
                        ],
                        [
                            "torch.ones_like(domain_x)",
                            "Call"
                        ],
                        [
                            "all_ones.to(domain_x.get_device())",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_480": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "domain_z_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.forward_dom_dis(z_hat, domain_code)",
                            "Call"
                        ],
                        [
                            "self.model.forward_dom_dis(z_hat, domain_code)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "all_zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(domain_z_hat)",
                            "Call"
                        ],
                        [
                            "all_zeros.to(domain_z_hat.get_device())",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_511": {
                "variable": {
                    "value": "recons_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recons",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_513": {
                "variable": {
                    "value": "kld_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 * torch.sum(1 + log_var - mu ** 2 - log_var.exp(), dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_528": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_264": {
                "input": {
                    "value": "x_i_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_i[sample_idx].unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_374": {
                "input": {
                    "value": "(content_x - content_x_hat).view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_396": {
                "input": {
                    "value": "(z - z_hat_sample).view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_288": {
                "*size": {
                    "value": "x_hat.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_513": {
                "input": {
                    "value": "1 + log_var - mu ** 2 - log_var.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_243": {
                "input": {
                    "value": "y_[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_529": {
                "input": {
                    "value": "softmax(prediction).clamp(min=1e-08, max=1.0 - 1e-08)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mp/agents/kd_agent.py": {
        "torch": {
            "zeros_120": {
                "variable": {
                    "value": "loss_distill",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "loss_distill",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_207": {
                "input": {
                    "value": "y_[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_111": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(inputs)",
                            "Call"
                        ],
                        [
                            "self.model.forward_old(inputs)",
                            "Call"
                        ],
                        [
                            "softmax(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_113": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_inputs_targets(data)",
                            "Call"
                        ],
                        [
                            "targets.to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_294": {
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mp/agents/mas_agent.py": {
        "torch": {
            "pow_340": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_outputs(inputs)",
                            "Call"
                        ],
                        [
                            "self.model.forward_old(inputs)",
                            "Call"
                        ],
                        [
                            "softmax(outputs).clamp(min=1e-08, max=1.0 - 1e-08)",
                            "Call"
                        ],
                        [
                            "self.get_outputs(inputs)",
                            "Call"
                        ],
                        [
                            "torch.pow(torch.sqrt(torch.pow(outputs, 2)), 2)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "loss_mas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "loss_mas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_328": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.unet.parameters()",
                            "Call"
                        ],
                        [
                            "param in enumerate(self.model.unet.parameters())",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_340": {
                "input": {
                    "value": "torch.pow(outputs, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_209": {
                "input": {
                    "value": "y_[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_124": {
                "input": {
                    "value": "weights * (param_new - param_old) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_296": {
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mp/agents/unet_agent.py": {
        "torch": {
            "nonzero_191": {
                "input": {
                    "value": "y_[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_278": {
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mp/data/datasets/dataset_utils.py": {
        "torch": {
            "empty_71": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_72": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_77": {
                "variable": {
                    "value": "sum_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instance.x.tensor",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_78": {
                "variable": {
                    "value": "sum_of_square",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_82": {
                "input": {
                    "value": "std - mean ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mp/data/pytorch/pytorch_dataset.py": {
        "torch": {}
    },
    "mp/data/pytorch/pytorch_seg_dataset.py": {
        "torch": {
            "zeros_136": {
                "variable": {
                    "value": "domain_code_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "domain_code_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_269": {
                "variable": {
                    "value": "patch_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "grid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchio.inference.GridSampler(sample=subject, patch_size=self.size[1:], patch_overlap=(0, 0, 0))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mp/data/pytorch/transformation.py": {
        "torch": {
            "zeros_68": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_69": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "channel_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(y.shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "label_nr_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(y.shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_124": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(img, size=size[1:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size[1:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size[1:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size[1:], mode='trilinear')",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img, -1)",
                            "Call"
                        ],
                        [
                            "transform(img.cpu()).to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(img, -1)",
                            "Call"
                        ],
                        [
                            "transform(img.cpu()).to(device)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_129": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(img, size=size[1:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size[1:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size[1:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size[1:], mode='trilinear')",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img, -1)",
                            "Call"
                        ],
                        [
                            "transform(img.cpu()).to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(img, -1)",
                            "Call"
                        ],
                        [
                            "transform(img.cpu()).to(device)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_71": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "y == label_nr",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(y.shape, dtype=torch.float64).to(device)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(y.shape, dtype=torch.float64).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_86": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "y[label_nr] == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "label_nr_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(target_shape, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(masks, dim=channel_dim)",
                            "Call"
                        ],
                        [
                            "torch.zeros(target_shape, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.where(y[label_nr] == 1, label_nr_mask, target)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_98": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[_one_output_channel_single(x) for x in y]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_105": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(img, size=size[1:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size[1:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size[1:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size[1:], mode='trilinear')",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img, -1)",
                            "Call"
                        ],
                        [
                            "transform(img.cpu()).to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(img, -1)",
                            "Call"
                        ],
                        [
                            "transform(img.cpu()).to(device)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size[1:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(size[1], size[2], 1)",
                            "Tuple"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_107": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(img, size=size[1:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size[1:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size[1:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size[1:], mode='trilinear')",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img, -1)",
                            "Call"
                        ],
                        [
                            "transform(img.cpu()).to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(img, -1)",
                            "Call"
                        ],
                        [
                            "transform(img.cpu()).to(device)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size[1:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(size[1], size[2], 1)",
                            "Tuple"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_115": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(img, size=size[1:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size[1:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size[1:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size[1:], mode='trilinear')",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img, -1)",
                            "Call"
                        ],
                        [
                            "transform(img.cpu()).to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(img, -1)",
                            "Call"
                        ],
                        [
                            "transform(img.cpu()).to(device)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size[1:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(size[1], size[2], 1)",
                            "Tuple"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_117": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(img, size=size[1:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size[1:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size[1:], mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size[1:], mode='trilinear')",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img, -1)",
                            "Call"
                        ],
                        [
                            "transform(img.cpu()).to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(img, -1)",
                            "Call"
                        ],
                        [
                            "transform(img.cpu()).to(device)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size[1:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(size[1], size[2], 1)",
                            "Tuple"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_184": {
                "tensors": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_163": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_164": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mp/eval/accumulator.py": {
        "torch": {}
    },
    "mp/eval/inference/predict.py": {
        "torch": {
            "Softmax_14": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "channel_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_10": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "channel_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mp/eval/inference/predictor.py": {
        "torch": {
            "stack_78": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pred, dim=0)",
                            "Call"
                        ],
                        [
                            "pred.permute(1, 2, 3, 0)",
                            "Call"
                        ],
                        [
                            "agent.predict(x).float()",
                            "Call"
                        ],
                        [
                            "agent.predict(x).float()",
                            "Call"
                        ],
                        [
                            "trans.resize_3d(pred, size=original_size, label=True)",
                            "Call"
                        ],
                        [
                            "trans.centre_crop_pad_3d(pred, size=original_size)",
                            "Call"
                        ],
                        [
                            "agent.predict(input_tensor)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pred, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "patch_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "grid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchio.inference.GridSampler(sample=subject, patch_size=self.patch_size, patch_overlap=self.patch_overlap)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subject.x.tensor.permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "subject['x'].data",
                            "Attribute"
                        ],
                        [
                            "trans.resize_3d(x, size=self.size).to(agent.device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ],
                        [
                            "trans.centre_crop_pad_3d(x, size=self.size).to(agent.device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_111": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subject.x.tensor.permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "subject['x'].data",
                            "Attribute"
                        ],
                        [
                            "trans.resize_3d(x, size=self.size).to(agent.device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ],
                        [
                            "trans.centre_crop_pad_3d(x, size=self.size).to(agent.device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_147": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pred, dim=0)",
                            "Call"
                        ],
                        [
                            "pred.permute(1, 2, 3, 0)",
                            "Call"
                        ],
                        [
                            "agent.predict(x).float()",
                            "Call"
                        ],
                        [
                            "agent.predict(x).float()",
                            "Call"
                        ],
                        [
                            "trans.resize_3d(pred, size=original_size, label=True)",
                            "Call"
                        ],
                        [
                            "trans.centre_crop_pad_3d(pred, size=original_size)",
                            "Call"
                        ],
                        [
                            "agent.predict(input_tensor)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pred, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_68": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trans.resize_2d(x[slice_idx], size=self.size).to(agent.device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(inputs, 0)",
                            "Call"
                        ],
                        [
                            "trans.centre_crop_pad_2d(x[slice_idx], size=self.size).to(agent.device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(inputs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trans.resize_2d(x[slice_idx], size=self.size).to(agent.device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(inputs, 0)",
                            "Call"
                        ],
                        [
                            "trans.centre_crop_pad_2d(x[slice_idx], size=self.size).to(agent.device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(inputs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mp/eval/losses/loss_abstract.py": {
        "torch": {}
    },
    "mp/eval/losses/losses_autoencoding.py": {
        "torch": {
            "MSELoss_12": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "L1Loss_21": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mp/eval/losses/losses_segmentation.py": {
        "torch": {
            "BCELoss_35": {
                "variable": {
                    "value": "self.bce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_62": {
                "variable": {
                    "value": "self.bce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "self.class_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.class_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "instance_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_51": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "any_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_52": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "any_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mp/eval/metrics/mean_scores.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_14": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "where_15": {
                "variable": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "target == class_ix",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(shape).to(device)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(shape).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_16": {
                "variable": {
                    "value": "pred_class",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "pred == class_ix",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(shape).to(device)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(shape).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_17": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "target_class == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(pred == class_ix, ones, zeros)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(shape).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_17": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_18": {
                "variable": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "target_class == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "1 - pred_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(shape).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_18": {
                "variable": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_19": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "target_class == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "1 - pred_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(shape).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_19": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_20": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "pred_class == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "1 - target_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(shape).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_20": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mp/models/autoencoding/autoencoder_cnn.py": {
        "torch": {
            "Conv2d_17": {
                "variable": {
                    "value": "self.enc_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_ch[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[16",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.enc_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_ch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_ch[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_21": {
                "variable": {
                    "value": "self.enc_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_24": {
                "variable": {
                    "value": "self.dec_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_ch[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_ch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_26": {
                "variable": {
                    "value": "self.dec_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_ch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dec_conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dec_conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mp/models/autoencoding/autoencoder_featured.py": {
        "torch": {
            "flatten_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision_rescaling(x, size=self.extractor_size, resize=False)",
                            "Call"
                        ],
                        [
                            "self.feature_extractor.features(x)",
                            "Call"
                        ],
                        [
                            "self.feature_extractor.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mp/models/autoencoding/autoencoder_linear.py": {
        "torch": {
            "ModuleList_20": {
                "variable": {
                    "value": "self.enc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_features=dims[i], out_features=dims[i + 1]) for i in range(len(dims) - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_24": {
                "variable": {
                    "value": "self.dec_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_features=dims[i + 1], out_features=dims[i]) for i in reversed(range(len(dims) - 1))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "flatten_29": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(layer(x))",
                            "Call"
                        ],
                        [
                            "F.relu(layer(x))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "dims[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[in_dim] + hidden_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[in_dim] + hidden_dim",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[in_dim] + hidden_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dims[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[in_dim] + hidden_dim",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "mp/models/classification/small_cnn.py": {
        "torch": {
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_14": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_21": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_22": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mp/models/continual/acs.py": {
        "torch": {}
    },
    "mp/models/continual/kd.py": {
        "torch": {}
    },
    "mp/models/continual/mas.py": {
        "torch": {}
    },
    "mp/models/continual/model_utils.py": {
        "torch": {
            "Sequential_41": {
                "variable": {
                    "value": "self.global_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*global_pool",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.dense_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * 3 * 256",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.dense_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * 3 * 256",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "7 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_114": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channels * 2 ** 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_135": {
                "variable": {
                    "value": "self.norm_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_channels * 2 ** 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "variable": {
                    "value": "self.activation_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels * 2 ** 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channels * 2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_138": {
                "variable": {
                    "value": "self.norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_channels * 2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "variable": {
                    "value": "self.activation_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels * 2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channels * 2 ** 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_141": {
                "variable": {
                    "value": "self.norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_channels * 2 ** 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "variable": {
                    "value": "self.activation_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "variable": {
                    "value": "self.conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels * 2 ** 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channels * 2 ** 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_144": {
                "variable": {
                    "value": "self.norm_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_channels * 2 ** 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "variable": {
                    "value": "self.activation_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "variable": {
                    "value": "self.conv_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels * 2 ** 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_147": {
                "variable": {
                    "value": "self.norm_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "variable": {
                    "value": "self.activation_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "8 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "domain_code_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_code_size",
                            "Method Argument"
                        ],
                        [
                            "domain_code_size",
                            "Method Argument"
                        ],
                        [
                            "domain_code_size",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "domain_code_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_151": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "variable": {
                    "value": "skip_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "skip_connection.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_181": {
                "variable": {
                    "value": "skip_connection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "skip_connection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(skip_connection, pad.tolist())",
                            "Call"
                        ],
                        [
                            "F.pad(skip_connection, pad.tolist())",
                            "Call"
                        ],
                        [
                            "F.pad(skip_connection, pad.tolist())",
                            "Call"
                        ],
                        [
                            "skip_connection",
                            "Method Argument"
                        ],
                        [
                            "skip_connection",
                            "Method Argument"
                        ],
                        [
                            "skip_connection",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_215": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_217": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool2d_218": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_234": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_252": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_253": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_255": {
                "variable": {
                    "value": "self.norm0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_256": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_270": {
                "variable": {
                    "value": "skip_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "skip_connection.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_271": {
                "variable": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_277": {
                "variable": {
                    "value": "skip_connection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "skip_connection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(skip_connection, pad.tolist())",
                            "Call"
                        ],
                        [
                            "F.pad(skip_connection, pad.tolist())",
                            "Call"
                        ],
                        [
                            "F.pad(skip_connection, pad.tolist())",
                            "Call"
                        ],
                        [
                            "skip_connection",
                            "Method Argument"
                        ],
                        [
                            "skip_connection",
                            "Method Argument"
                        ],
                        [
                            "skip_connection",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_285": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_286": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mul_298": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(skip_connections, encoding)",
                            "Call"
                        ],
                        [
                            "self.monte_carlo_layer(x)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "self.layers(x).reshape(x.shape[0], 10, -1)",
                            "Call"
                        ],
                        [
                            "self.layers(content)",
                            "Call"
                        ],
                        [
                            "self.layers(x, domain_code)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x, domain_code)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x + self.center_crop(x_in, x)",
                            "BinOp"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, latent_scale[:, self.layer_id * 2, :][:, :, None, None])",
                            "Call"
                        ],
                        [
                            "self.norm0(x, domain_code)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, latent_scale[:, self.layer_id * 2 + 1, :][:, :, None, None])",
                            "Call"
                        ],
                        [
                            "self.norm1(x, domain_code)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "latent_scale[:, self.layer_id * 2, :][:, :, None, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_304": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(skip_connections, encoding)",
                            "Call"
                        ],
                        [
                            "self.monte_carlo_layer(x)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "self.layers(x).reshape(x.shape[0], 10, -1)",
                            "Call"
                        ],
                        [
                            "self.layers(content)",
                            "Call"
                        ],
                        [
                            "self.layers(x, domain_code)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x, domain_code)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x + self.center_crop(x_in, x)",
                            "BinOp"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, latent_scale[:, self.layer_id * 2, :][:, :, None, None])",
                            "Call"
                        ],
                        [
                            "self.norm0(x, domain_code)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, latent_scale[:, self.layer_id * 2 + 1, :][:, :, None, None])",
                            "Call"
                        ],
                        [
                            "self.norm1(x, domain_code)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "latent_scale[:, self.layer_id * 2 + 1, :][:, :, None, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_312": {
                "variable": {
                    "value": "skip_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "skip_connection.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_313": {
                "variable": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_319": {
                "variable": {
                    "value": "skip_connection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "skip_connection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(skip_connection, pad.tolist())",
                            "Call"
                        ],
                        [
                            "F.pad(skip_connection, pad.tolist())",
                            "Call"
                        ],
                        [
                            "F.pad(skip_connection, pad.tolist())",
                            "Call"
                        ],
                        [
                            "skip_connection",
                            "Method Argument"
                        ],
                        [
                            "skip_connection",
                            "Method Argument"
                        ],
                        [
                            "skip_connection",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_329": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(domain_code_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_330": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_331": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_336": {
                "variable": {
                    "value": "self.i_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_341": {
                "variable": {
                    "value": "self.b_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_344": {
                "variable": {
                    "value": "x_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.var(x, (1, 2, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_345": {
                "variable": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(skip_connections, encoding)",
                            "Call"
                        ],
                        [
                            "self.monte_carlo_layer(x)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "self.layers(x).reshape(x.shape[0], 10, -1)",
                            "Call"
                        ],
                        [
                            "self.layers(content)",
                            "Call"
                        ],
                        [
                            "self.layers(x, domain_code)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x, domain_code)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x + self.center_crop(x_in, x)",
                            "BinOp"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, latent_scale[:, self.layer_id * 2, :][:, :, None, None])",
                            "Call"
                        ],
                        [
                            "self.norm0(x, domain_code)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, latent_scale[:, self.layer_id * 2 + 1, :][:, :, None, None])",
                            "Call"
                        ],
                        [
                            "self.norm1(x, domain_code)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_194": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_196": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_40": {
                "output_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2560",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_85": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_86": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_87": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_88": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_89": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_180": {
                "tensors": {
                    "value": "(half_crop, half_crop)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_276": {
                "tensors": {
                    "value": "(half_crop, half_crop)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_318": {
                "tensors": {
                    "value": "(half_crop, half_crop)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_329": {
                "*size": {
                    "value": "domain_code_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_code_size",
                            "Method Argument"
                        ],
                        [
                            "domain_code_size",
                            "Method Argument"
                        ],
                        [
                            "domain_code_size",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "domain_code_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_330": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "var_344": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(skip_connections, encoding)",
                            "Call"
                        ],
                        [
                            "self.monte_carlo_layer(x)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "self.layers(x).reshape(x.shape[0], 10, -1)",
                            "Call"
                        ],
                        [
                            "self.layers(content)",
                            "Call"
                        ],
                        [
                            "self.layers(x, domain_code)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x, domain_code)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x + self.center_crop(x_in, x)",
                            "BinOp"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, latent_scale[:, self.layer_id * 2, :][:, :, None, None])",
                            "Call"
                        ],
                        [
                            "self.norm0(x, domain_code)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, latent_scale[:, self.layer_id * 2 + 1, :][:, :, None, None])",
                            "Call"
                        ],
                        [
                            "self.norm1(x, domain_code)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_346": {
                "input": {
                    "value": "domain_code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers_BCIN(content, latent_scale, domain_code)",
                            "Call"
                        ],
                        [
                            "self.layers(x, domain_code)",
                            "Call"
                        ],
                        [
                            "domain_code",
                            "Method Argument"
                        ],
                        [
                            "domain_code",
                            "Method Argument"
                        ],
                        [
                            "domain_code",
                            "Method Argument"
                        ],
                        [
                            "domain_code",
                            "Method Argument"
                        ],
                        [
                            "domain_code",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mp/models/model.py": {
        "torch": {}
    },
    "mp/models/segmentation/model_utils.py": {
        "torch": {
            "ModuleList_39": {
                "variable": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_118": {
                "variable": {
                    "value": "self.decoding_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_164": {
                "variable": {
                    "value": "self.encoding_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_379": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(skip_connection, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "CHANNELS_DIMENSION",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_391": {
                "variable": {
                    "value": "skip_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "skip_connection.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_392": {
                "variable": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_398": {
                "variable": {
                    "value": "skip_connection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "skip_connection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zipped",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.center_crop(skip_connection, x)",
                            "Call"
                        ],
                        [
                            "F.pad(skip_connection, pad.tolist())",
                            "Call"
                        ],
                        [
                            "skip_connection",
                            "Method Argument"
                        ],
                        [
                            "skip_connection",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_410": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "upsampling_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "str"
                        ],
                        [
                            "'trilinear'",
                            "str"
                        ],
                        [
                            "fix_upsampling_type(upsampling_type, dimensions)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_397": {
                "tensors": {
                    "value": "(half_crop, half_crop)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mp/models/segmentation/unet_fepegar.py": {
        "torch": {}
    },
    "mp/models/segmentation/unet_milesial.py": {
        "torch": {
            "Sequential_50": {
                "variable": {
                    "value": "self.double_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.maxpool_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_98": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inc(x)",
                            "Call"
                        ],
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, [diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2])",
                            "Call"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "[diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_85": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_88": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_56": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_69": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mp/utils/helper_functions.py": {
        "torch": {
            "manual_seed_40": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mp/utils/pytorch/compute_normalization_values.py": {
        "torch": {
            "DataLoader_11": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_13": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_14": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_19": {
                "variable": {
                    "value": "sum_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloader",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_20": {
                "variable": {
                    "value": "sum_of_square",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_25": {
                "input": {
                    "value": "std - mean ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mp/utils/pytorch/pytorch_load_restore.py": {
        "torch": {
            "save_19": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "full_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_26": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "full_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_44": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "full_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_58": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "full_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_33": {
                "f": {
                    "value": "full_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_51": {
                "f": {
                    "value": "full_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_65": {
                "f": {
                    "value": "full_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mp/utils/tensorboard.py": {
        "torch": {
            "SummaryWriter_6": {
                "log_dir": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                },
                "purge_step": {
                    "value": "init_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mp/visualization/visualize_imgs.py": {
        "torch": {}
    },
    "test/agents/model_state_restore.py": {
        "torch": {
            "DataLoader_23": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets['train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "test/cuda/test_cuda.py": {
        "torch": {
            "device_count_5": {
                "variable": {
                    "value": "nr_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_9": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_device_8": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nr_devices - 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "test/data/pytorch/test_transformation.py": {
        "torch": {
            "tensor_21": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[A_1, A_2, A_3, A_4]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "test/eval/inference/test_predict.py": {
        "torch": {
            "tensor_6": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[0.3, 0.7], [0.2, 0.1]], [[8.0, 0.0], [0.03, 0.4]], [[5.7, 0.1], [0.55, 0.45]]], [[[0.3, 0.7], [0.2, 0.1]], [[8.0, 0.0], [0.03, 0.4]], [[5.7, 0.1], [0.55, 0.45]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_9": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1, 0], [2, 2]], [[1, 0], [2, 2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.3, 0.7], [0.2, 0.1]], [[8.0, 0.0], [0.03, 0.4]], [[5.7, 0.1], [0.55, 0.45]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0], [2, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[3.0, 1.0], [0.2, 0.05]], [[4.0, 0.0], [0.8, 0.4]], [[3.0, 9.0], [0.0, 0.45]]], [[[3.0, 1.0], [0.2, 0.05]], [[4.0, 0.0], [0.8, 0.4]], [[3.0, 9.0], [0.0, 0.45]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[3.0, 1.0], [0.2, 0.05]], [[4.0, 0.0], [0.8, 0.4]], [[3.0, 9.0], [0.0, 0.45]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[A_1, A_2, A_3, A_4]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "test/eval/losses/test_losses_segmentation.py": {
        "torch": {
            "tensor_40": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[A_1, A_2, A_3, A_4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[B_1, B_2, B_3, B_4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[A_4, B_3, A_1, B_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_48": {
                "variable": {
                    "value": "a_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a, a, a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_49": {
                "variable": {
                    "value": "b_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b, b, b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_50": {
                "variable": {
                    "value": "c_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c, c, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_59": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "d_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a_batch.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_61": {
                "variable": {
                    "value": "e_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a_batch.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test/eval/metrics/test_metrics_segmentation.py": {
        "torch": {
            "tensor_38": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[A_1, A_2, A_3, A_4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[B_1, B_2, B_3, B_4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_42": {
                "variable": {
                    "value": "a_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a, a, a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_43": {
                "variable": {
                    "value": "b_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b, b, b]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "test/visualization/test_visualize_imgs.py": {
        "torch": {}
    },
    "unet_joint_train.py": {
        "torch": {
            "set_num_threads_13": {
                "int": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConcatDataset_86": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(datasets[ds_a], datasets[ds_b], datasets[ds_c])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "train_dataloader_0",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.ConcatDataset((datasets[ds_a], datasets[ds_b], datasets[ds_c]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parse_args_as_dict(sys.argv[1:])",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "len(config['device_ids']) * config['n_workers']",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}