{
    "datasets/cityscapes_Dataset.py": {
        "torch": {
            "from_numpy_247": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(gt_image, np.float32)",
                            "Call"
                        ],
                        [
                            "self.id2trainId(target).copy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_293": {
                "variable": {
                    "value": "self.val_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "City_Dataset(args, data_root_path='./datasets/Cityscapes', list_path='./datasets/city_list', split='val', base_size=args.base_size, crop_size=args.crop_size, training=False, class_16=args.class_16, class_13=args.class_13)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_355": {
                "ndarray": {
                    "value": "outputs.transpose([0, 3, 1, 2]).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_413": {
                "ndarray": {
                    "value": "outputs.transpose([0, 3, 1, 2]).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_235": {
                "variable": {
                    "value": "new_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(image_path).convert('RGB')",
                            "Call"
                        ],
                        [
                            "np.asarray(image, np.float32)",
                            "Call"
                        ],
                        [
                            "image[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "image - IMG_MEAN",
                            "BinOp"
                        ],
                        [
                            "image.transpose((2, 0, 1)).copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_270": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "City_Dataset(args, data_root_path='./datasets/Cityscapes', list_path='./datasets/city_list', split=args.split, base_size=args.base_size, crop_size=args.crop_size, training=training, class_16=args.class_16, class_13=args.class_13)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_277": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "City_Dataset(args, data_root_path='./datasets/Cityscapes', list_path='./datasets/city_list', split=args.split, base_size=args.base_size, crop_size=args.crop_size, training=training, class_16=args.class_16, class_13=args.class_13)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_306": {
                "start": {
                    "value": "x.size(i) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/crosscity_Dataset.py": {
        "torch": {
            "DataLoader_117": {
                "variable": {
                    "value": "self.val_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GTA5_Dataset(args, data_root_path=args.data_root_path, list_path=args.list_path, split=val_split, base_size=args.base_size, crop_size=args.crop_size, training=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_100": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CrossCity_Dataset(args, data_root_path=args.data_root_path, list_path=args.list_path, split=args.split, base_size=args.base_size, crop_size=args.crop_size, training=training)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/gta5_Dataset.py": {
        "torch": {
            "DataLoader_116": {
                "variable": {
                    "value": "self.val_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GTA5_Dataset(args, data_root_path=args.data_root_path, list_path=args.list_path, split=val_split, base_size=args.base_size, crop_size=args.crop_size, training=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_92": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GTA5_Dataset(args, data_root_path=args.data_root_path, list_path=args.list_path, split=args.split, base_size=args.base_size, crop_size=args.crop_size, training=training)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GTA5_Dataset(args, data_root_path=args.data_root_path, list_path=args.list_path, split=args.split, base_size=args.base_size, crop_size=args.crop_size, training=training)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/synthia_Dataset.py": {
        "torch": {
            "DataLoader_122": {
                "variable": {
                    "value": "self.val_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SYNTHIA_Dataset(args, data_root_path=args.data_root_path, list_path=args.list_path, split=val_split, base_size=args.base_size, crop_size=args.crop_size, training=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SYNTHIA_Dataset(args, data_root_path=args.data_root_path, list_path=args.list_path, split=args.split, base_size=args.base_size, crop_size=args.crop_size, training=training)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SYNTHIA_Dataset(args, data_root_path=args.data_root_path, list_path=args.list_path, split=args.split, base_size=args.base_size, crop_size=args.crop_size, training=training)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/models/ResNet101.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_73": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_169": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "graphs/models/deeplab_multi.py": {
        "torch": {
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_54": {
                "variable": {
                    "value": "self.conv2d_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_79": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_124": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x1, size=input_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_128": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.layer6(x2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x2, size=input_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_179": {
                "variable": {
                    "value": "saved_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "restore_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./pretrained_model/DeepLab_resnet_pretrained_init-f81d91e8.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "variable"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            }
        }
    },
    "tools/evaluate.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if self.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_45": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataParallel_50": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "current_device_91": {
                "variable": {
                    "value": "current_device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_210": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_122": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(y, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_125": {
                "variable": {
                    "value": "pred_P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "pred[0]",
                            "Subscript"
                        ],
                        [
                            "pred.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "pred_c.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_136": {
                "variable": {
                    "value": "pred_P_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_flip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x_flip)",
                            "Call"
                        ],
                        [
                            "pred_flip[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_device_name_92": {
                "device": {
                    "value": "current_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_129": {
                "start": {
                    "value": "x.size(i) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tools/solve_crosscity.py": {
        "torch": {
            "DataLoader_45": {
                "variable": {
                    "value": "self.source_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "City_Dataset(args, data_root_path=args.source_data_path, list_path=args.source_list_path, split=args.split, base_size=args.base_size, crop_size=args.crop_size, class_13=args.class_13)",
                            "Call"
                        ],
                        [
                            "City_Dataset(args, data_root_path=args.source_data_path, list_path=args.source_list_path, split='val', base_size=args.base_size, crop_size=args.crop_size, class_13=args.class_13)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "self.source_val_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "City_Dataset(args, data_root_path=args.source_data_path, list_path=args.source_list_path, split=args.split, base_size=args.base_size, crop_size=args.crop_size, class_13=args.class_13)",
                            "Call"
                        ],
                        [
                            "City_Dataset(args, data_root_path=args.source_data_path, list_path=args.source_list_path, split='val', base_size=args.base_size, crop_size=args.crop_size, class_13=args.class_13)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "self.target_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "target_data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CrossCity_Dataset(args, data_root_path=args.data_root_path, list_path=args.list_path, split=args.split, base_size=args.target_base_size, crop_size=args.target_crop_size, class_13=args.class_13)",
                            "Call"
                        ],
                        [
                            "CrossCity_Dataset(args, data_root_path=args.data_root_path, list_path=args.list_path, split='val', base_size=args.target_base_size, crop_size=args.target_crop_size, class_13=args.class_13)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_85": {
                "variable": {
                    "value": "self.target_val_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "target_data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CrossCity_Dataset(args, data_root_path=args.data_root_path, list_path=args.list_path, split=args.split, base_size=args.target_base_size, crop_size=args.target_crop_size, class_13=args.class_13)",
                            "Call"
                        ],
                        [
                            "CrossCity_Dataset(args, data_root_path=args.data_root_path, list_path=args.list_path, split='val', base_size=args.target_base_size, crop_size=args.target_crop_size, class_13=args.class_13)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_108": {
                "variable": {
                    "value": "self.target_hard_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "current_device_119": {
                "variable": {
                    "value": "current_device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_96": {
                "variable": {
                    "value": "self.target_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_184": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(y, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_214": {
                "variable": {
                    "value": "pred_P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "pred[0]",
                            "Subscript"
                        ],
                        [
                            "pred.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "pred[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_223": {
                "variable": {
                    "value": "(maxpred, argpred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_P.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_213": {
                "variable": {
                    "value": "pred_P_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[1]",
                            "Subscript"
                        ],
                        [
                            "pred[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_217": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_P.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_224": {
                "variable": {
                    "value": "(maxpred_2, argpred_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_P_2.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_228": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxpred > self.threshold",
                            "Compare"
                        ],
                        [
                            "(maxpred > self.threshold) | (maxpred_2 > self.threshold)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.argmax(pred_P.detach(), dim=1)",
                            "Call"
                        ],
                        [
                            "pred_P",
                            "variable"
                        ],
                        [
                            "torch.where(mask, label, torch.ones(1).to(self.device, dtype=torch.long) * self.ignore_index)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.ones(1).to(self.device, dtype=torch.long) * self.ignore_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_239": {
                "variable": {
                    "value": "(maxpred_c, argpred_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pred_P + pred_P_2) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_242": {
                "variable": {
                    "value": "label_2",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxpred > self.threshold",
                            "Compare"
                        ],
                        [
                            "(maxpred > self.threshold) | (maxpred_2 > self.threshold)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "argpred_c",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones(1).to(self.device, dtype=torch.long) * self.ignore_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_device_name_120": {
                "device": {
                    "value": "current_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_218": {
                "variable": {
                    "value": "label_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_P_2.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_228": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_242": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/solve_gta5.py": {
        "torch": {
            "DataLoader_55": {
                "variable": {
                    "value": "self.source_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SYNTHIA_Dataset(args, data_root_path=args.source_data_path, list_path=args.source_list_path, split=args.source_split, base_size=args.base_size, crop_size=args.crop_size, class_16=args.class_16)",
                            "Call"
                        ],
                        [
                            "GTA5_Dataset(args, data_root_path=args.source_data_path, list_path=args.source_list_path, split=args.source_split, base_size=args.base_size, crop_size=args.crop_size)",
                            "Call"
                        ],
                        [
                            "SYNTHIA_Dataset(args, data_root_path=args.source_data_path, list_path=args.source_list_path, split='val', base_size=args.base_size, crop_size=args.crop_size, class_16=args.class_16)",
                            "Call"
                        ],
                        [
                            "GTA5_Dataset(args, data_root_path=args.source_data_path, list_path=args.source_list_path, split='val', base_size=args.base_size, crop_size=args.crop_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "self.source_val_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SYNTHIA_Dataset(args, data_root_path=args.source_data_path, list_path=args.source_list_path, split=args.source_split, base_size=args.base_size, crop_size=args.crop_size, class_16=args.class_16)",
                            "Call"
                        ],
                        [
                            "GTA5_Dataset(args, data_root_path=args.source_data_path, list_path=args.source_list_path, split=args.source_split, base_size=args.base_size, crop_size=args.crop_size)",
                            "Call"
                        ],
                        [
                            "SYNTHIA_Dataset(args, data_root_path=args.source_data_path, list_path=args.source_list_path, split='val', base_size=args.base_size, crop_size=args.crop_size, class_16=args.class_16)",
                            "Call"
                        ],
                        [
                            "GTA5_Dataset(args, data_root_path=args.source_data_path, list_path=args.source_list_path, split='val', base_size=args.base_size, crop_size=args.crop_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "self.target_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "target_data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "City_Dataset(args, data_root_path=args.data_root_path, list_path=args.list_path, split=args.split, base_size=args.target_base_size, crop_size=args.target_crop_size, class_16=args.class_16)",
                            "Call"
                        ],
                        [
                            "City_Dataset(args, data_root_path=args.data_root_path, list_path=args.list_path, split='val', base_size=args.target_base_size, crop_size=args.target_crop_size, class_16=args.class_16)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "self.target_val_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "target_data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "City_Dataset(args, data_root_path=args.data_root_path, list_path=args.list_path, split=args.split, base_size=args.target_base_size, crop_size=args.target_crop_size, class_16=args.class_16)",
                            "Call"
                        ],
                        [
                            "City_Dataset(args, data_root_path=args.data_root_path, list_path=args.list_path, split='val', base_size=args.target_base_size, crop_size=args.target_crop_size, class_16=args.class_16)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.args.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_129": {
                "variable": {
                    "value": "self.target_hard_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "current_device_138": {
                "variable": {
                    "value": "current_device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_114": {
                "variable": {
                    "value": "self.target_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_218": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(y, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_243": {
                "variable": {
                    "value": "pred_P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "pred[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "pred[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_252": {
                "variable": {
                    "value": "(maxpred, argpred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_P.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_242": {
                "variable": {
                    "value": "pred_P_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[1]",
                            "Subscript"
                        ],
                        [
                            "pred[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_246": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_P.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_253": {
                "variable": {
                    "value": "(maxpred_2, argpred_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_P_2.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_257": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxpred > self.threshold",
                            "Compare"
                        ],
                        [
                            "(maxpred > self.threshold) | (maxpred_2 > self.threshold)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(pred_P.detach(), dim=1)",
                            "Call"
                        ],
                        [
                            "pred_P",
                            "variable"
                        ],
                        [
                            "torch.where(mask, label, torch.ones(1).to(self.device, dtype=torch.long) * self.ignore_index)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.ones(1).to(self.device, dtype=torch.long) * self.ignore_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_268": {
                "variable": {
                    "value": "(maxpred_c, argpred_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pred_P + pred_P_2) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_271": {
                "variable": {
                    "value": "label_2",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxpred > self.threshold",
                            "Compare"
                        ],
                        [
                            "(maxpred > self.threshold) | (maxpred_2 > self.threshold)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "argpred_c",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones(1).to(self.device, dtype=torch.long) * self.ignore_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_device_name_139": {
                "device": {
                    "value": "current_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_247": {
                "variable": {
                    "value": "label_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_P_2.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_257": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_271": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_source.py": {
        "torch": {
            "device_54": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if self.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_72": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataParallel_77": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_650": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_81": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_108": {
                "variable": {
                    "value": "current_device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_204": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(y, 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y, 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_481": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': self.current_epoch + 1, 'iteration': self.current_iter, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'best_MIou': self.current_MIoU}",
                            "Dict"
                        ],
                        [
                            "{'epoch': self.current_epoch + 1, 'iteration': self.current_iter, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'best_MIou': self.best_MIou}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.args.checkpoint_dir, filename)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_486": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.args.checkpoint_dir, filename)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_87": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_307": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(y, 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y, 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_372": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_390": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(y, 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y, 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_305": {
                "variable": {
                    "value": "pred_P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "pred[0]",
                            "Subscript"
                        ],
                        [
                            "pred.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "pred[0]",
                            "Subscript"
                        ],
                        [
                            "pred.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "pred[0]",
                            "Subscript"
                        ],
                        [
                            "pred.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_306": {
                "variable": {
                    "value": "pred_P_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[1]",
                            "Subscript"
                        ],
                        [
                            "pred[1]",
                            "Subscript"
                        ],
                        [
                            "pred[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_388": {
                "variable": {
                    "value": "pred_P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "pred[0]",
                            "Subscript"
                        ],
                        [
                            "pred.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "pred[0]",
                            "Subscript"
                        ],
                        [
                            "pred.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "pred[0]",
                            "Subscript"
                        ],
                        [
                            "pred.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_389": {
                "variable": {
                    "value": "pred_P_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[1]",
                            "Subscript"
                        ],
                        [
                            "pred[1]",
                            "Subscript"
                        ],
                        [
                            "pred[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_device_name_109": {
                "device": {
                    "value": "current_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/eval.py": {
        "torch": {}
    },
    "utils/loss.py": {
        "torch": {
            "log_softmax_32": {
                "variable": {
                    "value": "log_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_33": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(-log_likelihood, target)[mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_54": {
                "variable": {
                    "value": "(_, argpred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_63": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(weights, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_65": {
                "variable": {
                    "value": "log_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_86": {
                "variable": {
                    "value": "(maxpred, argpred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_88": {
                "variable": {
                    "value": "argpred",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask_arg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxpred != self.ignore_index",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "argpred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(mask_arg, argpred, torch.ones(1).to(prob.device, dtype=torch.long) * self.ignore_index)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.ones(1).to(prob.device, dtype=torch.long) * self.ignore_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_100": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(weights, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_102": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "histc_58": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argpred[i].cpu().data.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "self.num_class - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histc_94": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label[i].cpu().data.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "self.num_class + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.num_class - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "(torch.mul(-log_likelihood, target) * weights)[mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_33": {
                "input": {
                    "value": "-log_likelihood",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "(torch.pow(prob, 2) * weights)[mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_120": {
                "input": {
                    "value": "torch.pow(prob, 2)[mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_66": {
                "input": {
                    "value": "-log_likelihood",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_120": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_103": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_61": {
                "input": {
                    "value": "torch.pow(hist, self.ratio) * torch.pow(hist.sum(), 1 - self.ratio)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_98": {
                "input": {
                    "value": "torch.pow(hist, self.ratio) * torch.pow(hist.sum(), 1 - self.ratio)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_61": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_98": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_61": {
                "input": {
                    "value": "hist.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 - self.ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_98": {
                "input": {
                    "value": "hist.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 - self.ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/train_helper.py": {
        "torch": {}
    }
}