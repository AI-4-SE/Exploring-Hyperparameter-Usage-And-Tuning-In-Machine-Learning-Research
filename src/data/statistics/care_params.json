{
    "DiCE/dice_ml/data_interfaces/public_data_interface.py": {
        "sklearn": {
            "train_test_split_184": {
                "variable": {
                    "value": "(train_df, test_df)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.test_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.test_split_random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Variable_385": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "minx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[0.0] * len(self.encoded_feature_names)])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_366": {
                "variable": {
                    "value": "self.data_sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_368": {
                "variable": {
                    "value": "self.data_sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DiCE/dice_ml/explainer_interfaces/dice_KD.py": {
        "sklearn": {
            "KDTree_49": {
                "X": {
                    "value": "pd.get_dummies(dataset_with_predictions[i][self.data_interface.feature_names])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/confidence/model_linearity.py": {
        "sklearn": {
            "NearestNeighbors_211": {
                "variable": {
                    "value": "nbrs",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "nb_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/confidence/tests/test_model_linearity.py": {
        "sklearn": {
            "load_iris_35": {
                "variable": {
                    "value": "iris",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_iris_68": {
                "variable": {
                    "value": "iris",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_73": {
                "variable": {
                    "value": "lg",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_boston_98": {
                "variable": {
                    "value": "boston",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_102": {
                "variable": {
                    "value": "lg",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SVR_104": {
                "variable": {
                    "value": "svr",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LinearRegression_138": {
                "variable": {
                    "value": "lg_multi",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_iris_159": {
                "variable": {
                    "value": "iris",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_164": {
                "variable": {
                    "value": "lg",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_boston_184": {
                "variable": {
                    "value": "boston",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_188": {
                "variable": {
                    "value": "lg",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_195": {
                "variable": {
                    "value": "lg_multi",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/confidence/tests/test_trustscore.py": {
        "sklearn": {
            "load_iris_12": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_21": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "to_categorical_58": {
                "y": {
                    "value": "Y_train",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/confidence/trustscore.py": {
        "sklearn": {
            "KDTree_56": {
                "variable": {
                    "value": "kdtree",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X.reshape(X.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "X.reshape(X.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "leaf_size": {
                    "value": "self.leaf_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "self.metric",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KNeighborsClassifier_86": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "self.k_filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "leaf_size": {
                    "value": "self.leaf_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "self.metric",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KDTree_141": {
                "variable": {
                    "value": "self.kdtrees[c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X_fit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X[np.where(Y == c)[0]]",
                            "Subscript"
                        ],
                        [
                            "self.filter_by_distance_knn(X[np.where(Y == c)[0]])",
                            "Call"
                        ],
                        [
                            "X_filter[np.where(Y_filter == c)[0]]",
                            "Subscript"
                        ]
                    ]
                },
                "leaf_size": {
                    "value": "self.leaf_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "self.metric",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/datasets.py": {
        "sklearn": {
            "LabelEncoder_288": {
                "variable": {
                    "value": "le",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "load_data_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/explainers/tests/conftest.py": {
        "sklearn": {
            "RandomForestClassifier_108": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_136": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_159": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "disable_v2_behavior_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/explainers/tests/test_cem.py": {
        "sklearn": {
            "load_iris_14": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_24": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/explainers/tests/test_counterfactual.py": {
        "sklearn": {
            "load_iris_16": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogisticRegression_17": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "multinomial",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "clear_session_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clear_session_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/explainers/tests/test_shap_wrappers.py": {
        "sklearn": {
            "resample_275": {
                "*arrays_0": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_clusters",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/utils/data.py": {
        "sklearn": {
            "LabelEncoder_75": {
                "variable": {
                    "value": "le",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/utils/distance.py": {
        "sklearn": {
            "MDS_208": {
                "variable": {
                    "value": "mds",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "5000",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "n_init": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dissimilarity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "metric": {
                    "value": "use_metric",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/utils/tests/test_gradients.py": {
        "sklearn": {
            "load_iris_11": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogisticRegression_12": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "multinomial",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/benchmark_validity.py": {
        "sklearn": {
            "train_test_split_62": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/benchmark_validity_soundness.py": {
        "sklearn": {
            "train_test_split_62": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/benchmark_validity_soundness_coherency.py": {
        "sklearn": {
            "train_test_split_62": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/benchmark_validity_soundness_coherency_actionability.py": {
        "sklearn": {
            "train_test_split_62": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "care/care.py": {
        "sklearn": {
            "MinMaxScaler_460": {
                "variable": {
                    "value": "feature_scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LocalOutlierFactor_472": {
                "variable": {
                    "value": "lof_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "novelty": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "str",
                    "possible_values": []
                },
                "metric": {
                    "value": "minkowski",
                    "type": "str",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NearestNeighbors_548": {
                "variable": {
                    "value": "neighborhood_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "K_nbrs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(self.K_nbrs, len(data_ohe))",
                            "Call"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "str",
                    "possible_values": []
                },
                "metric": {
                    "value": "minkowski",
                    "type": "str",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeClassifier_521": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "f1_score_523": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.X_train[val_point:, f]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "model.predict(self.X_train[val_point:, inputs])",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Ridge_528": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "r2_score_530": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.X_train[val_point:, f]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "model.predict(self.X_train[val_point:, inputs])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "care_cfprototype_dice_certifai.py": {
        "sklearn": {
            "train_test_split_48": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "certifai/certifai.py": {
        "sklearn": {
            "MinMaxScaler_131": {
                "variable": {
                    "value": "feature_scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "create_model.py": {
        "sklearn": {
            "accuracy_score_16": {
                "variable": {
                    "value": "bb_accuracy_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "blackbox.predict_classes(X_test_ohe).ravel()",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_18": {
                "variable": {
                    "value": "bb_f1_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "blackbox.predict_classes(X_test_ohe).ravel()",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_25": {
                "variable": {
                    "value": "bb_accuracy_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "blackbox.predict_classes(X_test_ohe).ravel()",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_27": {
                "variable": {
                    "value": "bb_f1_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "blackbox.predict_classes(X_test_ohe).ravel()",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "r2_score_37": {
                "variable": {
                    "value": "bb_r2_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "blackbox.predict_classes(X_test_ohe).ravel()",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_39": {
                "variable": {
                    "value": "bb_mse_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "blackbox.predict_classes(X_test_ohe).ravel()",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ]
                    ]
                }
            },
            "r2_score_46": {
                "variable": {
                    "value": "bb_r2_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "blackbox.predict_classes(X_test_ohe).ravel()",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_48": {
                "variable": {
                    "value": "bb_mse_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "blackbox.predict_classes(X_test_ohe).ravel()",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ],
                        [
                            "blackbox.predict(X_test_ohe)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "set_random_seed_3": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "constructor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "constructor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_54": {
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(input_shape,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l1(0.001)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_56": {
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l1(0.001)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_57": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_63": {
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(input_shape,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l1(0.001)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_65": {
                "units": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "keras.regularizers.l1(0.001)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_66": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_58": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_67": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "sklearn": {
            "train_test_split_50": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "prepare_datasets.py": {
        "sklearn": {
            "StandardScaler_55": {
                "variable": {
                    "value": "num_feature_scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OrdinalEncoder_61": {
                "variable": {
                    "value": "ord_feature_encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OneHotEncoder_66": {
                "variable": {
                    "value": "ohe_feature_encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LabelEncoder_77": {
                "variable": {
                    "value": "le",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_231": {
                "variable": {
                    "value": "num_feature_scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OrdinalEncoder_237": {
                "variable": {
                    "value": "ord_feature_encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OneHotEncoder_242": {
                "variable": {
                    "value": "ohe_feature_encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LabelEncoder_253": {
                "variable": {
                    "value": "le",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_371": {
                "variable": {
                    "value": "num_feature_scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OrdinalEncoder_377": {
                "variable": {
                    "value": "ord_feature_encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OneHotEncoder_382": {
                "variable": {
                    "value": "ohe_feature_encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LabelEncoder_393": {
                "variable": {
                    "value": "le",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_529": {
                "variable": {
                    "value": "num_feature_scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_547": {
                "variable": {
                    "value": "le",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_669": {
                "variable": {
                    "value": "num_feature_scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OrdinalEncoder_675": {
                "variable": {
                    "value": "ord_feature_encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OneHotEncoder_680": {
                "variable": {
                    "value": "ohe_feature_encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LabelEncoder_691": {
                "variable": {
                    "value": "le",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_iris_767": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_811": {
                "variable": {
                    "value": "num_feature_scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_829": {
                "variable": {
                    "value": "le",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "make_moons_905": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StandardScaler_945": {
                "variable": {
                    "value": "num_feature_scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_963": {
                "variable": {
                    "value": "le",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_diabetes_1039": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_1079": {
                "variable": {
                    "value": "num_feature_scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "fetch_california_housing_1165": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_home": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "download_if_missing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "as_frame": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StandardScaler_1207": {
                "variable": {
                    "value": "num_feature_scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_wine_1292": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_1334": {
                "variable": {
                    "value": "num_feature_scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_1352": {
                "variable": {
                    "value": "le",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "validations/care_coherency.py": {
        "sklearn": {
            "train_test_split_64": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "validations/care_module_performance.py": {
        "sklearn": {
            "train_test_split_66": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "validations/care_soundness.py": {
        "sklearn": {
            "train_test_split_42": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "validations/care_temporal_action_sequence.py": {
        "sklearn": {
            "train_test_split_57": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DiCE/dice_ml/dice.py": {
        "tensorflow": {}
    },
    "DiCE/dice_ml/explainer_interfaces/dice_tensorflow1.py": {
        "tensorflow": {
            "Variable_39": {
                "variable": {
                    "value": "self.input_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.minx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.weights_inits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "convert_to_tensor_56": {
                "variable": {
                    "value": "temp_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.random.uniform([len(self.data_interface.encoded_feature_names)])]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_145": {
                "variable": {
                    "value": "self.x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.minx.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "self.target_cf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_155": {
                "variable": {
                    "value": "self.cf_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.minx.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_240": {
                "variable": {
                    "value": "det_entries",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "det_entries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(det_entries, [self.total_CFs, self.total_CFs])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.total_CFs, self.total_CFs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_265": {
                "variable": {
                    "value": "regularization_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_299": {
                "variable": {
                    "value": "self.feature_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.minx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_316": {
                "x": {
                    "value": "self.yloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.scalar_mul(self.weights[0], self.proximity_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variables_initializer_364": {
                "variable": {
                    "value": "self.reset_optimizer_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.opt_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_29": {
                "variable": {
                    "value": "self.dice_sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_31": {
                "variable": {
                    "value": "self.dice_sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_168": {
                "variable": {
                    "value": "frozen",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.cfs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(frozen_dims, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_205": {
                "variable": {
                    "value": "yloss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "yloss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "tf.add(yloss, temp_loss)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "temp_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(self.model.get_output(self.cfs_frozen[i]), self.target_cf))",
                            "Call"
                        ],
                        [
                            "temp_loss[:, self.num_ouput_nodes - 1:][0][0]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=temp_logits, labels=self.target_cf)[0][0]",
                            "Subscript"
                        ],
                        [
                            "tf.losses.hinge_loss(logits=temp_logits, labels=self.target_cf)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_207": {
                "x": {
                    "value": "yloss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "tf.add(yloss, temp_loss)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(self.total_CFs, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_211": {
                "input_tensor": {
                    "value": "tf.multiply(tf.abs(tf.subtract(x_hat, x1)), self.feature_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_217": {
                "variable": {
                    "value": "proximity_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "proximity_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "tf.add(proximity_loss, self.compute_dist(self.cfs_frozen[i], self.x1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.compute_dist(self.cfs_frozen[i], self.x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_219": {
                "x": {
                    "value": "proximity_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "tf.add(proximity_loss, self.compute_dist(self.cfs_frozen[i], self.x1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(tf.multiply(len(self.minx[0]), self.total_CFs), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_308": {
                "variable": {
                    "value": "self.diversity_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_321": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "myadam",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_session_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_189": {
                "variable": {
                    "value": "temp_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(self.model.get_output(self.cfs_frozen[i]), self.target_cf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_207": {
                "x": {
                    "value": "self.total_CFs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_211": {
                "x": {
                    "value": "tf.abs(tf.subtract(x_hat, x1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.feature_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_219": {
                "x": {
                    "value": "tf.multiply(len(self.minx[0]), self.total_CFs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_247": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_251": {
                "input_tensor": {
                    "value": "self.dpp_style(submethod)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_268": {
                "variable": {
                    "value": "regularization_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "regularization_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ],
                        [
                            "tf.add(regularization_loss, tf.square(tf.subtract(tf.reduce_sum(self.cfs_frozen[i][0, v[0]:v[-1] + 1]), 1.0)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.square(tf.subtract(tf.reduce_sum(self.cfs_frozen[i][0, v[0]:v[-1] + 1]), 1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_301": {
                "ref": {
                    "value": "self.feature_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array(feature_weights_list, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_316": {
                "x": {
                    "value": "tf.add(self.yloss, tf.scalar_mul(self.weights[0], self.proximity_loss))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.scalar_mul(self.weights[1], self.diversity_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_316": {
                "scalar": {
                    "value": "self.weights[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "self.proximity_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_324": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_48": {
                "ref": {
                    "value": "self.weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "self.weights_inits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_56": {
                "shape": {
                    "value": "[len(self.data_interface.encoded_feature_names)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_159": {
                "initial_value": {
                    "value": "self.minx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_160": {
                "ref": {
                    "value": "self.cfs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "self.cf_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_168": {
                "value": {
                    "value": "frozen_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[1.0 if ix in self.feat_to_vary_idxs else 0.0 for ix in range(self.minx.shape[1])]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_193": {
                "variable": {
                    "value": "temp_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.divide(tf.abs(tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06)), tf.subtract(1.0, tf.abs(tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_211": {
                "x": {
                    "value": "tf.subtract(x_hat, x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_219": {
                "x": {
                    "value": "len(self.minx[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.total_CFs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_227": {
                "variable": {
                    "value": "det_temp_entry",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.add(1.0, self.compute_dist(self.cfs_frozen[i], self.cfs_frozen[j]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_261": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.divide(diversity_loss, count)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_171": {
                "input": {
                    "value": "-frozen + self.cfs[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_189": {
                "x": {
                    "value": "self.model.get_output(self.cfs_frozen[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.target_cf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_199": {
                "variable": {
                    "value": "temp_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.divide(tf.abs(tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06)), tf.subtract(1.0, tf.abs(tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "hinge_loss_202": {
                "variable": {
                    "value": "temp_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "temp_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.log(tf.divide(tf.abs(tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06)), tf.subtract(1.0, tf.abs(tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06)))))",
                            "Call"
                        ],
                        [
                            "temp_logits[:, self.num_ouput_nodes - 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.log(tf.divide(tf.abs(tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06)), tf.subtract(1.0, tf.abs(tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06)))))",
                            "Call"
                        ],
                        [
                            "temp_logits[:, self.num_ouput_nodes - 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.target_cf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_211": {
                "x": {
                    "value": "x_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_230": {
                "variable": {
                    "value": "det_temp_entry",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "det_temp_entry",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.divide(1.0, tf.add(1.0, self.compute_dist(self.cfs_frozen[i], self.cfs_frozen[j])))",
                            "Call"
                        ],
                        [
                            "tf.add(det_temp_entry, 0.0001)",
                            "Call"
                        ],
                        [
                            "tf.divide(1.0, tf.exp(self.compute_dist(self.cfs_frozen[i], self.cfs_frozen[j])))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "divide_236": {
                "variable": {
                    "value": "det_temp_entry",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.exp(self.compute_dist(self.cfs_frozen[i], self.cfs_frozen[j]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_259": {
                "variable": {
                    "value": "diversity_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "diversity_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matrix_determinant(det_entries)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "tf.add(diversity_loss, tf.divide(1.0, tf.add(1.0, self.compute_dist(self.cfs_frozen[i], self.cfs_frozen[j]))))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.divide(1.0, tf.add(1.0, self.compute_dist(self.cfs_frozen[i], self.cfs_frozen[j])))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_261": {
                "x": {
                    "value": "diversity_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matrix_determinant(det_entries)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "tf.add(diversity_loss, tf.divide(1.0, tf.add(1.0, self.compute_dist(self.cfs_frozen[i], self.cfs_frozen[j]))))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "count",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "count + 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_268": {
                "x": {
                    "value": "tf.subtract(tf.reduce_sum(self.cfs_frozen[i][0, v[0]:v[-1] + 1]), 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_193": {
                "x": {
                    "value": "tf.abs(tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(1.0, tf.abs(tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_227": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "self.compute_dist(self.cfs_frozen[i], self.cfs_frozen[j])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_268": {
                "x": {
                    "value": "tf.reduce_sum(self.cfs_frozen[i][0, v[0]:v[-1] + 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_193": {
                "x": {
                    "value": "tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_193": {
                "x": {
                    "value": "self.model.get_output(self.cfs_frozen[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_196": {
                "logits": {
                    "value": "temp_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.log(tf.divide(tf.abs(tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06)), tf.subtract(1.0, tf.abs(tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06)))))",
                            "Call"
                        ],
                        [
                            "temp_logits[:, self.num_ouput_nodes - 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.log(tf.divide(tf.abs(tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06)), tf.subtract(1.0, tf.abs(tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06)))))",
                            "Call"
                        ],
                        [
                            "temp_logits[:, self.num_ouput_nodes - 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.target_cf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_199": {
                "x": {
                    "value": "tf.abs(tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(1.0, tf.abs(tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_236": {
                "x": {
                    "value": "self.compute_dist(self.cfs_frozen[i], self.cfs_frozen[j])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_260": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.add(1.0, self.compute_dist(self.cfs_frozen[i], self.cfs_frozen[j]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_269": {
                "input_tensor": {
                    "value": "self.cfs_frozen[i][0, v[0]:v[-1] + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_194": {
                "x": {
                    "value": "tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_199": {
                "x": {
                    "value": "tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_199": {
                "x": {
                    "value": "self.model.get_output(self.cfs_frozen[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "add_260": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "self.compute_dist(self.cfs_frozen[i], self.cfs_frozen[j])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_194": {
                "x": {
                    "value": "self.model.get_output(self.cfs_frozen[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_200": {
                "x": {
                    "value": "tf.subtract(self.model.get_output(self.cfs_frozen[i]), 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_200": {
                "x": {
                    "value": "self.model.get_output(self.cfs_frozen[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "DiCE/dice_ml/explainer_interfaces/dice_tensorflow2.py": {
        "tensorflow": {
            "convert_to_tensor_43": {
                "variable": {
                    "value": "temp_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.random.uniform([len(self.data_interface.encoded_feature_names)])]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_243": {
                "variable": {
                    "value": "det_entries",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "det_entries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(det_entries, [self.total_CFs, self.total_CFs])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.total_CFs, self.total_CFs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_380": {
                "variable": {
                    "value": "self.x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "query_instance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data_interface.prepare_query_instance(query_instance=query_instance, encode=True)",
                            "Call"
                        ],
                        [
                            "np.array([query_instance.iloc[0].values])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_134": {
                "variable": {
                    "value": "self.freezer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[1.0 if ix in self.feat_to_vary_idxs else 0.0 for ix in range(len(self.minx[0]))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "constant_170": {
                "variable": {
                    "value": "self.feature_weights_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[feature_weights_list]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_187": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_215": {
                "input_tensor": {
                    "value": "tf.multiply(tf.abs(x_hat - x1), self.feature_weights_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_189": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_196": {
                "variable": {
                    "value": "temp_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.model.get_output(self.cfs[i]) - self.target_cf_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_215": {
                "x": {
                    "value": "tf.abs(x_hat - x1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.feature_weights_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_222": {
                "x": {
                    "value": "tf.multiply(len(self.minx[0]), self.total_CFs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_250": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_254": {
                "input_tensor": {
                    "value": "self.dpp_style(submethod)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_43": {
                "shape": {
                    "value": "[len(self.data_interface.encoded_feature_names)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_199": {
                "variable": {
                    "value": "temp_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(self.model.get_output(self.cfs[i]) - 1e-06) / (1 - tf.abs(self.model.get_output(self.cfs[i]) - 1e-06))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_215": {
                "x": {
                    "value": "x_hat - x1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_222": {
                "x": {
                    "value": "len(self.minx[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.total_CFs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_230": {
                "variable": {
                    "value": "det_temp_entry",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.add(1.0, self.compute_dist(self.cfs[i], self.cfs[j]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_271": {
                "x": {
                    "value": "tf.reduce_sum(self.cfs[i][0, v[0]:v[-1] + 1]) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_144": {
                "initial_value": {
                    "value": "one_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[]]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array([one_init], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_204": {
                "variable": {
                    "value": "temp_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(self.model.get_output(self.cfs[i]) - 1e-06) / (1 - tf.abs(self.model.get_output(self.cfs[i]) - 1e-06))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "hinge_loss_206": {
                "variable": {
                    "value": "temp_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "temp_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.log(tf.abs(self.model.get_output(self.cfs[i]) - 1e-06) / (1 - tf.abs(self.model.get_output(self.cfs[i]) - 1e-06)))",
                            "Call"
                        ],
                        [
                            "temp_logits[:, self.num_ouput_nodes - 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.compat.v1.log(tf.abs(self.model.get_output(self.cfs[i]) - 1e-06) / (1 - tf.abs(self.model.get_output(self.cfs[i]) - 1e-06)))",
                            "Call"
                        ],
                        [
                            "temp_logits[:, self.num_ouput_nodes - 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.target_cf_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_233": {
                "variable": {
                    "value": "det_temp_entry",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "det_temp_entry",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.divide(1.0, tf.add(1.0, self.compute_dist(self.cfs[i], self.cfs[j])))",
                            "Call"
                        ],
                        [
                            "tf.add(det_temp_entry, 0.0001)",
                            "Call"
                        ],
                        [
                            "tf.divide(1.0, tf.exp(self.compute_dist(self.cfs[i], self.cfs[j])))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "divide_239": {
                "variable": {
                    "value": "det_temp_entry",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.exp(self.compute_dist(self.cfs[i], self.cfs[j]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_383": {
                "value": {
                    "value": "query_instance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data_interface.prepare_query_instance(query_instance=query_instance, encode=True)",
                            "Call"
                        ],
                        [
                            "np.array([query_instance.iloc[0].values])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_435": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_230": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "self.compute_dist(self.cfs[i], self.cfs[j])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_271": {
                "input_tensor": {
                    "value": "self.cfs[i][0, v[0]:v[-1] + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_467": {
                "value": {
                    "value": "cf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tcf.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_199": {
                "x": {
                    "value": "self.model.get_output(self.cfs[i]) - 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_201": {
                "logits": {
                    "value": "temp_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.log(tf.abs(self.model.get_output(self.cfs[i]) - 1e-06) / (1 - tf.abs(self.model.get_output(self.cfs[i]) - 1e-06)))",
                            "Call"
                        ],
                        [
                            "temp_logits[:, self.num_ouput_nodes - 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.compat.v1.log(tf.abs(self.model.get_output(self.cfs[i]) - 1e-06) / (1 - tf.abs(self.model.get_output(self.cfs[i]) - 1e-06)))",
                            "Call"
                        ],
                        [
                            "temp_logits[:, self.num_ouput_nodes - 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.target_cf_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_239": {
                "x": {
                    "value": "self.compute_dist(self.cfs[i], self.cfs[j])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_360": {
                "value": {
                    "value": "cf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tcf.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_204": {
                "x": {
                    "value": "self.model.get_output(self.cfs[i]) - 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "DiCE/dice_ml/model_interfaces/keras_tensorflow_model.py": {
        "tensorflow": {
            "convert_to_tensor_34": {
                "variable": {
                    "value": "temp_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.random.uniform([inp_size])]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_model_21": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_34": {
                "shape": {
                    "value": "[inp_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/explainers/cem.py": {
        "tensorflow": {
            "Variable_137": {
                "variable": {
                    "value": "self.no_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "no_info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_140": {
                "variable": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "orig",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_141": {
                "variable": {
                    "value": "self.adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_142": {
                "variable": {
                    "value": "self.adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "adv_s",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_143": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((self.batch_size, classes))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_146": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_147": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_150": {
                "variable": {
                    "value": "self.assign_orig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X.shape",
                            "Attribute"
                        ],
                        [
                            "(dim * shape[0],) + shape[1:]",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "assign_orig",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "self.assign_adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X.shape",
                            "Attribute"
                        ],
                        [
                            "(dim * shape[0],) + shape[1:]",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "assign_adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_152": {
                "variable": {
                    "value": "self.assign_adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X.shape",
                            "Attribute"
                        ],
                        [
                            "(dim * shape[0],) + shape[1:]",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "assign_adv_s",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "variable": {
                    "value": "self.assign_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_154": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_155": {
                "variable": {
                    "value": "self.assign_no_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X.shape",
                            "Attribute"
                        ],
                        [
                            "(dim * shape[0],) + shape[1:]",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "assign_no_info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variables_initializer_297": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[self.global_step] + [self.adv_s] + [self.adv] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_162": {
                "variable": {
                    "value": "upper",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(self.adv_s, self.beta)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(feature_range[1], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_163": {
                "variable": {
                    "value": "lower",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(self.adv_s, self.beta)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(feature_range[0], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_181": {
                "variable": {
                    "value": "self.zt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_step + tf.cast(3, tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_194": {
                "variable": {
                    "value": "self.adv_updater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.assign_adv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_195": {
                "variable": {
                    "value": "self.adv_updater_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.assign_adv_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_205": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.delta)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "ax_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(np.arange(1, len(shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_206": {
                "variable": {
                    "value": "self.l2_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.delta_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "ax_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(np.arange(1, len(shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_207": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(self.delta)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "ax_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(np.arange(1, len(shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_208": {
                "variable": {
                    "value": "self.l1_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(self.delta_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "ax_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(np.arange(1, len(shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_213": {
                "variable": {
                    "value": "self.loss_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_214": {
                "variable": {
                    "value": "self.loss_l1_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l1_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_215": {
                "variable": {
                    "value": "self.loss_l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_216": {
                "variable": {
                    "value": "self.loss_l2_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l2_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_273": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.max_iterations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "power": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_275": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_280": {
                "variable": {
                    "value": "self.grad_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "grad_adv_s",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_285": {
                "variable": {
                    "value": "end_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_300": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "write_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_158": {
                "name": {
                    "value": "shrinkage_thresholding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_169": {
                "name": {
                    "value": "perturbation_delta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_180": {
                "name": {
                    "value": "perturbation_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_193": {
                "name": {
                    "value": "update_adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_198": {
                "name": {
                    "value": "update_delta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_204": {
                "name": {
                    "value": "loss_l1_l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_218": {
                "name": {
                    "value": "loss_ae",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_230": {
                "name": {
                    "value": "loss_attack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_232": {
                "variable": {
                    "value": "self.loss_attack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_243": {
                "variable": {
                    "value": "self.target_proba",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.target * self.pred_proba",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_244": {
                "variable": {
                    "value": "target_proba_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.target * self.pred_proba_s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_247": {
                "variable": {
                    "value": "self.nontarget_proba_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - self.target) * self.pred_proba - self.target * 10000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_248": {
                "variable": {
                    "value": "nontarget_proba_max_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - self.target) * self.pred_proba_s - self.target * 10000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_259": {
                "variable": {
                    "value": "self.loss_attack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.const * loss_attack",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_260": {
                "variable": {
                    "value": "self.loss_attack_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.const * loss_attack_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_262": {
                "name": {
                    "value": "loss_combined",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_272": {
                "name": {
                    "value": "training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_159": {
                "x": {
                    "value": "tf.greater(tf.subtract(self.adv_s, self.orig), self.beta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_160": {
                "x": {
                    "value": "tf.less_equal(tf.abs(tf.subtract(self.adv_s, self.orig)), self.beta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_161": {
                "x": {
                    "value": "tf.less(tf.subtract(self.adv_s, self.orig), tf.negative(self.beta))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_162": {
                "x": {
                    "value": "self.adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_162": {
                "x": {
                    "value": "feature_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_163": {
                "x": {
                    "value": "self.adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_163": {
                "x": {
                    "value": "feature_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_164": {
                "x": {
                    "value": "cond[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_170": {
                "x": {
                    "value": "tf.greater(tf.abs(tf.subtract(self.assign_adv, self.no_info)), tf.abs(tf.subtract(self.orig, self.no_info)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_172": {
                "x": {
                    "value": "tf.less_equal(tf.abs(tf.subtract(self.assign_adv, self.no_info)), tf.abs(tf.subtract(self.orig, self.no_info)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_182": {
                "x": {
                    "value": "self.zt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.assign_adv - self.adv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_183": {
                "x": {
                    "value": "tf.greater(tf.abs(tf.subtract(self.assign_adv_s, self.no_info)), tf.abs(tf.subtract(self.orig, self.no_info)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_185": {
                "x": {
                    "value": "tf.less_equal(tf.abs(tf.subtract(self.assign_adv_s, self.no_info)), tf.abs(tf.subtract(self.orig, self.no_info)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_205": {
                "x": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_206": {
                "x": {
                    "value": "self.delta_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_207": {
                "x": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_208": {
                "x": {
                    "value": "self.delta_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_209": {
                "x": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_210": {
                "x": {
                    "value": "self.l1_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_227": {
                "variable": {
                    "value": "self.loss_ae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_228": {
                "variable": {
                    "value": "self.loss_ae_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_252": {
                "variable": {
                    "value": "loss_attack",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "self.nontarget_proba_max - self.target_proba + self.kappa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_253": {
                "variable": {
                    "value": "loss_attack_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "nontarget_proba_max_s - target_proba_s + self.kappa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_270": {
                "x": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.loss_l1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "greater_159": {
                "x": {
                    "value": "tf.subtract(self.adv_s, self.orig)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_equal_160": {
                "x": {
                    "value": "tf.abs(tf.subtract(self.adv_s, self.orig))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_161": {
                "x": {
                    "value": "tf.subtract(self.adv_s, self.orig)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.negative(self.beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_170": {
                "x": {
                    "value": "tf.abs(tf.subtract(self.assign_adv, self.no_info))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(tf.subtract(self.orig, self.no_info))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_equal_172": {
                "x": {
                    "value": "tf.abs(tf.subtract(self.assign_adv, self.no_info))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(tf.subtract(self.orig, self.no_info))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_175": {
                "x": {
                    "value": "proj_d[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_181": {
                "x": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_183": {
                "x": {
                    "value": "tf.abs(tf.subtract(self.assign_adv_s, self.no_info))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(tf.subtract(self.orig, self.no_info))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_equal_185": {
                "x": {
                    "value": "tf.abs(tf.subtract(self.assign_adv_s, self.no_info))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(tf.subtract(self.orig, self.no_info))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_188": {
                "x": {
                    "value": "proj_d_s[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_221": {
                "x": {
                    "value": "tf.norm(self.ae(self.delta) - self.delta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_222": {
                "x": {
                    "value": "tf.norm(self.ae(self.delta_s) - self.delta_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_255": {
                "variable": {
                    "value": "loss_attack",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "-self.nontarget_proba_max + self.target_proba + self.kappa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_256": {
                "variable": {
                    "value": "loss_attack_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "-nontarget_proba_max_s + target_proba_s + self.kappa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_710": {
                "value": {
                    "value": "best_attack",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate(overall_best_attack, axis=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(best_attack, axis=0)",
                            "Call"
                        ],
                        [
                            "X - best_attack",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_159": {
                "x": {
                    "value": "self.adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_160": {
                "x": {
                    "value": "tf.subtract(self.adv_s, self.orig)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_161": {
                "x": {
                    "value": "self.adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "negative_161": {
                "x": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_170": {
                "x": {
                    "value": "tf.subtract(self.assign_adv, self.no_info)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_171": {
                "x": {
                    "value": "tf.subtract(self.orig, self.no_info)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_172": {
                "x": {
                    "value": "tf.subtract(self.assign_adv, self.no_info)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_173": {
                "x": {
                    "value": "tf.subtract(self.orig, self.no_info)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_177": {
                "x": {
                    "value": "proj_d[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_183": {
                "x": {
                    "value": "tf.subtract(self.assign_adv_s, self.no_info)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_184": {
                "x": {
                    "value": "tf.subtract(self.orig, self.no_info)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_185": {
                "x": {
                    "value": "tf.subtract(self.assign_adv_s, self.no_info)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_186": {
                "x": {
                    "value": "tf.subtract(self.orig, self.no_info)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_190": {
                "x": {
                    "value": "proj_d_s[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_221": {
                "tensor": {
                    "value": "self.ae(self.delta) - self.delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_222": {
                "tensor": {
                    "value": "self.ae(self.delta_s) - self.delta_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_224": {
                "x": {
                    "value": "tf.norm(self.ae(self.adv) - self.adv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_225": {
                "x": {
                    "value": "tf.norm(self.ae(self.adv_s) - self.adv_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_685": {
                "value": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.reshape(X, (shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_111": {
                "value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_160": {
                "x": {
                    "value": "self.adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_170": {
                "x": {
                    "value": "self.assign_adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.no_info",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_171": {
                "x": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.no_info",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_172": {
                "x": {
                    "value": "self.assign_adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.no_info",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_173": {
                "x": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.no_info",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_183": {
                "x": {
                    "value": "self.assign_adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.no_info",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_184": {
                "x": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.no_info",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_185": {
                "x": {
                    "value": "self.assign_adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.no_info",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_186": {
                "x": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.no_info",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_224": {
                "tensor": {
                    "value": "self.ae(self.adv) - self.adv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_225": {
                "tensor": {
                    "value": "self.ae(self.adv_s) - self.adv_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/explainers/cfproto.py": {
        "tensorflow": {
            "Variable_473": {
                "variable": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "orig",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_474": {
                "variable": {
                    "value": "self.adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_475": {
                "variable": {
                    "value": "self.adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "adv_s",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_476": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((self.batch_size, self.classes))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_484": {
                "variable": {
                    "value": "self.target_proto",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(self.shape_enc)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "target_proto",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_487": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_488": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_491": {
                "variable": {
                    "value": "self.assign_orig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ohe_to_ord_shape(shape, cat_vars=cat_vars, is_ohe=self.ohe)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "assign_orig",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_492": {
                "variable": {
                    "value": "self.assign_adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ohe_to_ord_shape(shape, cat_vars=cat_vars, is_ohe=self.ohe)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "assign_adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_493": {
                "variable": {
                    "value": "self.assign_adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ohe_to_ord_shape(shape, cat_vars=cat_vars, is_ohe=self.ohe)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "assign_adv_s",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_494": {
                "variable": {
                    "value": "self.assign_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_495": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_496": {
                "variable": {
                    "value": "self.assign_target_proto",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_target_proto",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variables_initializer_645": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[self.global_step] + [self.adv_s] + [self.adv] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_187": {
                "variable": {
                    "value": "self.map_cat_to_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[np.zeros(v) for (_, v) in self.cat_vars.items()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "placeholder_194": {
                "variable": {
                    "value": "self.assign_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_cat, self.max_cat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_map",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_195": {
                "variable": {
                    "value": "self.map_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((n_cat, self.max_cat))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "map_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_flat_values_200": {
                "variable": {
                    "value": "self.map_cat_to_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "op": {
                    "value": "tf.add",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.map_cat_to_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "map_cat_to_num_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.RaggedTensor.from_tensor(self.map_var, lengths=list(lengths))",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_503": {
                "variable": {
                    "value": "upper",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(self.adv_s, self.beta)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(feature_range[1], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_504": {
                "variable": {
                    "value": "lower",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(self.adv_s, self.beta)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(feature_range[0], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_510": {
                "variable": {
                    "value": "self.zt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.global_step + tf.cast(3, tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_513": {
                "variable": {
                    "value": "self.assign_adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.assign_adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(feature_range[1], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_514": {
                "variable": {
                    "value": "self.assign_adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.assign_adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(feature_range[0], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_518": {
                "variable": {
                    "value": "self.adv_updater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.assign_adv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_519": {
                "variable": {
                    "value": "self.adv_updater_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.assign_adv_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_529": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.delta)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "ax_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(np.arange(1, len(shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_530": {
                "variable": {
                    "value": "self.l2_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.delta_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "ax_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(np.arange(1, len(shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_531": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(self.delta)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "ax_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(np.arange(1, len(shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_532": {
                "variable": {
                    "value": "self.l1_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(self.delta_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "ax_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(np.arange(1, len(shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_537": {
                "variable": {
                    "value": "self.loss_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_538": {
                "variable": {
                    "value": "self.loss_l1_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l1_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_539": {
                "variable": {
                    "value": "self.loss_l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_540": {
                "variable": {
                    "value": "self.loss_l2_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l2_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_619": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.max_iterations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "power": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_621": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_626": {
                "variable": {
                    "value": "self.grad_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "grad_adv_s",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_631": {
                "variable": {
                    "value": "end_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_648": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "write_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_217": {
                "variable": {
                    "value": "cat_cols_ord",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cat_keys_ord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(cat_vars_ord.keys())",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cat_keys_ord",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_219": {
                "variable": {
                    "value": "cat_cols_ord",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cat_keys",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(cat_vars.keys())",
                            "Call"
                        ],
                        [
                            "list(self.cat_vars_ord.keys())",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cat_keys_ord",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_238": {
                "variable": {
                    "value": "eq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "cat_cols",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_any_239": {
                "variable": {
                    "value": "eq_any",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "eq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.equal(col, cat_cols)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_292": {
                "variable": {
                    "value": "adv_map_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "eq_any_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "true_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "false_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_296": {
                "variable": {
                    "value": "icol",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "icol",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_297": {
                "variable": {
                    "value": "icat",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "eq_any_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.add(icat, 1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : icat",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_327": {
                "variable": {
                    "value": "adv_map_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "eq_any_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "true_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "false_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_331": {
                "variable": {
                    "value": "icol",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "icol",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_332": {
                "variable": {
                    "value": "icat",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "eq_any_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.add(icat, 1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : icat",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_357": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "eq_any_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.shape(self.map_cat_to_num[icat])[0]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_370": {
                "variable": {
                    "value": "adv_map_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "eq_any_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "true_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "false_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_374": {
                "variable": {
                    "value": "icol",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "icol",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_375": {
                "variable": {
                    "value": "iohe",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "iohe",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(iohe, v)",
                            "Call"
                        ],
                        [
                            "tf.add(iohe, iohecat)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cat_vars[c]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(eq_any_true, lambda : tf.shape(self.map_cat_to_num[icat])[0], lambda : tf.constant(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_376": {
                "variable": {
                    "value": "icat",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "eq_any_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.add(icat, 1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : icat",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_409": {
                "variable": {
                    "value": "adv_map_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "eq_any_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "true_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "false_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "while_loop_421": {
                "variable": {
                    "value": "(iohe, iohecat, adv_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "while_ohe",
                    "type": "Variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body_ohe",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[iohe, tf.constant(0), adv_map]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_424": {
                "variable": {
                    "value": "icol",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "icol",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_425": {
                "variable": {
                    "value": "iohe",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "iohe",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(iohe, v)",
                            "Call"
                        ],
                        [
                            "tf.add(iohe, iohecat)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "iohecat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_426": {
                "variable": {
                    "value": "icat",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "eq_any_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ],
                        [
                            "is_eq(icol, cat_cols_ord)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.add(icat, 1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : icat",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "constant_446": {
                "variable": {
                    "value": "icol",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_447": {
                "variable": {
                    "value": "iohe",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_448": {
                "variable": {
                    "value": "icat",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorArray_460": {
                "variable": {
                    "value": "adv_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "shape_adv_map[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.shape",
                            "Attribute"
                        ],
                        [
                            "shape",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_469": {
                "variable": {
                    "value": "adv_map_stack",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "adv_map.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_adv_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.shape",
                            "Attribute"
                        ],
                        [
                            "shape",
                            "Name"
                        ]
                    ]
                }
            },
            "name_scope_499": {
                "name": {
                    "value": "shrinkage_thresholding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_509": {
                "name": {
                    "value": "perturbation_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_517": {
                "name": {
                    "value": "update_adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_522": {
                "name": {
                    "value": "update_delta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_528": {
                "name": {
                    "value": "loss_l1_l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_549": {
                "name": {
                    "value": "loss_ae",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_562": {
                "variable": {
                    "value": "self.loss_ae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_563": {
                "variable": {
                    "value": "self.loss_ae_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_565": {
                "name": {
                    "value": "loss_attack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_567": {
                "variable": {
                    "value": "self.loss_attack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_596": {
                "name": {
                    "value": "loss_prototype",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_607": {
                "name": {
                    "value": "loss_combined",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_618": {
                "name": {
                    "value": "training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_240": {
                "x": {
                    "value": "eq_any",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_any(eq)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_259": {
                "x": {
                    "value": "icol",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.add(icol, 1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.minimum(map_cols, tf.shape(adv_to_map)[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_415": {
                "variable": {
                    "value": "i_write",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_ohe_cat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(i_ohe_cat, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_ohe",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_417": {
                "variable": {
                    "value": "i_ohe_cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_ohe_cat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(i_ohe_cat, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_464": {
                "variable": {
                    "value": "(_, _, _, _, adv_map, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond_loop",
                    "type": "Variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body_to_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "loop_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(icol, iohe, icat, adv_to_map, adv_map, shape_adv_map[1])",
                            "Tuple"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_467": {
                "variable": {
                    "value": "(_, _, _, _, adv_map, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond_loop",
                    "type": "Variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body_to_cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "loop_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(icol, iohe, icat, adv_to_map, adv_map, shape_adv_map[1])",
                            "Tuple"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_500": {
                "x": {
                    "value": "tf.greater(tf.subtract(self.adv_s, self.orig), self.beta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_501": {
                "x": {
                    "value": "tf.less_equal(tf.abs(tf.subtract(self.adv_s, self.orig)), self.beta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_502": {
                "x": {
                    "value": "tf.less(tf.subtract(self.adv_s, self.orig), tf.negative(self.beta))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_503": {
                "x": {
                    "value": "self.adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_503": {
                "x": {
                    "value": "feature_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_504": {
                "x": {
                    "value": "self.adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_504": {
                "x": {
                    "value": "feature_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_505": {
                "x": {
                    "value": "cond[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_511": {
                "x": {
                    "value": "self.zt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.assign_adv - self.adv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_513": {
                "x": {
                    "value": "feature_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_514": {
                "x": {
                    "value": "feature_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_529": {
                "x": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_530": {
                "x": {
                    "value": "self.delta_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_531": {
                "x": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_532": {
                "x": {
                    "value": "self.delta_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_533": {
                "x": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_534": {
                "x": {
                    "value": "self.l1_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_573": {
                "variable": {
                    "value": "self.loss_attack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_574": {
                "variable": {
                    "value": "self.loss_attack_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_581": {
                "variable": {
                    "value": "self.target_proba",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.target * self.pred_proba",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_582": {
                "variable": {
                    "value": "target_proba_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.target * self.pred_proba_s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_585": {
                "variable": {
                    "value": "self.nontarget_proba_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - self.target) * self.pred_proba - self.target * 10000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_586": {
                "variable": {
                    "value": "nontarget_proba_max_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - self.target) * self.pred_proba_s - self.target * 10000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_589": {
                "variable": {
                    "value": "loss_attack",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "-self.nontarget_proba_max + self.target_proba + self.kappa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_590": {
                "variable": {
                    "value": "loss_attack_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "-nontarget_proba_max_s + target_proba_s + self.kappa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_593": {
                "variable": {
                    "value": "self.loss_attack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.const * loss_attack",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_594": {
                "variable": {
                    "value": "self.loss_attack_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.const * loss_attack_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_604": {
                "variable": {
                    "value": "self.loss_proto",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_605": {
                "variable": {
                    "value": "self.loss_proto_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_default_graph_648": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_649": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_1160": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_240": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "minimum_259": {
                "x": {
                    "value": "map_cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.shape(adv_to_map)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_406": {
                "tensor": {
                    "value": "adv_to_map[0, icol]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "less_412": {
                "x": {
                    "value": "i_ohe_cat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(i_ohe_cat, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.shape(adv_map_col)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "greater_500": {
                "x": {
                    "value": "tf.subtract(self.adv_s, self.orig)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_equal_501": {
                "x": {
                    "value": "tf.abs(tf.subtract(self.adv_s, self.orig))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_502": {
                "x": {
                    "value": "tf.subtract(self.adv_s, self.orig)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.negative(self.beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_510": {
                "x": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_559": {
                "x": {
                    "value": "tf.norm(self.adv_ae - self.adv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_560": {
                "x": {
                    "value": "tf.norm(self.adv_ae_s - self.adv_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_598": {
                "x": {
                    "value": "tf.norm(self.enc(self.adv_cat) - self.target_proto)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_599": {
                "x": {
                    "value": "tf.norm(self.enc(self.adv_cat_s) - self.target_proto)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_616": {
                "x": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.loss_l1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_297": {
                "x": {
                    "value": "icat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(eq_any_true, lambda : tf.add(icat, 1), lambda : icat)",
                            "Call"
                        ],
                        [
                            "tf.cond(eq_any_true, lambda : tf.add(icat, 1), lambda : icat)",
                            "Call"
                        ],
                        [
                            "tf.cond(eq_any_true, lambda : tf.add(icat, 1), lambda : icat)",
                            "Call"
                        ],
                        [
                            "tf.cond(eq_any_true, lambda : tf.add(icat, 1), lambda : icat)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_332": {
                "x": {
                    "value": "icat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(eq_any_true, lambda : tf.add(icat, 1), lambda : icat)",
                            "Call"
                        ],
                        [
                            "tf.cond(eq_any_true, lambda : tf.add(icat, 1), lambda : icat)",
                            "Call"
                        ],
                        [
                            "tf.cond(eq_any_true, lambda : tf.add(icat, 1), lambda : icat)",
                            "Call"
                        ],
                        [
                            "tf.cond(eq_any_true, lambda : tf.add(icat, 1), lambda : icat)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_359": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_376": {
                "x": {
                    "value": "icat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(eq_any_true, lambda : tf.add(icat, 1), lambda : icat)",
                            "Call"
                        ],
                        [
                            "tf.cond(eq_any_true, lambda : tf.add(icat, 1), lambda : icat)",
                            "Call"
                        ],
                        [
                            "tf.cond(eq_any_true, lambda : tf.add(icat, 1), lambda : icat)",
                            "Call"
                        ],
                        [
                            "tf.cond(eq_any_true, lambda : tf.add(icat, 1), lambda : icat)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_421": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_426": {
                "x": {
                    "value": "icat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(eq_any_true, lambda : tf.add(icat, 1), lambda : icat)",
                            "Call"
                        ],
                        [
                            "tf.cond(eq_any_true, lambda : tf.add(icat, 1), lambda : icat)",
                            "Call"
                        ],
                        [
                            "tf.cond(eq_any_true, lambda : tf.add(icat, 1), lambda : icat)",
                            "Call"
                        ],
                        [
                            "tf.cond(eq_any_true, lambda : tf.add(icat, 1), lambda : icat)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_500": {
                "x": {
                    "value": "self.adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_501": {
                "x": {
                    "value": "tf.subtract(self.adv_s, self.orig)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_502": {
                "x": {
                    "value": "self.adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "negative_502": {
                "x": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_559": {
                "tensor": {
                    "value": "self.adv_ae - self.adv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_560": {
                "tensor": {
                    "value": "self.adv_ae_s - self.adv_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_598": {
                "tensor": {
                    "value": "self.enc(self.adv_cat) - self.target_proto",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_599": {
                "tensor": {
                    "value": "self.enc(self.adv_cat_s) - self.target_proto",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_601": {
                "x": {
                    "value": "tf.norm(self.adv - self.target_proto)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_602": {
                "x": {
                    "value": "tf.norm(self.adv_s - self.target_proto)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_622": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_627": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_259": {
                "input": {
                    "value": "adv_to_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_358": {
                "input": {
                    "value": "self.map_cat_to_num[icat]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_412": {
                "input": {
                    "value": "adv_map_col",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(eq_any_true, true_fn, false_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(eq_any_true, true_fn, false_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(eq_any_true, true_fn, false_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(eq_any_true, true_fn, false_fn)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_501": {
                "x": {
                    "value": "self.adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_601": {
                "tensor": {
                    "value": "self.adv - self.target_proto",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_602": {
                "tensor": {
                    "value": "self.adv_s - self.target_proto",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/explainers/counterfactual.py": {
        "tensorflow": {
            "variables_initializer_268": {
                "variable": {
                    "value": "self.tf_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables(scope='cf_search')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Summary_403": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_188": {
                "variable": {
                    "value": "self.orig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "original",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_189": {
                "variable": {
                    "value": "self.cf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "counterfactual",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "constraint": {
                    "value": "lambda x: tf.clip_by_value(x, feature_range[0], feature_range[1])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "get_variable_193": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.n_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_196": {
                "variable": {
                    "value": "self.target_proba",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "target_proba * np.ones(self.batch_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "target_proba",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_198": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_201": {
                "variable": {
                    "value": "self.lam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lam",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_204": {
                "variable": {
                    "value": "self.assign_orig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "assing_orig",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_205": {
                "variable": {
                    "value": "self.assign_cf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_cf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_206": {
                "variable": {
                    "value": "self.assign_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.n_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "assign_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_254": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_258": {
                "variable": {
                    "value": "self.grad_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "grad_cf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FileWriter_272": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "write_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_185": {
                "name_or_scope": {
                    "value": "cf_search",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_213": {
                "variable": {
                    "value": "self.dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(self.cf - self.orig)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "ax_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(np.arange(1, len(self.data_shape)))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_242": {
                "variable": {
                    "value": "self.loss_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.pred_proba_class - self.target_proba",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "polynomial_decay_248": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.max_iter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_251": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "learning_rate_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_max_231": {
                "variable": {
                    "value": "self.pred_proba_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.target * self.pred_proba",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_268": {
                "scope": {
                    "value": "cf_search",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_graph_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_213": {
                "x": {
                    "value": "self.cf - self.orig",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_233": {
                "variable": {
                    "value": "self.pred_proba_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - self.target) * self.pred_proba",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_191": {
                "t": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "feature_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "feature_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_max_236": {
                "variable": {
                    "value": "self.pred_proba_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.one_hot(target_class, self.n_classes, dtype=tf.float32) * self.pred_proba",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_236": {
                "indices": {
                    "value": "target_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_class",
                            "Name"
                        ],
                        [
                            "sorted[0, 1]",
                            "Subscript"
                        ],
                        [
                            "sorted[0, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/explainers/integrated_gradients.py": {
        "tensorflow": {
            "concat_358": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "batches[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_368": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tape.gradient(preds, x)",
                            "Call"
                        ],
                        [
                            "tape.gradient(preds, layer.result)",
                            "Call"
                        ],
                        [
                            "tf.concat(batches[j], 0)",
                            "Call"
                        ],
                        [
                            "np.array([s * g for (s, g) in zip(sign, grads)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(grads, (n_steps, nb_samples) + shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(n_steps, nb_samples) + shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_85": {
                "variable": {
                    "value": "target_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[target for _ in range(nb_samples)]",
                            "ListComp"
                        ],
                        [
                            "[t.astype(int) for t in target]",
                            "ListComp"
                        ],
                        [
                            "_format_target(target, nb_samples)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "start_out.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "target_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "1 - target_tensor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(target), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_257": {
                "variable": {
                    "value": "step_sizes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "step_sizes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(step_sizes)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_259": {
                "variable": {
                    "value": "sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "einstr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'a,a{}->{}'.format(input_str, input_str)",
                            "Call"
                        ],
                        [
                            "'a,a{}->{}'.format(input_str, input_str)",
                            "Call"
                        ]
                    ]
                },
                "*inputs": {
                    "value": "step_sizes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(step_sizes)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tape.gradient(preds, x)",
                            "Call"
                        ],
                        [
                            "tape.gradient(preds, layer.result)",
                            "Call"
                        ],
                        [
                            "tf.concat(batches[j], 0)",
                            "Call"
                        ],
                        [
                            "np.array([s * g for (s, g) in zip(sign, grads)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(grads, (n_steps, nb_samples) + shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_67": {
                "value": {
                    "value": "start_point[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_dtypes[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_68": {
                "value": {
                    "value": "end_point[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_dtypes[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_74": {
                "variable": {
                    "value": "sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "'a{}->a'.format(input_str)",
                    "type": "Call",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GradientTape_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_533": {
                "variable": {
                    "value": "paths_ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.internal_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_537": {
                "variable": {
                    "value": "paths_ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.internal_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_part_129": {
                "variable": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(ps, ts, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Model_577": {
                "variable": {
                    "value": "model_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.model.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "outputs": {
                    "value": "layer_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.layer[j].output",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_551": {
                "x": {
                    "value": "paths_b[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.input_dtypes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_129": {
                "params": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.linalg.diag_part(tf.gather(ps, ts, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "ts",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/explainers/tests/test_cfproto.py": {
        "tensorflow": {
            "clear_session_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clear_session_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/explainers/tests/test_integrated_gradients.py": {
        "tensorflow": {
            "to_categorical_31": {
                "variable": {
                    "value": "y_classification_categorical",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_classification_ordinal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(X[:, 0] + X[:, 1] > 1).astype(int)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_48": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "config['X_train'].shape[1:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "request.param",
                            "Attribute"
                        ],
                        [
                            "request.param",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Model_53": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=config['X_train'].shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(config['output_dim'], activation=config['activation'])(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Reshape(())(outputs)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(config['output_dim'], activation=config['activation'])(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Reshape(())(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_68": {
                "variable": {
                    "value": "input0",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "config['X_train_multi_inputs'][0].shape[1:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "request.param",
                            "Attribute"
                        ],
                        [
                            "request.param",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Input_69": {
                "variable": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "config['X_train_multi_inputs'][1].shape[1:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "request.param",
                            "Attribute"
                        ],
                        [
                            "request.param",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Model_78": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[input0, input1]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(config['output_dim'], activation=config['activation'])(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Reshape(())(outputs)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(config['output_dim'], activation=config['activation'])(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Reshape(())(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_49": {
                "units": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_50": {
                "units": {
                    "value": "config['output_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "config['activation']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "request.param",
                            "Attribute"
                        ],
                        [
                            "request.param",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Flatten_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_74": {
                "units": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_75": {
                "units": {
                    "value": "config['output_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "config['activation']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "request.param",
                            "Attribute"
                        ],
                        [
                            "request.param",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Reshape_52": {
                "target_shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Reshape_77": {
                "target_shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/utils/tests/test_utils.py": {
        "tensorflow": {
            "Model_11": {
                "variable": {
                    "value": "tf_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alibi/alibi/utils/tf.py": {
        "tensorflow": {
            "get_session_26": {
                "variable": {
                    "value": "tfsess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_66": {
                "variable": {
                    "value": "abs_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(x, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_67": {
                "variable": {
                    "value": "argmin",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmin(abs_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_78": {
                "variable": {
                    "value": "cat_ohe",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(x, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "tf.shape(y)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_89": {
                "variable": {
                    "value": "argmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_100": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_session_37": {
                "variable": {
                    "value": "ksess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_session_60": {
                "variable": {
                    "value": "tfsess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "subtract_66": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmin_67": {
                "input": {
                    "value": "abs_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.abs(tf.subtract(x, y))",
                            "Call"
                        ]
                    ]
                }
            },
            "round_100": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_78": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_82": {
                "input_tensor": {
                    "value": "dy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_93": {
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_78": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_93": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dice_explainer.py": {
        "tensorflow": {
            "InteractiveSession_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DiCE/dice_ml/explainer_interfaces/dice_pytorch.py": {
        "torch": {
            "rand_46": {
                "variable": {
                    "value": "temp_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(self.data_interface.encoded_feature_names)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_180": {
                "variable": {
                    "value": "self.yloss_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_236": {
                "variable": {
                    "value": "det_entries",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.total_CFs, self.total_CFs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "det_251": {
                "variable": {
                    "value": "diversity_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_entries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones((self.total_CFs, self.total_CFs))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_384": {
                "variable": {
                    "value": "self.x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "query_instance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data_interface.prepare_query_instance(query_instance=query_instance, encode=True)",
                            "Call"
                        ],
                        [
                            "query_instance.iloc[0].values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_390": {
                "variable": {
                    "value": "self.target_cf_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "desired_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 - round(test_pred)",
                            "BinOp"
                        ],
                        [
                            "'opposite'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "input_instance",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_instance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(input_instance).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "self.feature_weights_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "feature_weights_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Adam_197": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.cfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_225": {
                "input": {
                    "value": "torch.mul(torch.abs(x_hat - x1), self.feature_weights_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_121": {
                "obj": {
                    "value": "input_instance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(input_instance).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_199": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.cfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mul_225": {
                "input": {
                    "value": "torch.abs(x_hat - x1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.feature_weights_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_232": {
                "input": {
                    "value": "len(self.minx[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.total_CFs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_257": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_208": {
                "variable": {
                    "value": "temp_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "abs(self.get_model_output(self.cfs[i]) - 1e-06) / (1 - abs(self.get_model_output(self.cfs[i]) - 1e-06))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_209": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_225": {
                "input": {
                    "value": "x_hat - x1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_278": {
                "input": {
                    "value": "torch.sum(self.cfs[i][v[0]:v[-1] + 1]) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_387": {
                "data": {
                    "value": "query_instance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data_interface.prepare_query_instance(query_instance=query_instance, encode=True)",
                            "Call"
                        ],
                        [
                            "query_instance.iloc[0].values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_150": {
                "data": {
                    "value": "one_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "pow_206": {
                "input": {
                    "value": "self.get_model_output(self.cfs[i]) - self.target_cf_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_212": {
                "variable": {
                    "value": "temp_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "abs(self.get_model_output(self.cfs[i]) - 1e-06) / (1 - abs(self.get_model_output(self.cfs[i]) - 1e-06))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_213": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_214": {
                "variable": {
                    "value": "all_ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.target_cf_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_217": {
                "variable": {
                    "value": "temp_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "criterion(temp_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_458": {
                "variable": {
                    "value": "self.cfs[ix].data[jx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cfs[ix][jx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "self.minx[0][jx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "self.maxx[0][jx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "data": {
                    "value": "[self.target_cf_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_278": {
                "input": {
                    "value": "self.cfs[i][v[0]:v[-1] + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_334": {
                "data": {
                    "value": "temp_cfs[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_216": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * self.target_cf_class - all_ones",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "temp_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(abs(self.get_model_output(self.cfs[i]) - 1e-06) / (1 - abs(self.get_model_output(self.cfs[i]) - 1e-06)))",
                            "Call"
                        ],
                        [
                            "torch.log(abs(self.get_model_output(self.cfs[i]) - 1e-06) / (1 - abs(self.get_model_output(self.cfs[i]) - 1e-06)))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_247": {
                "input": {
                    "value": "self.compute_dist(self.cfs[i], self.cfs[j])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DiCE/dice_ml/explainer_interfaces/feasible_base_vae.py": {
        "torch": {
            "zeros_81": {
                "variable": {
                    "value": "validity_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "hinge_embedding_loss_84": {
                "input": {
                    "value": "F.sigmoid(temp_1[:, 1]) - F.sigmoid(temp_1[:, 0])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.tensor(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "margin": {
                    "value": "self.margin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "hinge_embedding_loss_85": {
                "input": {
                    "value": "F.sigmoid(temp_0[:, 0]) - F.sigmoid(temp_0[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.tensor(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "margin": {
                    "value": "self.margin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vae_train_feat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_138": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(self.vae_train_feat).float()",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(train_dataset, batch_size=self.batch_size, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "train_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "enumerate(train_dataset)",
                            "Call"
                        ],
                        [
                            "train_x[1]",
                            "Subscript"
                        ],
                        [
                            "test_dataset[i]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(train_x).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_185": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred_model(train_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_64": {
                "input": {
                    "value": "em ** 2 + ev - torch.log(ev) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_70": {
                "input": {
                    "value": "torch.abs(x[:, s:-1] - x_pred[:, s:-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "hinge_embedding_loss_103": {
                "input": {
                    "value": "F.sigmoid(temp_1[:, 1]) - F.sigmoid(temp_1[:, 0])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.tensor(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "margin": {
                    "value": "self.margin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "hinge_embedding_loss_104": {
                "input": {
                    "value": "F.sigmoid(temp_0[:, 0]) - F.sigmoid(temp_0[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.tensor(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "margin": {
                    "value": "self.margin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_109": {
                "input": {
                    "value": "recon_err",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-torch.sum(torch.abs(x[:, s:-1] - x_pred[:, s:-1]), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "recon_err + temp",
                            "BinOp"
                        ],
                        [
                            "recon_err / mc_samples",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_165": {
                "f": {
                    "value": "self.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_70": {
                "input": {
                    "value": "x[:, s:-1] - x_pred[:, s:-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_72": {
                "input": {
                    "value": "x[:, key] - x_pred[:, key]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_76": {
                "input": {
                    "value": "1.0 - torch.sum(x_pred[:, v[0]:v[-1] + 1], axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_84": {
                "input": {
                    "value": "temp_1[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_85": {
                "input": {
                    "value": "temp_0[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_90": {
                "input": {
                    "value": "torch.abs(x[:, s:-1] - x_pred[:, s:-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_110": {
                "input": {
                    "value": "recon_err - kl_divergence",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_119": {
                "f": {
                    "value": "self.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "self.cf_vae.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_90": {
                "input": {
                    "value": "x[:, s:-1] - x_pred[:, s:-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_92": {
                "input": {
                    "value": "x[:, key] - x_pred[:, key]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_96": {
                "input": {
                    "value": "1.0 - torch.sum(x_pred[:, v[0]:v[-1] + 1], axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_103": {
                "input": {
                    "value": "temp_1[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_104": {
                "input": {
                    "value": "temp_0[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_143": {
                "input": {
                    "value": "self.pred_model(train_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_64": {
                "input": {
                    "value": "ev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_out['ev']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_76": {
                "input": {
                    "value": "x_pred[:, v[0]:v[-1] + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_96": {
                "input": {
                    "value": "x_pred[:, v[0]:v[-1] + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DiCE/dice_ml/explainer_interfaces/feasible_model_approx.py": {
        "torch": {
            "tensor_90": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vae_train_feat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(self.vae_train_feat).float()",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(train_dataset, batch_size=self.batch_size, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_72": {
                "f": {
                    "value": "self.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_137": {
                "obj": {
                    "value": "self.cf_vae.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_96": {
                "input": {
                    "value": "self.pred_model(train_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "hinge_embedding_loss_112": {
                "variable": {
                    "value": "constraint_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "constraint_direction * (x_pred[:, const_idx] - train_x[:, const_idx])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.tensor(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "margin": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "hinge_embedding_loss_116": {
                "input": {
                    "value": "constraint_direction * (x_pred[:, const_idx] - train_x[:, const_idx])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.tensor(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "margin": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_121": {
                "input": {
                    "value": "constraint_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.hinge_embedding_loss(constraint_direction * (x_pred[:, const_idx] - train_x[:, const_idx]), torch.tensor(-1), 0)",
                            "Call"
                        ],
                        [
                            "constraint_loss + F.hinge_embedding_loss(constraint_direction * (x_pred[:, const_idx] - train_x[:, const_idx]), torch.tensor(-1), 0)",
                            "BinOp"
                        ],
                        [
                            "constraint_loss / mc_samples",
                            "BinOp"
                        ],
                        [
                            "constraint_reg * constraint_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_116": {
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "DiCE/dice_ml/model_interfaces/pytorch_model.py": {
        "torch": {
            "tensor_34": {
                "variable": {
                    "value": "temp_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[np.random.uniform([inp_size])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_21": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DiCE/dice_ml/utils/helpers.py": {
        "torch": {
            "Adam_119": {
                "variable": {
                    "value": "cf_vae_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': filter(lambda p: p.requires_grad, cf_vae.encoder_mean.parameters()), 'weight_decay': wm1}, {'params': filter(lambda p: p.requires_grad, cf_vae.encoder_var.parameters()), 'weight_decay': wm2}, {'params': filter(lambda p: p.requires_grad, cf_vae.decoder_mean.parameters()), 'weight_decay': wm3}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "DiCE/dice_ml/utils/sample_architecture/vae_model.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.encoder_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.data_size + 1, 20)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.encoder_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.data_size + 1, 20)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.decoder_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.encoded_size + 1, 12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_97": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5 + self.encoder_var(x)",
                            "BinOp"
                        ],
                        [
                            "0.05 + self.encoder_var(x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c.view(c.shape[0], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(c).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(c).float()",
                            "Call"
                        ],
                        [
                            "c.view(c.shape[0], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c.view(c.shape[0], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(c).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(c).float()",
                            "Call"
                        ],
                        [
                            "c.view(c.shape[0], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "log_px_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.encoder_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.data_size, 20)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.encoder_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.data_size, 20)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.decoder_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.encoded_size, 12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_228": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5 + self.encoder_var(x)",
                            "BinOp"
                        ],
                        [
                            "0.05 + self.encoder_var(x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_101": {
                "input": {
                    "value": "-0.5 * ((x - mean) * (1.0 / logvar) * (x - mean) + torch.log(logvar))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_232": {
                "input": {
                    "value": "-0.5 * ((x - mean) * (1.0 / logvar) * (x - mean) + torch.log(logvar))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "self.data_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_26": {
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_30": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_34": {
                "num_features": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_38": {
                "num_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.encoded_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "self.data_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_46": {
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_47": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_50": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_51": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_54": {
                "num_features": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_58": {
                "num_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.encoded_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "self.encoded_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_68": {
                "num_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_69": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_72": {
                "num_features": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_73": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_76": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_77": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_79": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_80": {
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.data_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_108": {
                "tensors": {
                    "value": "(x, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_125": {
                "tensors": {
                    "value": "(x, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_126": {
                "input": {
                    "value": "em ** 2 + ev - torch.log(ev) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "(z, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_133": {
                "input": {
                    "value": "kl_divergence",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5 * torch.mean(em ** 2 + ev - torch.log(ev) - 1, axis=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_133": {
                "input": {
                    "value": "pred_model(x_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "in_features": {
                    "value": "self.data_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_158": {
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_159": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_161": {
                "in_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_162": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_163": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_165": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_166": {
                "num_features": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_167": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_169": {
                "in_features": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_170": {
                "num_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_171": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_173": {
                "in_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.encoded_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "in_features": {
                    "value": "self.data_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_178": {
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_179": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_181": {
                "in_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_182": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_183": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_185": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_186": {
                "num_features": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_187": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_189": {
                "in_features": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_190": {
                "num_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_191": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_193": {
                "in_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.encoded_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_198": {
                "in_features": {
                    "value": "self.encoded_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_199": {
                "num_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_200": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_202": {
                "in_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_203": {
                "num_features": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_204": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_206": {
                "in_features": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_207": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_208": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_210": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_211": {
                "num_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_212": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_214": {
                "in_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.data_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_98": {
                "input": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5 + self.encoder_var(x)",
                            "BinOp"
                        ],
                        [
                            "0.05 + self.encoder_var(x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_116": {
                "tensors": {
                    "value": "(z, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_229": {
                "input": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5 + self.encoder_var(x)",
                            "BinOp"
                        ],
                        [
                            "0.05 + self.encoder_var(x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_101": {
                "input": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5 + self.encoder_var(x)",
                            "BinOp"
                        ],
                        [
                            "0.05 + self.encoder_var(x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_232": {
                "input": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5 + self.encoder_var(x)",
                            "BinOp"
                        ],
                        [
                            "0.05 + self.encoder_var(x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_126": {
                "input": {
                    "value": "ev",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}