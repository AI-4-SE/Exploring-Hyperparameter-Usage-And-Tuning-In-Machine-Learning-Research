{
    "MAML_MN_FT/backbone.py": {
        "sklearn": {
            "KMeans_403": {
                "variable": {
                    "value": "kmeans",
                    "type": "Name",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KMeans_415": {
                "variable": {
                    "value": "kmeans",
                    "type": "Name",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PCA_539": {
                "variable": {
                    "value": "pca_model",
                    "type": "Name",
                    "possible_values": []
                },
                "n_components": {
                    "value": "pca_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PCA_566": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "n_components": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "KMeans_552": {
                "variable": {
                    "value": "kmeans_model",
                    "type": "Name",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "Name",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "norm_33": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_33": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "query_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "query.shape[0]",
                            "Subscript"
                        ],
                        [
                            "query.shape[0]",
                            "Subscript"
                        ],
                        [
                            "query_x[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "query_x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "query[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "query.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_81": {
                "variable": {
                    "value": "softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "query_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "query.shape[0]",
                            "Subscript"
                        ],
                        [
                            "query.shape[0]",
                            "Subscript"
                        ],
                        [
                            "query_x[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "query_x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "query[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "query.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_109": {
                "variable": {
                    "value": "softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_134": {
                "variable": {
                    "value": "sigmoid",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_classifiers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "query_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "query.shape[0]",
                            "Subscript"
                        ],
                        [
                            "query.shape[0]",
                            "Subscript"
                        ],
                        [
                            "query_x[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "query_x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "query[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "query.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_194": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_classifiers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "query_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "query.shape[0]",
                            "Subscript"
                        ],
                        [
                            "query.shape[0]",
                            "Subscript"
                        ],
                        [
                            "query_x[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "query_x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "query[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "query.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_224": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "layers",
                    "type": "Name",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_255": {
                "variable": {
                    "value": "self.lstm_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_like_266": {
                "variable": {
                    "value": "h_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "queries",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_267": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "queries.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X.shape[0]",
                            "Subscript"
                        ],
                        [
                            "A.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "queries.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Softmax_295": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_315": {
                "variable": {
                    "value": "resp",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "X.shape[0]",
                            "Subscript"
                        ],
                        [
                            "features.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_338": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_340": {
                "variable": {
                    "value": "self.x_clfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.create_clf(loss_type, x_feat_dim, n_way).cuda() for i in range(n_clf)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_341": {
                "variable": {
                    "value": "self.d_clfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.create_clf(loss_type, d_feat_dim, n_way).cuda() for i in range(n_clf)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sigmoid_344": {
                "variable": {
                    "value": "sigmoid",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_364": {
                "variable": {
                    "value": "resp",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "X.shape[0]",
                            "Subscript"
                        ],
                        [
                            "features.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_396": {
                "variable": {
                    "value": "kernel_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weights.unsqueeze(2).expand(-1, -1, self.n_way)",
                            "Call"
                        ],
                        [
                            "weights.unsqueeze(2).expand(-1, -1, self.n_way)",
                            "Call"
                        ],
                        [
                            "list(self.pretrain.model.parameters())[30]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_397": {
                "variable": {
                    "value": "kernel_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(weights, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(kernel_features, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.mean(weights, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(kernel_features, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_419": {
                "variable": {
                    "value": "kernel_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weights.unsqueeze(2).expand(-1, -1, self.n_way)",
                            "Call"
                        ],
                        [
                            "weights.unsqueeze(2).expand(-1, -1, self.n_way)",
                            "Call"
                        ],
                        [
                            "list(self.pretrain.model.parameters())[30]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_420": {
                "variable": {
                    "value": "kernel_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(weights, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(kernel_features, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.mean(weights, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(kernel_features, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_436": {
                "variable": {
                    "value": "new_output",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "desired_output.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_619": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_way, feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_639": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "L.kernel_size[0] * L.kernel_size[1] * L.out_channels",
                            "BinOp"
                        ],
                        [
                            "X.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_654": {
                "variable": {
                    "value": "softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_656": {
                "variable": {
                    "value": "probability",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softmax(scores)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_748": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_771": {
                "variable": {
                    "value": "cat_resp",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(A.view(batch_size, self.n_way, 1), B.view(batch_size, self.n_way, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_876": {
                "variable": {
                    "value": "sigmoid",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_878": {
                "variable": {
                    "value": "product",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "sig_results[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "sig_results[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_879": {
                "variable": {
                    "value": "log",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "product",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mul(sig_results[:, :, 0], sig_results[:, :, 1])",
                            "Call"
                        ],
                        [
                            "torch.mul(sig_results[:, :, 0], sig_results[:, :, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_879": {
                "variable": {
                    "value": "log",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_888": {
                "variable": {
                    "value": "sigmoid",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_890": {
                "variable": {
                    "value": "product",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "sig_results[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "sig_results[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_892": {
                "variable": {
                    "value": "log",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "product / (1 + product)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "permute_892": {
                "variable": {
                    "value": "log",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_901": {
                "variable": {
                    "value": "sigmoid",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_903": {
                "variable": {
                    "value": "log",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "sig_results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sigmoid(permuted)",
                            "Call"
                        ],
                        [
                            "sigmoid(permuted)",
                            "Call"
                        ],
                        [
                            "sigmoid(permuted[:, :, 0] + permuted[:, :, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_903": {
                "variable": {
                    "value": "log",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_909": {
                "variable": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_920": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_920": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_979": {
                "variable": {
                    "value": "running_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.data.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_980": {
                "variable": {
                    "value": "running_var",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.data.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_1001": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_1011": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.parametrized_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_1035": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_1036": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_1096": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1147": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trunk",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1164": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trunk",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1184": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trunk",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1202": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trunk",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_1226": {
                "variable": {
                    "value": "relu",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_1227": {
                "variable": {
                    "value": "pool1",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_1252": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trunk",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_53": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "k1_safe * torch.log(k1_safe / k2_safe)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * norm * norm / 10",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_93": {
                "variable": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "processed_query - centroids",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_94": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-dist * dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_275": {
                "variable": {
                    "value": "attentions",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_hat + queries",
                            "BinOp"
                        ],
                        [
                            "h_hat + queries",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "support.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_279": {
                "variable": {
                    "value": "readout",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attentions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(h, support.t())",
                            "Call"
                        ],
                        [
                            "attentions.softmax(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "support",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ModuleList_299": {
                "variable": {
                    "value": "self.clfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.create_clf(loss_type, shapes[i], n_way).cuda() for i in range(n_clf)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_301": {
                "variable": {
                    "value": "self.clfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.create_clf(loss_type, feat_dim, n_way).cuda() for i in range(n_clf)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_320": {
                "variable": {
                    "value": "log_proba",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.softmax(resp)",
                            "Call"
                        ],
                        [
                            "self.softmax(resp)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_325": {
                "variable": {
                    "value": "log_proba",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_proba",
                    "type": "Name",
                    "possible_values": [
                        [
                            "proba.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "proba.mean(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_374": {
                "variable": {
                    "value": "log_proba",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.softmax(resp)",
                            "Call"
                        ],
                        [
                            "self.softmax(resp)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_379": {
                "variable": {
                    "value": "log_proba",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_proba",
                    "type": "Name",
                    "possible_values": [
                        [
                            "proba.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "proba.mean(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_621": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_way, feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_696": {
                "variable": {
                    "value": "clf",
                    "type": "Name",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_725": {
                "variable": {
                    "value": "cat_resp",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(main_clf_resp.view(batch_size, self.n_way, 1), branch_clf_resp.view(batch_size, self.n_way, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_743": {
                "variable": {
                    "value": "self.d_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_753": {
                "variable": {
                    "value": "clf",
                    "type": "Name",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_766": {
                "variable": {
                    "value": "fn",
                    "type": "Name",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_817": {
                "variable": {
                    "value": "self.transform_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_818": {
                "variable": {
                    "value": "self.transform_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_842": {
                "variable": {
                    "value": "clf",
                    "type": "Name",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_923": {
                "variable": {
                    "value": "L_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.L.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_923": {
                "variable": {
                    "value": "L_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linear_946": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.fast",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_norm_982": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(x.data.size()[1]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(x.data.size()[1]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_norm_985": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(x.data.size()[1]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(x.data.size()[1]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_999": {
                "variable": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_1000": {
                "variable": {
                    "value": "self.BN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "MaxPool2d_1005": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_1031": {
                "variable": {
                    "value": "self.C1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2 if half_res else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_1032": {
                "variable": {
                    "value": "self.BN1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_1033": {
                "variable": {
                    "value": "self.C2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_1034": {
                "variable": {
                    "value": "self.BN2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_1089": {
                "variable": {
                    "value": "self.C1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_1090": {
                "variable": {
                    "value": "self.BN1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_1091": {
                "variable": {
                    "value": "self.C2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2 if half_res else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_1092": {
                "variable": {
                    "value": "self.BN2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_1093": {
                "variable": {
                    "value": "self.C3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_1094": {
                "variable": {
                    "value": "self.BN3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_1222": {
                "variable": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_1224": {
                "variable": {
                    "value": "bn1",
                    "type": "Name",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_1245": {
                "variable": {
                    "value": "avgpool",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_52": {
                "input": {
                    "value": "k1_safe / k2_safe",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_67": {
                "variable": {
                    "value": "softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_97": {
                "variable": {
                    "value": "n2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "centroids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.centroids",
                            "Attribute"
                        ],
                        [
                            "centroids.unsqueeze(0).expand(query_size, self.n_way, self.feat_dim)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_98": {
                "variable": {
                    "value": "n1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "processed_query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.preprocess(query).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "query.unsqueeze(1).expand(query_size, self.n_way, self.feat_dim)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_305": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_357": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ones_like_368": {
                "variable": {
                    "value": "x_logit",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "d_logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.d_clfs[i](D[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_623": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_712": {
                "tensors": {
                    "value": "feature_array",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_849": {
                "tensors": {
                    "value": "feature_array",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_961": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_966": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_1048": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2 if half_res else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_1049": {
                "variable": {
                    "value": "self.BNshortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_1106": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2 if half_res else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_138": {
                "input": {
                    "value": "sigmoid(p1) * sigmoid(p2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_348": {
                "input": {
                    "value": "sigmoid(p1) * sigmoid(p2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_105": {
                "variable": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "processed_query - centroids",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_140": {
                "input": {
                    "value": "sigmoid(p1 + p2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_156": {
                "*size": {
                    "value": "d_scores.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_350": {
                "input": {
                    "value": "sigmoid(p1 + p2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_143": {
                "input": {
                    "value": "p / (1 + p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_353": {
                "input": {
                    "value": "p / (1 + p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_108": {
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(query_size, self.n_way).cuda()",
                            "Call"
                        ],
                        [
                            "softmax(scores)",
                            "Call"
                        ],
                        [
                            "torch.zeros(query_size, self.n_way).cuda()",
                            "Call"
                        ],
                        [
                            "torch.exp(-dist * dist)",
                            "Call"
                        ],
                        [
                            "softmax(scores)",
                            "Call"
                        ],
                        [
                            "dist",
                            "Name"
                        ],
                        [
                            "-dist * dist / temp",
                            "BinOp"
                        ],
                        [
                            "scores / torch.norm(scores, p=2, dim=1).unsqueeze(1).expand(-1, self.n_way)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(self.n_classifiers, query_size, self.n_way).cuda()",
                            "Call"
                        ],
                        [
                            "scores.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.n_classifiers, query_size, self.n_way).cuda()",
                            "Call"
                        ],
                        [
                            "scores.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "sum_log_proba",
                            "Name"
                        ],
                        [
                            "log_proba",
                            "Name"
                        ],
                        [
                            "sum_log_proba",
                            "Name"
                        ],
                        [
                            "log_proba",
                            "Name"
                        ],
                        [
                            "torch.zeros(n, self.n_way, self.feat_dim).cuda()",
                            "Call"
                        ],
                        [
                            "scores",
                            "Name"
                        ],
                        [
                            "self.fusion_fn(cat_resp).view(actual_batch_size, self.n_way)",
                            "Call"
                        ],
                        [
                            "x_resp + d_resp",
                            "BinOp"
                        ],
                        [
                            "self.scale_factor * cos_dist",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_108": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "MAML_MN_FT/methods/PretrainedModel.py": {
        "sklearn": {
            "KMeans_438": {
                "variable": {
                    "value": "kmeans_model",
                    "type": "Name",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PCA_434": {
                "variable": {
                    "value": "pca_model",
                    "type": "Name",
                    "possible_values": []
                },
                "n_components": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "load_116": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(configs.simple_shot_dir, 'miniImagenet', model_name, 'model_best.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.simple_shot_dir, 'tiered', model_name, 'model_best.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.feat_dir, 'miniImagenet', model_name + '_pre.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.sib_dir, 'miniImagenet', model_name + '_best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_143": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(configs.simple_shot_dir, 'miniImagenet', model_name, 'model_best.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.simple_shot_dir, 'tiered', model_name, 'model_best.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.feat_dir, 'miniImagenet', model_name + '_pre.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.sib_dir, 'miniImagenet', model_name + '_best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_163": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(configs.simple_shot_dir, 'miniImagenet', model_name, 'model_best.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.simple_shot_dir, 'tiered', model_name, 'model_best.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.feat_dir, 'miniImagenet', model_name + '_pre.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.sib_dir, 'miniImagenet', model_name + '_best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_192": {
                "variable": {
                    "value": "softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_215": {
                "variable": {
                    "value": "self.clfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_dim, out_dim) for i in range(n_clf)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_230": {
                "variable": {
                    "value": "self.clfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_dim, out_dim) for i in range(n_clf)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_241": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_243": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.clfs.parameters()",
                            "Call"
                        ],
                        [
                            "self.params",
                            "Attribute"
                        ],
                        [
                            "self.params",
                            "Attribute"
                        ]
                    ]
                }
            },
            "norm_351": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(x.cuda())",
                            "Call"
                        ],
                        [
                            "Variable(x.cuda())",
                            "Call"
                        ],
                        [
                            "Variable(x.cuda())",
                            "Call"
                        ],
                        [
                            "Variable(x.cuda())",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_351": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_445": {
                "variable": {
                    "value": "self.new_cluster_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_clusters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_446": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.model.forward_feature(x)",
                            "Call"
                        ],
                        [
                            "self.model.feature(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.load(features_dir)",
                            "Call"
                        ],
                        [
                            "np.zeros((self.num_classes, self.feat_dim))",
                            "Call"
                        ],
                        [
                            "features_pt.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features).cuda()",
                            "Call"
                        ],
                        [
                            "np.load(save_dir)",
                            "Call"
                        ],
                        [
                            "self._calc_pretrained_class_mean(normalize=normalize)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_62": {
                "variable": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "modelfile",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_assigned_file(checkpoint_dir, params.save_iter)",
                            "Call"
                        ],
                        [
                            "get_best_file(checkpoint_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_73": {
                "variable": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "modelfile",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_assigned_file(checkpoint_dir, params.save_iter)",
                            "Call"
                        ],
                        [
                            "get_best_file(checkpoint_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_220": {
                "variable": {
                    "value": "saved_states",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "outfile",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, '%d.tar' % 22)",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, '%d.tar' % epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_409": {
                "variable": {
                    "value": "features_pt",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.model.forward_feature(x)",
                            "Call"
                        ],
                        [
                            "self.model.feature(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.load(features_dir)",
                            "Call"
                        ],
                        [
                            "np.zeros((self.num_classes, self.feat_dim))",
                            "Call"
                        ],
                        [
                            "features_pt.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features).cuda()",
                            "Call"
                        ],
                        [
                            "np.load(save_dir)",
                            "Call"
                        ],
                        [
                            "self._calc_pretrained_class_mean(normalize=normalize)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_169": {
                "f": {
                    "value": "clf_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(configs.sib_dir, 'miniImagenet', model_name + '_best_clf.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_266": {
                "obj": {
                    "value": "self.clfs.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "outfile",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, '%d.tar' % 22)",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, '%d.tar' % epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_215": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.feat_dim / n_clf)",
                            "Call"
                        ],
                        [
                            "int(self.feat_dim / n_clf)",
                            "Call"
                        ],
                        [
                            "int(self.feat_dim / n_clf)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.num_classes",
                            "Attribute"
                        ],
                        [
                            "self.num_classes",
                            "Attribute"
                        ],
                        [
                            "self.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_230": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.feat_dim / n_clf)",
                            "Call"
                        ],
                        [
                            "int(self.feat_dim / n_clf)",
                            "Call"
                        ],
                        [
                            "int(self.feat_dim / n_clf)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.num_classes",
                            "Attribute"
                        ],
                        [
                            "self.num_classes",
                            "Attribute"
                        ],
                        [
                            "self.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "SIB/PretrainedModel.py": {
        "sklearn": {
            "KMeans_344": {
                "variable": {
                    "value": "kmeans_model",
                    "type": "Name",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PCA_340": {
                "variable": {
                    "value": "pca_model",
                    "type": "Name",
                    "possible_values": []
                },
                "n_components": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "load_61": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(configs.simple_shot_dir, 'miniImagenet', model_name, 'model_best.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.simple_shot_dir, 'tiered', model_name, 'model_best.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.clfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_dim, out_dim) for i in range(n_clf)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "load_143": {
                "variable": {
                    "value": "saved_states",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "outfile",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, '%d.tar' % 22)",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, '%d.tar' % idx)",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, '%d.tar' % epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_151": {
                "variable": {
                    "value": "self.clfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_dim, out_dim) for i in range(n_clf)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_161": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_163": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.clfs.parameters()",
                            "Call"
                        ],
                        [
                            "self.params",
                            "Attribute"
                        ],
                        [
                            "self.params",
                            "Attribute"
                        ]
                    ]
                }
            },
            "norm_270": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(x.cuda())",
                            "Call"
                        ],
                        [
                            "Variable(x.cuda())",
                            "Call"
                        ],
                        [
                            "Variable(x.cuda())",
                            "Call"
                        ],
                        [
                            "Variable(x.cuda())",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_270": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_351": {
                "variable": {
                    "value": "self.new_cluster_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_clusters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_352": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.model.forward_feature(x)",
                            "Call"
                        ],
                        [
                            "self.netFeat(x)",
                            "Call"
                        ],
                        [
                            "self.model.feature(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.load(features_dir)",
                            "Call"
                        ],
                        [
                            "np.zeros((self.num_classes, self.feat_dim))",
                            "Call"
                        ],
                        [
                            "features_pt.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features).cuda()",
                            "Call"
                        ],
                        [
                            "np.load(save_dir)",
                            "Call"
                        ],
                        [
                            "self._calc_pretrained_class_mean(normalize=normalize)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_102": {
                "variable": {
                    "value": "softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_130": {
                "variable": {
                    "value": "saved_states",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "outfile",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, '%d.tar' % 22)",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, '%d.tar' % idx)",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, '%d.tar' % epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_315": {
                "variable": {
                    "value": "features_pt",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "self.model.forward_feature(x)",
                            "Call"
                        ],
                        [
                            "self.netFeat(x)",
                            "Call"
                        ],
                        [
                            "self.model.feature(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.load(features_dir)",
                            "Call"
                        ],
                        [
                            "np.zeros((self.num_classes, self.feat_dim))",
                            "Call"
                        ],
                        [
                            "features_pt.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features).cuda()",
                            "Call"
                        ],
                        [
                            "np.load(save_dir)",
                            "Call"
                        ],
                        [
                            "self._calc_pretrained_class_mean(normalize=normalize)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "self.clfs.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "outfile",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, '%d.tar' % 22)",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, '%d.tar' % idx)",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, '%d.tar' % epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.feat_dim / n_clf)",
                            "Call"
                        ],
                        [
                            "int(self.feat_dim / n_clf)",
                            "Call"
                        ],
                        [
                            "int(self.feat_dim / n_clf)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.num_classes",
                            "Attribute"
                        ],
                        [
                            "self.num_classes",
                            "Attribute"
                        ],
                        [
                            "self.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_151": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.feat_dim / n_clf)",
                            "Call"
                        ],
                        [
                            "int(self.feat_dim / n_clf)",
                            "Call"
                        ],
                        [
                            "int(self.feat_dim / n_clf)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.num_classes",
                            "Attribute"
                        ],
                        [
                            "self.num_classes",
                            "Attribute"
                        ],
                        [
                            "self.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "SIB/backbone.py": {
        "sklearn": {
            "KMeans_403": {
                "variable": {
                    "value": "kmeans",
                    "type": "Name",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KMeans_415": {
                "variable": {
                    "value": "kmeans",
                    "type": "Name",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PCA_539": {
                "variable": {
                    "value": "pca_model",
                    "type": "Name",
                    "possible_values": []
                },
                "n_components": {
                    "value": "pca_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PCA_566": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "n_components": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "KMeans_552": {
                "variable": {
                    "value": "kmeans_model",
                    "type": "Name",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "Name",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "norm_33": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_33": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "query_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "query.shape[0]",
                            "Subscript"
                        ],
                        [
                            "query.shape[0]",
                            "Subscript"
                        ],
                        [
                            "query_x[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "query_x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "query[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "query.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_81": {
                "variable": {
                    "value": "softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "query_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "query.shape[0]",
                            "Subscript"
                        ],
                        [
                            "query.shape[0]",
                            "Subscript"
                        ],
                        [
                            "query_x[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "query_x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "query[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "query.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_109": {
                "variable": {
                    "value": "softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_134": {
                "variable": {
                    "value": "sigmoid",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_classifiers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "query_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "query.shape[0]",
                            "Subscript"
                        ],
                        [
                            "query.shape[0]",
                            "Subscript"
                        ],
                        [
                            "query_x[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "query_x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "query[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "query.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_194": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_classifiers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "query_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "query.shape[0]",
                            "Subscript"
                        ],
                        [
                            "query.shape[0]",
                            "Subscript"
                        ],
                        [
                            "query_x[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "query_x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "query[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "query.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_224": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "layers",
                    "type": "Name",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_255": {
                "variable": {
                    "value": "self.lstm_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_like_266": {
                "variable": {
                    "value": "h_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "queries",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_267": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "queries.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X.shape[0]",
                            "Subscript"
                        ],
                        [
                            "A.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "queries.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Softmax_295": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_315": {
                "variable": {
                    "value": "resp",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "X.shape[0]",
                            "Subscript"
                        ],
                        [
                            "features.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_338": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_340": {
                "variable": {
                    "value": "self.x_clfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.create_clf(loss_type, x_feat_dim, n_way).cuda() for i in range(n_clf)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_341": {
                "variable": {
                    "value": "self.d_clfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.create_clf(loss_type, d_feat_dim, n_way).cuda() for i in range(n_clf)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sigmoid_344": {
                "variable": {
                    "value": "sigmoid",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_364": {
                "variable": {
                    "value": "resp",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "X.shape[0]",
                            "Subscript"
                        ],
                        [
                            "features.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_396": {
                "variable": {
                    "value": "kernel_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weights.unsqueeze(2).expand(-1, -1, self.n_way)",
                            "Call"
                        ],
                        [
                            "weights.unsqueeze(2).expand(-1, -1, self.n_way)",
                            "Call"
                        ],
                        [
                            "list(self.pretrain.model.parameters())[30]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_397": {
                "variable": {
                    "value": "kernel_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(weights, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(kernel_features, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.mean(weights, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(kernel_features, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_419": {
                "variable": {
                    "value": "kernel_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weights.unsqueeze(2).expand(-1, -1, self.n_way)",
                            "Call"
                        ],
                        [
                            "weights.unsqueeze(2).expand(-1, -1, self.n_way)",
                            "Call"
                        ],
                        [
                            "list(self.pretrain.model.parameters())[30]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_420": {
                "variable": {
                    "value": "kernel_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(weights, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(kernel_features, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.mean(weights, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(kernel_features, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_436": {
                "variable": {
                    "value": "new_output",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "desired_output.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_619": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_way, feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_639": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "L.kernel_size[0] * L.kernel_size[1] * L.out_channels",
                            "BinOp"
                        ],
                        [
                            "X.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_654": {
                "variable": {
                    "value": "softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_656": {
                "variable": {
                    "value": "probability",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softmax(scores)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_748": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_771": {
                "variable": {
                    "value": "cat_resp",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(A.view(batch_size, self.n_way, 1), B.view(batch_size, self.n_way, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_876": {
                "variable": {
                    "value": "sigmoid",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_878": {
                "variable": {
                    "value": "product",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "sig_results[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "sig_results[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_879": {
                "variable": {
                    "value": "log",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "product",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mul(sig_results[:, :, 0], sig_results[:, :, 1])",
                            "Call"
                        ],
                        [
                            "torch.mul(sig_results[:, :, 0], sig_results[:, :, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_879": {
                "variable": {
                    "value": "log",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_888": {
                "variable": {
                    "value": "sigmoid",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_890": {
                "variable": {
                    "value": "product",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "sig_results[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "sig_results[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_892": {
                "variable": {
                    "value": "log",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "product / (1 + product)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "permute_892": {
                "variable": {
                    "value": "log",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_901": {
                "variable": {
                    "value": "sigmoid",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_903": {
                "variable": {
                    "value": "log",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "sig_results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sigmoid(permuted)",
                            "Call"
                        ],
                        [
                            "sigmoid(permuted)",
                            "Call"
                        ],
                        [
                            "sigmoid(permuted[:, :, 0] + permuted[:, :, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_903": {
                "variable": {
                    "value": "log",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_909": {
                "variable": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_920": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_920": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_979": {
                "variable": {
                    "value": "running_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.data.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_980": {
                "variable": {
                    "value": "running_var",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.data.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_1001": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_1011": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.parametrized_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_1035": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_1036": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_1096": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1147": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trunk",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1164": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trunk",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1184": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trunk",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1202": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trunk",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_1226": {
                "variable": {
                    "value": "relu",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_1227": {
                "variable": {
                    "value": "pool1",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_1252": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trunk",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_53": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "k1_safe * torch.log(k1_safe / k2_safe)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * norm * norm / 10",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_93": {
                "variable": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "processed_query - centroids",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_94": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-dist * dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_275": {
                "variable": {
                    "value": "attentions",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_hat + queries",
                            "BinOp"
                        ],
                        [
                            "h_hat + queries",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "support.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_279": {
                "variable": {
                    "value": "readout",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attentions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(h, support.t())",
                            "Call"
                        ],
                        [
                            "attentions.softmax(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "support",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ModuleList_299": {
                "variable": {
                    "value": "self.clfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.create_clf(loss_type, shapes[i], n_way).cuda() for i in range(n_clf)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_301": {
                "variable": {
                    "value": "self.clfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.create_clf(loss_type, feat_dim, n_way).cuda() for i in range(n_clf)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_320": {
                "variable": {
                    "value": "log_proba",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.softmax(resp)",
                            "Call"
                        ],
                        [
                            "self.softmax(resp)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_325": {
                "variable": {
                    "value": "log_proba",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_proba",
                    "type": "Name",
                    "possible_values": [
                        [
                            "proba.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "proba.mean(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_374": {
                "variable": {
                    "value": "log_proba",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.softmax(resp)",
                            "Call"
                        ],
                        [
                            "self.softmax(resp)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_379": {
                "variable": {
                    "value": "log_proba",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_proba",
                    "type": "Name",
                    "possible_values": [
                        [
                            "proba.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "proba.mean(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_621": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_way, feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_696": {
                "variable": {
                    "value": "clf",
                    "type": "Name",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_725": {
                "variable": {
                    "value": "cat_resp",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(main_clf_resp.view(batch_size, self.n_way, 1), branch_clf_resp.view(batch_size, self.n_way, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_743": {
                "variable": {
                    "value": "self.d_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_753": {
                "variable": {
                    "value": "clf",
                    "type": "Name",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_766": {
                "variable": {
                    "value": "fn",
                    "type": "Name",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_817": {
                "variable": {
                    "value": "self.transform_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_818": {
                "variable": {
                    "value": "self.transform_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_842": {
                "variable": {
                    "value": "clf",
                    "type": "Name",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_923": {
                "variable": {
                    "value": "L_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.L.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_923": {
                "variable": {
                    "value": "L_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linear_946": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.fast",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_norm_982": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(x.data.size()[1]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(x.data.size()[1]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_norm_985": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(x.data.size()[1]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(x.data.size()[1]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_999": {
                "variable": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_1000": {
                "variable": {
                    "value": "self.BN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "MaxPool2d_1005": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_1031": {
                "variable": {
                    "value": "self.C1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2 if half_res else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_1032": {
                "variable": {
                    "value": "self.BN1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_1033": {
                "variable": {
                    "value": "self.C2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_1034": {
                "variable": {
                    "value": "self.BN2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_1089": {
                "variable": {
                    "value": "self.C1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_1090": {
                "variable": {
                    "value": "self.BN1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_1091": {
                "variable": {
                    "value": "self.C2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2 if half_res else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_1092": {
                "variable": {
                    "value": "self.BN2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_1093": {
                "variable": {
                    "value": "self.C3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_1094": {
                "variable": {
                    "value": "self.BN3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_1222": {
                "variable": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_1224": {
                "variable": {
                    "value": "bn1",
                    "type": "Name",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_1245": {
                "variable": {
                    "value": "avgpool",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_52": {
                "input": {
                    "value": "k1_safe / k2_safe",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_67": {
                "variable": {
                    "value": "softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_97": {
                "variable": {
                    "value": "n2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "centroids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.centroids",
                            "Attribute"
                        ],
                        [
                            "centroids.unsqueeze(0).expand(query_size, self.n_way, self.feat_dim)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_98": {
                "variable": {
                    "value": "n1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "processed_query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.preprocess(query).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "query.unsqueeze(1).expand(query_size, self.n_way, self.feat_dim)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_305": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_357": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ones_like_368": {
                "variable": {
                    "value": "x_logit",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "d_logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.d_clfs[i](D[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_623": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_712": {
                "tensors": {
                    "value": "feature_array",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_849": {
                "tensors": {
                    "value": "feature_array",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_961": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_966": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_1048": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2 if half_res else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_1049": {
                "variable": {
                    "value": "self.BNshortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_1106": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2 if half_res else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_138": {
                "input": {
                    "value": "sigmoid(p1) * sigmoid(p2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_348": {
                "input": {
                    "value": "sigmoid(p1) * sigmoid(p2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_105": {
                "variable": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "processed_query - centroids",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_140": {
                "input": {
                    "value": "sigmoid(p1 + p2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_156": {
                "*size": {
                    "value": "d_scores.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_350": {
                "input": {
                    "value": "sigmoid(p1 + p2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_143": {
                "input": {
                    "value": "p / (1 + p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_353": {
                "input": {
                    "value": "p / (1 + p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_108": {
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(query_size, self.n_way).cuda()",
                            "Call"
                        ],
                        [
                            "softmax(scores)",
                            "Call"
                        ],
                        [
                            "torch.zeros(query_size, self.n_way).cuda()",
                            "Call"
                        ],
                        [
                            "torch.exp(-dist * dist)",
                            "Call"
                        ],
                        [
                            "softmax(scores)",
                            "Call"
                        ],
                        [
                            "dist",
                            "Name"
                        ],
                        [
                            "-dist * dist / temp",
                            "BinOp"
                        ],
                        [
                            "scores / torch.norm(scores, p=2, dim=1).unsqueeze(1).expand(-1, self.n_way)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(self.n_classifiers, query_size, self.n_way).cuda()",
                            "Call"
                        ],
                        [
                            "scores.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.n_classifiers, query_size, self.n_way).cuda()",
                            "Call"
                        ],
                        [
                            "scores.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "sum_log_proba",
                            "Name"
                        ],
                        [
                            "log_proba",
                            "Name"
                        ],
                        [
                            "sum_log_proba",
                            "Name"
                        ],
                        [
                            "log_proba",
                            "Name"
                        ],
                        [
                            "torch.zeros(n, self.n_way, self.feat_dim).cuda()",
                            "Call"
                        ],
                        [
                            "scores",
                            "Name"
                        ],
                        [
                            "self.fusion_fn(cat_resp).view(actual_batch_size, self.n_way)",
                            "Call"
                        ],
                        [
                            "x_resp + d_resp",
                            "BinOp"
                        ],
                        [
                            "self.scale_factor * cos_dist",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_108": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "LEO/data.py": {
        "tensorflow": {
            "py_func_241": {
                "variable": {
                    "value": "output_list",
                    "type": "Name",
                    "possible_values": []
                },
                "func": {
                    "value": "_build_one_instance_py",
                    "type": "Name",
                    "possible_values": []
                },
                "inp": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32, tf.int32, tf.string]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "regex_replace_245": {
                "variable": {
                    "value": "instance_info",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "instance_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.regex_replace(instance_info, '\\x00*', '')",
                            "Call"
                        ]
                    ]
                },
                "pattern": {
                    "value": "\\x00*",
                    "type": "Constant",
                    "possible_values": []
                },
                "rewrite": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_253": {
                "variable": {
                    "value": "(tr_input, val_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "instance_input",
                    "type": "Name",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "split_sizes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tr_size, val_size]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_254": {
                "variable": {
                    "value": "(tr_logits, val_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "instance_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "split_sizes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tr_size, val_size]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_255": {
                "variable": {
                    "value": "(tr_output, val_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "instance_output",
                    "type": "Name",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "split_sizes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tr_size, val_size]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_256": {
                "variable": {
                    "value": "(tr_info, val_info)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "instance_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.regex_replace(instance_info, '\\x00*', '')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "split_sizes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tr_size, val_size]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shuffle_batch_302": {
                "variable": {
                    "value": "task_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "one_instance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_instance(num_classes, tr_size, val_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "enqueue_many": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "shapes": {
                    "value": "[tr_data_size + (self.NDIM,), tr_data_size + (1,), tr_data_size, val_data_size + (self.NDIM,), val_data_size + (1,), val_data_size, tr_data_size + (num_pretrain_classes,), val_data_size + (num_pretrain_classes,)]",
                    "type": "List",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_threads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "identity_264": {
                "variable": {
                    "value": "tr_output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tr_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(tr_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_265": {
                "variable": {
                    "value": "val_output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "val_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(val_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_107": {
                "msg": {
                    "value": "str([(k, np.shape(v)) for (k, v) in six.iteritems(raw_data)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_140": {
                "msg": {
                    "value": "str([len(raw_data), len(self._all_class_images), len(self._image_embedding)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_175": {
                "msg": {
                    "value": "'get_one_emb_instance: folder_path: {}'.format(full_pickle_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_248": {
                "msg": {
                    "value": "'input_batch: {} '.format(instance_input.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_249": {
                "msg": {
                    "value": "'output_batch: {} '.format(instance_output.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_250": {
                "msg": {
                    "value": "'info_batch: {} '.format(instance_info.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_258": {
                "msg": {
                    "value": "'tr_output: {} '.format(tr_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_259": {
                "msg": {
                    "value": "'val_output: {}'.format(val_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_261": {
                "control_inputs": {
                    "value": "self._check_labels(num_classes, tr_size, val_size, tr_output, val_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_316": {
                "msg": {
                    "value": "task_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.shuffle_batch(one_instance, batch_size=batch_size, capacity=1000, min_after_dequeue=0, enqueue_many=False, shapes=[tr_data_size + (self.NDIM,), tr_data_size + (1,), tr_data_size, val_data_size + (self.NDIM,), val_data_size + (1,), val_data_size, tr_data_size + (num_pretrain_classes,), val_data_size + (num_pretrain_classes,)], num_threads=num_threads)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_323": {
                "input_tensor": {
                    "value": "tr_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(tr_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_324": {
                "input_tensor": {
                    "value": "val_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(val_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_equal_326": {
                "x": {
                    "value": "tf.to_int32(tr_label_sum)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "correct_label_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_classes * (num_classes - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assert_equal_327": {
                "x": {
                    "value": "tf.to_int32(val_label_sum)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "correct_label_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_classes * (num_classes - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_223": {
                "msg": {
                    "value": "label_array.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_225": {
                "msg": {
                    "value": "label_array.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_228": {
                "msg": {
                    "value": "path_array.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_230": {
                "msg": {
                    "value": "path_array.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_238": {
                "msg": {
                    "value": "embedding_array.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_326": {
                "x": {
                    "value": "tr_label_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tr_output) / tr_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_int32_327": {
                "x": {
                    "value": "val_label_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(val_output) / val_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_100": {
                "msg": {
                    "value": "str([key, raw_data[key].shape])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_104": {
                "msg": {
                    "value": "str([key, raw_data[key].shape])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "LEO/model.py": {
        "tensorflow": {
            "map_fn_64": {
                "variable": {
                    "value": "(per_instance_loss, per_instance_accuracy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "call_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "functools.partial(model.__call__, is_meta_training=is_meta_training)",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [total_num_examples, self._num_latents])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "(tf.float32, tf.float32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "is_meta_training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_91": {
                "variable": {
                    "value": "self.pretrain_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "pretrain_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.load('pretrain/' + pretrain_mean_filename)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_94": {
                "variable": {
                    "value": "self.pretrain_features_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.pretrain_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_97": {
                "variable": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensordot_98": {
                "variable": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logit, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.pretrain_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[-1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_140": {
                "input": {
                    "value": "self.pretrain_features_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_141": {
                "variable": {
                    "value": "support_center",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_expanded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(self.pretrain_features_mean, axis=0), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(n_way, n_support, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_142": {
                "variable": {
                    "value": "query_center",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_expanded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(self.pretrain_features_mean, axis=0), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(n_way, n_query, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_151": {
                "variable": {
                    "value": "debug[support_prob]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "data[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_294": {
                "variable": {
                    "value": "support_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "data[6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_295": {
                "variable": {
                    "value": "query_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "data[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_296": {
                "variable": {
                    "value": "query_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "data[7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_297": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "support_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(data[6])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_298": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(support_logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_299": {
                "variable": {
                    "value": "query_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "query_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(data[7])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(query_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_300": {
                "variable": {
                    "value": "w_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(support_logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensordot_301": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "query_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(data[7])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(query_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(w)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[-1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_302": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tensordot(query_logits, w_t, axes=[[-1], [0]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_303": {
                "variable": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(0, n_way)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.constant([n_way * n_query], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_304": {
                "variable": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.range(0, n_way), tf.constant([n_way * n_query], tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx, (n_way, n_query, n_way))",
                            "Call"
                        ],
                        [
                            "tf.math.equal(idx, q_labels_expanded)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(n_way, n_query, n_way)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_305": {
                "variable": {
                    "value": "q_labels_expanded",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(data[4], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_306": {
                "variable": {
                    "value": "q_labels_expanded",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "q_labels_expanded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(query_labels, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.tile(q_labels_expanded, (1, 1, n_way))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, 1, n_way)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_307": {
                "variable": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.range(0, n_way), tf.constant([n_way * n_query], tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx, (n_way, n_query, n_way))",
                            "Call"
                        ],
                        [
                            "tf.math.equal(idx, q_labels_expanded)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "q_labels_expanded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(query_labels, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.tile(q_labels_expanded, (1, 1, n_way))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_308": {
                "variable": {
                    "value": "hardness",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "(1 - probs) / probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_309": {
                "variable": {
                    "value": "correct_expanded",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.math.equal(model_prediction, query_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_310": {
                "variable": {
                    "value": "correct_expanded",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(correct_expanded, multiples=(1, 1, n_way))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_321": {
                "variable": {
                    "value": "total_hardness",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "hardness",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.log((1 - probs) / probs)",
                            "Call"
                        ],
                        [
                            "hardness * tf.cast(idx, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_322": {
                "variable": {
                    "value": "scored_hardness",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "hardness * correct_expanded",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_408": {
                "variable": {
                    "value": "batch_val_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "val_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "val_loss + self._encoder_penalty_weight * encoder_penalty",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_409": {
                "variable": {
                    "value": "batch_val_accuracy",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "val_accuracy",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_mean_542": {
                "variable": {
                    "value": "codes",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "codes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(codes, axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(codes, [1, self.num_examples_per_class, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_544": {
                "variable": {
                    "value": "codes",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "codes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(codes, axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(codes, [1, self.num_examples_per_class, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.num_examples_per_class, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_548": {
                "variable": {
                    "value": "(means, unnormalized_stddev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "distribution_params",
                    "type": "Name",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_549": {
                "variable": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "unnormalized_stddev",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "maximum_551": {
                "variable": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(unnormalized_stddev)",
                            "Call"
                        ],
                        [
                            "stddev - (1.0 - stddev_offset)",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(stddev, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_565": {
                "variable": {
                    "value": "kl",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "normal_distribution.log_prob(samples) - random_prior.log_prob(samples)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_570": {
                "variable": {
                    "value": "after_dropout",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [total_num_examples, self._num_latents])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_573": {
                "variable": {
                    "value": "per_image_predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,lmk->ijlm",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "after_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, rate=self.dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, rate=self.dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_mean_577": {
                "variable": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_image_predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.einsum('ijk,lmk->ijlm', after_dropout, weights)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_582": {
                "variable": {
                    "value": "model_predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "model_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.predict(inputs, classifier_weights)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "self._int_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_584": {
                "variable": {
                    "value": "accuracy",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "model_predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(model_outputs, -1, output_type=self._int_dtype)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "tf.squeeze(true_outputs, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_611": {
                "variable": {
                    "value": "original_classes",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "original_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(original_classes, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_613": {
                "variable": {
                    "value": "one_hot_outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "original_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(original_classes, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_635": {
                "variable": {
                    "value": "metatrain_gradients",
                    "type": "Name",
                    "possible_values": []
                },
                "ys": {
                    "value": "metatrain_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "metatrain_variables",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.trainable_variables",
                            "Attribute"
                        ]
                    ]
                }
            },
            "logical_or_637": {
                "variable": {
                    "value": "nan_loss_or_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.is_nan(metatrain_loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_any([tf.reduce_any(tf.is_nan(g)) for g in metatrain_gradients])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_649": {
                "variable": {
                    "value": "metatrain_gradients",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "nan_loss_or_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.is_nan(metatrain_loss), tf.reduce_any([tf.reduce_any(tf.is_nan(g)) for g in metatrain_gradients]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : zero_or_regularization_gradients",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : metatrain_gradients",
                    "type": "Lambda",
                    "possible_values": []
                },
                "strict": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "variable": {
                    "value": "w2",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_47": {
                "variable": {
                    "value": "identity",
                    "type": "Name",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "matrix_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "correlation_matrix.get_shape().as_list()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "base_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_mean_49": {
                "variable": {
                    "value": "weight_corr",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(correlation_matrix, identity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_93": {
                "variable": {
                    "value": "self.pretrain_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.pretrain_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_133": {
                "variable": {
                    "value": "support_d",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "support_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_d_features(data[6])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(support_d, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_134": {
                "variable": {
                    "value": "query_d",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "query_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_d_features(data[7])",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(query_d, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_275": {
                "variable": {
                    "value": "model_prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "prediction + output",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "self._int_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_276": {
                "variable": {
                    "value": "accuracy",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "model_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(prediction, -1, output_type=self._int_dtype)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "tf.squeeze(data[4], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_421": {
                "variable": {
                    "value": "inner_lr",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, self._num_latents]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._float_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(self._inner_lr_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_428": {
                "variable": {
                    "value": "loss_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "latents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "latents - inner_lr * loss_grad[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_squared_error_433": {
                "variable": {
                    "value": "encoder_penalty",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.stop_gradient(latents)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "starting_latents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "latents",
                            "Name"
                        ]
                    ]
                }
            },
            "cast_435": {
                "variable": {
                    "value": "encoder_penalty",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_penalty",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.losses.mean_squared_error(labels=tf.stop_gradient(latents), predictions=starting_latents)",
                            "Call"
                        ],
                        [
                            "tf.cast(encoder_penalty, self._float_dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, self._float_dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._float_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_437": {
                "variable": {
                    "value": "encoder_penalty",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._float_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_445": {
                "variable": {
                    "value": "finetuning_lr",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, self.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._float_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(self._finetuning_lr_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_450": {
                "variable": {
                    "value": "loss_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "ys": {
                    "value": "tr_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "leo_loss",
                            "Name"
                        ]
                    ]
                },
                "xs": {
                    "value": "classifier_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "classifier_weights - finetuning_lr * loss_grad[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dropout_485": {
                "variable": {
                    "value": "after_dropout",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [total_num_examples, self._num_latents])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "glorot_uniform_487": {
                "variable": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._float_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "glorot_uniform_501": {
                "variable": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._float_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_509": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [total_num_examples, self._num_latents])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[total_num_examples, self._num_latents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_511": {
                "variable": {
                    "value": "left",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(inputs, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, total_num_examples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_512": {
                "variable": {
                    "value": "right",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(inputs, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[total_num_examples, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_513": {
                "variable": {
                    "value": "concat_codes",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[left, right]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_515": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.BatchApply(encoder_module)(after_dropout)",
                            "Call"
                        ],
                        [
                            "snt.BatchApply(relation_network_module)(concat_codes)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [self.num_classes, self.num_examples_per_class, 2 * self._num_latents])",
                            "Call"
                        ],
                        [
                            "snt.BatchApply(decoder_module)(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_517": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.BatchApply(encoder_module)(after_dropout)",
                            "Call"
                        ],
                        [
                            "snt.BatchApply(relation_network_module)(concat_codes)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [self.num_classes, self.num_examples_per_class, 2 * self._num_latents])",
                            "Call"
                        ],
                        [
                            "snt.BatchApply(decoder_module)(inputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.num_classes, self.num_examples_per_class, 2 * self._num_latents]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "glorot_uniform_529": {
                "variable": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._float_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_614": {
                "labels": {
                    "value": "one_hot_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(original_classes, depth=self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "model_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.predict(inputs, classifier_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_657": {
                "x": {
                    "value": "tf.reduce_sum(tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._float_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_40": {
                "name": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_52": {
                "x": {
                    "value": "tf.cast(orthogonality_penalty_weight, base_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weight_corr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(correlation_matrix, identity))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'leo'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_212": {
                "values": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_268": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(output, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_303": {
                "value": {
                    "value": "[n_way * n_query]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_309": {
                "x": {
                    "value": "model_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(prediction, -1, output_type=self._int_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "query_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(data[4], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_310": {
                "input": {
                    "value": "correct_expanded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.math.equal(model_prediction, query_labels), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.tile(correct_expanded, multiples=(1, 1, n_way)), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, 1, n_way)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_320": {
                "x": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.range(0, n_way), tf.constant([n_way * n_query], tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.reshape(idx, (n_way, n_query, n_way))",
                            "Call"
                        ],
                        [
                            "tf.math.equal(idx, q_labels_expanded)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_420": {
                "name_or_scope": {
                    "value": "leo_inner",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_444": {
                "name_or_scope": {
                    "value": "finetuning",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_484": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_499": {
                "name_or_scope": {
                    "value": "relation_network",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_525": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_585": {
                "input": {
                    "value": "true_outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_nan_638": {
                "x": {
                    "value": "metatrain_loss",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_any_639": {
                "input_tensor": {
                    "value": "tf.is_nan(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_658": {
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_42": {
                "tensor": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "a": {
                    "value": "wn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(weight, ord=2, axis=1, keepdims=True) + 1e-32",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "wn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.norm(weight, ord=2, axis=1, keepdims=True) + 1e-32",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squared_difference_50": {
                "x": {
                    "value": "correlation_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "w2 / tf.matmul(wn, wn, transpose_b=True)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "identity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.eye(matrix_size, dtype=base_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_53": {
                "x": {
                    "value": "orthogonality_penalty_weight",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "base_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "l2_normalize_105": {
                "x": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(data, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.get_debug_data(data)",
                            "Call"
                        ],
                        [
                            "data_module.ProblemInstance(*data)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_215": {
                "x": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "x2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "squeeze_276": {
                "input": {
                    "value": "data[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_325": {
                "x": {
                    "value": "model_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(prediction, -1, output_type=self._int_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "query_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(data[4], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_511": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [total_num_examples, self._num_latents])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_512": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [total_num_examples, self._num_latents])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_554": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._float_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_564": {
                "input": {
                    "value": "samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "distribution.sample()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_564": {
                "input": {
                    "value": "samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "distribution.sample()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_645": {
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "get_collection_658": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_108": {
                "variable": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(data, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.get_debug_data(data)",
                            "Call"
                        ],
                        [
                            "data_module.ProblemInstance(*data)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_109": {
                "x": {
                    "value": "data - center",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "subtract_217": {
                "x": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "x2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "constant_initializer_424": {
                "value": {
                    "value": "self._inner_lr_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_434": {
                "input": {
                    "value": "latents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "latents - inner_lr * loss_grad[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_448": {
                "value": {
                    "value": "self._finetuning_lr_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_646": {
                "ys": {
                    "value": "regularization_penalty",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._l2_regularization + self._decoder_orthogonality_reg",
                            "BinOp"
                        ],
                        [
                            "0.0001 / self._l2_penalty_weight * self._l2_regularization",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "metatrain_variables",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.trainable_variables",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_nan_639": {
                "x": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "LEO/model_test.py": {
        "tensorflow": {
            "constant_130": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.random((num_classes, num_examples_per_class, embedding_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float64 if use_64bits_dtype else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "constant_134": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.randint(low=0, high=num_classes, size=(num_classes, num_examples_per_class, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "outputs_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.int64 if use_64bits_dtype else tf.int32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "constant_33": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_221": {
                "variable": {
                    "value": "(two_adapted_params, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "self._leo.__call__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "ins",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.stack([in1, in2]) for (in1, in2) in zip(problem, another_problem)]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "(tf.float64, tf.float64)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_244": {
                "variable": {
                    "value": "leo_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "leo_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(leo_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_247": {
                "variable": {
                    "value": "finetuning_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finetuning_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(finetuning_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_258": {
                "variable": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": []
                },
                "ys": {
                    "value": "self._problem.tr_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "latents",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "main_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_196": {
                "value": {
                    "value": "[[[0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_199": {
                "value": {
                    "value": "[[[0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_204": {
                "value": {
                    "value": "[[[0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_207": {
                "value": {
                    "value": "[[[0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_217": {
                "values": {
                    "value": "[in1, in2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_61": {
                "input": {
                    "value": "inp",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "constant_171": {
                "value": {
                    "value": "[[[0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_78": {
                "value": {
                    "value": "inp",
                    "type": "Name",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "LEO/runner.py": {
        "tensorflow": {
            "map_fn_96": {
                "variable": {
                    "value": "(per_instance_loss, per_instance_accuracy, per_instance_dacc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "call_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "functools.partial(inner_model.__call__, is_meta_training=is_meta_training)",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(tf.float32, tf.float32, tf.float32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "is_meta_training",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_mean_101": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_instance_loss",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_mean_102": {
                "variable": {
                    "value": "accuracy",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_instance_accuracy",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "dacc",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_instance_dacc",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_122": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cond_156": {
                "variable": {
                    "value": "metatrain_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.is_nan(metatrain_loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.zeros_like(metatrain_loss)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : metatrain_loss",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "AdamOptimizer_166": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "outer_model_config['outer_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config.get_outer_model_config()",
                            "Call"
                        ],
                        [
                            "config.get_outer_model_config()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_168": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_64": {
                "name": {
                    "value": "metavalid_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "metavalid_loss",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "scalar_65": {
                "name": {
                    "value": "metavalid_valid_accuracy",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "metavalid_accuracy",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "scalar_71": {
                "name": {
                    "value": "metatrain_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "metatrain_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.is_nan(metatrain_loss), lambda : tf.zeros_like(metatrain_loss), lambda : metatrain_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_72": {
                "name": {
                    "value": "metatrain_valid_accuracy",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "metatrain_accuracy",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "info_109": {
                "msg": {
                    "value": "'inner_model_config: {}'.format(inner_model_config)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_129": {
                "msg": {
                    "value": "'inner_model_config: {}'.format(inner_model_config)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_173": {
                "msg": {
                    "value": "'data_config: {}'.format(data_config)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_210": {
                "msg": {
                    "value": "'outer_model_config: {}'.format(outer_model_config)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_238": {
                "msg": {
                    "value": "'outer_model_config: {}'.format(outer_model_config)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "histogram_75": {
                "name": {
                    "value": "histogram_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v.name.split(':')[0]",
                            "Subscript"
                        ],
                        [
                            "'gradient/{}'.format(histogram_name)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "histogram_77": {
                "name": {
                    "value": "histogram_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v.name.split(':')[0]",
                            "Subscript"
                        ],
                        [
                            "'gradient/{}'.format(histogram_name)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "is_nan_156": {
                "x": {
                    "value": "metatrain_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.is_nan(metatrain_loss), lambda : tf.zeros_like(metatrain_loss), lambda : metatrain_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "MonitoredTrainingSession_216": {
                "checkpoint_dir": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": []
                },
                "save_summaries_steps": {
                    "value": "FLAGS.checkpoint_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_step_count_steps": {
                    "value": "FLAGS.checkpoint_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_checkpoint_steps": {
                    "value": "FLAGS.checkpoint_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "summary_dir": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "MonitoredTrainingSession_245": {
                "checkpoint_dir": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": []
                },
                "save_summaries_steps": {
                    "value": "FLAGS.checkpoint_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_step_count_steps": {
                    "value": "FLAGS.checkpoint_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_checkpoint_steps": {
                    "value": "FLAGS.checkpoint_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "summary_dir": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "clip_by_value_53": {
                "t": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-gradient_threshold",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "gradient_threshold",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "clip_by_norm_58": {
                "t": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "gradient_norm_threshold",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_like_157": {
                "input": {
                    "value": "metatrain_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.is_nan(metatrain_loss), lambda : tf.zeros_like(metatrain_loss), lambda : metatrain_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_284": {
                "msg": {
                    "value": "Metatest accuracy: %f",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "test_accuracy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.evaluate_and_average(sess, metatest_accuracy, num_metatest_estimates)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_261": {
                "msg": {
                    "value": "'Step: {} meta-valid accuracy: {}, dacc: {} best acc: {} best dacc: {}'.format(global_step_ev, metavalid_accuracy_ev, metavalid_dacc_ev, best_metavalid_accuracy, best_metavalid_dacc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_273": {
                "msg": {
                    "value": "'Step: {} meta-train accuracy: {}'.format(global_step_ev, metatrain_accuracy_ev)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "LEO/utils.py": {
        "tensorflow": {
            "Glob_49": {
                "variable": {
                    "value": "checkpoint_files",
                    "type": "Name",
                    "possible_values": []
                },
                "filename": {
                    "value": "checkpoint_regex",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'model.ckpt-{}.*'.format(global_step))",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_63": {
                "filename": {
                    "value": "best_checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'best_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "Rename_65": {
                "oldname": {
                    "value": "tmp_checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'tmp_best_checkpoint')",
                            "Call"
                        ]
                    ]
                },
                "newname": {
                    "value": "best_checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'best_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_66": {
                "msg": {
                    "value": "Copied new best checkpoint with accuracy %.5f",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "accuracy",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Exists_73": {
                "filename": {
                    "value": "tmp_checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'tmp_best_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "MkDir_77": {
                "dirname": {
                    "value": "tmp_checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'tmp_best_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_43": {
                "msg": {
                    "value": "Not copying the checkpoint: there is a better one from before a preemption.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DeleteRecursively_64": {
                "dirname": {
                    "value": "best_checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'best_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_74": {
                "msg": {
                    "value": "\"The temporary directory exists, because job was preempted before it managed to move it. We're removing it.\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DeleteRecursively_76": {
                "dirname": {
                    "value": "tmp_checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'tmp_best_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "Copy_86": {
                "oldpath": {
                    "value": "file_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "checkpoint_files",
                            "Name"
                        ]
                    ]
                },
                "newpath": {
                    "value": "os.path.join(tmp_checkpoint_path, just_filename)",
                    "type": "Call",
                    "possible_values": []
                },
                "overwrite": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Exists_96": {
                "filename": {
                    "value": "best_checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'best_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MAML_MN_FT/data/additional_transforms.py": {
        "torch": {
            "rand_22": {
                "variable": {
                    "value": "randtensor",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.transforms)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MAML_MN_FT/data/datamgr.py": {
        "torch": {
            "DataLoader_66": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SimpleDataset(data_file, transform)",
                            "Call"
                        ],
                        [
                            "SimpleTieredDataset(data_file, transform)",
                            "Call"
                        ],
                        [
                            "SetDataset(data_file, self.batch_size, transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SimpleDataset(data_file, transform)",
                            "Call"
                        ],
                        [
                            "SimpleTieredDataset(data_file, transform)",
                            "Call"
                        ],
                        [
                            "SetDataset(data_file, self.batch_size, transform)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MAML_MN_FT/data/dataset.py": {
        "torch": {
            "DataLoader_96": {
                "dataset": {
                    "value": "sub_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubDataset(self.sub_meta[cl], cl, transform=transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_135": {
                "n": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MAML_MN_FT/data/feature_loader.py": {
        "torch": {}
    },
    "MAML_MN_FT/filelists/tiered/write_tiered_filelist.py": {
        "torch": {}
    },
    "MAML_MN_FT/methods/DMAML.py": {
        "torch": {
            "NLLLoss_62": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_63": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_84": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_84": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_89": {
                "variable": {
                    "value": "sigmoid",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "query.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "c_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "query.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_53": {
                "variable": {
                    "value": "self.maml_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MAMLBlock(feat_dim, self.n_way, update_step, approx, lr) for i in range(n_splits)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_like_114": {
                "variable": {
                    "value": "c_split_query",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "split_query",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.x_maml_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MAMLBlock(x_feat_dim, self.n_way, update_step, approx, lr) for i in range(n_splits)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_61": {
                "variable": {
                    "value": "self.d_maml_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MAMLBlock(d_feat_dim, self.n_way, update_step, approx, lr) for i in range(n_splits)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_174": {
                "variable": {
                    "value": "loss_q",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_174": {
                "variable": {
                    "value": "loss_q",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_93": {
                "input": {
                    "value": "sigmoid(p1) * sigmoid(p2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_129": {
                "variable": {
                    "value": "c_x_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.x_maml_blocks[i].predict(split_query[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_95": {
                "input": {
                    "value": "sigmoid(p1 + p2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "ndarray": {
                    "value": "np.repeat(range(self.n_way), self.n_support)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_154": {
                "ndarray": {
                    "value": "np.repeat(range(self.n_way), self.n_query)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_98": {
                "input": {
                    "value": "p / (1 + p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MAML_MN_FT/methods/DMatchingNet.py": {
        "torch": {
            "NLLLoss_40": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_56": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_77": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_77": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_82": {
                "variable": {
                    "value": "sigmoid",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "query.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "support.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "c_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "query.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "support.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_130": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.repeat(range(self.n_way), self.n_support)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "query.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "support.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.repeat(range(self.n_way), self.n_support)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "y_query",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.repeat(range(self.n_way), self.n_query)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self.matching_nets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MatchingNetModule(feat_dim).cuda() for i in range(n_splits)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_like_105": {
                "variable": {
                    "value": "c_split_query",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "split_query",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.x_matching_nets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MatchingNetModule(x_feat_dim).cuda() for i in range(n_splits)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.d_matching_nets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MatchingNetModule(d_feat_dim).cuda() for i in range(n_splits)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_70": {
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_86": {
                "input": {
                    "value": "sigmoid(p1) * sigmoid(p2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_120": {
                "variable": {
                    "value": "c_x_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.relu(self.normalize(query_x_new).mm(self.normalize(support_x_new).transpose(0, 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_88": {
                "input": {
                    "value": "sigmoid(p1 + p2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_91": {
                "input": {
                    "value": "p / (1 + p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MAML_MN_FT/methods/MethodTester.py": {
        "torch": {
            "from_numpy_144": {
                "variable": {
                    "value": "z_all",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(z_all)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_238": {
                "variable": {
                    "value": "task",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "task",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((n_way, n_support + n_query, pretrain.feat_dim))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(task).cuda().float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_439": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "z_all.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "z_all.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "self.pretrain.num_classes",
                            "Attribute"
                        ],
                        [
                            "self.pretrain.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "norm_469": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_469": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_480": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "z_all.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "z_all.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "self.pretrain.num_classes",
                            "Attribute"
                        ],
                        [
                            "self.pretrain.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_481": {
                "variable": {
                    "value": "relu",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_482": {
                "variable": {
                    "value": "softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_582": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['weight_decay']",
                            "Subscript"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "log_503": {
                "variable": {
                    "value": "log_odd",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - p) / p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_164": {
                "variable": {
                    "value": "batch_feature",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features",
                            "Name"
                        ]
                    ]
                }
            },
            "unsqueeze_164": {
                "variable": {
                    "value": "batch_feature",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_433": {
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_651": {
                "f": {
                    "value": "model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(params.checkpoint_dir, 'best_model.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_603": {
                "obj": {
                    "value": "{'epoch': epoch, 'state': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "outfile",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(params.checkpoint_dir, 'best_model.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(params.checkpoint_dir, '{:d}.tar'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_607": {
                "obj": {
                    "value": "{'epoch': epoch, 'state': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "outfile",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(params.checkpoint_dir, 'best_model.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(params.checkpoint_dir, '{:d}.tar'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MAML_MN_FT/methods/NNEDSplitNew.py": {
        "torch": {
            "zeros_63": {
                "variable": {
                    "value": "ed",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.feat_dim / self.n_splits)",
                            "Call"
                        ],
                        [
                            "int(self.feat_dim / self.n_splits)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "ed",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.feat_dim / self.n_splits)",
                            "Call"
                        ],
                        [
                            "int(self.feat_dim / self.n_splits)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_82": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_82": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_87": {
                "variable": {
                    "value": "sigmoid",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "y_support",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.repeat(range(self.n_way), self.n_support)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "split_features",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "split_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.feat_dim / self.n_splits)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_27": {
                "ndarray": {
                    "value": "pretrain_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pretrain.get_pretrained_class_mean(normalize=is_cosine_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_69": {
                "input": {
                    "value": "pd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.calc_pd(x, i)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.pretrain_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_91": {
                "input": {
                    "value": "sigmoid(p1) * sigmoid(p2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_93": {
                "input": {
                    "value": "sigmoid(p1 + p2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_188": {
                "*size": {
                    "value": "x_scores.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_96": {
                "input": {
                    "value": "p / (1 + p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_208": {
                "variable": {
                    "value": "c_x",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "split_query_x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_213": {
                "variable": {
                    "value": "c_x",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "query.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MAML_MN_FT/methods/VanillaMAML.py": {
        "torch": {
            "CrossEntropyLoss_23": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_58": {
                "variable": {
                    "value": "loss_q",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_58": {
                "variable": {
                    "value": "loss_q",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "ndarray": {
                    "value": "np.repeat(range(self.n_way), self.n_support)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "ndarray": {
                    "value": "np.repeat(range(self.n_way), self.n_query)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MAML_MN_FT/methods/VanillaMatchingNet.py": {
        "torch": {
            "NLLLoss_14": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_17": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_20": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_20": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_31": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.repeat(range(self.n_way), self.n_support)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "y_query",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.repeat(range(self.n_way), self.n_query)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MAML_MN_FT/methods/meta_template.py": {
        "torch": {
            "zeros_58": {
                "variable": {
                    "value": "support_imgs",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "support_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.n_way * self.n_support",
                            "BinOp"
                        ],
                        [
                            "self.n_way * self.n_support",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.image_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.image_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "query_imgs",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "query_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.n_way * self.n_query",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.image_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.image_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_89": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(x.cuda())",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(self.n_way * (self.n_support + self.n_query), *x.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_89": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "z_all.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "z_all.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.pretrain.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_101": {
                "variable": {
                    "value": "relu",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_102": {
                "variable": {
                    "value": "softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "y_support",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.repeat(range(self.n_way), self.n_support)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "linear_clf",
                    "type": "Name",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_195": {
                "variable": {
                    "value": "set_optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "linear_clf.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "dampening": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_197": {
                "variable": {
                    "value": "loss_function",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_123": {
                "variable": {
                    "value": "log_odd",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - p) / p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_206": {
                "variable": {
                    "value": "selected_id",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_id[i:min(i + batch_size, support_size)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "MAML_MN_FT/methods/meta_toolkits.py": {
        "torch": {
            "LSTM_14": {
                "variable": {
                    "value": "self.G_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.feat_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_35": {
                "variable": {
                    "value": "self.lstmcell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "feat_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.feat_dim / self.n_splits)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_36": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "split_features",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "split_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.feat_dim / self.n_splits)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_123": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((f, r), 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(distribution_params.shape[2] / 2)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_123": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(distribution_params.shape[2] / 2)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_133": {
                "variable": {
                    "value": "d_feature",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d_feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.feat_dim / self.n_splits)",
                            "Call"
                        ],
                        [
                            "self.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_176": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "variable": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "backbone.Linear_fw(self.in_dim, self.hidden_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_225": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_228": {
                "variable": {
                    "value": "self.relation_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(relation_dim, relation_dim, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_232": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.feat_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_233": {
                "variable": {
                    "value": "self.latent_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_234": {
                "variable": {
                    "value": "self.param_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1) / 1000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_238": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_239": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_240": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_241": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "repeat_interleave_245": {
                "variable": {
                    "value": "interleave_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder(support)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "support_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "support.shape[0]",
                            "Subscript"
                        ],
                        [
                            "embeddings.shape[0]",
                            "Subscript"
                        ],
                        [
                            "support.shape[0]",
                            "Subscript"
                        ],
                        [
                            "support.shape[0]",
                            "Subscript"
                        ],
                        [
                            "embeddings.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "cat_embs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(interleave_emb, tiled_embs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_311": {
                "variable": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "unnormalized_stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "distribution_params[:, :, dim:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Normal_319": {
                "variable": {
                    "value": "distributions",
                    "type": "Name",
                    "possible_values": []
                },
                "loc": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": [
                        [
                            "distribution_params[:, :, :dim]",
                            "Subscript"
                        ]
                    ]
                },
                "scale": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(unnormalized_stddev)",
                            "Call"
                        ],
                        [
                            "stddev - Variable(torch.tensor(1.0 - stddev_offset).cuda().double().expand(stddev.size()))",
                            "BinOp"
                        ],
                        [
                            "self.relu(stddev) + 1e-10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_333": {
                "variable": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_samples",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ones_like_334": {
                "variable": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_samples",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Normal_335": {
                "variable": {
                    "value": "prior",
                    "type": "Name",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(latent_samples).cuda().double()",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones_like(latent_samples).cuda().double()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_353": {
                "variable": {
                    "value": "w2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decoder.weight.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.decoder.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_357": {
                "variable": {
                    "value": "identity",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "matrix_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "corr_matrix.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_49": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(f, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_196": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.loss_fn(scores, labels)",
                            "Call"
                        ],
                        [
                            "self.loss(logits, labels)",
                            "Call"
                        ],
                        [
                            "self.loss(logits, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fast_parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(self.parameters())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultivariateNormal_255": {
                "variable": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight_stats[i, :self.feat_dim]",
                            "Subscript"
                        ]
                    ]
                },
                "scale_tril": {
                    "value": "torch.diag(Sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_272": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.loss_fn(scores, labels)",
                            "Call"
                        ],
                        [
                            "self.loss(logits, labels)",
                            "Call"
                        ],
                        [
                            "self.loss(logits, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "initial_z",
                            "Name"
                        ],
                        [
                            "z - self.latent_lr * grad[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "grad_289": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.loss_fn(scores, labels)",
                            "Call"
                        ],
                        [
                            "self.loss(logits, labels)",
                            "Call"
                        ],
                        [
                            "self.loss(logits, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(self.n_way, self.feat_dim, dtype=torch.float64).cuda()",
                            "Call"
                        ],
                        [
                            "initial_w",
                            "Name"
                        ],
                        [
                            "self.forward_decoder(z)",
                            "Call"
                        ],
                        [
                            "initial_w",
                            "Name"
                        ],
                        [
                            "w - self.param_lr * grad[0]",
                            "BinOp"
                        ],
                        [
                            "self.finetune_w(support, w, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_detect_anomaly_362": {
                "mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.feat_dim / self.n_splits)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_81": {
                "ndarray": {
                    "value": "pretrain_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.pretrain.get_pretrained_class_mean(normalize=is_cosine_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_228": {
                "in_features": {
                    "value": "relation_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * self.latent_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "relation_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * self.latent_dim",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_229": {
                "in_features": {
                    "value": "relation_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * self.latent_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "relation_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * self.latent_dim",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_230": {
                "in_features": {
                    "value": "relation_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * self.latent_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "relation_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * self.latent_dim",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_233": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_340": {
                "input": {
                    "value": "z_f.detach() - z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_354": {
                "input": {
                    "value": "self.decoder.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_355": {
                "input": {
                    "value": "wn.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "wn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(self.decoder.weight, dim=0, keepdim=True, p=2) + 1e-32",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_234": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_312": {
                "data": {
                    "value": "1.0 - stddev_offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_348": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_141": {
                "input": {
                    "value": "pd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.calc_pd(x, i)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.pretrain_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_255": {
                "input": {
                    "value": "Sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight_stats[i, self.feat_dim:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "MAML_MN_FT/models/FeatWRN.py": {
        "torch": {
            "Conv2d_11": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_78": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dropout(self.conv1(F.relu(self.bn1(x))))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 21)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "21",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.FC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_39": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_38": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MAML_MN_FT/models/SimpleShotResNet.py": {
        "torch": {
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_102": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MAML_MN_FT/models/SimpleShotWideResNet.py": {
        "torch": {
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_63": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_83": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_40": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_113": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_39": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MAML_MN_FT/save_features.py": {
        "torch": {
            "load_142": {
                "variable": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "modelfile",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_assigned_file(checkpoint_dir, params.save_iter)",
                            "Call"
                        ],
                        [
                            "get_best_file(checkpoint_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_191": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(configs.simple_shot_dir, 'miniImagenet', model_name, 'model_best.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.simple_shot_dir, 'tiered', model_name, 'model_best.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.feat_dir, 'miniImagenet', model_name + '_pre.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.sib_dir, 'miniImagenet', model_name + '_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.cosine_dir, 'miniImagenet', model_name, 'max_acc.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.cosine_dir, 'tiered', model_name, 'max_acc.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_226": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(configs.simple_shot_dir, 'miniImagenet', model_name, 'model_best.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.simple_shot_dir, 'tiered', model_name, 'model_best.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.feat_dir, 'miniImagenet', model_name + '_pre.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.sib_dir, 'miniImagenet', model_name + '_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.cosine_dir, 'miniImagenet', model_name, 'max_acc.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.cosine_dir, 'tiered', model_name, 'max_acc.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_253": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(configs.simple_shot_dir, 'miniImagenet', model_name, 'model_best.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.simple_shot_dir, 'tiered', model_name, 'model_best.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.feat_dir, 'miniImagenet', model_name + '_pre.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.sib_dir, 'miniImagenet', model_name + '_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.cosine_dir, 'miniImagenet', model_name, 'max_acc.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.cosine_dir, 'tiered', model_name, 'max_acc.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_288": {
                "f": {
                    "value": "model_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(configs.simple_shot_dir, 'miniImagenet', model_name, 'model_best.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.simple_shot_dir, 'tiered', model_name, 'model_best.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.feat_dir, 'miniImagenet', model_name + '_pre.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.sib_dir, 'miniImagenet', model_name + '_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.cosine_dir, 'miniImagenet', model_name, 'max_acc.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(configs.cosine_dir, 'tiered', model_name, 'max_acc.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MAML_MN_FT/utils.py": {
        "torch": {
            "zeros_5": {
                "*size": {
                    "value": "(len(y), num_class)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "MTL/dataloader/dataset_loader.py": {
        "torch": {}
    },
    "MTL/dataloader/samplers.py": {
        "torch": {
            "from_numpy_26": {
                "variable": {
                    "value": "ind",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ind",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.argwhere(label == i).reshape(-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ind)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_39": {
                "variable": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch).t().reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_39": {
                "variable": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randperm_34": {
                "n": {
                    "value": "len(self.m_ind)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_37": {
                "n": {
                    "value": "len(l)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MTL/main.py": {
        "torch": {
            "manual_seed_78": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MTL/models/IFSL.py": {
        "torch": {
            "ModuleList_41": {
                "variable": {
                    "value": "self.clfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_dim, out_dim) for i in range(n_splits)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "load_43": {
                "variable": {
                    "value": "saved_states",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "outfile",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(self.save_dir, '%d.tar' % epoch)",
                            "Call"
                        ],
                        [
                            "osp.join(self.save_dir, '%d.tar' % epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_56": {
                "variable": {
                    "value": "self.clfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_dim, out_dim) for i in range(n_splits)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Adam_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "self.clfs.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_59": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.pre_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_95": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_95": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_115": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.pre_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.num_classes",
                            "Attribute"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "640",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "counts",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.num_classes",
                            "Attribute"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_151": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_151": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_169": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "resp",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "X.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_212": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_214": {
                "variable": {
                    "value": "self.x_clfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.create_clf(loss_type, x_feat_dim, n_way).cuda() for i in range(n_clf)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_215": {
                "variable": {
                    "value": "self.d_clfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.create_clf(loss_type, d_feat_dim, n_way).cuda() for i in range(n_clf)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sigmoid_218": {
                "variable": {
                    "value": "sigmoid",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_238": {
                "variable": {
                    "value": "resp",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "X.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_264": {
                "variable": {
                    "value": "self.vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_265": {
                "variable": {
                    "value": "self.fc1_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones([self.args.way, self.z_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_268": {
                "variable": {
                    "value": "self.fc1_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.args.way)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_276": {
                "variable": {
                    "value": "net",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "fc1_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "the_vars[0]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "fc1_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "the_vars[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "NLLLoss_353": {
                "variable": {
                    "value": "self.nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_361": {
                "variable": {
                    "value": "fpd",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_371": {
                "variable": {
                    "value": "ed",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_feat_dim + d_feat_dim",
                            "BinOp"
                        ],
                        [
                            "x_feat_dim",
                            "Name"
                        ],
                        [
                            "x_feat_dim + d_feat_dim",
                            "BinOp"
                        ],
                        [
                            "x_feat_dim",
                            "Name"
                        ],
                        [
                            "self.x_feat_dim",
                            "Attribute"
                        ],
                        [
                            "self.d_feat_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_382": {
                "variable": {
                    "value": "split_features",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "split_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.x_feat_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Sigmoid_398": {
                "variable": {
                    "value": "sigmoid",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_410": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loss_fn(scores, label)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label)",
                            "Call"
                        ],
                        [
                            "self.nll(logits, y_batch)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "list(self.clf.parameters())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_453": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder(data)",
                            "Call"
                        ],
                        [
                            "self.calc_no_split_logit(x, d, self.fast_weight_x, self.fast_weight_d)",
                            "Call"
                        ],
                        [
                            "self.clf(fused_feat, fast_weight_x)",
                            "Call"
                        ],
                        [
                            "self.clf(split_query, query_d)",
                            "Call"
                        ],
                        [
                            "self.clf(split_support[:, selected_id, :], support_d[:, selected_id, :])",
                            "Call"
                        ],
                        [
                            "self.clf(fused_query)",
                            "Call"
                        ],
                        [
                            "self.clf(fused_support[:, selected_id, :])",
                            "Call"
                        ],
                        [
                            "logits - c_scores",
                            "BinOp"
                        ],
                        [
                            "self.clf(fused_query)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch[1]",
                            "Subscript"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "batch[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_482": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "self.clf.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_154": {
                "variable": {
                    "value": "L_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.L.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_154": {
                "variable": {
                    "value": "L_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_173": {
                "variable": {
                    "value": "self.clfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.create_clf(loss_type, shapes[i], n_way).cuda() for i in range(n_clf)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_175": {
                "variable": {
                    "value": "self.clfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.create_clf(loss_type, feat_dim, n_way).cuda() for i in range(n_clf)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_194": {
                "variable": {
                    "value": "log_proba",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.softmax(resp)",
                            "Call"
                        ],
                        [
                            "self.softmax(resp)",
                            "Call"
                        ],
                        [
                            "self.pretrain.classify(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_199": {
                "variable": {
                    "value": "log_proba",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_proba",
                    "type": "Name",
                    "possible_values": [
                        [
                            "proba.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "proba.mean(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_248": {
                "variable": {
                    "value": "log_proba",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.softmax(resp)",
                            "Call"
                        ],
                        [
                            "self.softmax(resp)",
                            "Call"
                        ],
                        [
                            "self.pretrain.classify(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_253": {
                "variable": {
                    "value": "log_proba",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_proba",
                    "type": "Name",
                    "possible_values": [
                        [
                            "proba.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "proba.mean(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_456": {
                "variable": {
                    "value": "x_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loss_fn(scores, label)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label)",
                            "Call"
                        ],
                        [
                            "self.nll(logits, y_batch)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.x_clf.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_457": {
                "variable": {
                    "value": "d_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loss_fn(scores, label)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label)",
                            "Call"
                        ],
                        [
                            "self.nll(logits, y_batch)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.d_clf.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_179": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(640 / n_splits)",
                            "Call"
                        ],
                        [
                            "int(640 / n_splits)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_classes",
                            "Name"
                        ],
                        [
                            "num_classes",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_231": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(640 / n_splits)",
                            "Call"
                        ],
                        [
                            "int(640 / n_splits)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_classes",
                            "Name"
                        ],
                        [
                            "num_classes",
                            "Name"
                        ]
                    ]
                }
            },
            "ones_like_242": {
                "variable": {
                    "value": "x_logit",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "d_logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.d_clfs[i](D[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_265": {
                "*size": {
                    "value": "[self.args.way, self.z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_268": {
                "*size": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_319": {
                "ndarray": {
                    "value": "self.pretrain_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_391": {
                "tensors": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "grad_465": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loss_fn(scores, label)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label)",
                            "Call"
                        ],
                        [
                            "self.nll(logits, y_batch)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.clf.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_522": {
                "variable": {
                    "value": "selected_id",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_id[i:min(i + self.batch_size, support_size)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_20": {
                "f": {
                    "value": "self.args.init_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_27": {
                "f": {
                    "value": "osp.join(pre_save_path, 'max_acc.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(640 / n_splits)",
                            "Call"
                        ],
                        [
                            "int(640 / n_splits)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_classes",
                            "Name"
                        ],
                        [
                            "num_classes",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(640 / n_splits)",
                            "Call"
                        ],
                        [
                            "int(640 / n_splits)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_classes",
                            "Name"
                        ],
                        [
                            "num_classes",
                            "Name"
                        ]
                    ]
                }
            },
            "save_92": {
                "obj": {
                    "value": "self.clfs.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "outfile",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(self.save_dir, '%d.tar' % epoch)",
                            "Call"
                        ],
                        [
                            "osp.join(self.save_dir, '%d.tar' % epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_222": {
                "input": {
                    "value": "sigmoid(p1) * sigmoid(p2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_376": {
                "input": {
                    "value": "pd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.calc_pd(x, 0)",
                            "Call"
                        ],
                        [
                            "self.calc_pd(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.pretrain_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_402": {
                "input": {
                    "value": "sigmoid(p1) * sigmoid(p2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_224": {
                "input": {
                    "value": "sigmoid(p1 + p2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_404": {
                "input": {
                    "value": "sigmoid(p1 + p2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_541": {
                "variable": {
                    "value": "c_split_query_x",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "split_query.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_227": {
                "input": {
                    "value": "p / (1 + p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_407": {
                "input": {
                    "value": "p / (1 + p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MTL/models/IFSL_modules.py": {
        "torch": {
            "CrossEntropyLoss_29": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "split_features",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "split_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.feat_dim / self.n_splits)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_136": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_136": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_146": {
                "variable": {
                    "value": "d_feature",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d_feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.feat_dim / self.n_splits)",
                            "Call"
                        ],
                        [
                            "self.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "linear_15": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.fast",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_45": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.loss_fn(scores, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fast_parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(self.parameters())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "ndarray": {
                    "value": "pretrain_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.pretrain.get_pretrained_class_mean(normalize=is_cosine_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_157": {
                "input": {
                    "value": "pd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.calc_pd(x, 0)",
                            "Call"
                        ],
                        [
                            "self.calc_pd(x_ori, 0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.pretrain_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MTL/models/IFSL_pretrain.py": {
        "torch": {
            "Softmax_70": {
                "variable": {
                    "value": "softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_118": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_118": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.pre_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "variable": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.num_classes",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "640",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "counts",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_59": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(simple_shot_dir, 'miniImagenet', model_name, 'model_best.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(simple_shot_dir, 'tiered', model_name, 'model_best.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MTL/models/ResNet10.py": {
        "torch": {
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_21": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MTL/models/WRN28.py": {
        "torch": {
            "BatchNorm2d_9": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_11": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_75": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dMtl(in_planes, planes, kernel_size=1, stride=stride, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_95": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_23": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_22": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MTL/models/conv2d_mtl.py": {
        "torch": {
            "Parameter_38": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, out_channels // groups, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.mtl_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(in_channels, out_channels // groups, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "self.mtl_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(out_channels, in_channels // groups, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.mtl_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_100": {
                "input": {
                    "value": "inp",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "new_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.weight.mul(new_mtl_weight)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "new_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.bias + self.mtl_bias",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channels // groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_44": {
                "*size": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels // groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "MTL/models/mtl.py": {
        "torch": {
            "ParameterList_30": {
                "variable": {
                    "value": "self.vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.fc1_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones([self.args.way, self.z_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.fc1_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.args.way)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_42": {
                "variable": {
                    "value": "net",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "fc1_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "the_vars[0]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "fc1_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "the_vars[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_142": {
                "variable": {
                    "value": "cat_features",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_shot, data_query)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_181": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.base_learner.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_199": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_shot",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "grad_200": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.base_learner.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.pre_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(640, 1000)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_153": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_shot",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "grad_154": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.base_learner.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_206": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_shot",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "grad_207": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fast_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(map(lambda p: p[1] - self.update_lr * p[0], zip(grad, self.base_learner.parameters())))",
                            "Call"
                        ],
                        [
                            "list(map(lambda p: p[1] - self.update_lr * p[0], zip(grad, fast_weights)))",
                            "Call"
                        ],
                        [
                            "list(map(lambda p: p[1] - 0.01 * p[0], zip(grad, self.base_learner.parameters())))",
                            "Call"
                        ],
                        [
                            "list(map(lambda p: p[1] - 0.01 * p[0], zip(grad, fast_weights)))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_31": {
                "*size": {
                    "value": "[self.args.way, self.z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_87": {
                "f": {
                    "value": "self.args.init_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_158": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_shot",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "grad_159": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fast_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(map(lambda p: p[1] - self.update_lr * p[0], zip(grad, self.base_learner.parameters())))",
                            "Call"
                        ],
                        [
                            "list(map(lambda p: p[1] - self.update_lr * p[0], zip(grad, fast_weights)))",
                            "Call"
                        ],
                        [
                            "list(map(lambda p: p[1] - 0.01 * p[0], zip(grad, self.base_learner.parameters())))",
                            "Call"
                        ],
                        [
                            "list(map(lambda p: p[1] - 0.01 * p[0], zip(grad, fast_weights)))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_cls",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MTL/models/resnet_mtl.py": {
        "torch": {
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_131": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_136": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_176": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "iChannels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_181": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "variable": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_204": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_196": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MTL/trainer/meta.py": {
        "torch": {
            "DataLoader_70": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "self.train_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "self.val_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "self.val_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_109": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': filter(lambda p: p.requires_grad, self.model.encoder.parameters())}, {'params': self.model.base_learner.parameters(), 'lr': self.args.meta_lr2}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.meta_lr1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_112": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "self.args.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_159": {
                "variable": {
                    "value": "label_shot",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_314": {
                "variable": {
                    "value": "loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Dataset('test', self.args, dataset=self.args.param.dataset, train_aug=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "CategoriesSampler(test_set.label, self.test_iter, self.args.way, self.args.shot + self.args.val_query)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_347": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_352": {
                "variable": {
                    "value": "label_shot",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_115": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_117": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_136": {
                "obj": {
                    "value": "dict(params=self.model.state_dict())",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(self.args.save_path, name + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_176": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_226": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_106": {
                "variable": {
                    "value": "self.model.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model.encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_295": {
                "obj": {
                    "value": "trlog",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "osp.join(self.args.save_path, 'trlog')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_361": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_249": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model((data_shot, label_shot, data_query, False))",
                            "Call"
                        ],
                        [
                            "self.model((data_shot, label_shot, data_query, True))",
                            "Call"
                        ],
                        [
                            "self.model((data_shot, label_shot, data_query, True))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(self.args.way).repeat(self.args.train_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "torch.arange(self.args.way).repeat(self.args.val_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "torch.arange(self.args.way).repeat(self.args.val_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_251": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model((data_shot, label_shot, data_query, False))",
                            "Call"
                        ],
                        [
                            "self.model((data_shot, label_shot, data_query, True))",
                            "Call"
                        ],
                        [
                            "self.model((data_shot, label_shot, data_query, True))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(self.args.way).repeat(self.args.train_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "torch.arange(self.args.way).repeat(self.args.val_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "torch.arange(self.args.way).repeat(self.args.val_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_321": {
                "f": {
                    "value": "self.args.eval_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_340": {
                "f": {
                    "value": "osp.join(base_path, add_path + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MTL/trainer/pre.py": {
        "torch": {
            "DataLoader_44": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.pre_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "self.val_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "self.val_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_58": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.model.encoder.parameters(), 'lr': self.args.pre_lr}, {'params': self.model.pre_fc.parameters(), 'lr': self.args.pre_lr}]",
                    "type": "List",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.pre_custom_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.pre_custom_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_62": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "self.args.pre_step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.args.pre_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_75": {
                "obj": {
                    "value": "dict(params=self.model.encoder.state_dict())",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(self.args.save_path, name + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_156": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_161": {
                "variable": {
                    "value": "label_shot",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_125": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model(data)",
                            "Call"
                        ],
                        [
                            "self.model((data_shot, label_shot, data_query))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(self.args.way).repeat(self.args.val_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "batch[1]",
                            "Subscript"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_179": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model(data)",
                            "Call"
                        ],
                        [
                            "self.model((data_shot, label_shot, data_query))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(self.args.way).repeat(self.args.val_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "batch[1]",
                            "Subscript"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_209": {
                "obj": {
                    "value": "trlog",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "osp.join(self.args.save_path, 'trlog')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MTL/utils/gpu_tools.py": {
        "torch": {}
    },
    "MTL/utils/misc.py": {
        "torch": {
            "softmax_53": {
                "variable": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(w * query_logits).sum(dim=2)",
                            "Call"
                        ],
                        [
                            "(w * query_logits).sum(dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_53": {
                "variable": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_59": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(time.time() - self.o) / p",
                            "BinOp"
                        ],
                        [
                            "int(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_59": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "variable": {
                    "value": "relu",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_65": {
                "variable": {
                    "value": "softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_way",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "support_probs.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_90": {
                "variable": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_90": {
                "variable": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "variable": {
                    "value": "relu",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_95": {
                "variable": {
                    "value": "softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_way",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "support_probs.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_118": {
                "variable": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_118": {
                "variable": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_85": {
                "variable": {
                    "value": "log_odd",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - p) / p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_115": {
                "variable": {
                    "value": "log_odd",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - p) / p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "SIB/algorithm.py": {
        "torch": {
            "device_64": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_91": {
                "variable": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "ckptPth",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "SGD_95": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(*[self.netSIB.parameters()])",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "param['lr']",
                            "Subscript"
                        ],
                        [
                            "self.optimizer.param_groups[0]['lr']",
                            "Subscript"
                        ],
                        [
                            "self.optimizer.param_groups[0]['lr']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weightDecay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_123": {
                "variable": {
                    "value": "gradLoss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gradLogit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.netSIB.dni(clsScore)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "clsScore.grad_nonleaf.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_146": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_146": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_151": {
                "variable": {
                    "value": "relu",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_152": {
                "variable": {
                    "value": "softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_way",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "support_probs.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_174": {
                "variable": {
                    "value": "log_odd",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - p) / p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_128": {
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_350": {
                "obj": {
                    "value": "{'lr': lr, 'netFeat': self.netFeat.state_dict(), 'SIB': self.netSIB.state_dict(), 'nbStep': self.nStep}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.outDir, 'netSIBLast.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_342": {
                "obj": {
                    "value": "{'lr': lr, 'netFeat': self.netFeat.state_dict(), 'SIB': self.netSIB.state_dict(), 'nbStep': self.nStep}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.outDir, 'netSIBBest.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SIB/data/additional_transforms.py": {
        "torch": {
            "rand_22": {
                "variable": {
                    "value": "randtensor",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.transforms)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SIB/data/datamgr.py": {
        "torch": {
            "DataLoader_66": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SimpleDataset(data_file, transform)",
                            "Call"
                        ],
                        [
                            "SimpleTieredDataset(data_file, transform)",
                            "Call"
                        ],
                        [
                            "SetDataset(data_file, self.batch_size, transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SimpleDataset(data_file, transform)",
                            "Call"
                        ],
                        [
                            "SimpleTieredDataset(data_file, transform)",
                            "Call"
                        ],
                        [
                            "SetDataset(data_file, self.batch_size, transform)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "SIB/data/dataset.py": {
        "torch": {
            "DataLoader_96": {
                "dataset": {
                    "value": "sub_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubDataset(self.sub_meta[cl], cl, transform=transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_135": {
                "n": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "SIB/data/feature_loader.py": {
        "torch": {}
    },
    "SIB/dataloader.py": {
        "torch": {
            "DataLoader_229": {
                "variable": {
                    "value": "dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ValImageFolder(episodeJson, imgDir, inputW, inputH, valTransform, useGPU)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_236": {
                "variable": {
                    "value": "dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageFolder(imgDir, trainTransform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batchSize",
                    "type": "Name",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randperm_97": {
                "variable": {
                    "value": "permSupport",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "self.nClsEpisode * self.nSupport",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_98": {
                "variable": {
                    "value": "permQuery",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "self.nClsEpisode * self.nQuery",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "SIB/deconfound/DSIB.py": {
        "torch": {
            "Softmax_60": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_81": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_81": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_86": {
                "variable": {
                    "value": "sigmoid",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "query.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "c_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "query.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.sib_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ClassifierSIB(self.n_way, feat_dim, self.q_steps) for i in range(n_splits)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_like_108": {
                "variable": {
                    "value": "c_split_query",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "split_query",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.x_sib_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ClassifierSIB(self.n_way, x_feat_dim, self.q_steps) for i in range(n_splits)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_59": {
                "variable": {
                    "value": "self.d_sib_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ClassifierSIB(self.n_way, d_feat_dim, self.q_steps) for i in range(n_splits)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_74": {
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_90": {
                "input": {
                    "value": "sigmoid(p1) * sigmoid(p2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_120": {
                "variable": {
                    "value": "c_x_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.x_sib_blocks[i](split_support[i].unsqueeze(0), labels, split_query[i].unsqueeze(0), self.lr)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_92": {
                "input": {
                    "value": "sigmoid(p1 + p2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_95": {
                "input": {
                    "value": "p / (1 + p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "SIB/deconfound/meta_toolkits.py": {
        "torch": {
            "zeros_39": {
                "variable": {
                    "value": "split_features",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "split_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.feat_dim / self.n_splits)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_71": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "d_feature",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d_feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.feat_dim / self.n_splits)",
                            "Call"
                        ],
                        [
                            "self.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_29": {
                "ndarray": {
                    "value": "pretrain_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.pretrain.get_pretrained_class_mean(normalize=is_cosine_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_90": {
                "input": {
                    "value": "pd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.calc_pd(x, i)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.pretrain_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "SIB/main.py": {
        "torch": {
            "device_52": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_138": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(*[netSIB.parameters()])",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weightDecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_120": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_125": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "SIB/main_feat.py": {
        "torch": {
            "manual_seed_38": {
                "seed": {
                    "value": "randomSeed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "123",
                            "Constant"
                        ]
                    ]
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1).fill_(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self.scale_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1).fill_(10)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_62": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(features, p=2, dim=features.dim() - 1, eps=1e-12)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "features.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_63": {
                "variable": {
                    "value": "cls_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(cls_weights, p=2, dim=cls_weights.dim() - 1, eps=1e-12)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "cls_weights.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_93": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, nCls).fill_(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "variable": {
                    "value": "self.scaleCls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1).fill_(scaleCls)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_107": {
                "variable": {
                    "value": "feature",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(feature, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_108": {
                "variable": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features_supp.view(B, self.nKnovel, -1, self.nFeat).mean(2)",
                            "Call"
                        ],
                        [
                            "F.normalize(weight, p=2, dim=0, eps=1e-12)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_136": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_142": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_148": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(*[self.netFeat.parameters(), self.netClassifier.parameters()])",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-07",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_198": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(*[self.netFeat.parameters(), self.netClassifier.parameters()])",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lrUpdate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lr",
                            "Name"
                        ],
                        [
                            "nbIter / float(totalIter) * lr",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiStepLR_206": {
                "variable": {
                    "value": "self.lrScheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "self.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_278": {
                "obj": {
                    "value": "self.netFeat.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.outDir, 'netFeatLast.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_279": {
                "obj": {
                    "value": "self.netClassifier.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.outDir, 'netClsLast.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_346": {
                "f": {
                    "value": "args.resumeFeatPth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_351": {
                "f": {
                    "value": "args.resumeClassifierPth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "baddbmm_64": {
                "input": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch1": {
                    "value": "self.bias.view(1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch2": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(features, p=2, dim=features.dim() - 1, eps=1e-12)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "cls_weights.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_110": {
                "input": {
                    "value": "feature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(feature, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features_supp.view(B, self.nKnovel, -1, self.nFeat).mean(2)",
                            "Call"
                        ],
                        [
                            "F.normalize(weight, p=2, dim=0, eps=1e-12)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_273": {
                "obj": {
                    "value": "self.netFeat.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.outDir, 'netFeatBest.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_274": {
                "obj": {
                    "value": "self.netClassifier.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.outDir, 'netClsBest.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SIB/networks.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.conv_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_blocks",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "avg_pool2d_160": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "out if self.equalInOut else x",
                            "IfExp"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.dropoutLayer(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu2(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size(3))",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "X * self.weight.expand_as(X)",
                            "BinOp"
                        ],
                        [
                            "out + self.bias.expand_as(out)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_171": {
                "tensors": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dims, dni_hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dni_hidden_size, dni_hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_190": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dni_hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dims",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Parameter_203": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.FloatTensor(num_features).fill_(1)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_226": {
                "variable": {
                    "value": "weight_novel",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_train_transposed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels_train.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "features_train",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_78": {
                "variable": {
                    "value": "self.dropoutLayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_207": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.FloatTensor(num_features).fill_(0)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_32": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_179": {
                "in_features": {
                    "value": "input_dims",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dni_hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_181": {
                "num_features": {
                    "value": "dni_hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_185": {
                "in_features": {
                    "value": "dni_hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dni_hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_187": {
                "num_features": {
                    "value": "dni_hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "SIB/sib.py": {
        "torch": {
            "rand_168": {
                "variable": {
                    "value": "features_supp",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(8, 5 * 1, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_169": {
                "variable": {
                    "value": "features_query",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(8, 5 * 15, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_170": {
                "variable": {
                    "value": "labels_supp",
                    "type": "Name",
                    "possible_values": []
                },
                "low": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "(8, 5 * 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1).fill_(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "self.scale_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1).fill_(10)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_66": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(features, p=2, dim=features.dim() - 1, eps=1e-12)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "features.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_67": {
                "variable": {
                    "value": "cls_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(cls_weights, p=2, dim=cls_weights.dim() - 1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "self.get_classification_weights(features_supp, labels_supp_1hot, features_query, lr)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "cls_weights.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_134": {
                "variable": {
                    "value": "features_supp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "features_supp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand((8, 5 * 1, 512)).cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(features_supp, p=2, dim=features_supp.dim() - 1, eps=1e-12)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "features_supp.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "baddbmm_69": {
                "input": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch1": {
                    "value": "self.bias.view(1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch2": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(features, p=2, dim=features.dim() - 1, eps=1e-12)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "cls_weights.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_108": {
                "outputs": {
                    "value": "[cls_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[theta]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "[grad_logit]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "SIB/simple_shot_models/Conv4.py": {
        "torch": {
            "Sequential_7": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 3, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_8": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_9": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_11": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1600",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "SIB/simple_shot_models/DenseNet.py": {
        "torch": {
            "Sequential_68": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv2d(3, num_init_features, kernel_size=3, stride=1, padding=1, bias=False))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_105": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_106": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.relu(features, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, (1, 1)).view(features.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dropout_26": {
                "variable": {
                    "value": "new_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "super(_DenseLayer, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(new_features, p=self.drop_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_27": {
                "tensors": {
                    "value": "[x, new_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_init_features",
                            "Name"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_45": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_init_features",
                            "Name"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_init_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "SIB/simple_shot_models/MobileNet.py": {
        "torch": {
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 if isinstance(x, int) else x[1]",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ]
                    ]
                }
            },
            "relu_24": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_42": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_51": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "SIB/simple_shot_models/ProtoNet.py": {
        "torch": {
            "norm_10": {
                "input": {
                    "value": "query[:, None, :] - gallery[None, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_11": {
                "input": {
                    "value": "query[:, None, :] - gallery[None, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_similarity_8": {
                "x1": {
                    "value": "query[:, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "gallery[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "SIB/simple_shot_models/ResNet.py": {
        "torch": {
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_102": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "SIB/simple_shot_models/WideResNet.py": {
        "torch": {
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_63": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_83": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_40": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_113": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_39": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SIB/utils/outils.py": {
        "torch": {
            "DataLoader_81": {
                "variable": {
                    "value": "dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_105": {
                "mean": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "SIB/utils/utils.py": {
        "torch": {
            "manual_seed_29": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_30": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_34": {
                "obj": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    }
}