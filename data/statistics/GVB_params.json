{
    "CDAN-GD/data_list.py": {
        "torch": {}
    },
    "CDAN-GD/loss.py": {
        "torch": {
            "sum_13": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-input_ * torch.log(input_ + epsilon)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(entropy, dim=1)",
                            "Call"
                        ],
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "dc_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1]] * batch_size + [[0]] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "dc_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1]] * batch_size + [[0]] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_25": {
                "variable": {
                    "value": "op_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax_output.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_39": {
                "variable": {
                    "value": "source_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-input_ * torch.log(input_ + epsilon)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(entropy, dim=1)",
                            "Call"
                        ],
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_42": {
                "variable": {
                    "value": "target_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-input_ * torch.log(input_ + epsilon)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(entropy, dim=1)",
                            "Call"
                        ],
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_62": {
                "variable": {
                    "value": "source_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-input_ * torch.log(input_ + epsilon)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(entropy, dim=1)",
                            "Call"
                        ],
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_65": {
                "variable": {
                    "value": "target_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-input_ * torch.log(input_ + epsilon)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(entropy, dim=1)",
                            "Call"
                        ],
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "1.0 + torch.exp(-entropy)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_12": {
                "input": {
                    "value": "input_ + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_38": {
                "input": {
                    "value": "-entropy",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_47": {
                "input": {
                    "value": "torch.abs(ad_fc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_61": {
                "input": {
                    "value": "-entropy",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_70": {
                "input": {
                    "value": "torch.abs(ad_fc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_72": {
                "input": {
                    "value": "torch.abs(ad_fc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "source_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy * source_mask",
                            "BinOp"
                        ],
                        [
                            "entropy * source_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_46": {
                "input": {
                    "value": "target_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy * target_mask",
                            "BinOp"
                        ],
                        [
                            "entropy * target_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_47": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_weight / torch.sum(source_weight).detach().item() + target_weight / torch.sum(target_weight).detach().item()",
                            "BinOp"
                        ],
                        [
                            "source_weight / torch.sum(source_weight).detach().item() + target_weight / torch.sum(target_weight).detach().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_47": {
                "input": {
                    "value": "ad_fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ad_net(op_out.view(-1, softmax_output.size(1) * feature.size(1)))",
                            "Call"
                        ],
                        [
                            "ad_net(random_out.view(-1, random_out.size(1)))",
                            "Call"
                        ],
                        [
                            "ad_net(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCELoss_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_68": {
                "input": {
                    "value": "source_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy * source_mask",
                            "BinOp"
                        ],
                        [
                            "entropy * source_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_69": {
                "input": {
                    "value": "target_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy * target_mask",
                            "BinOp"
                        ],
                        [
                            "entropy * target_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_70": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_weight / torch.sum(source_weight).detach().item() + target_weight / torch.sum(target_weight).detach().item()",
                            "BinOp"
                        ],
                        [
                            "source_weight / torch.sum(source_weight).detach().item() + target_weight / torch.sum(target_weight).detach().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_70": {
                "input": {
                    "value": "ad_fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ad_net(op_out.view(-1, softmax_output.size(1) * feature.size(1)))",
                            "Call"
                        ],
                        [
                            "ad_net(random_out.view(-1, random_out.size(1)))",
                            "Call"
                        ],
                        [
                            "ad_net(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCELoss_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_72": {
                "input": {
                    "value": "ad_fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ad_net(op_out.view(-1, softmax_output.size(1) * feature.size(1)))",
                            "Call"
                        ],
                        [
                            "ad_net(random_out.view(-1, random_out.size(1)))",
                            "Call"
                        ],
                        [
                            "ad_net(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCELoss_47": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_70": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CDAN-GD/network.py": {
        "torch": {
            "Sequential_87": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 96, kernel_size=11, stride=4, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256 * 6 * 6, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_131": {
                "variable": {
                    "value": "pretrained_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./alexnet.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.feature_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_211": {
                "variable": {
                    "value": "self.feature_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_265": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_268": {
                "variable": {
                    "value": "self.feature_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_322": {
                "variable": {
                    "value": "self.conv_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=5, stride=2, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_337": {
                "variable": {
                    "value": "self.fc_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256 * 4 * 4, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_344": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_360": {
                "variable": {
                    "value": "self.conv_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 20, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_370": {
                "variable": {
                    "value": "self.fc_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(50 * 4 * 4, 500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_371": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_388": {
                "variable": {
                    "value": "self.ad_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_feature",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_389": {
                "variable": {
                    "value": "self.ad_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_390": {
                "variable": {
                    "value": "self.ad_layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_391": {
                "variable": {
                    "value": "self.fc_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_392": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_393": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_394": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_395": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sigmoid_396": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_48": {
                "variable": {
                    "value": "return_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "return_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "return_list[0] / math.pow(float(self.output_dim), 1.0 / len(return_list))",
                            "BinOp"
                        ],
                        [
                            "torch.mul(return_tensor, single)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "single",
                    "type": "variable",
                    "possible_values": [
                        [
                            "return_list[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "AvgPool3d_60": {
                "variable": {
                    "value": "self.average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(local_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(int((local_size - 1.0) / 2), 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_64": {
                "variable": {
                    "value": "self.average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((local_size - 1.0) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_42": {
                "*size": {
                    "value": "input_dim_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_45": {
                "input": {
                    "value": "input_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.random_matrix[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_91": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_95": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_102": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_111": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_218": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_resnet.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_219": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_223": {
                "variable": {
                    "value": "self.bridge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_226": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_resnet.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_274": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_275": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_276": {
                "variable": {
                    "value": "self.bridge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_282": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_323": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_324": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_325": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_327": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_328": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_329": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_331": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_332": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_333": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_338": {
                "in_features": {
                    "value": "256 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_339": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_361": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_362": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_364": {
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_365": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_366": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_370": {
                "in_features": {
                    "value": "50 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_370": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_370": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "CDAN-GD/pre_process.py": {
        "torch": {
            "from_numpy_54": {
                "ndarray": {
                    "value": "arr.astype('float32') / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CDAN-GD/train_image.py": {
        "torch": {
            "max_64": {
                "variable": {
                    "value": "(_, predict)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.float()",
                            "Call"
                        ],
                        [
                            "torch.cat((all_output, outputs.float()), 0)",
                            "Call"
                        ],
                        [
                            "outputs.float().cpu()",
                            "Call"
                        ],
                        [
                            "torch.cat((all_output, outputs.float().cpu()), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "dset_loaders[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dsets['source']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_config['source']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "dset_loaders[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dsets['target']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_config['source']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_113": {
                "variable": {
                    "value": "dset_loaders[test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dsets['test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_config['test']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_150": {
                "variable": {
                    "value": "ad_net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ad_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network.AdversarialNetwork(config['loss']['random_dim'], 1024)",
                            "Call"
                        ],
                        [
                            "network.AdversarialNetwork(base_network.output_num(), 1024)",
                            "Call"
                        ],
                        [
                            "network.AdversarialNetwork(base_network.output_num() * class_num, 1024)",
                            "Call"
                        ],
                        [
                            "ad_net.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(ad_net, device_ids=[int(i) for i in gpus])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[int(i) for i in gpus]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataParallel_151": {
                "variable": {
                    "value": "base_network",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "base_network",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_config['name'](**net_config['params'])",
                            "Call"
                        ],
                        [
                            "base_network.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(base_network, device_ids=[int(i) for i in gpus])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[int(i) for i in gpus]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features_source, features_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs_source, outputs_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "softmax_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(softmax_src, softmax_tgt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_227": {
                "obj": {
                    "value": "best_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temp_model",
                            "variable"
                        ]
                    ]
                },
                "f": {
                    "value": "osp.join(config['output_path'], 'best_model.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_326": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(1, 10000)",
                            "Call"
                        ],
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_327": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(1, 10000)",
                            "Call"
                        ],
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_328": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(1, 10000)",
                            "Call"
                        ],
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_65": {
                "input": {
                    "value": "torch.squeeze(predict).float() == all_label",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "temp_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "base_network",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_173": {
                "obj": {
                    "value": "nn.Sequential(base_network)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(config['output_path'], 'iter_{:05d}_model.pth.tar'.format(i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_200": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_201": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "all_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_output, outputs.float().cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "all_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_label, labels.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "all_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_output, outputs.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "all_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_label, labels.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_config['test']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "*args": {
                    "value": "base_network",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_196": {
                "input": {
                    "value": "torch.abs(gvbg_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_65": {
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(all_output, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_196": {
                "input": {
                    "value": "gvbg_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_network(inputs_target)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_37": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "GVB-GD/data_list.py": {
        "torch": {}
    },
    "GVB-GD/loss.py": {
        "torch": {
            "sum_22": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-input_ * torch.log(input_ + epsilon)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(entropy, dim=1)",
                            "Call"
                        ],
                        [
                            "Entropy(x)",
                            "Call"
                        ],
                        [
                            "torch.exp(-entropy)",
                            "Call"
                        ],
                        [
                            "-label * torch.log(input_ + self.epsilon) - (1 - label) * torch.log(1 - input_ + self.epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_39": {
                "variable": {
                    "value": "dc_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[1]] * batch_size + [[0]] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_44": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-entropy",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_45": {
                "variable": {
                    "value": "mean_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-input_ * torch.log(input_ + epsilon)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(entropy, dim=1)",
                            "Call"
                        ],
                        [
                            "Entropy(x)",
                            "Call"
                        ],
                        [
                            "torch.exp(-entropy)",
                            "Call"
                        ],
                        [
                            "-label * torch.log(input_ + self.epsilon) - (1 - label) * torch.log(1 - input_ + self.epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_46": {
                "variable": {
                    "value": "gvbg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(focals)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_47": {
                "variable": {
                    "value": "gvbd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(fc_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_49": {
                "variable": {
                    "value": "source_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-input_ * torch.log(input_ + epsilon)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(entropy, dim=1)",
                            "Call"
                        ],
                        [
                            "Entropy(x)",
                            "Call"
                        ],
                        [
                            "torch.exp(-entropy)",
                            "Call"
                        ],
                        [
                            "-label * torch.log(input_ + self.epsilon) - (1 - label) * torch.log(1 - input_ + self.epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_52": {
                "variable": {
                    "value": "target_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-input_ * torch.log(input_ + epsilon)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(entropy, dim=1)",
                            "Call"
                        ],
                        [
                            "Entropy(x)",
                            "Call"
                        ],
                        [
                            "torch.exp(-entropy)",
                            "Call"
                        ],
                        [
                            "-label * torch.log(input_ + self.epsilon) - (1 - label) * torch.log(1 - input_ + self.epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_21": {
                "input": {
                    "value": "input_ + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_46": {
                "input": {
                    "value": "focals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_list[1].reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_47": {
                "input": {
                    "value": "fc_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ad_net(softmax_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_16": {
                "input": {
                    "value": "entropy * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "source_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy * source_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_56": {
                "input": {
                    "value": "target_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy * target_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_15": {
                "input": {
                    "value": "1 - input_ + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "GVB-GD/network.py": {
        "torch": {
            "Sequential_47": {
                "variable": {
                    "value": "self.feature_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.select_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_52": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.ad_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_feature",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.ad_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.ad_layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.gvbd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_113": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_114": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_115": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sigmoid_116": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_resnet.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.gvbg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.focal1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.focal2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_resnet.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.gvbg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_resnet.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "GVB-GD/pre_process.py": {
        "torch": {
            "from_numpy_54": {
                "ndarray": {
                    "value": "arr.astype('float32') / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "GVB-GD/train_image.py": {
        "torch": {
            "max_42": {
                "variable": {
                    "value": "(_, predict)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.float()",
                            "Call"
                        ],
                        [
                            "torch.cat((all_output, outputs.float()), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "dset_loaders[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dsets['source']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_config['source']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "dset_loaders[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dsets['target']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_config['source']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "dset_loaders[test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dsets['test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_config['test']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_99": {
                "variable": {
                    "value": "ad_net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ad_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network.AdversarialNetwork(class_num, 1024)",
                            "Call"
                        ],
                        [
                            "ad_net.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(ad_net, device_ids=[int(i) for (i, k) in enumerate(gpus)])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[int(i) for (i, k) in enumerate(gpus)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataParallel_100": {
                "variable": {
                    "value": "base_network",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "base_network",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_config['name'](**net_config['params'])",
                            "Call"
                        ],
                        [
                            "base_network.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(base_network, device_ids=[int(i) for (i, k) in enumerate(gpus)])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[int(i) for (i, k) in enumerate(gpus)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features_source, features_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs_source, outputs_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "focals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(focal_source, focal_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_162": {
                "obj": {
                    "value": "best_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temp_model",
                            "variable"
                        ]
                    ]
                },
                "f": {
                    "value": "osp.join(config['output_path'], 'best_model.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_248": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2019",
                            "int"
                        ],
                        [
                            "2019",
                            "int"
                        ],
                        [
                            "9297",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_249": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2019",
                            "int"
                        ],
                        [
                            "2019",
                            "int"
                        ],
                        [
                            "9297",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_all_250": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2019",
                            "int"
                        ],
                        [
                            "2019",
                            "int"
                        ],
                        [
                            "9297",
                            "int"
                        ]
                    ]
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "torch.squeeze(predict).float() == all_label",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "temp_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "base_network",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "all_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_output, outputs.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "all_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_label, labels.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_122": {
                "obj": {
                    "value": "base_network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(config['output_path'], 'iter_{:05d}_model.pth.tar'.format(i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_147": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_43": {
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(all_output, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}