{
    "utils/widgets.py": {
        "sklearn": {},
        "torch": {
            "CrossEntropyLoss_71": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_88": {
                "variable": {
                    "value": "probs_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(*data_b)",
                            "Call"
                        ],
                        [
                            "model(data_b)",
                            "Call"
                        ],
                        [
                            "get_output(net, data_b)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_96": {
                "variable": {
                    "value": "pred_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(*data_b)",
                            "Call"
                        ],
                        [
                            "model(data_b)",
                            "Call"
                        ],
                        [
                            "get_output(net, data_b)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_168": {
                "input": {
                    "value": "rel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_108": {
                "input": {
                    "value": "par.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_166": {
                "input": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_157": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_159": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_164": {
                "input": {
                    "value": "diff_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diff",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "common.py": {
        "torch": {
            "device_46": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "toy_examples/one_dim_example.py": {
        "torch": {
            "SummaryWriter_118": {
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(f_dir, f'fedprox_{mu}')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "toy_examples/one_dim_example2.py": {
        "torch": {
            "SummaryWriter_48": {
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_spare_dir(f_dir, c_dir)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train/client.py": {
        "torch": {
            "SGD_171": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Call"
                        ],
                        [
                            "lr",
                            "Call"
                        ],
                        [
                            "lr",
                            "Call"
                        ],
                        [
                            "lr",
                            "Call"
                        ],
                        [
                            "lr",
                            "Call"
                        ],
                        [
                            "lr",
                            "Call"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=raw_data_dir, train=True, download=True)",
                            "Call"
                        ],
                        [
                            "train_set",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler.SubsetRandomSampler(self.train_indices)",
                            "Call"
                        ],
                        [
                            "sampler.SequentialSampler(self.train_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_136": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_187": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_91": {
                "variable": {
                    "value": "_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.train_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_93": {
                "variable": {
                    "value": "_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self.train_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_332": {
                "input": {
                    "value": "par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(net.parameters(), grad_sum)",
                            "Call"
                        ],
                        [
                            "initial_model.parameters()",
                            "Call"
                        ],
                        [
                            "zip(model.parameters(), initial_model.parameters())",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_175": {
                "input": {
                    "value": "par.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_333": {
                "input": {
                    "value": "par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(net.parameters(), grad_sum)",
                            "Call"
                        ],
                        [
                            "initial_model.parameters()",
                            "Call"
                        ],
                        [
                            "zip(model.parameters(), initial_model.parameters())",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_227": {
                "input": {
                    "value": "par.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_232": {
                "input": {
                    "value": "par.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train/model.py": {
        "torch": {
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_42": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_90": {
                "variable": {
                    "value": "neg_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTM_98": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_105": {
                "variable": {
                    "value": "(x, lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x)",
                            "Call"
                        ],
                        [
                            "x[lengths - 1, range(x.shape[1])]",
                            "Subscript"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.dmp(x, lengths, 1, 2, pool_ranges=lengths + (self.ks1 - 1))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, dim // 2, x.shape[1] // (dim // 2), x.shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, dim // 4, x.shape[1] // (dim // 4), x.shape[-1])",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.dmp(x, lengths, 2, 2, pool_ranges=numpy.array(pool_result_ranges) + (self.ks2[1] - 1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_109": {
                "variable": {
                    "value": "neg_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x)",
                            "Call"
                        ],
                        [
                            "x[lengths - 1, range(x.shape[1])]",
                            "Subscript"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.dmp(x, lengths, 1, 2, pool_ranges=lengths + (self.ks1 - 1))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, dim // 2, x.shape[1] // (dim // 2), x.shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, dim // 4, x.shape[1] // (dim // 4), x.shape[-1])",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.dmp(x, lengths, 2, 2, pool_ranges=numpy.array(pool_result_ranges) + (self.ks2[1] - 1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_121": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.ks1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.ks1 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "num_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "14 * num_features // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.ks2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, self.ks2[1] - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "num_features // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.top_k * 14 * num_features // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_130": {
                "variable": {
                    "value": "(x, lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x)",
                            "Call"
                        ],
                        [
                            "x[lengths - 1, range(x.shape[1])]",
                            "Subscript"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.dmp(x, lengths, 1, 2, pool_ranges=lengths + (self.ks1 - 1))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, dim // 2, x.shape[1] // (dim // 2), x.shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, dim // 4, x.shape[1] // (dim // 4), x.shape[-1])",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.dmp(x, lengths, 2, 2, pool_ranges=numpy.array(pool_result_ranges) + (self.ks2[1] - 1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_146": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x)",
                            "Call"
                        ],
                        [
                            "x[lengths - 1, range(x.shape[1])]",
                            "Subscript"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.dmp(x, lengths, 1, 2, pool_ranges=lengths + (self.ks1 - 1))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, dim // 2, x.shape[1] // (dim // 2), x.shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, dim // 4, x.shape[1] // (dim // 4), x.shape[-1])",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.dmp(x, lengths, 2, 2, pool_ranges=numpy.array(pool_result_ranges) + (self.ks2[1] - 1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x)",
                            "Call"
                        ],
                        [
                            "x[lengths - 1, range(x.shape[1])]",
                            "Subscript"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.dmp(x, lengths, 1, 2, pool_ranges=lengths + (self.ks1 - 1))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, dim // 2, x.shape[1] // (dim // 2), x.shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, dim // 4, x.shape[1] // (dim // 4), x.shape[-1])",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.dmp(x, lengths, 2, 2, pool_ranges=numpy.array(pool_result_ranges) + (self.ks2[1] - 1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_160": {
                "variable": {
                    "value": "neg_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pool(F.relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool(F.relu(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * 5 * 5)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 28 * 28)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(x)",
                            "Call"
                        ],
                        [
                            "x[lengths - 1, range(x.shape[1])]",
                            "Subscript"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.dmp(x, lengths, 1, 2, pool_ranges=lengths + (self.ks1 - 1))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, dim // 2, x.shape[1] // (dim // 2), x.shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, dim // 4, x.shape[1] // (dim // 4), x.shape[-1])",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.dmp(x, lengths, 2, 2, pool_ranges=numpy.array(pool_result_ranges) + (self.ks2[1] - 1))",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_sequence_223": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pad_sequence(results, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_230": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_30": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(common.cache_fd, f'{self.id}.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(common.cache_fd, f'{self.id}.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(common.cache_fd, f'{self.id}.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_91": {
                "tensors": {
                    "value": "(neg_vec, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "tensors": {
                    "value": "(neg_vec, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_161": {
                "tensors": {
                    "value": "(neg_vec, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_26": {
                "f": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(common.cache_fd, f'{self.id}.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(common.cache_fd, f'{self.id}.pth')",
                            "Call"
                        ],
                        [
                            "osp.join(common.cache_fd, f'{self.id}.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_49": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_50": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train/prepare_clients.py": {
        "torch": {}
    },
    "train/server.py": {
        "torch": {
            "CrossEntropyLoss_655": {
                "variable": {
                    "value": "criterion_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_656": {
                "variable": {
                    "value": "criterion_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_127": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_252": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr(current_round)",
                            "Call"
                        ],
                        [
                            "list(zip(decay_steps, lrs))[::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_270": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_ / num_training_samples",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/alibaba.py": {
        "torch": {
            "from_numpy_99": {
                "variable": {
                    "value": "gid_his",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(gid_his)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "cid_his",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(cid_his)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_181": {
                "variable": {
                    "value": "uids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(uids, dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_182": {
                "variable": {
                    "value": "gids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(gids, dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "cids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(cids, dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_184": {
                "variable": {
                    "value": "clicks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(clicks, dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_186": {
                "variable": {
                    "value": "gid_his",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "gid_his",
                    "type": "variable",
                    "possible_values": [
                        [
                            "line[AlibabaDataset.GOOD_HIS]",
                            "Subscript"
                        ],
                        [
                            "' '.join([str(good_map[_gid]) for _gid in gid_his.split('\\x02')])",
                            "Call"
                        ],
                        [
                            "datum[AlibabaDataset.GOOD_HIS]",
                            "Subscript"
                        ],
                        [
                            "[int(x) for x in gid_his.split(_split_his)]",
                            "ListComp"
                        ],
                        [
                            "torch.from_numpy(np.array(gid_his))",
                            "Call"
                        ],
                        [
                            "gid_his[-self.max_length:]",
                            "Subscript"
                        ],
                        [
                            "tuple(zip(*batch))",
                            "Call"
                        ],
                        [
                            "pad_sequence(gid_his, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_187": {
                "variable": {
                    "value": "cid_his",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "cid_his",
                    "type": "variable",
                    "possible_values": [
                        [
                            "line[AlibabaDataset.CAT_HIS]",
                            "Subscript"
                        ],
                        [
                            "' '.join([str(cat_map[_cid]) for _cid in cid_his.split('\\x02')])",
                            "Call"
                        ],
                        [
                            "datum[AlibabaDataset.CAT_HIS]",
                            "Subscript"
                        ],
                        [
                            "[int(x) for x in cid_his.split(_split_his)]",
                            "ListComp"
                        ],
                        [
                            "torch.from_numpy(np.array(cid_his))",
                            "Call"
                        ],
                        [
                            "cid_his[-self.max_length:]",
                            "Subscript"
                        ],
                        [
                            "tuple(zip(*batch))",
                            "Call"
                        ],
                        [
                            "pad_sequence(cid_his, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_188": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gid_his",
                    "type": "variable",
                    "possible_values": [
                        [
                            "line[AlibabaDataset.GOOD_HIS]",
                            "Subscript"
                        ],
                        [
                            "' '.join([str(good_map[_gid]) for _gid in gid_his.split('\\x02')])",
                            "Call"
                        ],
                        [
                            "datum[AlibabaDataset.GOOD_HIS]",
                            "Subscript"
                        ],
                        [
                            "[int(x) for x in gid_his.split(_split_his)]",
                            "ListComp"
                        ],
                        [
                            "torch.from_numpy(np.array(gid_his))",
                            "Call"
                        ],
                        [
                            "gid_his[-self.max_length:]",
                            "Subscript"
                        ],
                        [
                            "tuple(zip(*batch))",
                            "Call"
                        ],
                        [
                            "pad_sequence(gid_his, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/alibaba_get_availability.py": {
        "torch": {
            "from_numpy_76": {
                "variable": {
                    "value": "gid_his",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([gid for (day, gid, cid) in client_behavior if start_day <= day < end_day], dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "cid_his",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([cid for (day, gid, cid) in client_behavior if start_day <= day < end_day], dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/din.py": {
        "torch": {
            "rand_203": {
                "variable": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, 2 * D)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_204": {
                "variable": {
                    "value": "user_behaviors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, L, 2 * D)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_205": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, L)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_225": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(12).reshape(3, 4).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_16": {
                "variable": {
                    "value": "m.weight.data[...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(open(fp, 'rb'))",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features).fill_(0.25)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_24": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_28": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp_normed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim * 9",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[queries, user_behaviors, queries - user_behaviors, queries * user_behaviors]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_94": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones((B, L))",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([[1, 1, 1], [1, 1, 0], [1, 0, 0]])",
                            "Call"
                        ],
                        [
                            "masks.unsqueeze(-1).to(dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "masks",
                            "Method Argument"
                        ],
                        [
                            "masks",
                            "Method Argument"
                        ],
                        [
                            "masks",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([queries, user_behaviors, queries - user_behaviors, queries * user_behaviors], dim=2)",
                            "Call"
                        ],
                        [
                            "scores.view(-1, D * 8)",
                            "Call"
                        ],
                        [
                            "self.activation(self.fc1(scores))",
                            "Call"
                        ],
                        [
                            "self.activation(self.fc2(scores))",
                            "Call"
                        ],
                        [
                            "self.fc3(scores)",
                            "Call"
                        ],
                        [
                            "scores.view(B, L, 1)",
                            "Call"
                        ],
                        [
                            "torch.where(masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(scores) * (-2 ** 32 + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_95": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([queries, user_behaviors, queries - user_behaviors, queries * user_behaviors], dim=2)",
                            "Call"
                        ],
                        [
                            "scores.view(-1, D * 8)",
                            "Call"
                        ],
                        [
                            "self.activation(self.fc1(scores))",
                            "Call"
                        ],
                        [
                            "self.activation(self.fc2(scores))",
                            "Call"
                        ],
                        [
                            "self.fc3(scores)",
                            "Call"
                        ],
                        [
                            "scores.view(B, L, 1)",
                            "Call"
                        ],
                        [
                            "torch.where(masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_111": {
                "variable": {
                    "value": "self.user_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_users",
                    "type": "variable",
                    "possible_values": [
                        [
                            "49023",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "18",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_112": {
                "variable": {
                    "value": "self.good_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_goods",
                    "type": "variable",
                    "possible_values": [
                        [
                            "143534",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "18",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_113": {
                "variable": {
                    "value": "self.cat_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_cats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4815",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "18",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_133": {
                "variable": {
                    "value": "query_b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[good_b, cat_b]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "user_behaviors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[good_his_b, cat_his_b]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "mlp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[user_b, query_b, user_behaviors_sum_b, user_behaviors_sum_b * query_b, attention_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "query_b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[good_b, cat_b]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "user_behaviors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[good_his_b, cat_his_b]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "mlp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[user_b, query_b, user_behaviors_sum_b, user_behaviors_sum_b * query_b, attention_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "PReLU_44": {
                "variable": {
                    "value": "self.a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "PReLU_45": {
                "variable": {
                    "value": "self.a2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "hidden_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_158": {
                "variable": {
                    "value": "self.embeddings[user]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "din_source.num_users",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "din_source.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_159": {
                "variable": {
                    "value": "self.embeddings[good]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "din_source.num_goods",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "din_source.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_160": {
                "variable": {
                    "value": "self.embeddings[cat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "din_source.num_cats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "din_source.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_92": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([queries, user_behaviors, queries - user_behaviors, queries * user_behaviors], dim=2)",
                            "Call"
                        ],
                        [
                            "scores.view(-1, D * 8)",
                            "Call"
                        ],
                        [
                            "self.activation(self.fc1(scores))",
                            "Call"
                        ],
                        [
                            "self.activation(self.fc2(scores))",
                            "Call"
                        ],
                        [
                            "self.fc3(scores)",
                            "Call"
                        ],
                        [
                            "scores.view(B, L, 1)",
                            "Call"
                        ],
                        [
                            "torch.where(masks, scores, paddings)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(scores, dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/load_from_tensorflow.py": {
        "torch": {
            "DataLoader_72": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AlibabaDataset(alibaba_test_fp)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "AlibabaDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_17": {
                "variable": {
                    "value": "m.weight.data[...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(open(fp, 'rb'))",
                            "Call"
                        ],
                        [
                            "pickle.load(open(fp, 'rb'))",
                            "Call"
                        ],
                        [
                            "pickle.load(open(weight_fp, 'rb'))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_24": {
                "ndarray": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(open(fp, 'rb'))",
                            "Call"
                        ],
                        [
                            "pickle.load(open(fp, 'rb'))",
                            "Call"
                        ],
                        [
                            "pickle.load(open(weight_fp, 'rb'))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_33": {
                "variable": {
                    "value": "m.weight.data[...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight.transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "variable": {
                    "value": "m.bias.data[...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(open(bias_fp, 'rb'))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "m.weight.data[...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gamma.transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "m.bias.data[...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(open(beta_fp, 'rb'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/logger.py": {
        "torch": {
            "SummaryWriter_63": {
                "variable": {
                    "value": "self.summaryWriter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.tb_fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "purge_step": {
                    "value": "c_round",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.load_meta()['current_round']",
                            "Subscript"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c_round",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_92": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(self.ck_fd, fn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_87": {
                "f": {
                    "value": "osp.join(self.ck_fd, Logger.MODEL_FN)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/partition.py": {
        "torch": {}
    },
    "utils/sentiment140.py": {
        "torch": {
            "DataLoader_780": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Sentiment140Dataset(ComposedProcess(BasicProcess()))",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "Sentiment140Dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_sequence_389": {
                "variable": {
                    "value": "tweets",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "tweets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloader",
                            "variable"
                        ],
                        [
                            "tuple(zip(*batch))",
                            "Call"
                        ],
                        [
                            "np.array(tweets)[order]",
                            "Subscript"
                        ],
                        [
                            "[torch.from_numpy(tweet) for tweet in tweets]",
                            "ListComp"
                        ],
                        [
                            "pack_sequence(tweets)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_651": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_388": {
                "ndarray": {
                    "value": "tweet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "variable"
                        ],
                        [
                            "data_tup[Sentiment140Dataset.TWEET]",
                            "Subscript"
                        ],
                        [
                            "data_tup[Sentiment140Dataset.TWEET]",
                            "Subscript"
                        ],
                        [
                            "tup[Sentiment140Dataset.TWEET]",
                            "Subscript"
                        ],
                        [
                            "self.transform(tweet)",
                            "Call"
                        ],
                        [
                            "data_tup[Sentiment140Dataset.TWEET]",
                            "Subscript"
                        ],
                        [
                            "data_tup[Sentiment140Dataset.TWEET]",
                            "Subscript"
                        ],
                        [
                            "data_tup[Sentiment140Dataset.TWEET]",
                            "Subscript"
                        ],
                        [
                            "data_tup[Sentiment140Dataset.TWEET]",
                            "Subscript"
                        ],
                        [
                            "BeautifulSoup(tweet, 'lxml').get_text()",
                            "Call"
                        ],
                        [
                            "re.sub(user_pat, 'atUSERNAMEat', tweet)",
                            "Call"
                        ],
                        [
                            "re.sub(http_pat, 'URLhttp', tweet)",
                            "Call"
                        ],
                        [
                            "tweet.replace(u'\u00ef\u00bf\u00bd', ' ')",
                            "Call"
                        ],
                        [
                            "tweet.lower()",
                            "Call"
                        ],
                        [
                            "re.sub(punctuation_pat, ' ', tweet)",
                            "Call"
                        ],
                        [
                            "' '.join(words)",
                            "Call"
                        ],
                        [
                            "data_tup[Sentiment140Dataset.TWEET]",
                            "Subscript"
                        ],
                        [
                            "data_tup[Sentiment140Dataset.TWEET]",
                            "Subscript"
                        ],
                        [
                            "tweet",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_390": {
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloader",
                            "variable"
                        ],
                        [
                            "tuple(zip(*batch))",
                            "Call"
                        ],
                        [
                            "np.array(labels)[order]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}