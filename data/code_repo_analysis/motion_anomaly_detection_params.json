{
    "datasets/optical_flow_dataset.py": {
        "torch": {
            "from_numpy_145": {
                "variable": {
                    "value": "of_img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "of_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stack_channels(ofx, ofy)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of_img)",
                            "Call"
                        ],
                        [
                            "self.transform(of_img)",
                            "Call"
                        ],
                        [
                            "of_img - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_146": {
                "variable": {
                    "value": "of_body_img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "of_body_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stack_channels(ofx_body, ofy_body)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of_body_img)",
                            "Call"
                        ],
                        [
                            "self.transform(of_body_img)",
                            "Call"
                        ],
                        [
                            "of_body_img - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_182": {
                "variable": {
                    "value": "of_img_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "of_img_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stack_channels(ofx_prev, ofy_prev)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of_img_prev)",
                            "Call"
                        ],
                        [
                            "self.transform(of_img_prev)",
                            "Call"
                        ],
                        [
                            "of_img_prev - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "of_body_img_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "of_body_img_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stack_channels(ofx_body_prev, ofy_body_prev)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(of_body_img_prev)",
                            "Call"
                        ],
                        [
                            "self.transform(of_body_img_prev)",
                            "Call"
                        ],
                        [
                            "of_body_img_prev - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/probabilistic_unet/probabilistic_unet.py": {
        "torch": {
            "Independent_117": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "base_distribution": {
                    "value": "Normal(loc=mu, scale=torch.exp(log_sigma))",
                    "type": "Call",
                    "possible_values": []
                },
                "reinterpreted_batch_ndims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_117": {
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu_log_sigma[:, :self.latent_dim]",
                            "Subscript"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.exp(log_sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/probabilistic_unet/unet.py": {
        "torch": {}
    },
    "models/probabilistic_unet/unet_blocks.py": {
        "torch": {
            "Sequential_30": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up, bridge]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_48": {
                "variable": {
                    "value": "self.upconv_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_55": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_21": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/probabilistic_unet/utils.py": {
        "torch": {}
    },
    "models/unet_trainer.py": {
        "torch": {
            "mse_loss_56": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prob_unet.reconstruction",
                            "Attribute"
                        ],
                        [
                            "self.prob_unet.sample(testing=not self.training)",
                            "Call"
                        ],
                        [
                            "self(batch)",
                            "Call"
                        ],
                        [
                            "self(batch)",
                            "Call"
                        ],
                        [
                            "self(batch)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mse_loss_63": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prob_unet.reconstruction",
                            "Attribute"
                        ],
                        [
                            "self.prob_unet.sample(testing=not self.training)",
                            "Call"
                        ],
                        [
                            "self(batch)",
                            "Call"
                        ],
                        [
                            "self(batch)",
                            "Call"
                        ],
                        [
                            "self(batch)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_69": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['log']['loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_69": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_74": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_75": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(self.parameters(), lr=self.hparams.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_107": {
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OpticalFlowPair(self.hparams.val_video_root, flow_type=self.hparams.flow_type, frame_offset_start=self.hparams.prediction_offset_start, frame_offset=self.hparams.prediction_offset, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.hparams.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OpticalFlowPair(self.hparams.test_video_root, flow_type=self.hparams.flow_type, frame_offset_start=self.hparams.prediction_offset_start, frame_offset=self.hparams.prediction_offset, transform=transform, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.hparams.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OpticalFlowPair(self.hparams.video_root, flow_type=self.hparams.flow_type, frame_offset_start=self.hparams.prediction_offset_start, frame_offset=self.hparams.prediction_offset, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.hparams.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_93": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OpticalFlowPair(self.hparams.video_root, flow_type=self.hparams.flow_type, frame_offset_start=self.hparams.prediction_offset_start, frame_offset=self.hparams.prediction_offset, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.hparams.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}