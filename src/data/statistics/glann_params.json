{
    "fid_score.py": {
        "torch": {
            "from_numpy_116": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ims[start:end]",
                            "Subscript"
                        ],
                        [
                            "images.transpose((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "images / 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_125": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "glo.py": {
        "torch": {
            "Adam_64": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr * opt_params.factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_66": {
                "variable": {
                    "value": "optimizerZ",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netZ.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt_params.lr * opt_params.decay_rate ** decay_steps",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(self.vis_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "Iact",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ims_np[:self.vis_n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rp[i * batch_size:(i + 1) * batch_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ims_np[rp[i * batch_size:(i + 1) * batch_size]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_50": {
                "obj": {
                    "value": "self.netZ.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'runs/nets_%s/netZ_nag.pth' % self.rn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_51": {
                "obj": {
                    "value": "self.netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'runs/nets_%s/netG_nag.pth' % self.rn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_85": {
                "variable": {
                    "value": "Ii",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Ii",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.netG(zi)",
                            "Call"
                        ],
                        [
                            "Ii.expand((batch_size, 3, Ii.size(2), Ii.size(3)))",
                            "Call"
                        ],
                        [
                            "F.pad(Ii, (2, 2, 2, 2))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(2, 2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_86": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np_data).float().cuda()",
                            "Call"
                        ],
                        [
                            "images.expand_as(Ii)",
                            "Call"
                        ],
                        [
                            "F.pad(images, (2, 2, 2, 2))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(2, 2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "icp.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_28": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_30": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.lin_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "yn",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "yn",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_78": {
                "variable": {
                    "value": "optimizerT",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netT.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.opt_params.lr * self.opt_params.decay_rate ** decay_steps",
                            "BinOp"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_80": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_87": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.opt_params.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "self.e_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "e_np[indices[rp[idx_np]]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "z_act",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "z_np[rp[idx_np]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "inception.py": {
        "torch": {
            "ModuleList_77": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_210": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_238": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_271": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_306": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_215": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_310": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_89": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_98": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_122": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Embedding_26": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "nz",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.lin_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_45": {
                "variable": {
                    "value": "self.bn_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.lin_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_47": {
                "variable": {
                    "value": "self.bn_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.dim_im",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_49": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_51": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_52": {
                "variable": {
                    "value": "self.sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_55": {
                "variable": {
                    "value": "self.nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "test_fid.py": {
        "torch": {
            "load_41": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'runs/nets_%s/netZ_nag.pth' % rn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_47": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'runs/nets_%s/netT_nag.pth' % rn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_52": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'runs/nets_%s/netG_nag.pth' % rn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Zs[np.arange(batch_size) + batch_size * i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "W[np.arange(batch_size) + batch_size * i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "ndarray": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load('runs/nets_%s/netZ_nag.pth' % rn)",
                            "Call"
                        ],
                        [
                            "W['emb.weight'].data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_68": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['fid']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['icp']['dim']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "train_glo.py": {
        "torch": {}
    },
    "train_icp.py": {
        "torch": {
            "load_36": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'runs/nets_%s/netZ_nag.pth' % rn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'runs/nets_%s/netG_nag.pth' % rn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_46": {
                "obj": {
                    "value": "icpt.icp.netT.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'runs/nets_%s/netT_nag.pth' % rn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_48": {
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['icp']['dim']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "from_numpy_42": {
                "variable": {
                    "value": "z_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.multivariate_normal(mu, cov2, size=m)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_66": {
                "variable": {
                    "value": "ims_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ims_gen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "unnorm(ims_gen, mu, sd)",
                            "Call"
                        ],
                        [
                            "ims_gen.data.index_select(1, rev_idx)",
                            "Call"
                        ],
                        [
                            "torch.clamp(ims_gen, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "L1Loss_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vgg_metric.py": {
        "torch": {
            "abs_41": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "I1 - I2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_41": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_51": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_70": {
                "variable": {
                    "value": "self.subs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_75": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "I1 - I2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_75": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_43": {
                "variable": {
                    "value": "layer_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f1[i] - f2[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_43": {
                "variable": {
                    "value": "layer_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_61": {
                "variable": {
                    "value": "layer_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f1[i] - f2[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_61": {
                "variable": {
                    "value": "layer_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_77": {
                "variable": {
                    "value": "layer_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f1[i] - f2[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_77": {
                "variable": {
                    "value": "layer_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_85": {
                "variable": {
                    "value": "layer_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f1[i] - f2[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_85": {
                "variable": {
                    "value": "layer_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_83": {
                "input": {
                    "value": "self.subs(I1) - self.subs(I2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}