{
    "dataloader.py": {
        "torch": {}
    },
    "demo.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_19": {
                "variable": {
                    "value": "g_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "device_62": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "MSELoss_94": {
                "variable": {
                    "value": "MSE_Loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "save_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[predicted_image, target_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedSampler_75": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CelebDataSet(data_path=args.data_path, state='test')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CelebDataSet(data_path=args.data_path, state='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CelebDataSet(data_path=args.data_path, state='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_83": {
                "variable": {
                    "value": "g_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(args.local_rank)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_87": {
                "variable": {
                    "value": "g_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_72": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Conv2d_40": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "EqualConv2d(dim, dim, kernel_size=3, padding=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "EqualConv2d(in_plane, out_plane, kernel_size=3, padding=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_99": {
                "variable": {
                    "value": "self.to_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(256, 3, kernel_size=1, stride=1, padding=0), nn.Conv2d(128, 3, kernel_size=1, stride=1, padding=0), nn.Conv2d(64, 3, kernel_size=1, stride=1, padding=0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.step1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*step1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.step2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*step2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.step3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*step3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_142": {
                "variable": {
                    "value": "self.from_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(3, 256, kernel_size=1, stride=1, padding=0), nn.Conv2d(3, 128, kernel_size=1, stride=1, padding=0), nn.Conv2d(3, 64, kernel_size=1, stride=1, padding=0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "self.step1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*step1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.step2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*step2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.step3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*step3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, mean_std]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_199": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.step1(input)",
                            "Call"
                        ],
                        [
                            "self.to_rgb[step - 1](out)",
                            "Call"
                        ],
                        [
                            "self.step2(prev)",
                            "Call"
                        ],
                        [
                            "(1 - alpha) * skip_rgb + alpha * self.to_rgb[step - 1](out)",
                            "BinOp"
                        ],
                        [
                            "self.step2(self.step1(input))",
                            "Call"
                        ],
                        [
                            "self.to_rgb[step - 1](out)",
                            "Call"
                        ],
                        [
                            "self.step3(prev)",
                            "Call"
                        ],
                        [
                            "(1 - alpha) * skip_rgb + alpha * self.to_rgb[step - 1](out)",
                            "BinOp"
                        ],
                        [
                            "self.step3(self.step2(self.step1(input)))",
                            "Call"
                        ],
                        [
                            "self.to_rgb[step - 1](out)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[step - 1](input)",
                            "Call"
                        ],
                        [
                            "self.step1(out)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[step - 1](input)",
                            "Call"
                        ],
                        [
                            "self.step2(out)",
                            "Call"
                        ],
                        [
                            "(1 - alpha) * skip_rgb + alpha * out",
                            "BinOp"
                        ],
                        [
                            "self.step1(out)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[step - 1](input)",
                            "Call"
                        ],
                        [
                            "self.step3(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out, mean_std], dim=1)",
                            "Call"
                        ],
                        [
                            "self.equal_conv(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 16, stride=1)",
                            "Call"
                        ],
                        [
                            "out.view(input.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "out.squeeze_(dim=1)",
                            "Call"
                        ],
                        [
                            "(1 - alpha) * skip_rgb + alpha * out",
                            "BinOp"
                        ],
                        [
                            "self.step2(out)",
                            "Call"
                        ],
                        [
                            "self.step1(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "data": {
                    "value": "weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_70": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_72": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_84": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_89": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_95": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_96": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_147": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_148": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_149": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_179": {
                "variable": {
                    "value": "skip_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_118": {
                "variable": {
                    "value": "skip_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.to_rgb[step - 2](prev)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_128": {
                "variable": {
                    "value": "skip_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.to_rgb[step - 2](prev)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_188": {
                "variable": {
                    "value": "skip_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ssim.py": {
        "torch": {
            "Tensor_7": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_73": {
                "variable": {
                    "value": "cs_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(cs_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_74": {
                "variable": {
                    "value": "ret_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(ret_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_95": {
                "variable": {
                    "value": "mssim",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mssim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mssim)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_96": {
                "variable": {
                    "value": "mcs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mcs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mcs)",
                            "Call"
                        ]
                    ]
                }
            },
            "prod_107": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pow1[:-1] * pow2[-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_43": {
                "variable": {
                    "value": "img1_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1[:, ch, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_44": {
                "variable": {
                    "value": "img2_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2[:, ch, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_45": {
                "variable": {
                    "value": "mu1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(img1[:, ch, :, :], 1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(1, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "conv2d_46": {
                "variable": {
                    "value": "mu2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(img2[:, ch, :, :], 1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(1, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "mean_63": {
                "variable": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v1 / v2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "avg_pool2d_92": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_93": {
                "variable": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(img2, (2, 2))",
                            "Call"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_73": {
                "tensors": {
                    "value": "cs_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_74": {
                "tensors": {
                    "value": "ret_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "max_22": {
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_27": {
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_52": {
                "input": {
                    "value": "img1_ch * img1_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(1, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "conv2d_53": {
                "input": {
                    "value": "img2_ch * img2_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(1, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "conv2d_54": {
                "input": {
                    "value": "img1_ch * img2_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(1, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            }
        }
    }
}