{
    "metrics/bleu.py": {
        "torch": {
            "ones_108": {
                "variable": {
                    "value": "valid_tokens_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tensor.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics/sequence_accuracy.py": {
        "torch": {
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/seq2seq.py": {
        "torch": {
            "ones_104": {
                "variable": {
                    "value": "bos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "src.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_120": {
                "variable": {
                    "value": "output_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_ids + [next_id]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(output_ids, dim=1)",
                            "Call"
                        ],
                        [
                            "output_ids.index_select(dim=0, index=rev_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_weights + [attn_weight]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(attention_weights, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_156": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.getCurrentState() for b in beam]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "t_156": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_162": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generator(hidden_output)",
                            "Call"
                        ],
                        [
                            "self.generator(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.encoder.embedding.weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modules/attention.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Softmax_14": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tanh_15": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_27": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gamma_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_in(h).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.tanh(gamma_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_27": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_29": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_29": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.linear_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.linear_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.linear_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.linear_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + emb_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_48": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_49": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_58": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_58": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "[c_t, h, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_30": {
                "tensors": {
                    "value": "[c_t, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "modules/beam.py": {
        "torch": {
            "stack_117": {
                "tensors": {
                    "value": "attn[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "modules/ema.py": {
        "torch": {}
    },
    "modules/rnn.py": {
        "torch": {
            "Dropout_25": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_47": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ],
                        [
                            "h_1 + [h_1_i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_48": {
                "variable": {
                    "value": "c_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(c_1)",
                            "Call"
                        ],
                        [
                            "c_1 + [c_1_i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LSTM_78": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_119": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_148": {
                "variable": {
                    "value": "hidden_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hidden_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unpack(hidden_outputs, batch_first=True)[0]",
                            "Subscript"
                        ],
                        [
                            "hidden_outputs[:, :, :self.hidden_size] + hidden_outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(hidden_outputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_76": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_124": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTMCell_30": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "run.py": {
        "torch": {
            "manual_seed_52": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_53": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_54": {
                "device": {
                    "value": "opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_185": {
                "variable": {
                    "value": "model_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.restore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "util.device_mapping(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "gather_433": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[output['loss'].unsqueeze(0) for output in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "used_device_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_1023": {
                "variable": {
                    "value": "model_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch_to_load))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "util.device_mapping(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_1024": {
                "variable": {
                    "value": "training_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "training_state_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'training_state_epoch_{}.th'.format(epoch_to_load))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "util.device_mapping(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_914": {
                "obj": {
                    "value": "model_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.state_dict()",
                            "Call"
                        ],
                        [
                            "torch.load(model_path, map_location=util.device_mapping(-1))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(self._serialization_dir, 'model_state_epoch_{}.th'.format(epoch_to_load))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_925": {
                "obj": {
                    "value": "training_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'val_metric_per_epoch': val_metric_per_epoch, 'optimizer': self.optimizer.state_dict(), 'batch_num_total': self._batch_num_total}",
                            "Dict"
                        ],
                        [
                            "torch.load(training_state_path, map_location=util.device_mapping(-1))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "training_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._serialization_dir, 'training_state_epoch_{}.th'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_513": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dict['loss']",
                            "Subscript"
                        ],
                        [
                            "loss + self.model.get_regularization_penalty()",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.batch_loss(batch, for_training=True)",
                            "Call"
                        ],
                        [
                            "self.batch_loss(batch, for_training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_543": {
                "variable": {
                    "value": "update_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_updates[name].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_544": {
                "variable": {
                    "value": "param_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_638": {
                "input": {
                    "value": "torch.tensor(grad_data.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_802": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_518": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_573": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_638": {
                "data": {
                    "value": "grad_data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}