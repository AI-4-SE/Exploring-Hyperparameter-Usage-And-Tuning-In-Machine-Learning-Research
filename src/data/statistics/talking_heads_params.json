{
    "Pytorch_VGGFACE_IR.py": {
        "torch": {
            "pad_46": {
                "variable": {
                    "value": "conv1_1_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "relu1_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_1(conv1_1_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_49": {
                "variable": {
                    "value": "conv1_2_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv1_1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "relu1_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_2(conv1_2_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_52": {
                "variable": {
                    "value": "pool1_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu1_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv1_2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_53": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(relu1_2, (0, 1, 0, 1), value=float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_54": {
                "variable": {
                    "value": "conv2_1_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(pool1_pad, kernel_size=(2, 2), stride=(2, 2), padding=0, ceil_mode=False)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "relu2_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2_1(conv2_1_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_57": {
                "variable": {
                    "value": "conv2_2_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu2_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv2_1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "relu2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2_2(conv2_2_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_60": {
                "variable": {
                    "value": "pool2_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu2_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv2_2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_61": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(relu2_2, (0, 1, 0, 1), value=float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_62": {
                "variable": {
                    "value": "conv3_1_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(pool2_pad, kernel_size=(2, 2), stride=(2, 2), padding=0, ceil_mode=False)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "relu3_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv3_1(conv3_1_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_65": {
                "variable": {
                    "value": "conv3_2_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu3_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv3_1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "relu3_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv3_2(conv3_2_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_68": {
                "variable": {
                    "value": "conv3_3_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu3_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv3_2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "relu3_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv3_3(conv3_3_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_71": {
                "variable": {
                    "value": "pool3_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu3_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv3_3)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_72": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(relu3_3, (0, 1, 0, 1), value=float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_73": {
                "variable": {
                    "value": "conv4_1_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(pool3_pad, kernel_size=(2, 2), stride=(2, 2), padding=0, ceil_mode=False)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "relu4_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv4_1(conv4_1_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_76": {
                "variable": {
                    "value": "conv4_2_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu4_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv4_1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "relu4_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv4_2(conv4_2_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_79": {
                "variable": {
                    "value": "conv4_3_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu4_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv4_2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "relu4_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv4_3(conv4_3_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_82": {
                "variable": {
                    "value": "pool4_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu4_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv4_3)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_83": {
                "variable": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(relu4_3, (0, 1, 0, 1), value=float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_84": {
                "variable": {
                    "value": "conv5_1_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(pool4_pad, kernel_size=(2, 2), stride=(2, 2), padding=0, ceil_mode=False)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "relu5_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv5_1(conv5_1_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_87": {
                "variable": {
                    "value": "conv5_2_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu5_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv5_1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "relu5_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv5_2(conv5_2_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_90": {
                "variable": {
                    "value": "conv5_3_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu5_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv5_2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_92": {
                "variable": {
                    "value": "relu5_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv5_3(conv5_3_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_93": {
                "variable": {
                    "value": "pool5_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu5_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv5_3)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_94": {
                "variable": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool5_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(relu5_3, (0, 1, 0, 1), value=float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "relu6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc6_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc6_1(fc6_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_98": {
                "variable": {
                    "value": "drop6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(fc6_1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "relu7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc7_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc7_1(fc7_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_102": {
                "variable": {
                    "value": "drop7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(fc7_1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_105": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc8_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc8_1(fc8_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_119": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_112": {
                "ndarray": {
                    "value": "__weights_dict[name]['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_124": {
                "ndarray": {
                    "value": "__weights_dict[name]['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "ndarray": {
                    "value": "__weights_dict[name]['bias']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv3d_121": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_126": {
                "ndarray": {
                    "value": "__weights_dict[name]['bias']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/dataset_class.py": {
        "torch": {
            "from_numpy_41": {
                "variable": {
                    "value": "frame_mark",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(frame_mark)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_44": {
                "variable": {
                    "value": "g_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_60": {
                "variable": {
                    "value": "random_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "len(frame_mark_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "frame_mark_images",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(frame_mark_images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "frame_mark",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(frame_mark)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "embedder_inference.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_16": {
                "variable": {
                    "value": "cpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "variable": {
                    "value": "frame_mark_video",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(frame_mark_video)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "variable": {
                    "value": "frame_mark_images",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(frame_mark_images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_41": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_chkpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model_weights.tar'",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_66": {
                "obj": {
                    "value": "{'e_hat': e_hat_video}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_e_hat_video",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'e_hat_video.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_69": {
                "obj": {
                    "value": "{'e_hat': e_hat_images}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_e_hat_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'e_hat_images.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "finetuning_training.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_26": {
                "variable": {
                    "value": "cpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_38": {
                "variable": {
                    "value": "dataLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FineTuningVideoDataset(path_to_video, device)",
                            "Call"
                        ],
                        [
                            "FineTuningImagesDataset(path_to_images, device)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "e_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'e_hat_video.tar'",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "optimizerG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "optimizerD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_chkpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model_weights.tar'",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_75": {
                "variable": {
                    "value": "checkpoint[D_state_dict][W_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dataset.__len__()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_176": {
                "obj": {
                    "value": "{'epoch': epoch, 'lossesG': lossesG, 'lossesD': lossesD, 'G_state_dict': G.state_dict(), 'D_state_dict': D.state_dict(), 'optimizerG_state_dict': optimizerG.state_dict(), 'optimizerD_state_dict': optimizerD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'finetuned_model.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_145": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, x_hat.transpose(1, 3)[img_no])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, x.transpose(1, 3)[img_no])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, g_y.transpose(1, 3)[img_no])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "enable_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "inference.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_15": {
                "variable": {
                    "value": "cpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_17": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_weights_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_18": {
                "variable": {
                    "value": "e_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "embedding_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, x_hat.transpose(1, 3)[img_no])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out2, x.transpose(1, 3)[img_no])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "out3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out3, g_y.transpose(1, 3)[img_no])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "loss/loss_discriminator.py": {
        "torch": {
            "max_12": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_23": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(rhat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_12": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_23": {
                "input": {
                    "value": "rhat",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "loss/loss_generator.py": {
        "torch": {
            "load_17": {
                "variable": {
                    "value": "full_VGGFace",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "VGGFace_weight_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "L1Loss_25": {
                "variable": {
                    "value": "l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_96": {
                "variable": {
                    "value": "self.l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_110": {
                "variable": {
                    "value": "self.l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "e_vectors.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_118": {
                "input": {
                    "value": "e_vectors[b, k].squeeze() - W[:, i[b]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "network/blocks.py": {
        "torch": {
            "mean_81": {
                "variable": {
                    "value": "mean_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature.view(B, C, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_8": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_9": {
                "variable": {
                    "value": "self.avg_pool2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_12": {
                "variable": {
                    "value": "self.conv_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_channel, out_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_15": {
                "variable": {
                    "value": "self.conv_r1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_channel, out_channel, conv_size, padding=padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_16": {
                "variable": {
                    "value": "self.conv_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(out_channel, out_channel, conv_size, padding=padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_42": {
                "variable": {
                    "value": "self.conv_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_channel, in_channel // 8, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_44": {
                "variable": {
                    "value": "self.conv_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_channel, in_channel // 8, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_46": {
                "variable": {
                    "value": "self.conv_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_channel, in_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_48": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_57": {
                "variable": {
                    "value": "f_projection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_projection.view(B, -1, H * W)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_61": {
                "variable": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_projection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_f(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(f_projection.view(B, -1, H * W), 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "g_projection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_g(x)",
                            "Call"
                        ],
                        [
                            "g_projection.view(B, -1, H * W)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_projection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_h(x)",
                            "Call"
                        ],
                        [
                            "h_projection.view(B, -1, H * W)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(f_projection, g_projection)",
                            "Call"
                        ],
                        [
                            "self.softmax(attention_map)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_96": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_99": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_channel, in_channel, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_100": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_channel, in_channel, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_127": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_channel, in_channel, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_128": {
                "variable": {
                    "value": "self.in1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_129": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_channel, in_channel, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_130": {
                "variable": {
                    "value": "self.in2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_153": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_154": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_157": {
                "variable": {
                    "value": "self.conv_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_channel, out_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_160": {
                "variable": {
                    "value": "self.conv_r1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_channel, out_channel, conv_size, padding=padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_161": {
                "variable": {
                    "value": "self.conv_r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(out_channel, out_channel, conv_size, padding=padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ZeroPad2d_192": {
                "variable": {
                    "value": "self.zero_pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.findPadSize(in_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channel // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channel // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_161": {
                "in_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "std_80": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature.view(B, C, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "network/model.py": {
        "torch": {
            "ReLU_13": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_24": {
                "variable": {
                    "value": "self.sum_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_66": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_73": {
                "variable": {
                    "value": "self.in1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_76": {
                "variable": {
                    "value": "self.in2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_79": {
                "variable": {
                    "value": "self.in3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_84": {
                "variable": {
                    "value": "self.in4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_87": {
                "variable": {
                    "value": "self.in5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_90": {
                "variable": {
                    "value": "self.in6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_114": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(self.P_LEN, 512).normal_(0.0, 0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_117": {
                "variable": {
                    "value": "self.psi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(self.P_LEN, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_193": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_205": {
                "variable": {
                    "value": "self.sum_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_207": {
                "variable": {
                    "value": "self.W_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(512, num_videos)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_208": {
                "variable": {
                    "value": "self.w_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(512, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_209": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_213": {
                "variable": {
                    "value": "self.w_prime",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(512, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_258": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_259": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_260": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "variable": {
                    "value": "self.conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_262": {
                "variable": {
                    "value": "self.conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_263": {
                "variable": {
                    "value": "self.conv3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_264": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_265": {
                "variable": {
                    "value": "self.conv4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_266": {
                "variable": {
                    "value": "self.conv4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_267": {
                "variable": {
                    "value": "self.conv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_272": {
                "variable": {
                    "value": "conv1_1_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_274": {
                "variable": {
                    "value": "relu1_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_1(conv1_1_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_275": {
                "variable": {
                    "value": "conv1_2_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv1_1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_277": {
                "variable": {
                    "value": "relu1_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1_2(conv1_2_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_278": {
                "variable": {
                    "value": "pool1_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu1_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv1_2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_279": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(relu1_2, (0, 1, 0, 1), value=float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_280": {
                "variable": {
                    "value": "conv2_1_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(pool1_pad, kernel_size=(2, 2), stride=(2, 2), padding=0, ceil_mode=False)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_282": {
                "variable": {
                    "value": "relu2_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2_1(conv2_1_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_283": {
                "variable": {
                    "value": "conv2_2_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu2_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv2_1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_285": {
                "variable": {
                    "value": "relu2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2_2(conv2_2_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_286": {
                "variable": {
                    "value": "pool2_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu2_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv2_2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_287": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(relu2_2, (0, 1, 0, 1), value=float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_288": {
                "variable": {
                    "value": "conv3_1_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(pool2_pad, kernel_size=(2, 2), stride=(2, 2), padding=0, ceil_mode=False)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_290": {
                "variable": {
                    "value": "relu3_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv3_1(conv3_1_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_291": {
                "variable": {
                    "value": "conv3_2_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu3_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv3_1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_293": {
                "variable": {
                    "value": "relu3_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv3_2(conv3_2_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_294": {
                "variable": {
                    "value": "conv3_3_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu3_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv3_2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_296": {
                "variable": {
                    "value": "relu3_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv3_3(conv3_3_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_297": {
                "variable": {
                    "value": "pool3_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu3_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv3_3)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_298": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(relu3_3, (0, 1, 0, 1), value=float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_299": {
                "variable": {
                    "value": "conv4_1_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(pool3_pad, kernel_size=(2, 2), stride=(2, 2), padding=0, ceil_mode=False)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_301": {
                "variable": {
                    "value": "relu4_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv4_1(conv4_1_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_302": {
                "variable": {
                    "value": "conv4_2_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu4_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv4_1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_304": {
                "variable": {
                    "value": "relu4_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv4_2(conv4_2_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_305": {
                "variable": {
                    "value": "conv4_3_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu4_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv4_2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_307": {
                "variable": {
                    "value": "relu4_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv4_3(conv4_3_pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_308": {
                "variable": {
                    "value": "pool4_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu4_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv4_3)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_309": {
                "variable": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(relu4_3, (0, 1, 0, 1), value=float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_310": {
                "variable": {
                    "value": "conv5_1_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(pool4_pad, kernel_size=(2, 2), stride=(2, 2), padding=0, ceil_mode=False)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_122": {
                "variable": {
                    "value": "self.psi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.mm(self.p, self.e_finetuning.mean(dim=0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_134": {
                "variable": {
                    "value": "e_psi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "p.expand(e.shape[0], self.P_LEN, 512)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_217": {
                "variable": {
                    "value": "self.w_prime",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.w_0 + self.e_finetuning.mean(dim=0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_114": {
                "*size": {
                    "value": "self.P_LEN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_117": {
                "*size": {
                    "value": "self.P_LEN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_207": {
                "*size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_videos",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_208": {
                "*size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_209": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_213": {
                "*size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_122": {
                "input": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.e_finetuning.mean(dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_245": {
                "input": {
                    "value": "out.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.w_prime.unsqueeze(0).expand(out.shape[0], 512, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_247": {
                "input": {
                    "value": "out.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.W_i[:, i].unsqueeze(-1).transpose(0, 1) + self.w_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_17": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_18": {
                "variable": {
                    "value": "cpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_23": {
                "variable": {
                    "value": "dataLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VidDataSet(K=6, path_to_mp4='mp4', device=device)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_33": {
                "variable": {
                    "value": "optimizerG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(E.parameters()) + list(G.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_34": {
                "variable": {
                    "value": "optimizerD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_70": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_chkpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model_weights.tar'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_55": {
                "obj": {
                    "value": "{'epoch': epoch, 'lossesG': lossesG, 'lossesD': lossesD, 'E_state_dict': E.state_dict(), 'G_state_dict': G.state_dict(), 'D_state_dict': D.state_dict(), 'optimizerG_state_dict': optimizerG.state_dict(), 'optimizerD_state_dict': optimizerD.state_dict(), 'num_vid': dataset.__len__(), 'i_batch': i_batch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_chkpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model_weights.tar'",
                            "Constant"
                        ]
                    ]
                }
            },
            "enable_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, x_hat.transpose(1, 3)[img_no])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, x.transpose(1, 3)[img_no])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, g_y.transpose(1, 3)[img_no])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_187": {
                "obj": {
                    "value": "{'epoch': epoch, 'lossesG': lossesG, 'lossesD': lossesD, 'E_state_dict': E.state_dict(), 'G_state_dict': G.state_dict(), 'D_state_dict': D.state_dict(), 'optimizerG_state_dict': optimizerG.state_dict(), 'optimizerD_state_dict': optimizerD.state_dict(), 'num_vid': dataset.__len__(), 'i_batch': i_batch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_chkpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model_weights.tar'",
                            "Constant"
                        ]
                    ]
                }
            },
            "save_204": {
                "obj": {
                    "value": "{'epoch': epoch, 'lossesG': lossesG, 'lossesD': lossesD, 'E_state_dict': E.state_dict(), 'G_state_dict': G.state_dict(), 'D_state_dict': D.state_dict(), 'optimizerG_state_dict': optimizerG.state_dict(), 'optimizerD_state_dict': optimizerD.state_dict(), 'num_vid': dataset.__len__(), 'i_batch': i_batch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_backup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'backup_model_weights.tar'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "video_extraction.py": {
        "torch": {
            "from_numpy_138": {
                "variable": {
                    "value": "frame_mark",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(frame_landmark_list)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "webcam_demo/webcam_extraction_conversion.py": {
        "torch": {
            "from_numpy_136": {
                "variable": {
                    "value": "frame_mark",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(frame_landmark_list)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}