{
    "code/Scripts/debiasing.py": {
        "sklearn": {
            "RidgeCV_334": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "alphas": {
                    "value": "[0.001, 0.01, 0.1, 1, 10]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "code/Scripts/debiasing_int.py": {
        "sklearn": {
            "RidgeCV_340": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "alphas": {
                    "value": "[0.001, 0.01, 0.1, 1, 10]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "code/Scripts/fista.py": {
        "sklearn": {
            "check_array_12": {
                "array": {
                    "value": "X.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "order": {
                    "value": "F",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_array_14": {
                "array": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "copy": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "order": {
                    "value": "F",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "code/Scripts/fista_update.py": {
        "sklearn": {}
    },
    "code/Scripts/stability_selection.py": {
        "sklearn": {
            "lars_path_46": {
                "variable": {
                    "value": "(lambdas_temp, _, coef_path_temp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[idxs, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "np.squeeze(y_sub)",
                    "type": "Call",
                    "possible_values": []
                },
                "method": {
                    "value": "lasso",
                    "type": "str",
                    "possible_values": []
                },
                "Gram": {
                    "value": "np.dot(X_sub.T, X_sub)",
                    "type": "Call",
                    "possible_values": []
                },
                "Xy": {
                    "value": "np.dot(X_sub.T, np.squeeze(y_sub))",
                    "type": "Call",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "int(np.ceil(0.3 * nscans))",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "alpha_min": {
                    "value": "lambda_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "median_absolute_deviation(cD1) / 0.6745",
                            "BinOp"
                        ],
                        [
                            "lambda_min / y_sub.shape[0]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}