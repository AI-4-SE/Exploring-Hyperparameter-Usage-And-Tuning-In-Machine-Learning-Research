{
    "models/CRNTM/crntm.py": {
        "tensorflow": {
            "set_random_seed_14": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_270": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_271": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_274": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "maximum_443": {
                "variable": {
                    "value": "differentiable_round",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "some_tensor - 0.499",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_446": {
                "variable": {
                    "value": "differentiable_round",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "differentiable_round",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(some_tensor - 0.499, 0)",
                            "Call"
                        ],
                        [
                            "differentiable_round * 10000",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(differentiable_round, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_76": {
                "variable": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_80": {
                "variable": {
                    "value": "self.embedding_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "embedding_table[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "self.x_onehot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_onehot",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_91": {
                "variable": {
                    "value": "sample_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(self.mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_208": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_209": {
                "variable": {
                    "value": "fullvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_214": {
                "variable": {
                    "value": "enc_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.objective",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "enc_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.variable_parser(fullvars, 'encoder')",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_215": {
                "variable": {
                    "value": "dec_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.objective",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "dec_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.variable_parser(fullvars, 'decoder')",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_594": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_606": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_128": {
                "variable": {
                    "value": "self.beta_palpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "utils.linear(self.beta_enc, self.n_topic, scope='beta_parameter_alpha')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_129": {
                "variable": {
                    "value": "self.beta_pbeta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "utils.linear(self.beta_enc, self.n_topic, scope='beta_parameter_beta')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_593": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_597": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_91": {
                "input_tensor": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_122": {
                "variable": {
                    "value": "tmp_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "alpha >= 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_123": {
                "variable": {
                    "value": "_lambda",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "alpha >= 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "gammaRsample(True, tmp_alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "gammaRsample(False, alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_137": {
                "variable": {
                    "value": "topic_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "topic_vec",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_topic, self.n_hidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_138": {
                "variable": {
                    "value": "word_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_vec",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_hidden, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_139": {
                "variable": {
                    "value": "self.topic_word_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "topic_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name('decoder/topic_vec:0')",
                            "Call"
                        ],
                        [
                            "sess.run(topic_vec)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('topic_vec', shape=[self.n_topic, self.n_hidden])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "word_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name('decoder/word_vec:0')",
                            "Call"
                        ],
                        [
                            "sess.run(word_vec)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('word_vec', shape=[self.n_hidden, self.vocab_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_183": {
                "variable": {
                    "value": "self.doc_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.doc_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.var_lambda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_184": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(self.doc_vec, self.topic_word_prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_190": {
                "variable": {
                    "value": "eps_list",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.n_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal((sample_size, self.n_topic), 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((self.n_sample * sample_size, self.n_topic), 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((sample_size, self.n_topic), 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_103": {
                "input_tensor": {
                    "value": "1 - tf.square(self.mean) + 2 * self.logsigm - tf.exp(2 * self.logsigm)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_110": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha - 1 / 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.pow(1 + eps / tf.sqrt(9 * alpha - 3), 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_115": {
                "variable": {
                    "value": "tmp_res",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tmp_alpha - 1 / 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.pow(1 + eps / tf.sqrt(9 * tmp_alpha - 3), 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_117": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.pow(rho, 1 / alpha + 0.001)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tmp_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tmp_alpha - 1 / 3, tf.pow(1 + eps / tf.sqrt(9 * tmp_alpha - 3), 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_144": {
                "variable": {
                    "value": "self.mu_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_k",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_topic, self.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_145": {
                "variable": {
                    "value": "self.logsigm_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sigma_k",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_topic, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_146": {
                "variable": {
                    "value": "Sigma_k",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(self.logsigm_k)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_147": {
                "variable": {
                    "value": "normal_mu_k",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(self.mu_k, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_148": {
                "variable": {
                    "value": "normal_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(self.embedding_table, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_149": {
                "variable": {
                    "value": "x_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(normal_mu_k, normal_embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_152": {
                "x": {
                    "value": "1 / (Sigma_k + 0.001)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.pow(x_mu, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_199": {
                "variable": {
                    "value": "self.doc_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.doc_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.var_lambda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_200": {
                "variable": {
                    "value": "prob_w_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.doc_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.topic_word_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_201": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "prob_w_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.doc_vec, self.topic_word_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_156": {
                "variable": {
                    "value": "self.log_pi_mix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "pi",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.mix_num, self.n_topic]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_157": {
                "variable": {
                    "value": "self.pi_mix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.log_pi_mix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_158": {
                "variable": {
                    "value": "self.mu_k_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_k_a",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.mix_num, self.n_topic, 50]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_159": {
                "variable": {
                    "value": "self.mu_k_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_k_b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.mix_num, 50, self.embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "variable": {
                    "value": "self.mu_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.mu_k_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.mu_k_b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_161": {
                "variable": {
                    "value": "self.logsigm_k_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sigma_k_a",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.mix_num, self.n_topic, 50]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_162": {
                "variable": {
                    "value": "self.logsigm_k_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sigma_k_b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.mix_num, 50, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_163": {
                "variable": {
                    "value": "self.logsigm_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.logsigm_k_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.logsigm_k_b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_164": {
                "variable": {
                    "value": "Sigma_k",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(self.logsigm_k)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_166": {
                "variable": {
                    "value": "normal_mu_k",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(self.mu_k, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_167": {
                "variable": {
                    "value": "normal_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(tf.expand_dims(self.embedding_table, 0), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_170": {
                "x": {
                    "value": "1 / Sigma_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sum(np.expand_dims(normal_mu_k, 1) * np.expand_dims(normal_embedding, 0), 2)",
                            "Call"
                        ],
                        [
                            "np.sum(np.expand_dims(normal_mu_k, 2) * np.expand_dims(np.expand_dims(normal_embedding, axis=0), axis=0), 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(normal_mu_k, normal_embedding), 2)",
                            "Call"
                        ],
                        [
                            "1 * tf.reduce_sum(tf.multiply(normal_mu_k, normal_embedding), 3)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_172": {
                "variable": {
                    "value": "self.topic_word_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.coffi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.topic_word_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_173": {
                "variable": {
                    "value": "self.topic_word_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.topic_word_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_181": {
                "x": {
                    "value": "tf.exp(self.logsigm)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal((sample_size, self.n_topic), 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((self.n_sample * sample_size, self.n_topic), 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((sample_size, self.n_topic), 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_184": {
                "a": {
                    "value": "self.doc_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.topic_word_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_185": {
                "input_tensor": {
                    "value": "tf.multiply(self.logits, self.x_onehot)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_204": {
                "inputs": {
                    "value": "recons_loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "exp_103": {
                "x": {
                    "value": "2 * self.logsigm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_111": {
                "x": {
                    "value": "1 + eps / tf.sqrt(9 * alpha - 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_116": {
                "x": {
                    "value": "1 + eps / tf.sqrt(9 * tmp_alpha - 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_117": {
                "x": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((sample_size, self.n_topic), 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1 / alpha + 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_146": {
                "x": {
                    "value": "self.logsigm_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_147": {
                "input": {
                    "value": "self.mu_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_148": {
                "input": {
                    "value": "self.embedding_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_149": {
                "x": {
                    "value": "normal_mu_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu_k * (1 / (np.linalg.norm(mu_k, axis=1, keepdims=True) + 0.001))",
                            "BinOp"
                        ],
                        [
                            "mu_k * (1 / (np.linalg.norm(mu_k, axis=2, keepdims=True) + 0.001))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.expand_dims(self.mu_k, 1), 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.expand_dims(self.mu_k, 2), 3)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "normal_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_table * (1 / (np.linalg.norm(embedding_table, axis=1, keepdims=True) + 0.001))",
                            "BinOp"
                        ],
                        [
                            "embedding_table * (1 / (np.linalg.norm(embedding_table, axis=1, keepdims=True) + 0.001))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.expand_dims(self.embedding_table, 0), 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.expand_dims(tf.expand_dims(self.embedding_table, 0), 0), 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_152": {
                "x": {
                    "value": "tf.multiply(1 / (Sigma_k + 0.001), tf.pow(x_mu, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_181": {
                "x": {
                    "value": "self.logsigm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_185": {
                "x": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x_onehot",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_197": {
                "x": {
                    "value": "tf.exp(self.logsigm)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "curr_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eps_list[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_202": {
                "input_tensor": {
                    "value": "tf.multiply(logits, self.x_onehot)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_151": {
                "x": {
                    "value": "tf.reduce_prod(Sigma_k, 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_164": {
                "x": {
                    "value": "self.logsigm_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_166": {
                "input": {
                    "value": "self.mu_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_167": {
                "input": {
                    "value": "self.embedding_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_168": {
                "input_tensor": {
                    "value": "tf.multiply(normal_mu_k, normal_embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_170": {
                "x": {
                    "value": "tf.multiply(1 / Sigma_k, x_mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_171": {
                "input": {
                    "value": "self.pi_mix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_197": {
                "x": {
                    "value": "self.logsigm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_202": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(prob_w_theta)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.x_onehot",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_103": {
                "x": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_prod_151": {
                "input_tensor": {
                    "value": "Sigma_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.power(np.exp(logsigm_k), 2)",
                            "Call"
                        ],
                        [
                            "np.power(np.exp(logsigm_k), 2)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.exp(self.logsigm_k), 2)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.exp(self.logsigm_k), 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_152": {
                "x": {
                    "value": "x_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sum(np.expand_dims(normal_mu_k, 1) * np.expand_dims(normal_embedding, 0), 2)",
                            "Call"
                        ],
                        [
                            "np.sum(np.expand_dims(normal_mu_k, 2) * np.expand_dims(np.expand_dims(normal_embedding, axis=0), axis=0), 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(normal_mu_k, normal_embedding), 2)",
                            "Call"
                        ],
                        [
                            "1 * tf.reduce_sum(tf.multiply(normal_mu_k, normal_embedding), 3)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_168": {
                "x": {
                    "value": "normal_mu_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu_k * (1 / (np.linalg.norm(mu_k, axis=1, keepdims=True) + 0.001))",
                            "BinOp"
                        ],
                        [
                            "mu_k * (1 / (np.linalg.norm(mu_k, axis=2, keepdims=True) + 0.001))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.expand_dims(self.mu_k, 1), 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.expand_dims(self.mu_k, 2), 3)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "normal_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_table * (1 / (np.linalg.norm(embedding_table, axis=1, keepdims=True) + 0.001))",
                            "BinOp"
                        ],
                        [
                            "embedding_table * (1 / (np.linalg.norm(embedding_table, axis=1, keepdims=True) + 0.001))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.expand_dims(self.embedding_table, 0), 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.expand_dims(tf.expand_dims(self.embedding_table, 0), 0), 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_169": {
                "x": {
                    "value": "tf.reduce_prod(Sigma_k, 2, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_111": {
                "x": {
                    "value": "9 * alpha - 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_116": {
                "x": {
                    "value": "9 * tmp_alpha - 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_prod_169": {
                "input_tensor": {
                    "value": "Sigma_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.power(np.exp(logsigm_k), 2)",
                            "Call"
                        ],
                        [
                            "np.power(np.exp(logsigm_k), 2)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.exp(self.logsigm_k), 2)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.exp(self.logsigm_k), 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/CRNTM/utils.py": {
        "tensorflow": {
            "get_variable_203": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "matrix_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "get_variable_205": {
                "variable": {
                    "value": "bias_term",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "bias_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "matmul_209": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [input_size, output_size], initializer=matrix_initializer)",
                            "Call"
                        ],
                        [
                            "tf.multiply(matrix, att)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "constant_initializer_195": {
                "variable": {
                    "value": "matrix_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_199": {
                "variable": {
                    "value": "bias_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_208": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [input_size, output_size], initializer=matrix_initializer)",
                            "Call"
                        ],
                        [
                            "tf.multiply(matrix, att)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "scope or 'Dense'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "dense_228": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "mlp_hidden[l]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "mlp_nonlinearity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.tanh",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'l' + str(l)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            }
        }
    }
}