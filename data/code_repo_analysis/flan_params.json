{
    "flan/few_shot.py": {
        "tensorflow": {
            "join_96": {
                "variable": {
                    "value": "new_ex[inputs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[ex['inputs'], x_y_delimiter]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "flan/postprocessors.py": {
        "tensorflow": {
            "as_text_34": {
                "bytes_or_text": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "flan/preprocessors.py": {
        "tensorflow": {
            "reduce_join_149": {
                "variable": {
                    "value": "example[options_]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "['OPTIONS:\\n- ', tf.strings.reduce_join(example['options'], separator='\\n- ')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cumsum_463": {
                "variable": {
                    "value": "total_num_tokens_cm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "total_num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_num_tokens + targets_num_tokens",
                            "BinOp"
                        ]
                    ]
                }
            },
            "size_471": {
                "variable": {
                    "value": "example[eval][num_exemplars]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "example['train']['inputs_num_tokens']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "join_479": {
                "variable": {
                    "value": "new_ex[inputs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[ex['inputs'], x_y_delimiter]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "join_90": {
                "inputs": {
                    "value": "to_join",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[tf.zeros(tf.shape(list(feature_dictionary.values())[0]), dtype=tf.string)] + to_join",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_140": {
                "variable": {
                    "value": "features[output_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "parts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in re.split('({\\\\w*})', format_string) if p]",
                            "ListComp"
                        ],
                        [
                            "[features[k] for k in input_keys]",
                            "ListComp"
                        ],
                        [
                            "[p for p in re.split('({\\\\w*})', format_string) if p]",
                            "ListComp"
                        ],
                        [
                            "[part[1:-1] for part in parts if part[0] == '{' and part[-1] == '}']",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_285": {
                "variable": {
                    "value": "d[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[example_list[i][k] for i in range(len(example_list))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "size_386": {
                "variable": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example[options_key_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "strip_436": {
                "variable": {
                    "value": "new_example[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "example[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "boolean_mask_469": {
                "variable": {
                    "value": "example[train][name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "example['train'][name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "bool_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "total_num_tokens_cm <= max_input_length - example['eval']['inputs_num_tokens']",
                            "Compare"
                        ]
                    ]
                }
            },
            "tile_387": {
                "input": {
                    "value": "tf.reshape(example['inputs'], [1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_409": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(example[options_key_name], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(example[answers_key_name], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_415": {
                "x": {
                    "value": "example[options_key_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reshape(example[answer_key_name], [])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_451": {
                "variable": {
                    "value": "example[split][f{key}_num_tokens]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.ones_like(vocab.encode_tf(example[split][key]), dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "as_string_77": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_dictionary[part[1:-1]]",
                            "Subscript"
                        ],
                        [
                            "tf.strings.as_string(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_join_151": {
                "inputs": {
                    "value": "example['options']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "separator": {
                    "value": "\\n- ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_387": {
                "tensor": {
                    "value": "example['inputs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_any_412": {
                "input_tensor": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(example[options_key_name], 1), tf.expand_dims(example[answers_key_name], 0))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_416": {
                "tensor": {
                    "value": "example[answer_key_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "shape": {
                    "value": "tf.shape(list(feature_dictionary.values())[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_410": {
                "input": {
                    "value": "example[options_key_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_411": {
                "input": {
                    "value": "example[answers_key_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_452": {
                "input": {
                    "value": "vocab.encode_tf(example[split][key])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_88": {
                "input": {
                    "value": "list(feature_dictionary.values())[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "flan/preprocessors_test.py": {
        "tensorflow": {
            "constant_56": {
                "value": {
                    "value": "some trailing spaces    \\n",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_65": {
                "value": {
                    "value": "['first input', 'second input second']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_66": {
                "value": {
                    "value": "['first target', 'second target']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_77": {
                "value": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_181": {
                "value": {
                    "value": "[111, 222, 333]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_182": {
                "value": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_183": {
                "value": {
                    "value": "[444, 555, 666]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_184": {
                "value": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_187": {
                "value": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_188": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "flan/tasks.py": {
        "tensorflow": {
            "as_string_99": {
                "variable": {
                    "value": "number_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(1, 1 + num_items, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "join_100": {
                "variable": {
                    "value": "numbered_items",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[number_list, items_list]",
                    "type": "List",
                    "possible_values": []
                },
                "separator": {
                    "value": ". ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_join_101": {
                "variable": {
                    "value": "numbered_items_str",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "numbered_items",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strings.join([number_list, items_list], separator='. ')",
                            "Call"
                        ]
                    ]
                },
                "separator": {
                    "value": "\\n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_108": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(example['answer'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_109": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['no', 'yes']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_139": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(example['label'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_140": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['yes', 'no']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_141": {
                "variable": {
                    "value": "glm_options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['true', 'false']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_172": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(example['label'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_173": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['no', 'yes']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strip_202": {
                "variable": {
                    "value": "prefix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.strings.substr(example['text'], 0, example['pronoun_start'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "strip_204": {
                "variable": {
                    "value": "suffix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.strings.substr(example['text'], example['pronoun_end'], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_206": {
                "variable": {
                    "value": "entities",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[example['option1_normalized'], example['option2_normalized']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_208": {
                "variable": {
                    "value": "options_list_endings",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.shape(entities)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "suffix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strings.strip(tf.strings.substr(example['text'], example['pronoun_end'], -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "join_209": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[entities, options_list_endings]",
                    "type": "List",
                    "possible_values": []
                },
                "separator": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_210": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_234": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(example['label'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_235": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['different meanings', 'the same meaning']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strip_294": {
                "variable": {
                    "value": "query_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.strings.split(example['query'], '@placeholder', result_type='RaggedTensor')[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "fill_304": {
                "variable": {
                    "value": "options_list_endings",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.shape(entities)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "query_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strings.split(example['query'], '@placeholder', result_type='RaggedTensor')[0][1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "join_305": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[entities, options_list_endings]",
                    "type": "List",
                    "possible_values": []
                },
                "separator": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fill_309": {
                "variable": {
                    "value": "answers_list_endings",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.shape(answers)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "query_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strings.split(example['query'], '@placeholder', result_type='RaggedTensor')[0][1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "join_310": {
                "variable": {
                    "value": "answers",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[answers, answers_list_endings]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_join_313": {
                "variable": {
                    "value": "options_str",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "['OPTIONS:\\n- ', tf.strings.reduce_join(options, separator='\\n- ')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "regex_replace_682": {
                "variable": {
                    "value": "dialogue",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example['dialogue']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pattern": {
                    "value": "\\r\\n",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": "\\n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_replace_683": {
                "variable": {
                    "value": "dialogue",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dialogue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strings.regex_replace(example['dialogue'], '\\r\\n', '\\n')",
                            "Call"
                        ],
                        [
                            "tf.strings.regex_replace(dialogue, '<.*>', ' ')",
                            "Call"
                        ]
                    ]
                },
                "pattern": {
                    "value": "<.*>",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_853": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_854": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(is_positive, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.add(example['label'], -1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_855": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['no', 'yes']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_856": {
                "variable": {
                    "value": "glm_options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['False', 'True']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_905": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_906": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(is_positive, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.add(example['label'], -1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_907": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['World', 'Sports', 'Business', 'Science/Tech']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_947": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_948": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(is_positive, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.add(example['label'], -1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_949": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['Yes', \"It's impossible to say\", 'No']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_950": {
                "variable": {
                    "value": "glm_options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['true', 'neither', 'false']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_or_987": {
                "variable": {
                    "value": "is_positive",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.equal(example['polarity'], 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.math.equal(example['polarity'], 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_990": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "is_positive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.math.equal(example['polarity'], 3), tf.math.equal(example['polarity'], 4))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_991": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(is_positive, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.add(example['label'], -1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_995": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['negative', 'positive']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_1037": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(example['label'], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_1038": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(is_positive, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.add(example['label'], -1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_1069": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_1070": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(is_positive, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.add(example['label'], -1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_1071": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['negative', 'positive']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_1103": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_1104": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(is_positive, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.add(example['label'], -1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_1105": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['no', 'yes']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_1131": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_1132": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(is_positive, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.add(example['label'], -1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_1164": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_1165": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(is_positive, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.add(example['label'], -1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_1166": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['no', 'yes']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_1197": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_1198": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(is_positive, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.add(example['label'], -1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_1199": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['no', 'yes']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_1230": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_1231": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(is_positive, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.add(example['label'], -1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1232": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[example['choice1'], example['choice2']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "regex_replace_1233": {
                "variable": {
                    "value": "connector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example['question']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pattern": {
                    "value": "cause",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": " because",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_replace_1234": {
                "variable": {
                    "value": "connector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "connector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strings.regex_replace(example['question'], 'cause', ' because')",
                            "Call"
                        ],
                        [
                            "tf.strings.regex_replace(connector, 'effect', ' so')",
                            "Call"
                        ]
                    ]
                },
                "pattern": {
                    "value": "effect",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": " so",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_replace_1235": {
                "variable": {
                    "value": "glm_premise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example['premise']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pattern": {
                    "value": ".$",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": "connector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strings.regex_replace(example['question'], 'cause', ' because')",
                            "Call"
                        ],
                        [
                            "tf.strings.regex_replace(connector, 'effect', ' so')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_1268": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_1269": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(is_positive, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.add(example['label'], -1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1274": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_1306": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_1307": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(is_positive, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.add(example['label'], -1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_1308": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['negative', 'positive']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "regex_replace_1310": {
                "variable": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_join([example['email_body'], example['subject_line']])",
                            "Call"
                        ],
                        [
                            "tf.strings.lower(tf.strings.regex_replace(text, '\\\\n', ' '))",
                            "Call"
                        ],
                        [
                            "tf.reduce_join([example['document'], example['summary']])",
                            "Call"
                        ],
                        [
                            "example['text']",
                            "Subscript"
                        ],
                        [
                            "tf.regex_replace(text, '\\\\\\\\\"\"', '\"')",
                            "Call"
                        ],
                        [
                            "tf.regex_replace(text, '\\\\\\\\n', ' ')",
                            "Call"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ]
                    ]
                },
                "pattern": {
                    "value": "\\\\\\\\\"\"",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": "\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_replace_1311": {
                "variable": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_join([example['email_body'], example['subject_line']])",
                            "Call"
                        ],
                        [
                            "tf.strings.lower(tf.strings.regex_replace(text, '\\\\n', ' '))",
                            "Call"
                        ],
                        [
                            "tf.reduce_join([example['document'], example['summary']])",
                            "Call"
                        ],
                        [
                            "example['text']",
                            "Subscript"
                        ],
                        [
                            "tf.regex_replace(text, '\\\\\\\\\"\"', '\"')",
                            "Call"
                        ],
                        [
                            "tf.regex_replace(text, '\\\\\\\\n', ' ')",
                            "Call"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ]
                    ]
                },
                "pattern": {
                    "value": "\\\\\\\\n",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_1350": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_1351": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(is_positive, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.add(example['label'], -1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(example['label'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1352": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[example['answer0'], example['answer1'], example['answer2'], example['answer3']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_1527": {
                "variable": {
                    "value": "references",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[example['references'], tf.expand_dims(example['target'], axis=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1563": {
                "variable": {
                    "value": "references",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[example['references'], tf.expand_dims(example['target'], axis=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_join_1567": {
                "variable": {
                    "value": "tripleset",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "example['tripleset']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "separator": {
                    "value": "; ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_join_1568": {
                "variable": {
                    "value": "tripleset_newline",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "example['tripleset']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "separator": {
                    "value": "\\n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_replace_1571": {
                "variable": {
                    "value": "tripleset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tripleset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strings.reduce_join(example['tripleset'], separator='; ')",
                            "Call"
                        ],
                        [
                            "tf.regex_replace(tripleset, '\\\\[(.*?)\\\\]', '')",
                            "Call"
                        ]
                    ]
                },
                "pattern": {
                    "value": "\\\\[(.*?)\\\\]",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_1599": {
                "variable": {
                    "value": "references",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[example['references'], tf.expand_dims(example['target'], axis=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "regex_replace_1603": {
                "variable": {
                    "value": "meaning_representation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example['meaning_representation']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pattern": {
                    "value": "\\\\[",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": " = ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_replace_1605": {
                "variable": {
                    "value": "meaning_representation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meaning_representation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.regex_replace(example['meaning_representation'], '\\\\[', ' = ')",
                            "Call"
                        ],
                        [
                            "tf.regex_replace(meaning_representation, '\\\\]', '')",
                            "Call"
                        ]
                    ]
                },
                "pattern": {
                    "value": "\\\\]",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_1632": {
                "variable": {
                    "value": "references",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[example['references'], tf.expand_dims(example['target'], axis=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_join_1636": {
                "variable": {
                    "value": "input_string",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "example['input']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "separator": {
                    "value": "; ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_replace_1637": {
                "variable": {
                    "value": "input_string",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strings.reduce_join(example['input'], separator='; ')",
                            "Call"
                        ],
                        [
                            "tf.regex_replace(input_string, '_', ' ')",
                            "Call"
                        ],
                        [
                            "tf.regex_replace(input_string, ' \\\\| ', ', ')",
                            "Call"
                        ]
                    ]
                },
                "pattern": {
                    "value": "_",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_replace_1638": {
                "variable": {
                    "value": "input_string",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strings.reduce_join(example['input'], separator='; ')",
                            "Call"
                        ],
                        [
                            "tf.regex_replace(input_string, '_', ' ')",
                            "Call"
                        ],
                        [
                            "tf.regex_replace(input_string, ' \\\\| ', ', ')",
                            "Call"
                        ]
                    ]
                },
                "pattern": {
                    "value": " \\\\| ",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": ", ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_1786": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(example['label'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_1787": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['Yes', 'No', \"It's impossible to say\"]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_1788": {
                "variable": {
                    "value": "glm_options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['true', 'neither', 'false']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_1820": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(example['label'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_1821": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['unacceptable', 'acceptable']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_1849": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(example['label'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_1850": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['negative', 'positive']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_1878": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(example['label'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_1879": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['yes', 'it is not possible to tell', 'no']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_1924": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(example['label'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_1925": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['yes', 'no']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_1954": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(example['label'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_1955": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['no', 'yes']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_1984": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(example['label'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_1985": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['yes', 'it is not possible to tell', 'no']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_2027": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(example['label-coarse'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_2028": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['description', 'entity', 'abbreviation', 'human', 'numeric', 'location']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_2057": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "['0', '1', '2', '3', '4', '5']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_2088": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(example['label'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_2117": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(example['answerKey'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "regex_replace_2152": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example['context']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pattern": {
                    "value": "\\\\[header\\\\]\\\\s",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_replace_2153": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strings.split(example['sentence'], '_', result_type='RaggedTensor')[0][0]",
                            "Subscript"
                        ],
                        [
                            "tf.strings.regex_replace(example['context'], '\\\\[header\\\\]\\\\s', '')",
                            "Call"
                        ],
                        [
                            "tf.strings.regex_replace(context, '\\\\[.*?\\\\]\\\\s', '\\n')",
                            "Call"
                        ]
                    ]
                },
                "pattern": {
                    "value": "\\\\[.*?\\\\]\\\\s",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": "\\n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_replace_2155": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "example['endings']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pattern": {
                    "value": "\\\\[.*?\\\\]\\\\s",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_2161": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(example['label'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_join_460": {
                "variable": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[example['email_body'], example['subject_line']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "lower_461": {
                "variable": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.strings.regex_replace(text, '\\\\n', ' ')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_join_524": {
                "variable": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[example['document'], example['summary']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_not_525": {
                "variable": {
                    "value": "no_unk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.strings.regex_full_match(text, '.*UNK.*')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_526": {
                "variable": {
                    "value": "no_hashtag",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.strings.regex_full_match(text, '.*#.*')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_763": {
                "variable": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "_UNANSWERABLE_RESPONSE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'unanswerable'",
                            "str"
                        ]
                    ]
                }
            },
            "constant_764": {
                "variable": {
                    "value": "answers",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[_UNANSWERABLE_RESPONSE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_98": {
                "input": {
                    "value": "items_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "items_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_108": {
                "x": {
                    "value": "example['answer']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_139": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_172": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "substr_203": {
                "input": {
                    "value": "example['text']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pos": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "len": {
                    "value": "example['pronoun_start']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "substr_205": {
                "input": {
                    "value": "example['text']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pos": {
                    "value": "example['pronoun_end']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "len": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_208": {
                "input": {
                    "value": "entities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([example['option1_normalized'], example['option2_normalized']])",
                            "Call"
                        ],
                        [
                            "example['entities']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_234": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_304": {
                "input": {
                    "value": "entities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([example['option1_normalized'], example['option2_normalized']])",
                            "Call"
                        ],
                        [
                            "example['entities']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_309": {
                "input": {
                    "value": "answers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example['answers']",
                            "Subscript"
                        ],
                        [
                            "tf.strings.join([answers, answers_list_endings])",
                            "Call"
                        ],
                        [
                            "tf.constant([_UNANSWERABLE_RESPONSE])",
                            "Call"
                        ],
                        [
                            "example['answers']['text']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_397": {
                "x": {
                    "value": "tf.shape(example['options'])[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "regex_replace_452": {
                "input": {
                    "value": "example['email_body']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pattern": {
                    "value": "\\\\n",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_replace_453": {
                "input": {
                    "value": "example['subject_line']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pattern": {
                    "value": "\\\\n",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_replace_599": {
                "input": {
                    "value": "example['_movie_name']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pattern": {
                    "value": "_",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_replace_729": {
                "input": {
                    "value": "example['title']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pattern": {
                    "value": "_",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_replace_769": {
                "input": {
                    "value": "example['title']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pattern": {
                    "value": "_",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_801": {
                "tensor": {
                    "value": "example['answer']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_988": {
                "x": {
                    "value": "example['polarity']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_989": {
                "x": {
                    "value": "example['polarity']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_1007": {
                "input_tensor": {
                    "value": "[tf.math.equal(example['label'], 0), tf.math.equal(example['label'], 1), tf.math.equal(example['label'], 3), tf.math.equal(example['label'], 4)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_1037": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "regex_replace_1073": {
                "input": {
                    "value": "example['text']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pattern": {
                    "value": "<br />",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": "\\n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_replace_1201": {
                "input": {
                    "value": "example['question1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pattern": {
                    "value": "\"\"",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": "\"'\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_replace_1202": {
                "input": {
                    "value": "example['question2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pattern": {
                    "value": "\"\"",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": "\"'\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_join_1533": {
                "inputs": {
                    "value": "example['concepts']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "separator": {
                    "value": ", ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_join_1535": {
                "inputs": {
                    "value": "example['concepts']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "separator": {
                    "value": "\\n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "lower_1687": {
                "input": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_join([example['email_body'], example['subject_line']])",
                            "Call"
                        ],
                        [
                            "tf.strings.lower(tf.strings.regex_replace(text, '\\\\n', ' '))",
                            "Call"
                        ],
                        [
                            "tf.reduce_join([example['document'], example['summary']])",
                            "Call"
                        ],
                        [
                            "example['text']",
                            "Subscript"
                        ],
                        [
                            "tf.regex_replace(text, '\\\\\\\\\"\"', '\"')",
                            "Call"
                        ],
                        [
                            "tf.regex_replace(text, '\\\\\\\\n', ' ')",
                            "Call"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "logical_not_1695": {
                "x": {
                    "value": "tf.math.equal(example['lower'], example['answer'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "regex_replace_1723": {
                "input": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_join([example['email_body'], example['subject_line']])",
                            "Call"
                        ],
                        [
                            "tf.strings.lower(tf.strings.regex_replace(text, '\\\\n', ' '))",
                            "Call"
                        ],
                        [
                            "tf.reduce_join([example['document'], example['summary']])",
                            "Call"
                        ],
                        [
                            "example['text']",
                            "Subscript"
                        ],
                        [
                            "tf.regex_replace(text, '\\\\\\\\\"\"', '\"')",
                            "Call"
                        ],
                        [
                            "tf.regex_replace(text, '\\\\\\\\n', ' ')",
                            "Call"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ]
                    ]
                },
                "pattern": {
                    "value": "[^\\\\w\\\\s]",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "logical_not_1731": {
                "x": {
                    "value": "tf.math.equal(example['no_punct'], example['answer'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "regex_replace_1760": {
                "input": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_join([example['email_body'], example['subject_line']])",
                            "Call"
                        ],
                        [
                            "tf.strings.lower(tf.strings.regex_replace(text, '\\\\n', ' '))",
                            "Call"
                        ],
                        [
                            "tf.reduce_join([example['document'], example['summary']])",
                            "Call"
                        ],
                        [
                            "example['text']",
                            "Subscript"
                        ],
                        [
                            "tf.regex_replace(text, '\\\\\\\\\"\"', '\"')",
                            "Call"
                        ],
                        [
                            "tf.regex_replace(text, '\\\\\\\\n', ' ')",
                            "Call"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ]
                    ]
                },
                "pattern": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_1786": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1820": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1849": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1878": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1924": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1954": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1984": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_any_1997": {
                "input_tensor": {
                    "value": "[tf.math.equal(example['label'], 0), tf.math.equal(example['label'], 1), tf.math.equal(example['label'], 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_2027": {
                "x": {
                    "value": "example['label-coarse']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_string_2063": {
                "input": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "precision": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_2088": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_2117": {
                "x": {
                    "value": "example['answerKey']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_2161": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_any_2174": {
                "input_tensor": {
                    "value": "[tf.math.equal(example['label'], 0), tf.math.equal(example['label'], 1), tf.math.equal(example['label'], 2), tf.math.equal(example['label'], 3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_115": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_147": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_148": {
                "tensor": {
                    "value": "glm_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['true', 'false'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['False', 'True'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['true', 'neither', 'false'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['true', 'neither', 'false'])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_179": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_214": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_241": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_299": {
                "value": {
                    "value": "example['query']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "@placeholder",
                    "type": "str",
                    "possible_values": []
                },
                "result_type": {
                    "value": "RaggedTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_join_315": {
                "inputs": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "separator": {
                    "value": "\\n- ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_318": {
                "value": {
                    "value": "example['passage']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "\\n@highlight",
                    "type": "str",
                    "possible_values": []
                },
                "result_type": {
                    "value": "RaggedTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_replace_461": {
                "input": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_join([example['email_body'], example['subject_line']])",
                            "Call"
                        ],
                        [
                            "tf.strings.lower(tf.strings.regex_replace(text, '\\\\n', ' '))",
                            "Call"
                        ],
                        [
                            "tf.reduce_join([example['document'], example['summary']])",
                            "Call"
                        ],
                        [
                            "example['text']",
                            "Subscript"
                        ],
                        [
                            "tf.regex_replace(text, '\\\\\\\\\"\"', '\"')",
                            "Call"
                        ],
                        [
                            "tf.regex_replace(text, '\\\\\\\\n', ' ')",
                            "Call"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ]
                    ]
                },
                "pattern": {
                    "value": "\\\\n",
                    "type": "str",
                    "possible_values": []
                },
                "rewrite": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "length_462": {
                "input": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_join([example['email_body'], example['subject_line']])",
                            "Call"
                        ],
                        [
                            "tf.strings.lower(tf.strings.regex_replace(text, '\\\\n', ' '))",
                            "Call"
                        ],
                        [
                            "tf.reduce_join([example['document'], example['summary']])",
                            "Call"
                        ],
                        [
                            "example['text']",
                            "Subscript"
                        ],
                        [
                            "tf.regex_replace(text, '\\\\\\\\\"\"', '\"')",
                            "Call"
                        ],
                        [
                            "tf.regex_replace(text, '\\\\\\\\n', ' ')",
                            "Call"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "regex_full_match_525": {
                "input": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_join([example['email_body'], example['subject_line']])",
                            "Call"
                        ],
                        [
                            "tf.strings.lower(tf.strings.regex_replace(text, '\\\\n', ' '))",
                            "Call"
                        ],
                        [
                            "tf.reduce_join([example['document'], example['summary']])",
                            "Call"
                        ],
                        [
                            "example['text']",
                            "Subscript"
                        ],
                        [
                            "tf.regex_replace(text, '\\\\\\\\\"\"', '\"')",
                            "Call"
                        ],
                        [
                            "tf.regex_replace(text, '\\\\\\\\n', ' ')",
                            "Call"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ]
                    ]
                },
                "pattern": {
                    "value": ".*UNK.*",
                    "type": "str",
                    "possible_values": []
                }
            },
            "regex_full_match_526": {
                "input": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_join([example['email_body'], example['subject_line']])",
                            "Call"
                        ],
                        [
                            "tf.strings.lower(tf.strings.regex_replace(text, '\\\\n', ' '))",
                            "Call"
                        ],
                        [
                            "tf.reduce_join([example['document'], example['summary']])",
                            "Call"
                        ],
                        [
                            "example['text']",
                            "Subscript"
                        ],
                        [
                            "tf.regex_replace(text, '\\\\\\\\\"\"', '\"')",
                            "Call"
                        ],
                        [
                            "tf.regex_replace(text, '\\\\\\\\n', ' ')",
                            "Call"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ],
                        [
                            "example['en']",
                            "Subscript"
                        ]
                    ]
                },
                "pattern": {
                    "value": ".*#.*",
                    "type": "str",
                    "possible_values": []
                }
            },
            "boolean_mask_863": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_864": {
                "tensor": {
                    "value": "glm_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['true', 'false'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['False', 'True'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['true', 'neither', 'false'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['true', 'neither', 'false'])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_913": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_957": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_958": {
                "tensor": {
                    "value": "glm_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['true', 'false'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['False', 'True'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['true', 'neither', 'false'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['true', 'neither', 'false'])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1000": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1044": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1076": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1111": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1139": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1172": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1205": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1242": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_1270": {
                "value": {
                    "value": "example['sentence']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "_",
                    "type": "str",
                    "possible_values": []
                },
                "result_type": {
                    "value": "RaggedTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_1272": {
                "value": {
                    "value": "example['sentence']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "_",
                    "type": "str",
                    "possible_values": []
                },
                "result_type": {
                    "value": "RaggedTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_join_1275": {
                "inputs": {
                    "value": "[example['option1'], next_sentence]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_join_1276": {
                "inputs": {
                    "value": "[example['option2'], next_sentence]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_1282": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1316": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1363": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_1529": {
                "input": {
                    "value": "example['target']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1565": {
                "input": {
                    "value": "example['target']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1601": {
                "input": {
                    "value": "example['target']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1634": {
                "input": {
                    "value": "example['target']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_1695": {
                "x": {
                    "value": "example['lower']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "example['answer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1731": {
                "x": {
                    "value": "example['no_punct']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "example['answer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "boolean_mask_1794": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1795": {
                "tensor": {
                    "value": "glm_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['true', 'false'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['False', 'True'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['true', 'neither', 'false'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['true', 'neither', 'false'])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1825": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1854": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1884": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1930": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1960": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1990": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_2033": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_2093": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_2126": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_2166": {
                "tensor": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator=' ')",
                            "Call"
                        ],
                        [
                            "tf.constant(['different meanings', 'the same meaning'])",
                            "Call"
                        ],
                        [
                            "tf.strings.join([entities, options_list_endings], separator='')",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['World', 'Sports', 'Business', 'Science/Tech'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', \"It's impossible to say\", 'No'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "example['endings']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "example['candidates']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['choice1'], example['choice2']])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reduce_join([example['option1'], next_sentence]), tf.reduce_join([example['option2'], next_sentence])])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.stack([example['answer0'], example['answer1'], example['answer2'], example['answer3']])",
                            "Call"
                        ],
                        [
                            "tf.constant(['Yes', 'No', \"It's impossible to say\"])",
                            "Call"
                        ],
                        [
                            "tf.constant(['unacceptable', 'acceptable'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['negative', 'positive'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['no', 'yes'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['yes', 'it is not possible to tell', 'no'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['description', 'entity', 'abbreviation', 'human', 'numeric', 'location'])",
                            "Call"
                        ],
                        [
                            "tf.constant(['0', '1', '2', '3', '4', '5'])",
                            "Call"
                        ],
                        [
                            "[example['sol1'], example['sol2']]",
                            "List"
                        ],
                        [
                            "[example['question']['choice_A'], example['question']['choice_B'], example['question']['choice_C'], example['question']['choice_D']]",
                            "List"
                        ],
                        [
                            "tf.strings.regex_replace(example['endings'], '\\\\[.*?\\\\]\\\\s', '')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(example['answer'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(example['label'], 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 3)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label-coarse'], tf.int32), 6)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['answerKey'], tf.int32), 4)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(example['label'], tf.int32), 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_295": {
                "value": {
                    "value": "example['query']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "@placeholder",
                    "type": "str",
                    "possible_values": []
                },
                "result_type": {
                    "value": "RaggedTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_397": {
                "input": {
                    "value": "example['options']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "split_493": {
                "value": {
                    "value": "article",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example['article']",
                            "Subscript"
                        ],
                        [
                            "tf.strings.split(article, sep=sep, result_type='RaggedTensor')[-1][0]",
                            "Subscript"
                        ]
                    ]
                },
                "sep": {
                    "value": "sep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['2013 . ', '2014 . ', '2012 . ', ') -- ']",
                            "List"
                        ]
                    ]
                },
                "result_type": {
                    "value": "RaggedTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_1008": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_1009": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_1010": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_1011": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_1998": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_1999": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_2000": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_2175": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_2176": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_2177": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_2178": {
                "x": {
                    "value": "example['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}