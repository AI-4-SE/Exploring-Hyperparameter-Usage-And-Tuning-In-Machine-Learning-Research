{
    "scripts/split_data.py": {
        "sklearn": {
            "train_test_split_37": {
                "variable": {
                    "value": "(x_train, x_test, y_train, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "args.test_split",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stratify": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y + [i + 1 for _ in range(len(files))]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "train_test_split_38": {
                "variable": {
                    "value": "(x_train, x_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_train",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "args.val_split / (1 - args.test_split)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stratify": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/train_model.py": {
        "torch": {
            "manual_seed_37": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/dataloader.py": {
        "torch": {}
    },
    "src/datasets.py": {
        "torch": {
            "ConcatDataset_87": {
                "datasets": {
                    "value": "val_datasets",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/gradient.py": {
        "torch": {
            "stack_26": {
                "variable": {
                    "value": "new_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "domain_grads",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_26": {
                "variable": {
                    "value": "new_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_39": {
                "variable": {
                    "value": "new_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "domain_grads",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "new_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_43": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(~agr_mask).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "new_grads.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_80": {
                "variable": {
                    "value": "new_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grad_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[g.clone() for g in domain_grads]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sum_80": {
                "variable": {
                    "value": "new_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "grad_sign",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sign(g) for g in domain_grads]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "where_91": {
                "variable": {
                    "value": "agr_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "grad_sign.sum(0).abs() == len(domain_grads)",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dot_74": {
                "variable": {
                    "value": "inner_prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_pc[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "grad_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_grads[j]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sign_88": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models.py": {
        "torch": {
            "DataParallel_23": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_26": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_27": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x for (x, _) in train_batches]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y for (_, y) in train_batches]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "save_82": {
                "obj": {
                    "value": "self.network.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_79": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_67": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.network(images)",
                            "Call"
                        ],
                        [
                            "self.network(images)",
                            "Call"
                        ],
                        [
                            "self.network(images)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/networks.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.network.classifier[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_19": {
                "tensors": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/ops.py": {
        "torch": {
            "stack_13": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dataset[i][0] for i in batch_indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_14": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[dataset[i][1] for i in batch_indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dot_27": {
                "variable": {
                    "value": "inner_prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_i",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "grad_j",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_28": {
                "input": {
                    "value": "grad_j",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}