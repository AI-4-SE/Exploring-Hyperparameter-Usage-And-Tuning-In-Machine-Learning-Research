{
    "bin/downstream.py": {
        "torch": {
            "load_81": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.config['model']['feat']['ckpt']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device if self.mode == 'train' else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_98": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0 if self.task == 'phn-clf' else -1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "audio_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "single_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "bin/self_learning.py": {
        "torch": {
            "L1Loss_50": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "L1Loss_53": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dataset/librispeech.py": {
        "torch": {
            "pad_sequence_46": {
                "variable": {
                    "value": "audio_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "audio_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pad_sequence(audio_feat, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dataset/wsj_phn.py": {
        "torch": {
            "pad_sequence_53": {
                "variable": {
                    "value": "audio_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "audio_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pad_sequence(audio_feat, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_sequence_54": {
                "variable": {
                    "value": "phn_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "phn_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pad_sequence(phn_seq, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_42": {
                "f": {
                    "value": "phn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "phn.replace('.pt', '_nocrop.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataset/wsj_spk.py": {
        "torch": {
            "pad_sequence_67": {
                "variable": {
                    "value": "audio_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "audio_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pad_sequence(audio_feat, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "manual_seed_61": {
                "seed": {
                    "value": "paras.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_63": {
                "seed": {
                    "value": "paras.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/apc.py": {
        "torch": {
            "ModuleList_29": {
                "variable": {
                    "value": "self.rnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.GRU(input_size=in_size, hidden_size=out_size, batch_first=True) for (in_size, out_size) in zip(in_sizes, out_sizes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.rnn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.postnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_98": {
                "variable": {
                    "value": "packed_rnn_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frames_BxLxM",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "seq_lengths_B",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.vq_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.vq_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_107": {
                "variable": {
                    "value": "(rnn_outputs_BxLxH, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_rnn_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "total_length": {
                    "value": "max_seq_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "frames_BxLxM.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_116": {
                "variable": {
                    "value": "(rnn_inputs_BxLxH, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_rnn_inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pack_padded_sequence(frames_BxLxM, seq_lengths_B, batch_first=True, enforce_sorted=True)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(rnn_outputs_BxLxH, seq_lengths_B, batch_first=True, enforce_sorted=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "total_length": {
                    "value": "max_seq_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "frames_BxLxM.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_131": {
                "variable": {
                    "value": "rnn_outputs_BxLxH",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_136": {
                "variable": {
                    "value": "packed_rnn_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_outputs_BxLxH",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.rnn_dropout(rnn_outputs_BxLxH)",
                            "Call"
                        ],
                        [
                            "rnn_outputs_BxLxH + rnn_inputs_BxLxH",
                            "BinOp"
                        ],
                        [
                            "torch.cat(q_feat, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths_B",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_30": {
                "input_size": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/classifier.py": {
        "torch": {
            "ModuleList_13": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_features=in_size, out_features=out_size) for (in_size, out_size) in zip(input_sizes, output_sizes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feat_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_class",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/npc.py": {
        "torch": {
            "Tanh_12": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_14": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pad_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_22": {
                "variable": {
                    "value": "conv_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_27": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.conv1d(feat, self.conv_mask * self.conv.weight, bias=self.conv.bias, padding=self.pad_size)",
                            "Call"
                        ],
                        [
                            "feat.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.act(feat)",
                            "Call"
                        ],
                        [
                            "self.masked_convs[i](unmasked_feat)",
                            "Call"
                        ],
                        [
                            "masked_feat",
                            "Name"
                        ],
                        [
                            "feat + masked_feat",
                            "BinOp"
                        ],
                        [
                            "self.ae_bottleneck(feat)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.conv_mask * self.conv.weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.conv.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pad_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_48": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_54": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_64": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "self.masked_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.masked_convs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_62": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_63": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_138": {
                "variable": {
                    "value": "self.vq_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.vq_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.ae_bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.postnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.postnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "q_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(q_feat, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tanh_45": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/vq.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "self.vq_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "codebook_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.codebook_CxE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "codebook_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "code_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_37": {
                "variable": {
                    "value": "onehot_BxLxC",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_BxLxC",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.vq_logits(inputs_BxLxI)",
                            "Call"
                        ]
                    ]
                }
            },
            "gumbel_softmax_41": {
                "variable": {
                    "value": "onehot_BxLxC",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_BxLxC",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.vq_logits(inputs_BxLxI)",
                            "Call"
                        ]
                    ]
                },
                "tau": {
                    "value": "self.gumbel_temperature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hard": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "EPS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-10",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/audio.py": {
        "torch": {}
    },
    "src/data.py": {
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "tr_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tr_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dataset(path, train_split)",
                            "Call"
                        ],
                        [
                            "DataLoader(tr_set, batch_size=batch_size, shuffle=True, drop_last=True, collate_fn=collect_tr, num_workers=n_jobs, pin_memory=use_gpu)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collect_tr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial(collect_fn, audio_max_frames=audio_max_frames, audio_transform=audio_transform, mode='train')",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "n_jobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "use_gpu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "dv_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dv_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dataset(path, dev_split)",
                            "Call"
                        ],
                        [
                            "DataLoader(dv_set, batch_size=batch_size, shuffle=False, drop_last=False, collate_fn=collect_dv, num_workers=dev_n_jobs, pin_memory=pin_memory)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collect_dv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial(collect_fn, audio_max_frames=audio_max_frames, audio_transform=audio_transform, mode='dev')",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "dev_n_jobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "tt_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tt_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Dataset(path, test_split)",
                            "Call"
                        ],
                        [
                            "DataLoader(tt_set, batch_size=batch_size, shuffle=False, drop_last=False, collate_fn=collect_tt, num_workers=dev_n_jobs, pin_memory=pin_memory)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collect_tt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial(collect_fn, audio_max_frames=audio_max_frames, audio_transform=audio_transform, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "dev_n_jobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/optim.py": {
        "torch": {}
    },
    "src/solver.py": {
        "torch": {
            "SummaryWriter_50": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.logdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "self.TB_FLUSH_FREQ",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__69": {
                "variable": {
                    "value": "grad_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.GRAD_CLIP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_28": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_31": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_82": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.paras.load",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device if self.paras.mode == 'train' else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "save_155": {
                "obj": {
                    "value": "full_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'model': self.model.state_dict(), 'optimizer': self.optimizer.get_opt_state_dict(), 'global_step': self.step, 'epoch': self.cur_epoch, metric: score}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.ckpdir, f_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/util.py": {
        "torch": {}
    }
}