{
    "common/data/split.py": {
        "sklearn": {
            "StratifiedKFold_45": {
                "variable": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_59": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "subjects",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "stratification",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "valid_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "counts[1]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stratify": {
                    "value": "np.asarray(stratification)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_66": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "tt_subjects",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "counts[2]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stratify": {
                    "value": "np.asarray(tt_stratification)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "common/evalutation/numpyfunctions.py": {
        "sklearn": {
            "log_loss_163": {
                "y_true": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[mask]",
                            "Subscript"
                        ],
                        [
                            "target[mask]",
                            "Subscript"
                        ],
                        [
                            "target[mask]",
                            "Subscript"
                        ],
                        [
                            "target.reshape(-1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probabilities[mask]",
                            "Subscript"
                        ],
                        [
                            "probabilities[..., 1]",
                            "Subscript"
                        ],
                        [
                            "np.squeeze(probabilities, axis=-1)",
                            "Call"
                        ],
                        [
                            "probabilities[mask]",
                            "Subscript"
                        ],
                        [
                            "probabilities.reshape(-1, probabilities.shape[-1])",
                            "Call"
                        ],
                        [
                            "probabilities.reshape(-1)",
                            "Call"
                        ],
                        [
                            "probabilities",
                            "Method Argument"
                        ],
                        [
                            "probabilities",
                            "Method Argument"
                        ],
                        [
                            "probabilities",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "bin-dl/brats_test_aleatoric.py": {
        "torch": {
            "softmax_72": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_context.output['logits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "bin-dl/brats_test_auxiliary_feat.py": {
        "torch": {
            "softmax_74": {
                "variable": {
                    "value": "segm_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segm_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.test_model(batch_context.input['images'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.model(self.test_model.features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "bin-dl/brats_test_auxiliary_segm.py": {
        "torch": {
            "cat_61": {
                "variable": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_context.input['images'], pred.unsqueeze(1).float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_66": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.model(inpt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "bin-dl/brats_test_ensemble.py": {
        "torch": {
            "softmax_86": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.model(batch_context.input['images'])",
                            "Call"
                        ],
                        [
                            "additional_model(batch_context.input['images'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_93": {
                "variable": {
                    "value": "ensemble_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ensemble_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(ensemble_probabilities)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_90": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.model(batch_context.input['images'])",
                            "Call"
                        ],
                        [
                            "additional_model(batch_context.input['images'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "bin-dl/brats_train_aleatoric.py": {
        "torch": {
            "softmax_96": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_context.output['logits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "bin-dl/brats_train_auxiliary_feat.py": {
        "torch": {
            "softmax_115": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.model(self.test_model.features)",
                            "Call"
                        ],
                        [
                            "context.model(self.test_model.features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "bin-dl/brats_train_auxiliary_segm.py": {
        "torch": {
            "cat_72": {
                "variable": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_context.input['images'], prediciton.unsqueeze(1).float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_context.input['images'], pred.unsqueeze(1).float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.model(inpt)",
                            "Call"
                        ],
                        [
                            "context.model(inpt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "bin-dl/isic_test_aleatoric.py": {
        "torch": {
            "softmax_72": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_context.output['logits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "bin-dl/isic_test_auxiliary_feat.py": {
        "torch": {
            "softmax_74": {
                "variable": {
                    "value": "segm_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segm_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.test_model(batch_context.input['images'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.model(self.test_model.features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "bin-dl/isic_test_auxiliary_segm.py": {
        "torch": {
            "cat_72": {
                "variable": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_context.input['images'], pred.unsqueeze(1).float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_77": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.model(inpt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "bin-dl/isic_test_ensemble.py": {
        "torch": {
            "softmax_87": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.model(batch_context.input['images'])",
                            "Call"
                        ],
                        [
                            "additional_model(batch_context.input['images'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_94": {
                "variable": {
                    "value": "ensemble_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ensemble_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(ensemble_probabilities)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_91": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.model(batch_context.input['images'])",
                            "Call"
                        ],
                        [
                            "additional_model(batch_context.input['images'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "bin-dl/isic_train_aleatoric.py": {
        "torch": {
            "softmax_93": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_context.output['logits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "bin-dl/isic_train_auxiliary_feat.py": {
        "torch": {
            "softmax_81": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.model(self.test_model.features)",
                            "Call"
                        ],
                        [
                            "context.model(self.test_model.features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "bin-dl/isic_train_auxiliary_segm.py": {
        "torch": {
            "cat_68": {
                "variable": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_context.input['images'], pred.unsqueeze(1).float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_73": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.model(inpt)",
                            "Call"
                        ],
                        [
                            "context.model(inpt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "inpt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_context.input['images'], prediciton.unsqueeze(1).float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "bin-dl/isic_train_default.py": {
        "torch": {
            "softmax_80": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_context.output['logits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "common/data/collate.py": {
        "torch": {}
    },
    "common/evalutation/torchfunctions.py": {
        "torch": {
            "nll_loss_27": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probabilities.log()",
                            "Call"
                        ],
                        [
                            "probabilities.view(-1, probabilities.size()[-1])",
                            "Call"
                        ],
                        [
                            "probabilities",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "common/loss.py": {
        "torch": {
            "softmax_22": {
                "variable": {
                    "value": "mc_expectation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distribution.rsample((self.nb_samples,))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_22": {
                "variable": {
                    "value": "mc_expectation",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_24": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mc_expectation.log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Normal_16": {
                "variable": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.exp(sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_18": {
                "variable": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_16": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "common/model/factory.py": {
        "torch": {}
    },
    "common/model/helpers.py": {
        "torch": {
            "interpolate_15": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "common/model/management.py": {
        "torch": {
            "load_60": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_100": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': model.state_dict(), 'epoch': epoch, 'optimizer': optimizer.state_dict(), **others}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "common/model/postnet.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "common/model/unet.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.conv2d_batch_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "out_ch",
                            "variable"
                        ],
                        [
                            "out_ch",
                            "variable"
                        ],
                        [
                            "out_ch",
                            "variable"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_filters",
                            "variable"
                        ],
                        [
                            "out_ch * 2",
                            "BinOp"
                        ],
                        [
                            "in_ch // 2",
                            "BinOp"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_90": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(up, skip_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "self.down_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_151": {
                "variable": {
                    "value": "self.up_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dBnRelu(in_ch, in_ch, dropout, bn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_103": {
                "variable": {
                    "value": "self.upconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "out_ch",
                            "variable"
                        ],
                        [
                            "out_ch",
                            "variable"
                        ],
                        [
                            "out_ch",
                            "variable"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_filters",
                            "variable"
                        ],
                        [
                            "out_ch * 2",
                            "BinOp"
                        ],
                        [
                            "in_ch // 2",
                            "BinOp"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.upconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "helper.InterpolateWrapper(scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_116": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upconv(x)",
                            "Call"
                        ],
                        [
                            "F.pad(up, y_pad + x_pad)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "y_pad + x_pad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.conv_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dBnRelu(in_ch, in_ch, dropout, bn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "out_ch",
                            "variable"
                        ],
                        [
                            "out_ch",
                            "variable"
                        ],
                        [
                            "out_ch",
                            "variable"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_filters",
                            "variable"
                        ],
                        [
                            "out_ch * 2",
                            "BinOp"
                        ],
                        [
                            "in_ch // 2",
                            "BinOp"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_161": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "out_ch",
                            "variable"
                        ],
                        [
                            "out_ch",
                            "variable"
                        ],
                        [
                            "out_ch",
                            "variable"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_15": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_DROPOUT",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_filters",
                            "variable"
                        ],
                        [
                            "out_ch * 2",
                            "BinOp"
                        ],
                        [
                            "in_ch // 2",
                            "BinOp"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "out_ch",
                            "variable"
                        ],
                        [
                            "out_ch",
                            "variable"
                        ],
                        [
                            "out_ch",
                            "variable"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_filters",
                            "variable"
                        ],
                        [
                            "out_ch * 2",
                            "BinOp"
                        ],
                        [
                            "in_ch // 2",
                            "BinOp"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "out_ch",
                            "variable"
                        ],
                        [
                            "out_ch",
                            "variable"
                        ],
                        [
                            "out_ch",
                            "variable"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nb_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "common/trainloop/context.py": {
        "torch": {
            "device_106": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device_str",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_266": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device_str",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_grad_enabled_221": {
                "mode": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_232": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mgt.model_service.load_model_from_parameters(self.model_files.model_path(), with_optimizer=True)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=supported_cuda_devices)",
                            "Call"
                        ],
                        [
                            "mgt.model_service.load_model_from_parameters(self.model_files.model_path(), with_optimizer=False)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "supported_cuda_devices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "set_grad_enabled_322": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_capability_227": {
                "device": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(torch.cuda.device_count())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "common/trainloop/loops.py": {
        "torch": {}
    },
    "common/trainloop/steps.py": {
        "torch": {
            "softmax_52": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_context.output['logits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_88": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.model(batch_context.input['images'])",
                            "Call"
                        ],
                        [
                            "context.model(batch_context.input['images'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "common/utils/torchhelper.py": {
        "torch": {
            "manual_seed_37": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_38": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_54": {
                "condition": {
                    "value": "p > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "p * p.log()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "p.new([0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_54": {
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_29": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state.items()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rechun/dl/customdatasets.py": {
        "torch": {}
    },
    "rechun/dl/customsteps.py": {
        "torch": {
            "softmax_24": {
                "variable": {
                    "value": "ws_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ws_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.model(batch_context.input['images'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_35": {
                "variable": {
                    "value": "mc_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mc_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mc_probabilities)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_33": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context.model(batch_context.input['images'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rechun/dl/multimodelcontext.py": {
        "torch": {
            "set_grad_enabled_76": {
                "mode": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}