{
    "module/_functions.py": {
        "torch": {
            "empty_14": {
                "variable": {
                    "value": "mean_all",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "world_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.world_size",
                            "Attribute"
                        ],
                        [
                            "world_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "mean.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mean.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mean.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_15": {
                "variable": {
                    "value": "invstd_all",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "world_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.world_size",
                            "Attribute"
                        ],
                        [
                            "world_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "invstd.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "invstd.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "invstd.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "module/_jit_internal.py": {
        "torch": {}
    },
    "module/adaptiveAvgPool2d.py": {
        "torch": {
            "avg_pool2d_86": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "self.count_include_pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_95": {
                "variable": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(grad_output, scale_factor=self.kernel_size, mode='nearest')",
                            "Call"
                        ],
                        [
                            "F.interpolate(grad_output.reshape(n, f, 1, 1), scale_factor=scale, mode='nearest')",
                            "Call"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ],
                        [
                            "grad_output",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_102": {
                "variable": {
                    "value": "RdivZ_interpol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "RdivZ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "R / (self.output + 1e-08) / self.kernel_size ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_120": {
                "variable": {
                    "value": "x_p",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.input < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros(1).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_123": {
                "variable": {
                    "value": "output_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(self.input < 0, torch.zeros(1).cuda(), self.input)",
                            "Call"
                        ],
                        [
                            "torch.where(self.input < 0, torch.zeros(1).cuda(), self.input)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "self.count_include_pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_124": {
                "variable": {
                    "value": "output_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input - x_p",
                            "BinOp"
                        ],
                        [
                            "self.input - x_p",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "self.count_include_pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_129": {
                "variable": {
                    "value": "RdivZp_interpol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "RdivZp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "R / (output_p + 1e-08) / self.kernel_size ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_130": {
                "variable": {
                    "value": "RdivZn_interpol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "RdivZn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "R / (output_n + 1e-08) / self.kernel_size ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_185": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_197": {
                "variable": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_output.reshape(n, f, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_246": {
                "variable": {
                    "value": "x_p",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.input < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros(1).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_246": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "module/arguments.py": {
        "torch": {
            "is_available_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "module/batchnorm.py": {
        "torch": {
            "Parameter_27": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "variable": {
                    "value": "state_dict[num_batches_tracked_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_34": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_35": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_102": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "dX_norm * -std_inv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "dX_norm * X_mu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_106": {
                "input": {
                    "value": "-2.0 * X_mu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "module/convolution.py": {
        "torch": {
            "relu_145": {
                "variable": {
                    "value": "weight_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "relu_149": {
                "variable": {
                    "value": "input_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_tensor",
                            "Attribute"
                        ],
                        [
                            "self.input_tensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Unfold_188": {
                "variable": {
                    "value": "unfold",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_453": {
                "variable": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_38": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor.new_tensor(tensor, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_41": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor.new_tensor(tensor, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_44": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor.new_tensor(tensor, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_114": {
                "variable": {
                    "value": "Zs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "_single(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_triple(stride)",
                            "Call"
                        ],
                        [
                            "_single(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_triple(stride)",
                            "Call"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "_single(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_triple(padding)",
                            "Call"
                        ],
                        [
                            "_single(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_triple(padding)",
                            "Call"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dilation",
                            "Attribute"
                        ],
                        [
                            "self.dilation",
                            "Attribute"
                        ],
                        [
                            "_single(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_triple(dilation)",
                            "Call"
                        ],
                        [
                            "_single(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_triple(dilation)",
                            "Call"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_153": {
                "variable": {
                    "value": "Z1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X1",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "layer1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "_single(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_triple(stride)",
                            "Call"
                        ],
                        [
                            "_single(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_triple(stride)",
                            "Call"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "_single(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_triple(padding)",
                            "Call"
                        ],
                        [
                            "_single(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_triple(padding)",
                            "Call"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dilation",
                            "Attribute"
                        ],
                        [
                            "self.dilation",
                            "Attribute"
                        ],
                        [
                            "_single(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_triple(dilation)",
                            "Call"
                        ],
                        [
                            "_single(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_triple(dilation)",
                            "Call"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_154": {
                "variable": {
                    "value": "Z2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X2",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "layer2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer2",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "_single(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_triple(stride)",
                            "Call"
                        ],
                        [
                            "_single(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_triple(stride)",
                            "Call"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "_single(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_triple(padding)",
                            "Call"
                        ],
                        [
                            "_single(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_triple(padding)",
                            "Call"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dilation",
                            "Attribute"
                        ],
                        [
                            "self.dilation",
                            "Attribute"
                        ],
                        [
                            "_single(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_triple(dilation)",
                            "Call"
                        ],
                        [
                            "_single(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_triple(dilation)",
                            "Call"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_181": {
                "variable": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.activations_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_313": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv3d_576": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose1d_714": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_padding(input, output_size)",
                            "Call"
                        ],
                        [
                            "_single(output_padding)",
                            "Call"
                        ],
                        [
                            "self._output_padding(input, output_size)",
                            "Call"
                        ],
                        [
                            "_pair(output_padding)",
                            "Call"
                        ],
                        [
                            "self._output_padding(input, output_size)",
                            "Call"
                        ],
                        [
                            "_triple(output_padding)",
                            "Call"
                        ],
                        [
                            "self._output_padding(input, output_size)",
                            "Call"
                        ],
                        [
                            "output_padding",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_847": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_padding(input, output_size)",
                            "Call"
                        ],
                        [
                            "_single(output_padding)",
                            "Call"
                        ],
                        [
                            "self._output_padding(input, output_size)",
                            "Call"
                        ],
                        [
                            "_pair(output_padding)",
                            "Call"
                        ],
                        [
                            "self._output_padding(input, output_size)",
                            "Call"
                        ],
                        [
                            "_triple(output_padding)",
                            "Call"
                        ],
                        [
                            "self._output_padding(input, output_size)",
                            "Call"
                        ],
                        [
                            "output_padding",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose3d_975": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_padding(input, output_size)",
                            "Call"
                        ],
                        [
                            "_single(output_padding)",
                            "Call"
                        ],
                        [
                            "self._output_padding(input, output_size)",
                            "Call"
                        ],
                        [
                            "_pair(output_padding)",
                            "Call"
                        ],
                        [
                            "self._output_padding(input, output_size)",
                            "Call"
                        ],
                        [
                            "_triple(output_padding)",
                            "Call"
                        ],
                        [
                            "self._output_padding(input, output_size)",
                            "Call"
                        ],
                        [
                            "output_padding",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_444": {
                "variable": {
                    "value": "self.input_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "mod_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.batch_size, self.input_depth, self.input_dim, self.input_dim]",
                            "List"
                        ]
                    ]
                }
            },
            "where_117": {
                "condition": {
                    "value": "torch.ge(Zs, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(Zs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(Zs) * -1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_157": {
                "condition": {
                    "value": "torch.ge(Zs, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(Zs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(Zs) * -1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ge_117": {
                "input": {
                    "value": "Zs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(X, layer, bias, stride, padding, dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "Z1 + Z2",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_117": {
                "input": {
                    "value": "Zs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(X, layer, bias, stride, padding, dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "Z1 + Z2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ge_157": {
                "input": {
                    "value": "Zs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(X, layer, bias, stride, padding, dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "Z1 + Z2",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_157": {
                "input": {
                    "value": "Zs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(X, layer, bias, stride, padding, dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "Z1 + Z2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "module/dataloader.py": {
        "torch": {
            "tensor_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(D_fool_data - mean) / std",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_71": {
                "variable": {
                    "value": "D_fool_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x[100:1200]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "D_fool_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "D_fool_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(x[100:1200])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_77": {
                "variable": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.cat((x[1200:1300], x[:100]), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(torch.cat((x[1200:1300], x[:100]), 0))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "c1_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.ImageFolder(c1_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_93": {
                "variable": {
                    "value": "c2_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.ImageFolder(c2_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(train_dir, transform=transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_34": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.ImageFolder(val_dir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "(x[1200:1300], x[:100])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "module/linear.py": {
        "torch": {
            "Parameter_47": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_75": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_100": {
                "variable": {
                    "value": "Zs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_123": {
                "variable": {
                    "value": "Zs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_109": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "R * mask",
                            "BinOp"
                        ],
                        [
                            "R * mask",
                            "BinOp"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "range_110": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "R.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_129": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "R * mask",
                            "BinOp"
                        ],
                        [
                            "R * mask",
                            "BinOp"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "range_131": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "R.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_101": {
                "condition": {
                    "value": "torch.ge(Zs, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(Zs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(Zs) * -1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_124": {
                "condition": {
                    "value": "torch.ge(Zs, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(Zs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(Zs) * -1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_49": {},
            "ge_101": {
                "input": {
                    "value": "Zs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(self.input_tensor, self.weight, self.bias)",
                            "Call"
                        ],
                        [
                            "Zs + stabilizer",
                            "BinOp"
                        ],
                        [
                            "F.linear(self.input_tensor, self.weight, self.bias)",
                            "Call"
                        ],
                        [
                            "Zs + stabilizer",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_101": {
                "input": {
                    "value": "Zs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(self.input_tensor, self.weight, self.bias)",
                            "Call"
                        ],
                        [
                            "Zs + stabilizer",
                            "BinOp"
                        ],
                        [
                            "F.linear(self.input_tensor, self.weight, self.bias)",
                            "Call"
                        ],
                        [
                            "Zs + stabilizer",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ge_124": {
                "input": {
                    "value": "Zs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(self.input_tensor, self.weight, self.bias)",
                            "Call"
                        ],
                        [
                            "Zs + stabilizer",
                            "BinOp"
                        ],
                        [
                            "F.linear(self.input_tensor, self.weight, self.bias)",
                            "Call"
                        ],
                        [
                            "Zs + stabilizer",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_124": {
                "input": {
                    "value": "Zs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(self.input_tensor, self.weight, self.bias)",
                            "Call"
                        ],
                        [
                            "Zs + stabilizer",
                            "BinOp"
                        ],
                        [
                            "F.linear(self.input_tensor, self.weight, self.bias)",
                            "Call"
                        ],
                        [
                            "Zs + stabilizer",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "module/model_Densenet.py": {
        "torch": {
            "dropout_58": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "module(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "module(out)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "[x, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_215": {
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "module/model_Resnet.py": {
        "torch": {
            "where_109": {
                "variable": {
                    "value": "out_p",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.out < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros(1).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_112": {
                "variable": {
                    "value": "x_p",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.x < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros(1).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_226": {
                "variable": {
                    "value": "out_p",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.out < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros(1).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_229": {
                "variable": {
                    "value": "x_p",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.x < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros(1).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_356": {
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_377": {
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_400": {
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_422": {
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_226": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_229": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_351": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_372": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_395": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_416": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "module/model_VGG19.py": {
        "torch": {
            "load_52": {
                "f": {
                    "value": "pretrained_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "module/module.py": {
        "torch": {}
    },
    "module/pool.py": {
        "torch": {
            "max_unpool2d_111": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_output.reshape(self.activations.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "self.input_tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_unpool2d_121": {
                "variable": {
                    "value": "lrp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R.reshape(self.activations.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "self.input_tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Unfold_163": {
                "variable": {
                    "value": "unfold",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_239": {
                "variable": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "self.count_include_pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_92": {
                "variable": {
                    "value": "(self.activations, self.indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_96": {
                "variable": {
                    "value": "(self.activations, self.indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_149": {
                "variable": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.activations.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "module/relu.py": {
        "torch": {
            "threshold_50": {
                "variable": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "threshold": {
                    "value": "self.threshold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_63": {
                "variable": {
                    "value": "multiplier",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "module/sequential.py": {
        "torch": {
            "argmax_112": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "activation_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "module.forward(activation_output)",
                            "Call"
                        ],
                        [
                            "net_ori.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "self.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "net_ori.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "self.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "net_ori.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "self.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "self.prediction(input)",
                            "Call"
                        ],
                        [
                            "self.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "self.prediction(inputs_interpolation)",
                            "Call"
                        ],
                        [
                            "self.prediction(inputs_noise)",
                            "Call"
                        ],
                        [
                            "activation_output",
                            "Method Argument"
                        ],
                        [
                            "activation_output",
                            "Method Argument"
                        ],
                        [
                            "activation_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_114": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(prediction == labels).float().squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_119": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_121": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterion(activation_output, labels)",
                            "Call"
                        ],
                        [
                            "criterion(activation_output, labels)",
                            "Call"
                        ],
                        [
                            "criterion(activation_output, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_134": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "LRP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LRP - LRP.min(dim=1)[0].min(dim=1)[0].min(dim=1)[0].reshape(-1, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "LRP / (LRP.max(dim=1)[0].max(dim=1)[0].max(dim=1)[0].reshape(-1, 1, 1, 1) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "LRP / LRP.max()",
                            "BinOp"
                        ],
                        [
                            "LRP.reshape(n, -1)",
                            "Call"
                        ],
                        [
                            "self.normalize(LRP)",
                            "Call"
                        ],
                        [
                            "self.normalize(LRP).reshape(n, -1)",
                            "Call"
                        ],
                        [
                            "self.normalize(LRP)",
                            "Call"
                        ],
                        [
                            "self.interpretation(activation_output, interpreter=args.interpreter, labels=labels, target_layer=args.lrp_target_layer, inputs=inputs)",
                            "Call"
                        ],
                        [
                            "LRP.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "LRP.sum(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.lrp(activation_output, labels=labels, lrp_var=args.r_method, param=1e-08, whichScore=None, target_layer=None)",
                            "Call"
                        ],
                        [
                            "self.lrp(activation_output, labels=labels, lrp_var=args.r_method, param=1e-08, whichScore=None, target_layer=target_layer)",
                            "Call"
                        ],
                        [
                            "LRP.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "LRP.sum(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.grad_cam(activation_output, labels, target_layer)",
                            "Call"
                        ],
                        [
                            "self.simple_grad(activation_output, labels, None)",
                            "Call"
                        ],
                        [
                            "self.simple_grad(activation_output, labels, target_layer)",
                            "Call"
                        ],
                        [
                            "self.smooth_grad(self, inputs, labels, None)",
                            "Call"
                        ],
                        [
                            "self.smooth_grad(self, inputs, labels, target_layer)",
                            "Call"
                        ],
                        [
                            "self.integrated_grad(self, inputs, labels, None)",
                            "Call"
                        ],
                        [
                            "self.integrated_grad(self, inputs, labels, target_layer)",
                            "Call"
                        ],
                        [
                            "LRP",
                            "Method Argument"
                        ],
                        [
                            "LRP",
                            "Method Argument"
                        ],
                        [
                            "LRP",
                            "Method Argument"
                        ],
                        [
                            "LRP",
                            "Method Argument"
                        ],
                        [
                            "LRP",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_154": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "LRP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LRP - LRP.min(dim=1)[0].min(dim=1)[0].min(dim=1)[0].reshape(-1, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "LRP / (LRP.max(dim=1)[0].max(dim=1)[0].max(dim=1)[0].reshape(-1, 1, 1, 1) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "LRP / LRP.max()",
                            "BinOp"
                        ],
                        [
                            "LRP.reshape(n, -1)",
                            "Call"
                        ],
                        [
                            "self.normalize(LRP)",
                            "Call"
                        ],
                        [
                            "self.normalize(LRP).reshape(n, -1)",
                            "Call"
                        ],
                        [
                            "self.normalize(LRP)",
                            "Call"
                        ],
                        [
                            "self.interpretation(activation_output, interpreter=args.interpreter, labels=labels, target_layer=args.lrp_target_layer, inputs=inputs)",
                            "Call"
                        ],
                        [
                            "LRP.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "LRP.sum(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.lrp(activation_output, labels=labels, lrp_var=args.r_method, param=1e-08, whichScore=None, target_layer=None)",
                            "Call"
                        ],
                        [
                            "self.lrp(activation_output, labels=labels, lrp_var=args.r_method, param=1e-08, whichScore=None, target_layer=target_layer)",
                            "Call"
                        ],
                        [
                            "LRP.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "LRP.sum(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.grad_cam(activation_output, labels, target_layer)",
                            "Call"
                        ],
                        [
                            "self.simple_grad(activation_output, labels, None)",
                            "Call"
                        ],
                        [
                            "self.simple_grad(activation_output, labels, target_layer)",
                            "Call"
                        ],
                        [
                            "self.smooth_grad(self, inputs, labels, None)",
                            "Call"
                        ],
                        [
                            "self.smooth_grad(self, inputs, labels, target_layer)",
                            "Call"
                        ],
                        [
                            "self.integrated_grad(self, inputs, labels, None)",
                            "Call"
                        ],
                        [
                            "self.integrated_grad(self, inputs, labels, target_layer)",
                            "Call"
                        ],
                        [
                            "LRP",
                            "Method Argument"
                        ],
                        [
                            "LRP",
                            "Method Argument"
                        ],
                        [
                            "LRP",
                            "Method Argument"
                        ],
                        [
                            "LRP",
                            "Method Argument"
                        ],
                        [
                            "LRP",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_156": {
                "variable": {
                    "value": "mask[:, :, :k, :k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(k, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_157": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "LRP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LRP - LRP.min(dim=1)[0].min(dim=1)[0].min(dim=1)[0].reshape(-1, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "LRP / (LRP.max(dim=1)[0].max(dim=1)[0].max(dim=1)[0].reshape(-1, 1, 1, 1) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "LRP / LRP.max()",
                            "BinOp"
                        ],
                        [
                            "LRP.reshape(n, -1)",
                            "Call"
                        ],
                        [
                            "self.normalize(LRP)",
                            "Call"
                        ],
                        [
                            "self.normalize(LRP).reshape(n, -1)",
                            "Call"
                        ],
                        [
                            "self.normalize(LRP)",
                            "Call"
                        ],
                        [
                            "self.interpretation(activation_output, interpreter=args.interpreter, labels=labels, target_layer=args.lrp_target_layer, inputs=inputs)",
                            "Call"
                        ],
                        [
                            "LRP.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "LRP.sum(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.lrp(activation_output, labels=labels, lrp_var=args.r_method, param=1e-08, whichScore=None, target_layer=None)",
                            "Call"
                        ],
                        [
                            "self.lrp(activation_output, labels=labels, lrp_var=args.r_method, param=1e-08, whichScore=None, target_layer=target_layer)",
                            "Call"
                        ],
                        [
                            "LRP.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "LRP.sum(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.grad_cam(activation_output, labels, target_layer)",
                            "Call"
                        ],
                        [
                            "self.simple_grad(activation_output, labels, None)",
                            "Call"
                        ],
                        [
                            "self.simple_grad(activation_output, labels, target_layer)",
                            "Call"
                        ],
                        [
                            "self.smooth_grad(self, inputs, labels, None)",
                            "Call"
                        ],
                        [
                            "self.smooth_grad(self, inputs, labels, target_layer)",
                            "Call"
                        ],
                        [
                            "self.integrated_grad(self, inputs, labels, None)",
                            "Call"
                        ],
                        [
                            "self.integrated_grad(self, inputs, labels, target_layer)",
                            "Call"
                        ],
                        [
                            "LRP",
                            "Method Argument"
                        ],
                        [
                            "LRP",
                            "Method Argument"
                        ],
                        [
                            "LRP",
                            "Method Argument"
                        ],
                        [
                            "LRP",
                            "Method Argument"
                        ],
                        [
                            "LRP",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(LRP)",
                            "Call"
                        ],
                        [
                            "mask.reshape(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(LRP)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_188": {
                "variable": {
                    "value": "h_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_188": {
                "variable": {
                    "value": "h_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_189": {
                "variable": {
                    "value": "w_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "variable": {
                    "value": "w_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_261": {
                "variable": {
                    "value": "(_, prediction)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "activation_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "module.forward(activation_output)",
                            "Call"
                        ],
                        [
                            "net_ori.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "self.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "net_ori.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "self.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "net_ori.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "self.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "self.prediction(input)",
                            "Call"
                        ],
                        [
                            "self.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "self.prediction(inputs_interpolation)",
                            "Call"
                        ],
                        [
                            "self.prediction(inputs_noise)",
                            "Call"
                        ],
                        [
                            "activation_output",
                            "Method Argument"
                        ],
                        [
                            "activation_output",
                            "Method Argument"
                        ],
                        [
                            "activation_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_262": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_265": {
                "variable": {
                    "value": "class_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterion(activation_output, labels)",
                            "Call"
                        ],
                        [
                            "criterion(activation_output, labels)",
                            "Call"
                        ],
                        [
                            "criterion(activation_output, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_273": {
                "variable": {
                    "value": "(_, prediction)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "activation_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "module.forward(activation_output)",
                            "Call"
                        ],
                        [
                            "net_ori.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "self.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "net_ori.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "self.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "net_ori.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "self.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "self.prediction(input)",
                            "Call"
                        ],
                        [
                            "self.prediction(inputs)",
                            "Call"
                        ],
                        [
                            "self.prediction(inputs_interpolation)",
                            "Call"
                        ],
                        [
                            "self.prediction(inputs_noise)",
                            "Call"
                        ],
                        [
                            "activation_output",
                            "Method Argument"
                        ],
                        [
                            "activation_output",
                            "Method Argument"
                        ],
                        [
                            "activation_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_274": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_277": {
                "variable": {
                    "value": "class_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterion(activation_output, labels)",
                            "Call"
                        ],
                        [
                            "criterion(activation_output, labels)",
                            "Call"
                        ],
                        [
                            "criterion(activation_output, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_348": {
                "variable": {
                    "value": "inputs_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_381": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_402": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eye[labels]",
                            "Subscript"
                        ],
                        [
                            "eye[torch.argmax(output, dim=1)]",
                            "Subscript"
                        ],
                        [
                            "torch.ones_like(output) * dx",
                            "BinOp"
                        ],
                        [
                            "module.grad_cam(dx, requires_activation)",
                            "Call"
                        ],
                        [
                            "eye[labels]",
                            "Subscript"
                        ],
                        [
                            "torch.ones_like(output) * dx",
                            "BinOp"
                        ],
                        [
                            "module.grad_cam(dx, requires_activation)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_425": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_443": {
                "variable": {
                    "value": "cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "threshold_444": {
                "variable": {
                    "value": "cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(x * weights, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.threshold(cam, threshold=0, value=0)",
                            "Call"
                        ],
                        [
                            "cam / (cam_max + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "threshold": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "mask[:, :, k:-k, k:-k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(l - 2 * k, l - 2 * k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_406": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R * w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "threshold_408": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.simple_grad(activation_output, labels, target_layer, integrated_grad=True).detach()",
                            "Call"
                        ],
                        [
                            "R + self.simple_grad(activation_output, labels, target_layer).detach()",
                            "BinOp"
                        ],
                        [
                            "R / iterations",
                            "BinOp"
                        ],
                        [
                            "self.simple_grad(activation_output, labels, target_layer).detach()",
                            "Call"
                        ],
                        [
                            "torch.abs(dx)",
                            "Call"
                        ],
                        [
                            "torch.sum(R * w, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.threshold(R, threshold=0, value=0)",
                            "Call"
                        ],
                        [
                            "(R - R_min) / (R_max - R_min + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "module.lrp(R, labels, lrp_var, param)",
                            "Call"
                        ],
                        [
                            "module.lrp(R, labels, lrp_var, param)",
                            "Call"
                        ],
                        [
                            "torch.sum(R, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.threshold(R, threshold=0, value=0)",
                            "Call"
                        ],
                        [
                            "(R - R_min) / (R_max - R_min + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ]
                    ]
                },
                "threshold": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_529": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.simple_grad(activation_output, labels, target_layer, integrated_grad=True).detach()",
                            "Call"
                        ],
                        [
                            "R + self.simple_grad(activation_output, labels, target_layer).detach()",
                            "BinOp"
                        ],
                        [
                            "R / iterations",
                            "BinOp"
                        ],
                        [
                            "self.simple_grad(activation_output, labels, target_layer).detach()",
                            "Call"
                        ],
                        [
                            "torch.abs(dx)",
                            "Call"
                        ],
                        [
                            "torch.sum(R * w, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.threshold(R, threshold=0, value=0)",
                            "Call"
                        ],
                        [
                            "(R - R_min) / (R_max - R_min + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "module.lrp(R, labels, lrp_var, param)",
                            "Call"
                        ],
                        [
                            "module.lrp(R, labels, lrp_var, param)",
                            "Call"
                        ],
                        [
                            "torch.sum(R, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.threshold(R, threshold=0, value=0)",
                            "Call"
                        ],
                        [
                            "(R - R_min) / (R_max - R_min + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "threshold_530": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.simple_grad(activation_output, labels, target_layer, integrated_grad=True).detach()",
                            "Call"
                        ],
                        [
                            "R + self.simple_grad(activation_output, labels, target_layer).detach()",
                            "BinOp"
                        ],
                        [
                            "R / iterations",
                            "BinOp"
                        ],
                        [
                            "self.simple_grad(activation_output, labels, target_layer).detach()",
                            "Call"
                        ],
                        [
                            "torch.abs(dx)",
                            "Call"
                        ],
                        [
                            "torch.sum(R * w, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.threshold(R, threshold=0, value=0)",
                            "Call"
                        ],
                        [
                            "(R - R_min) / (R_max - R_min + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "module.lrp(R, labels, lrp_var, param)",
                            "Call"
                        ],
                        [
                            "module.lrp(R, labels, lrp_var, param)",
                            "Call"
                        ],
                        [
                            "torch.sum(R, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.threshold(R, threshold=0, value=0)",
                            "Call"
                        ],
                        [
                            "(R - R_min) / (R_max - R_min + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ]
                    ]
                },
                "threshold": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(loss, loss_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_388": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_403": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.simple_grad(activation_output, labels, target_layer, integrated_grad=True).detach()",
                            "Call"
                        ],
                        [
                            "R + self.simple_grad(activation_output, labels, target_layer).detach()",
                            "BinOp"
                        ],
                        [
                            "R / iterations",
                            "BinOp"
                        ],
                        [
                            "self.simple_grad(activation_output, labels, target_layer).detach()",
                            "Call"
                        ],
                        [
                            "torch.abs(dx)",
                            "Call"
                        ],
                        [
                            "torch.sum(R * w, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.threshold(R, threshold=0, value=0)",
                            "Call"
                        ],
                        [
                            "(R - R_min) / (R_max - R_min + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "module.lrp(R, labels, lrp_var, param)",
                            "Call"
                        ],
                        [
                            "module.lrp(R, labels, lrp_var, param)",
                            "Call"
                        ],
                        [
                            "torch.sum(R, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.threshold(R, threshold=0, value=0)",
                            "Call"
                        ],
                        [
                            "(R - R_min) / (R_max - R_min + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_420": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.simple_grad(activation_output, labels, target_layer, integrated_grad=True).detach()",
                            "Call"
                        ],
                        [
                            "R + self.simple_grad(activation_output, labels, target_layer).detach()",
                            "BinOp"
                        ],
                        [
                            "R / iterations",
                            "BinOp"
                        ],
                        [
                            "self.simple_grad(activation_output, labels, target_layer).detach()",
                            "Call"
                        ],
                        [
                            "torch.abs(dx)",
                            "Call"
                        ],
                        [
                            "torch.sum(R * w, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.threshold(R, threshold=0, value=0)",
                            "Call"
                        ],
                        [
                            "(R - R_min) / (R_max - R_min + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "module.lrp(R, labels, lrp_var, param)",
                            "Call"
                        ],
                        [
                            "module.lrp(R, labels, lrp_var, param)",
                            "Call"
                        ],
                        [
                            "torch.sum(R, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.threshold(R, threshold=0, value=0)",
                            "Call"
                        ],
                        [
                            "(R - R_min) / (R_max - R_min + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_430": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_138": {
                "*size": {
                    "value": "(l - 2 * k, l - 2 * k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_252": {
                "input": {
                    "value": "LRP_c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.grad_cam(activation_output, labels_c2, target_layer)",
                            "Call"
                        ],
                        [
                            "self.lrp(activation_output, labels_c2, args.r_method, 1e-08, None, target_layer=target_layer)",
                            "Call"
                        ],
                        [
                            "self.simple_grad(activation_output, labels_c2, target_layer)",
                            "Call"
                        ],
                        [
                            "LRP_c2.sum(dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "LRP_ori_c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_ori.grad_cam(activation_output, labels_c1, target_layer)",
                            "Call"
                        ],
                        [
                            "LRP_ori_c1.clone().detach()",
                            "Call"
                        ],
                        [
                            "net_ori.lrp(activation_output, labels_c1, args.r_method, 1e-08, None, target_layer=target_layer)",
                            "Call"
                        ],
                        [
                            "LRP_ori_c1.clone().detach()",
                            "Call"
                        ],
                        [
                            "net_ori.simple_grad(activation_output, labels_c1, target_layer)",
                            "Call"
                        ],
                        [
                            "LRP_ori_c1.clone().detach()",
                            "Call"
                        ],
                        [
                            "LRP_ori_c1.sum(dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_386": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_368": {
                "*size": {
                    "value": "inputs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "module/utils.py": {
        "torch": {
            "tensor_47": {
                "variable": {
                    "value": "R_ori_f",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "R_ori.reshape(R.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "R_f",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "R.reshape(R.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_116": {
                "seed": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_117": {
                "seed": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_300": {
                "variable": {
                    "value": "R_34",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "R_34",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(R_34s_key, R_34s)",
                            "Call"
                        ],
                        [
                            "R_34.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((R_34, R_34), axis=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(R_34, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.array(heatmaps_R34, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "mask_ori",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(abs(R_ori_f[i]) - abs(R_ori_f[i]).mean()) / abs(R_ori_f[i]).std() > 1",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_54": {
                "input": {
                    "value": "R_ori_f[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(abs(R_f[i]) - abs(R_f[i]).mean()) / abs(R_f[i]).std() > 1",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_57": {
                "input": {
                    "value": "R_f[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "run_lrp/passive_fooling.py": {
        "torch": {
            "CrossEntropyLoss_68": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_71": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_111": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(time.time() * 100000) % 1000000",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_112": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(time.time() * 100000) % 1000000",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_184": {
                "seed": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_185": {
                "seed": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_203": {
                "variable": {
                    "value": "(_, prediction)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "activation_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation_output_.clone().detach()",
                            "Call"
                        ],
                        [
                            "net.forward(inputs, labels, args.lambda_value, LRP_ori=LRP_ori)",
                            "Call"
                        ],
                        [
                            "net.prediction(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_236": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, args.img_name + str(itr) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}