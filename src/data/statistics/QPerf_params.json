{
    "deep_learning/aif_detection/utils/cmr_ml_utils_data.py": {
        "sklearn": {}
    },
    "deep_learning/aif_detection/utils/cmr_ml_utils_plotting.py": {
        "sklearn": {}
    },
    "deep_learning/aif_detection/utils/utils.py": {
        "sklearn": {},
        "torch": {
            "load_125": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.history_dir, dset_type + '.csv')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.history_dir, dset_type + '.csv')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_122": {
                "obj": {
                    "value": "{'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(weights_dir, weights_fname)",
                            "Call"
                        ],
                        [
                            "self.latest_weights",
                            "Attribute"
                        ],
                        [
                            "os.path.join(self.weights_dir, weights_fname)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_388": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.history_dir, dset_type + '.csv')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.history_dir, dset_type + '.csv')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_409": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.history_dir, dset_type + '.csv')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.history_dir, dset_type + '.csv')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_371": {
                "obj": {
                    "value": "{'last_epoch': self.epoch, 'trn_loss': trn_loss, 'val_loss': val_loss, 'trn_acc': trn_acc, 'val_acc': val_acc, 'best_val_loss': self.best_val_loss, 'best_val_loss_epoch': self.best_val_loss_epoch, 'experiment': self.name, 'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(weights_dir, weights_fname)",
                            "Call"
                        ],
                        [
                            "self.latest_weights",
                            "Attribute"
                        ],
                        [
                            "os.path.join(self.weights_dir, weights_fname)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_398": {
                "obj": {
                    "value": "{'last_epoch': self.epoch, 'experiment': self.name, 'state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "optim_fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.weights_dir, optim_fname)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deep_learning/analysis/utils/cmr_ml_utils_data.py": {
        "sklearn": {}
    },
    "deep_learning/analysis/utils/cmr_ml_utils_plotting.py": {
        "sklearn": {}
    },
    "deep_learning/analysis/utils/utils.py": {
        "sklearn": {},
        "torch": {
            "load_125": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.history_dir, dset_type + '.csv')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.history_dir, dset_type + '.csv')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_122": {
                "obj": {
                    "value": "{'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(weights_dir, weights_fname)",
                            "Call"
                        ],
                        [
                            "self.latest_weights",
                            "Attribute"
                        ],
                        [
                            "os.path.join(self.weights_dir, weights_fname)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_388": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.history_dir, dset_type + '.csv')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.history_dir, dset_type + '.csv')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_409": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.history_dir, dset_type + '.csv')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.history_dir, dset_type + '.csv')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_371": {
                "obj": {
                    "value": "{'last_epoch': self.epoch, 'trn_loss': trn_loss, 'val_loss': val_loss, 'trn_acc': trn_acc, 'val_acc': val_acc, 'best_val_loss': self.best_val_loss, 'best_val_loss_epoch': self.best_val_loss_epoch, 'experiment': self.name, 'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(weights_dir, weights_fname)",
                            "Call"
                        ],
                        [
                            "self.latest_weights",
                            "Attribute"
                        ],
                        [
                            "os.path.join(self.weights_dir, weights_fname)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_398": {
                "obj": {
                    "value": "{'last_epoch': self.epoch, 'experiment': self.name, 'state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "optim_fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.weights_dir, optim_fname)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deep_learning/aif_detection/models/model_utils.py": {
        "torch": {
            "Conv2d_6": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.stride",
                            "Attribute"
                        ],
                        [
                            "m.stride",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "deep_learning/aif_detection/models/resunet.py": {
        "torch": {
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers_planes[l]",
                            "Subscript"
                        ],
                        [
                            "planes",
                            "Name"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_62": {
                "variable": {
                    "value": "self.dp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "variable": {
                    "value": "self.down_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_233": {
                "variable": {
                    "value": "self.up_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_266": {
                "variable": {
                    "value": "self.output_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_281": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_106": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_141": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x1, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, (diffX // 2, int(diffX / 2), diffY // 2, int(diffY / 2)))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_148": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x1, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, (diffX // 2, int(diffX / 2), diffY // 2, int(diffY / 2)))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(diffX // 2, int(diffX / 2), diffY // 2, int(diffY / 2))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_282": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "deep_learning/aif_detection/training/post_process.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "one_blob",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(blobs == i + 1).astype(int)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_62": {
                "variable": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_blob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor((blobs == i + 1).astype(int), dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "one_blob.to(torch.uint8).cuda()",
                            "Call"
                        ],
                        [
                            "one_blob.to(device=cpu_device, dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_12": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred.view(-1).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.view(-1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "RO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "E1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_13": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.view(-1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_43": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs.to(device=cpu_device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deep_learning/aif_detection/training/run_training.py": {
        "torch": {
            "max_211": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_234": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_243": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_265": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_268": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(img)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(img)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_279": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_473": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_21": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_212": {
                "input": {
                    "value": "preds == y.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_230": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_261": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_417": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_535": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_314": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[ii, 0, :]",
                            "Subscript"
                        ],
                        [
                            "scores[ii, 0, :]",
                            "Subscript"
                        ],
                        [
                            "scores[ii, 0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_365": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[ii, 0, :]",
                            "Subscript"
                        ],
                        [
                            "scores[ii, 0, :]",
                            "Subscript"
                        ],
                        [
                            "scores[ii, 0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_434": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[ii, 0, :]",
                            "Subscript"
                        ],
                        [
                            "scores[ii, 0, :]",
                            "Subscript"
                        ],
                        [
                            "scores[ii, 0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_560": {
                "input": {
                    "value": "preds == y.data",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "deep_learning/aif_detection/training/training_base.py": {
        "torch": {
            "max_286": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_26": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_287": {
                "input": {
                    "value": "preds == y.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "load_80": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_89": {
                "obj": {
                    "value": "{'model': self.model.state_dict(), 'epoch': ep, 'step': step}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_path + str(ep) + '.pbt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "deep_learning/analysis/models/model_utils.py": {
        "torch": {
            "Conv2d_6": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.stride",
                            "Attribute"
                        ],
                        [
                            "m.stride",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "deep_learning/analysis/models/resunet.py": {
        "torch": {
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers_planes[l]",
                            "Subscript"
                        ],
                        [
                            "planes",
                            "Name"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_62": {
                "variable": {
                    "value": "self.dp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "variable": {
                    "value": "self.down_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_233": {
                "variable": {
                    "value": "self.up_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_266": {
                "variable": {
                    "value": "self.output_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_281": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_106": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_141": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x1, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, (diffX // 2, int(diffX / 2), diffY // 2, int(diffY / 2)))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_148": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x1, scale_factor=2, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, (diffX // 2, int(diffX / 2), diffY // 2, int(diffY / 2)))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(diffX // 2, int(diffX / 2), diffY // 2, int(diffY / 2))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_282": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "deep_learning/analysis/training/post_process.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "one_blob",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(blobs == i + 1).astype(int)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_62": {
                "variable": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_blob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor((blobs == i + 1).astype(int), dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "one_blob.to(torch.uint8).cuda()",
                            "Call"
                        ],
                        [
                            "one_blob.to(device=cpu_device, dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_12": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred.view(-1).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.view(-1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "RO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "E1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_13": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.view(-1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_43": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs.to(device=cpu_device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deep_learning/analysis/training/run_training.py": {
        "torch": {
            "max_211": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_234": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_243": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_265": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_268": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(img)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(img)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_279": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_473": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_21": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_212": {
                "input": {
                    "value": "preds == y.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_230": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_261": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_417": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_535": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_314": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[ii, 0, :]",
                            "Subscript"
                        ],
                        [
                            "scores[ii, 0, :]",
                            "Subscript"
                        ],
                        [
                            "scores[ii, 0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_365": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[ii, 0, :]",
                            "Subscript"
                        ],
                        [
                            "scores[ii, 0, :]",
                            "Subscript"
                        ],
                        [
                            "scores[ii, 0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_434": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[ii, 0, :]",
                            "Subscript"
                        ],
                        [
                            "scores[ii, 0, :]",
                            "Subscript"
                        ],
                        [
                            "scores[ii, 0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_560": {
                "input": {
                    "value": "preds == y.data",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "deep_learning/analysis/training/training_base.py": {
        "torch": {
            "max_286": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_26": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_287": {
                "input": {
                    "value": "preds == y.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "load_80": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_89": {
                "obj": {
                    "value": "{'model': self.model.state_dict(), 'epoch': ep, 'step': step}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_path + str(ep) + '.pbt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}