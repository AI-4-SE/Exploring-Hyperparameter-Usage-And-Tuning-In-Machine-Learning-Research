{
    "convert.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_39": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.to_absolute_path(cfg.cpc_checkpoint)",
                            "Call"
                        ],
                        [
                            "utils.to_absolute_path(cfg.vocoder_checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_44": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.to_absolute_path(cfg.cpc_checkpoint)",
                            "Call"
                        ],
                        [
                            "utils.to_absolute_path(cfg.vocoder_checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "mel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dataset.py": {
        "torch": {
            "from_numpy_47": {
                "ndarray": {
                    "value": "mels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "np.stack(mels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "encode.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_30": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.to_absolute_path(cfg.checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "mel",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(path.with_suffix('.mel.npy'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_45": {
                "variable": {
                    "value": "mel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "GRUCell_208": {
                "variable": {
                    "value": "gru_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "input_size": {
                    "value": "gru.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "gru.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_15": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.LayerNorm(channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_34": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_59": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "addmm_69": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(self.embedding ** 2, dim=1) + torch.sum(x_flat ** 2, dim=1, keepdim=True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.detach().reshape(-1, D)",
                            "Call"
                        ],
                        [
                            "x.detach().reshape(-1, D)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.embedding.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "-2.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "beta": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmin_74": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "embedding_75": {
                "variable": {
                    "value": "quantized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmin(distances.float(), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(distances.float(), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "addmm_83": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(self.embedding ** 2, dim=1) + torch.sum(x_flat ** 2, dim=1, keepdim=True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.detach().reshape(-1, D)",
                            "Call"
                        ],
                        [
                            "x.detach().reshape(-1, D)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.embedding.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "-2.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "beta": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmin_88": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_89": {
                "variable": {
                    "value": "encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmin(distances.float(), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(distances.float(), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_90": {
                "variable": {
                    "value": "quantized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmin(distances.float(), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.argmin(distances.float(), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_104": {
                "variable": {
                    "value": "e_latent_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros(batch_size, device=z.device).fill_(self.quantization_channels // 2).long()",
                            "Call"
                        ],
                        [
                            "self.mu_embedding(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(h))",
                            "Call"
                        ],
                        [
                            "dist.sample()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "quantized.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_109": {
                "variable": {
                    "value": "avg_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(indices, M).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_110": {
                "variable": {
                    "value": "perplexity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.sum(avg_probs * torch.log(avg_probs + 1e-10))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_124": {
                "variable": {
                    "value": "self.predictors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(c_dim, z_dim) for _ in range(n_prediction_steps)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_203": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_203": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_225": {
                "variable": {
                    "value": "self.code_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_226": {
                "variable": {
                    "value": "self.speaker_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_speakers",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "speaker_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_227": {
                "variable": {
                    "value": "self.rnn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "in_channels + speaker_embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_229": {
                "variable": {
                    "value": "self.mu_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.quantization_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "mu_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_230": {
                "variable": {
                    "value": "self.rnn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "mu_embedding_dim + 2 * conditioning_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fc_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_232": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.quantization_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_236": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, speakers)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "interpolate_245": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.hop_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_250": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_259": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, speaker)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "interpolate_268": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.hop_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_273": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.rnn_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_274": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ema_count",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encodings.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.detach().reshape(-1, D)",
                            "Call"
                        ],
                        [
                            "x.detach().reshape(-1, D)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_151": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.n_utterances_per_speaker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.n_utterances_per_speaker, self.n_negatives)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_163": {
                "variable": {
                    "value": "seq_index",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.size(1) - self.n_prediction_steps",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.n_speakers_per_batch, self.n_utterances_per_speaker, self.n_negatives, length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "remainder_174": {
                "variable": {
                    "value": "seq_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(1, length, size=(self.n_speakers_per_batch, self.n_utterances_per_speaker, self.n_negatives, length), device=z.device)",
                            "Call"
                        ],
                        [
                            "seq_index + torch.arange(length, device=z.device)",
                            "BinOp"
                        ],
                        [
                            "torch.remainder(seq_index, length)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.size(1) - self.n_prediction_steps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_176": {
                "variable": {
                    "value": "speaker_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.n_speakers_per_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_shift.unsqueeze(2), z_negatives)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_183": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zs * Wc.unsqueeze(2) / math.sqrt(self.z_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_190": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_speakers_per_batch * self.n_utterances_per_speaker",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.size(1) - self.n_prediction_steps",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_195": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(zs * Wc.unsqueeze(2) / math.sqrt(self.z_dim), dim=-1)",
                            "Call"
                        ],
                        [
                            "f.view(self.n_speakers_per_batch * self.n_utterances_per_speaker, self.n_negatives + 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.n_speakers_per_batch * self.n_utterances_per_speaker, length, dtype=torch.long, device=z.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_198": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "accuracy.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_279": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Categorical_281": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNorm_17": {
                "normalized_shape": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_20": {
                "normalized_shape": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_23": {
                "normalized_shape": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_26": {
                "normalized_shape": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_29": {
                "normalized_shape": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "n_embeddings",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_173": {
                "start": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.size(1) - self.n_prediction_steps",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_249": {
                "tensors": {
                    "value": "(x, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_276": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(mel)",
                            "Call"
                        ],
                        [
                            "self.encoder(z.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.conv(mels)",
                            "Call"
                        ],
                        [
                            "self.encoder(z.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "z.reshape(self.n_speakers_per_batch, self.n_utterances_per_speaker, -1, self.z_dim)",
                            "Call"
                        ],
                        [
                            "self.code_embedding(z)",
                            "Call"
                        ],
                        [
                            "F.interpolate(z.transpose(1, 2), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "z.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, speakers), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(z.transpose(1, 2), scale_factor=self.hop_length)",
                            "Call"
                        ],
                        [
                            "z.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.code_embedding(z)",
                            "Call"
                        ],
                        [
                            "F.interpolate(z.transpose(1, 2), scale_factor=2)",
                            "Call"
                        ],
                        [
                            "z.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, speaker), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(z.transpose(1, 2), scale_factor=self.hop_length)",
                            "Call"
                        ],
                        [
                            "z.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "self.embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_70": {
                "input": {
                    "value": "x_flat ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_83": {
                "input": {
                    "value": "self.embedding ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_84": {
                "input": {
                    "value": "x_flat ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_110": {
                "input": {
                    "value": "avg_probs * torch.log(avg_probs + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_278": {
                "tensors": {
                    "value": "(x, m)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(indices, M).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_110": {
                "input": {
                    "value": "avg_probs + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "scheduler.py": {
        "torch": {
            "SGD_55": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.nn.Parameter(torch.randn(2, 2, requires_grad=True))]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_71": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.nn.Parameter(torch.randn(2, 2, requires_grad=True))]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "data": {
                    "value": "torch.randn(2, 2, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_54": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train_cpc.py": {
        "torch": {
            "SummaryWriter_36": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "tensorboard_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(utils.to_absolute_path('tensorboard')) / cfg.checkpoint_dir",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "chain(encoder.parameters(), cpc.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.training.scheduler.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CPCDataset(root=root_path, n_sample_frames=cfg.training.sample_frames + cfg.training.n_prediction_steps, n_utterances_per_speaker=cfg.training.n_utterances_per_speaker, hop_length=cfg.preprocessing.hop_length, sr=cfg.preprocessing.sr)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.training.n_speakers_per_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.training.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_28": {
                "obj": {
                    "value": "checkpoint_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'encoder': encoder.state_dict(), 'cpc': cpc.state_dict(), 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict(), 'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_dir / 'model.ckpt-{}.pt'.format(epoch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_58": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.to_absolute_path(cfg.resume)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_vocoder.py": {
        "torch": {
            "SummaryWriter_34": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "tensorboard_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(utils.to_absolute_path('tensorboard')) / cfg.checkpoint_dir",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_35": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vocoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.training.optimizer.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_46": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(vocoder.parameters(), lr=cfg.training.optimizer.lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "cfg.training.scheduler.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "cfg.training.scheduler.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_64": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "encoder_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.to_absolute_path(cfg.cpc_checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WavDataset(root=root_path, hop_length=cfg.preprocessing.hop_length, sr=cfg.preprocessing.sr, sample_frames=cfg.training.sample_frames)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.training.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_26": {
                "obj": {
                    "value": "checkpoint_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'vocoder': decoder.state_dict(), 'optimizer': optimizer.state_dict(), 'amp': amp.state_dict(), 'scheduler': scheduler.state_dict(), 'step': step}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_dir / 'model.ckpt-{}.pt'.format(step)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_53": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.to_absolute_path(cfg.resume)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cross_entropy_97": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "audio[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__102": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}