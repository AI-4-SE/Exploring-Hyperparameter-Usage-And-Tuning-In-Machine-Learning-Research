{
    "dda/functional.py": {
        "torch": {
            "stack_120": {
                "variable": {
                    "value": "mag",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mag, torch.zeros_like(mag)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_127": {
                "variable": {
                    "value": "mag",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(mag), mag]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_134": {
                "variable": {
                    "value": "mag",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mag * img.size(-1), torch.zeros_like(mag)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "mag",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(mag), mag * img.size(-2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_243": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "img.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_109": {
                "input": {
                    "value": "F.pad(img, (1, 1, 1, 1), 'reflect')",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel.repeat(c, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_109": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_175": {
                "condition": {
                    "value": "img < mag",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - img",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_228": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_237": {
                "tensors": {
                    "value": "[_h, s, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_68": {
                "obj": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_74": {
                "obj": {
                    "value": "mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.stack([mag, torch.zeros_like(mag)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.zeros_like(mag), mag], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([mag * img.size(-1), torch.zeros_like(mag)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.zeros_like(mag), mag * img.size(-2)], dim=1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_120": {
                "input": {
                    "value": "mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.stack([mag, torch.zeros_like(mag)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.zeros_like(mag), mag], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([mag * img.size(-1), torch.zeros_like(mag)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.zeros_like(mag), mag * img.size(-2)], dim=1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_127": {
                "input": {
                    "value": "mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.stack([mag, torch.zeros_like(mag)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.zeros_like(mag), mag], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([mag * img.size(-1), torch.zeros_like(mag)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.zeros_like(mag), mag * img.size(-2)], dim=1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_134": {
                "input": {
                    "value": "mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.stack([mag, torch.zeros_like(mag)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.zeros_like(mag), mag], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([mag * img.size(-1), torch.zeros_like(mag)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.zeros_like(mag), mag * img.size(-2)], dim=1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_141": {
                "input": {
                    "value": "mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.stack([mag, torch.zeros_like(mag)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.zeros_like(mag), mag], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([mag * img.size(-1), torch.zeros_like(mag)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.zeros_like(mag), mag * img.size(-2)], dim=1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "mag.view(-1, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_212": {
                "start": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "img.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_257": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshaped.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "reshaped.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "reshaped.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_266": {
                "tensors": {
                    "value": "[cdf.new_zeros((cdf.size(0), 1)), cdf]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dda/kernels.py": {
        "torch": {
            "ones_11": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_23": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-radius",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "radius + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_23": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dda/operations.py": {
        "torch": {
            "Parameter_63": {
                "variable": {
                    "value": "self._probability",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1).fill_(initial_probability)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self._magnitude",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1).fill_(initial_magnitude)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_66": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_99": {
                "obj": {
                    "value": "mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.magnitude",
                            "Attribute"
                        ],
                        [
                            "torch.randint(2, (input.size(0),), dtype=torch.float32, device=input.device).mul_(2).sub_(1) * mag",
                            "BinOp"
                        ],
                        [
                            "mag.repeat(num_valid)",
                            "Call"
                        ],
                        [
                            "mag[mask == 1]",
                            "Subscript"
                        ],
                        [
                            "self._magnitude",
                            "Attribute"
                        ],
                        [
                            "mag.clamp(*self.magnitude_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "RelaxedBernoulli_112": {
                "temperature": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "self.probability",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_114": {
                "probs": {
                    "value": "self.probability",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_59": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_63": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_91": {
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(input.size(0),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_51": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_53": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/data.py": {
        "torch": {
            "DataLoader_96": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset(root, train=True, transform=transforms.Compose(norm_transform), download=download)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomSampler(train_set, True)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "2 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset(root, train=False, transform=transforms.Compose(norm_transform), download=download)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randperm_158": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RandomSampler_96": {
                "data_source": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset(root, train=True, transform=transforms.Compose(norm_transform), download=download)",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "examples/models/__init__.py": {
        "torch": {}
    },
    "examples/models/geometric.py": {
        "torch": {
            "eye_22": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "v.new_empty((3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/models/preresnet/common.py": {
        "torch": {
            "transpose_492": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch, groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch, channels, height, width)",
                            "Call"
                        ],
                        [
                            "x.view(batch, channels_per_group, groups, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch, channels, height, width)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.activ(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.activ(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x * w",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x1, x2), dim=1)",
                            "Call"
                        ],
                        [
                            "module(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "down_module(x)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "up_module(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, y), dim=1)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "self.down1_seq[i](x)",
                            "Call"
                        ],
                        [
                            "skip1_outs[self.depth]",
                            "Subscript"
                        ],
                        [
                            "self.up_seq[i](x)",
                            "Call"
                        ],
                        [
                            "self._merge(x, y)",
                            "Call"
                        ],
                        [
                            "self.skip2_seq[self.depth](x)",
                            "Call"
                        ],
                        [
                            "self.down2_seq[i](x)",
                            "Call"
                        ],
                        [
                            "self._merge(x, y)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_540": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch, groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch, channels, height, width)",
                            "Call"
                        ],
                        [
                            "x.view(batch, channels_per_group, groups, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch, channels, height, width)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.activ(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.activ(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x * w",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x1, x2), dim=1)",
                            "Call"
                        ],
                        [
                            "module(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "down_module(x)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "up_module(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, y), dim=1)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "self.down1_seq[i](x)",
                            "Call"
                        ],
                        [
                            "skip1_outs[self.depth]",
                            "Subscript"
                        ],
                        [
                            "self.up_seq[i](x)",
                            "Call"
                        ],
                        [
                            "self._merge(x, y)",
                            "Call"
                        ],
                        [
                            "self.skip2_seq[self.depth](x)",
                            "Call"
                        ],
                        [
                            "self.down2_seq[i](x)",
                            "Call"
                        ],
                        [
                            "self._merge(x, y)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_151": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_376": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_379": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_585": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_590": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_595": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_642": {
                "variable": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch, groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch, channels, height, width)",
                            "Call"
                        ],
                        [
                            "x.view(batch, channels_per_group, groups, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch, channels, height, width)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.activ(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.activ(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x * w",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x1, x2), dim=1)",
                            "Call"
                        ],
                        [
                            "module(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "down_module(x)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "up_module(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, y), dim=1)",
                            "Call"
                        ],
                        [
                            "x + y",
                            "BinOp"
                        ],
                        [
                            "self.down1_seq[i](x)",
                            "Call"
                        ],
                        [
                            "skip1_outs[self.depth]",
                            "Subscript"
                        ],
                        [
                            "self.up_seq[i](x)",
                            "Call"
                        ],
                        [
                            "self._merge(x, y)",
                            "Call"
                        ],
                        [
                            "self.skip2_seq[self.depth](x)",
                            "Call"
                        ],
                        [
                            "self.down2_seq[i](x)",
                            "Call"
                        ],
                        [
                            "self._merge(x, y)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.split_sections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_649": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_723": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_757": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_180": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_222": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_265": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_303": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_378": {
                "variable": {
                    "value": "self.activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_631": {
                "variable": {
                    "value": "self.inst_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "h1_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(channels * first_fraction))",
                            "Call"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_634": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "h2_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels - h1_channels",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_636": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "h1_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(channels * first_fraction))",
                            "Call"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_637": {
                "variable": {
                    "value": "self.inst_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "h2_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels - h1_channels",
                            "BinOp"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_860": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_158": {
                "variable": {
                    "value": "self.activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_160": {
                "variable": {
                    "value": "self.activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "examples/models/preresnet/preresnet.py": {
        "torch": {
            "Conv2d_160": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_block_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_167": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_168": {
                "variable": {
                    "value": "self.activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_169": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_194": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_block_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_195": {
                "variable": {
                    "value": "self.activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_236": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_258": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_block_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_242": {
                "variable": {
                    "value": "stage",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_254": {
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_693": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/models/pyramidnet.py": {
        "torch": {
            "Conv2d_13": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * Bottleneck.outchannel_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * Bottleneck.outchannel_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.input_featuremap_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_140": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.input_featuremap_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "variable": {
                    "value": "self.bn_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.final_featuremap_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_149": {
                "variable": {
                    "value": "self.relu_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_150": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.final_featuremap_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AvgPool2d_203": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_217": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "(shortcut, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_114": {
                "tensors": {
                    "value": "(shortcut, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_173": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.input_featuremap_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_174": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.input_featuremap_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_175": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_176": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_185": {
                "variable": {
                    "value": "self.bn_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.final_featuremap_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_186": {
                "variable": {
                    "value": "self.relu_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_187": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.final_featuremap_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/models/shakedrop.py": {
        "torch": {}
    },
    "examples/models/shakeshake/shake_resnet.py": {
        "torch": {
            "Conv2d_48": {
                "variable": {
                    "value": "self.c_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_chs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_chs[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ShakeShake.apply(h1, h2, self.training)",
                            "Call"
                        ],
                        [
                            "self.c_in(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(h)",
                            "Call"
                        ],
                        [
                            "self.layer2(h)",
                            "Call"
                        ],
                        [
                            "self.layer3(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, 8)",
                            "Call"
                        ],
                        [
                            "h.view(-1, self.in_chs[3])",
                            "Call"
                        ],
                        [
                            "self.fc_out(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_71": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ShakeShake.apply(h1, h2, self.training)",
                            "Call"
                        ],
                        [
                            "self.c_in(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(h)",
                            "Call"
                        ],
                        [
                            "self.layer2(h)",
                            "Call"
                        ],
                        [
                            "self.layer3(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, 8)",
                            "Call"
                        ],
                        [
                            "h.view(-1, self.in_chs[3])",
                            "Call"
                        ],
                        [
                            "self.fc_out(h)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/models/shakeshake/shake_resnext.py": {
        "torch": {
            "Conv2d_50": {
                "variable": {
                    "value": "self.c_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_chs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_chs[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ShakeShake.apply(h1, h2, self.training)",
                            "Call"
                        ],
                        [
                            "self.c_in(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(h)",
                            "Call"
                        ],
                        [
                            "self.layer2(h)",
                            "Call"
                        ],
                        [
                            "self.layer3(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, 8)",
                            "Call"
                        ],
                        [
                            "h.view(-1, self.n_chs[3])",
                            "Call"
                        ],
                        [
                            "self.fc_out(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_73": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ShakeShake.apply(h1, h2, self.training)",
                            "Call"
                        ],
                        [
                            "self.c_in(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(h)",
                            "Call"
                        ],
                        [
                            "self.layer2(h)",
                            "Call"
                        ],
                        [
                            "self.layer3(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, 8)",
                            "Call"
                        ],
                        [
                            "h.view(-1, self.n_chs[3])",
                            "Call"
                        ],
                        [
                            "self.fc_out(h)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "*args": {
                    "value": "nn.Conv2d(in_ch, mid_ch, 1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "mid_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "mid_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "cardinary",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "mid_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "mid_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/models/shakeshake/shakeshake.py": {
        "torch": {
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_39": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h1, h2), 1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_42": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.pad(h, (-1, 1, -1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_42": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h1, h2), 1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(-1, 1, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "examples/models/wideresnet.py": {
        "torch": {
            "Conv2d_8": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_80": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.conv1(F.relu(self.bn1(x))))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, (1, 1))",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_38": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_37": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/randaugment.py": {
        "torch": {
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_43": {
                "device": {
                    "value": "cfg.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "faster_autoaugment/policy.py": {
        "torch": {
            "Parameter_21": {
                "variable": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(len(self.operations))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_44": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[deepcopy(sub_policy_stage) for _ in range(operation_count)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_65": {
                "variable": {
                    "value": "self.sub_policies",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SubPolicy(SubPolicyStage(operations, temperature), operation_count) for _ in range(num_sub_policies)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._forward(inp) for inp in input.chunk(self.num_chunks)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_21": {
                "*size": {
                    "value": "len(self.operations)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_147": {
                "modules": {
                    "value": "Policy.dda_operations()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_144": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_145": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_30": {
                "probs": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_28": {
                "tensors": {
                    "value": "[op(input) for op in self.operations]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "faster_autoaugment/search.py": {
        "torch": {
            "Identity_25": {
                "variable": {
                    "value": "self.base_model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base_model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base_model.fc.out_features",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.discriminator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_features, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_195": {
                "device": {
                    "value": "cfg.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base_model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base_model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base_model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_63": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "n_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_85": {
                "input": {
                    "value": "_output",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "a_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "grad_101": {
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "interpolated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * real + (1 - alpha) * fake",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_122": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_101": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "faster_autoaugment/train.py": {
        "torch": {
            "load_95": {
                "variable": {
                    "value": "policy_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(hydra.utils.get_original_cwd()) / cfg.path",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_139": {
                "device": {
                    "value": "cfg.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_functional.py": {
        "torch": {
            "rand_26": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randint_25": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(size, 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_36": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(b, 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_operations.py": {
        "torch": {
            "randint_24": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(b, 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_pil.py": {
        "torch": {
            "randint_10": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}