{
    "code/gsw/gsw_utils.py": {
        "sklearn": {
            "make_swiss_roll_17": {
                "n_samples": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_samples",
                            "Name"
                        ]
                    ]
                }
            },
            "make_moons_20": {
                "n_samples": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_samples",
                            "Name"
                        ]
                    ]
                }
            },
            "make_circles_54": {
                "variable": {
                    "value": "(temp, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "2 * N",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_58": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_swiss_roll(n_samples=N)[0][:, (0, 2)]",
                            "Subscript"
                        ],
                        [
                            "temp / 2.828",
                            "BinOp"
                        ],
                        [
                            "make_moons(n_samples=N)[0]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(temp, dtype='float32')",
                            "Call"
                        ],
                        [
                            "temp[np.argwhere(y == 0).squeeze(), :]",
                            "Subscript"
                        ],
                        [
                            "np.array(temp, dtype='float32')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/gsw/gsw.py": {
        "torch": {
            "Adam_61": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.theta]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sort_92": {
                "variable": {
                    "value": "Yslices_sorted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Yslices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_slice(Y, theta)",
                            "Call"
                        ],
                        [
                            "self.get_slice(Y, theta)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_140": {
                "variable": {
                    "value": "HX",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, len(powers))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_15": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_17": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_38": {
                "input": {
                    "value": "torch.sum((Xslices_sorted - Yslices_sorted) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_47": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, dn)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_94": {
                "input": {
                    "value": "torch.sum((Xslices - Yslices) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_113": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.nofprojections, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_114": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[th / torch.sqrt((th ** 2).sum()) for th in theta]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_36": {
                "input": {
                    "value": "Xslices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_slice(X, theta)",
                            "Call"
                        ],
                        [
                            "self.get_slice(X, theta)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_37": {
                "input": {
                    "value": "Yslices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_slice(Y, theta)",
                            "Call"
                        ],
                        [
                            "self.get_slice(Y, theta)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "(Xslices_sorted - Yslices_sorted) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_48": {
                "input": {
                    "value": "torch.sum(theta.data ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_51": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, dpoly)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_69": {
                "input": {
                    "value": "torch.sum(self.theta.data ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "(Xslices - Yslices) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_117": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.nofprojections, dpoly)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_118": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[th / torch.sqrt((th ** 2).sum()) for th in theta]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "matmul_126": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.random_slice(dn)",
                            "Call"
                        ],
                        [
                            "torch.randn((1, dn), device=device, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn((1, dpoly), device=device, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn((1, dn), device=device, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "self.random_slice(dn)",
                            "Call"
                        ],
                        [
                            "torch.randn((self.nofprojections, dim))",
                            "Call"
                        ],
                        [
                            "torch.stack([th / torch.sqrt((th ** 2).sum()) for th in theta])",
                            "Call"
                        ],
                        [
                            "torch.randn((self.nofprojections, dpoly))",
                            "Call"
                        ],
                        [
                            "torch.stack([th / torch.sqrt((th ** 2).sum()) for th in theta])",
                            "Call"
                        ],
                        [
                            "torch.randn((self.nofprojections, dim))",
                            "Call"
                        ],
                        [
                            "torch.stack([self.radius * th / torch.sqrt((th ** 2).sum()) for th in theta])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_128": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "theta.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_145": {
                "input": {
                    "value": "HX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones((N, len(powers))).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.random_slice(dn)",
                            "Call"
                        ],
                        [
                            "torch.randn((1, dn), device=device, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn((1, dpoly), device=device, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn((1, dn), device=device, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "self.random_slice(dn)",
                            "Call"
                        ],
                        [
                            "torch.randn((self.nofprojections, dim))",
                            "Call"
                        ],
                        [
                            "torch.stack([th / torch.sqrt((th ** 2).sum()) for th in theta])",
                            "Call"
                        ],
                        [
                            "torch.randn((self.nofprojections, dpoly))",
                            "Call"
                        ],
                        [
                            "torch.stack([th / torch.sqrt((th ** 2).sum()) for th in theta])",
                            "Call"
                        ],
                        [
                            "torch.randn((self.nofprojections, dim))",
                            "Call"
                        ],
                        [
                            "torch.stack([self.radius * th / torch.sqrt((th ** 2).sum()) for th in theta])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_147": {
                "input": {
                    "value": "HX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones((N, len(powers))).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "theta.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_157": {
                "input": {
                    "value": "torch.sum((X - theta) ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_159": {
                "tensors": {
                    "value": "[torch.sqrt(torch.sum((X - th) ** 2, dim=1)) for th in theta]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "theta.data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_52": {
                "input": {
                    "value": "torch.sum(theta.data ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_54": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, dn)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "self.theta.data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_120": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.nofprojections, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.radius * th / torch.sqrt((th ** 2).sum()) for th in theta]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_157": {
                "input": {
                    "value": "(X - theta) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "theta.data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_55": {
                "input": {
                    "value": "torch.sum(theta.data ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_159": {
                "input": {
                    "value": "torch.sum((X - th) ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "theta.data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_114": {
                "input": {
                    "value": "(th ** 2).sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_159": {
                "input": {
                    "value": "(X - th) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_118": {
                "input": {
                    "value": "(th ** 2).sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_121": {
                "input": {
                    "value": "(th ** 2).sum()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/gsw/gswnn.py": {
        "torch": {
            "Adam_54": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_12": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_14": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_45": {
                "input": {
                    "value": "torch.sum((Xslices_sorted - Yslices_sorted) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_42": {
                "input": {
                    "value": "Xslices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(X.to(self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_43": {
                "input": {
                    "value": "Yslices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(Y.to(self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "(Xslices_sorted - Yslices_sorted) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/gsw/mlp.py": {
        "torch": {
            "Sequential_19": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "self.init_num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "self.din",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.init_num_filters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "self.init_num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.init_num_filters",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}