{
    "demo/demo_net.py": {
        "torch": {
            "manual_seed_31": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "demo/webcam_demo.py": {
        "torch": {
            "stack_80": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cur_windows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "list(frame_queue)[frame_interval // 2::frame_interval]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_80": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_80": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_116": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_85": {
                "input": {
                    "value": "output_dict['probs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_model.py": {
        "torch": {
            "randn_24": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 13, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_resnet3d.py": {
        "torch": {
            "randn_17": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_33": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test.py": {
        "torch": {
            "manual_seed_28": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {
            "manual_seed_32": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/data/build.py": {
        "torch": {
            "BatchSampler_49": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(dataset, num_replicas=world_size, rank=rank, shuffle=True)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset, num_replicas=world_size, rank=rank, shuffle=False)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.sampler.SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATALOADER.TRAIN_BATCH_SIZE",
                            "Attribute"
                        ],
                        [
                            "cfg.DATALOADER.TEST_BATCH_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(cfg, transform=transform, is_train=is_train)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.DATALOADER.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.BatchSampler(sampler=sampler, batch_size=batch_size, drop_last=False)",
                            "Call"
                        ],
                        [
                            "IterationBasedBatchSampler(batch_sampler, num_iterations=cfg.TRAIN.MAX_ITER, start_iter=start_iter)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_33": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(cfg, transform=transform, is_train=is_train)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "world_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "du.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "du.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RandomSampler_38": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(cfg, transform=transform, is_train=is_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_42": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(cfg, transform=transform, is_train=is_train)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "world_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "du.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "du.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_47": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(cfg, transform=transform, is_train=is_train)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tsn/data/datasets/base_dataset.py": {
        "torch": {}
    },
    "tsn/data/datasets/evaluator/base_evaluator.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/data/datasets/evaluator/hmdb51.py": {
        "torch": {
            "argmax_38": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.to(device=self.device)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_63": {
                "variable": {
                    "value": "topk_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(self.topk_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_37": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "topk_accuracy(outputs, targets, topk=self.topk)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_63": {
                "tensors": {
                    "value": "self.topk_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/data/datasets/evaluator/jester.py": {
        "torch": {
            "argmax_38": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.to(device=self.device)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_63": {
                "variable": {
                    "value": "topk_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(self.topk_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_37": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "topk_accuracy(outputs, targets, topk=self.topk)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_63": {
                "tensors": {
                    "value": "self.topk_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/data/datasets/evaluator/ucf101.py": {
        "torch": {
            "argmax_48": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs.to(device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_73": {
                "variable": {
                    "value": "topk_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(self.topk_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_47": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "topk_accuracy(probs, targets, topk=self.topk)",
                            "Call"
                        ],
                        [
                            "topk_accuracy(outputs, targets, topk=self.topk)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_73": {
                "tensors": {
                    "value": "self.topk_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/data/datasets/rawframe_dataset.py": {
        "torch": {
            "stack_75": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_75": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/data/datasets/video/decoder.py": {
        "torch": {
            "linspace_25": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "start_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.uniform(0, delta)",
                            "Call"
                        ],
                        [
                            "delta * clip_idx / num_clips",
                            "BinOp"
                        ],
                        [
                            "get_start_end_idx(fps * video_meta['video_duration'], clip_size, clip_idx, num_clips)",
                            "Call"
                        ],
                        [
                            "get_start_end_idx(frames_length, sampling_rate * num_frames / target_fps * fps, clip_idx, num_clips)",
                            "Call"
                        ],
                        [
                            "get_start_end_idx(frames.shape[0], clip_sz, clip_idx if decode_all_video else 0, num_clips if decode_all_video else 1)",
                            "Call"
                        ],
                        [
                            "start_idx",
                            "Method Argument"
                        ]
                    ]
                },
                "end": {
                    "value": "end_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_idx + clip_size - 1",
                            "BinOp"
                        ],
                        [
                            "get_start_end_idx(fps * video_meta['video_duration'], clip_size, clip_idx, num_clips)",
                            "Call"
                        ],
                        [
                            "get_start_end_idx(frames_length, sampling_rate * num_frames / target_fps * fps, clip_idx, num_clips)",
                            "Call"
                        ],
                        [
                            "get_start_end_idx(frames.shape[0], clip_sz, clip_idx if decode_all_video else 0, num_clips if decode_all_video else 1)",
                            "Call"
                        ],
                        [
                            "end_idx",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_26": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(start_idx, end_idx, num_samples)",
                            "Call"
                        ],
                        [
                            "torch.clamp(index, 0, frames.shape[0] - 1).long()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "frames.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_27": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(frames, 0, index)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[frame.to_rgb().to_ndarray() for frame in video_frames]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(np.stack(frames))",
                            "Call"
                        ],
                        [
                            "pyav_decode(container, sampling_rate, num_frames, clip_idx, num_clips, target_fps)",
                            "Call"
                        ],
                        [
                            "torchvision_decode(container, sampling_rate, num_frames, clip_idx, video_meta, num_clips, target_fps, ('visual',), max_spatial_scale)",
                            "Call"
                        ],
                        [
                            "temporal_sampling(frames, start_idx, end_idx, num_frames)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[frame.to_rgb().to_ndarray() for frame in video_frames]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(np.stack(frames))",
                            "Call"
                        ],
                        [
                            "[frame.to_rgb().to_ndarray() for frame in video_frames]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(np.stack(frames))",
                            "Call"
                        ],
                        [
                            "frames",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(start_idx, end_idx, num_samples)",
                            "Call"
                        ],
                        [
                            "torch.clamp(index, 0, frames.shape[0] - 1).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_143": {
                "variable": {
                    "value": "video_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.frombuffer(video_handle, dtype=np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_279": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack(frames)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_410": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack(frames)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_389": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack(frames)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/data/datasets/video_dataset.py": {
        "torch": {
            "stack_91": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_91": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/data/samplers/iteration_based_batch_sampler.py": {
        "torch": {}
    },
    "tsn/data/transforms/augmentation/normalize.py": {
        "torch": {
            "stack_46": {
                "tensors": {
                    "value": "[transforms.Normalize(self.mean, self.std, self.inplace)(crop) for crop in tensor]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/data/transforms/augmentation/to_tensor.py": {
        "torch": {
            "stack_37": {
                "tensors": {
                    "value": "[transforms.ToTensor()(crop) for crop in pic]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/engine/inference.py": {
        "torch": {
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tsn/engine/trainer.py": {
        "torch": {
            "SummaryWriter_37": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(cfg.OUTPUT_DIR, 'tf_logs')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tsn/model/backbones/resnet/basic_block.py": {
        "torch": {}
    },
    "tsn/model/backbones/resnet/bottleneck.py": {
        "torch": {}
    },
    "tsn/model/backbones/resnet/resnet.py": {
        "torch": {
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_54": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/model/backbones/resnet/utility.py": {
        "torch": {
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/model/backbones/resnet3d/basic_block3d.py": {
        "torch": {}
    },
    "tsn/model/backbones/resnet3d/bottleneck3d.py": {
        "torch": {
            "Sequential_115": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_layer(inplanes, out_planes, kernel_size=(1, 1, 1), stride=(1, self.spatial_stride, self.spatial_stride), padding=(0, 0, 0), bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/model/backbones/resnet3d/resnet3d.py": {
        "torch": {
            "Sequential_226": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/model/consensus/avg_consensus.py": {
        "torch": {}
    },
    "tsn/model/consensus/build.py": {
        "torch": {}
    },
    "tsn/model/criterions/crossentropy_loss.py": {
        "torch": {
            "CrossEntropyLoss_19": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/model/heads/i3d_head.py": {
        "torch": {
            "AdaptiveAvgPool3d_26": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.HEAD.FEATURE_DIMS",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "flatten_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.HEAD.DROPOUT",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "tsn/model/heads/tsn_head.py": {
        "torch": {
            "AdaptiveAvgPool2d_26": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.HEAD.FEATURE_DIMS",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "flatten_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.HEAD.DROPOUT",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "tsn/model/heads/x3d_head.py": {
        "torch": {
            "AdaptiveAvgPool3d_47": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "conv5_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.HEAD.CONV5_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "flatten_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.bn5(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.pool5(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.HEAD.DROPOUT",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "tsn/model/layers/act_helper.py": {
        "torch": {}
    },
    "tsn/model/layers/conv_helper.py": {
        "torch": {
            "Conv3d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding if not isinstance(padding, int) else [padding] * 3",
                            "IfExp"
                        ],
                        [
                            "(0",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_53": {
                "variable": {
                    "value": "self.conv_xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size[1], kernel_size[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride[1], stride[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding[1], padding[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_61": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size[0], 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride[0], 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding[0], 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/model/layers/nonlocal_helper.py": {
        "torch": {
            "Conv3d_71": {
                "variable": {
                    "value": "self.conv_theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_inner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_74": {
                "variable": {
                    "value": "self.conv_phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_inner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_77": {
                "variable": {
                    "value": "self.conv_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_inner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_82": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_inner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_123": {
                "variable": {
                    "value": "theta_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nct,ncp->ntp",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(theta, phi)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_141": {
                "variable": {
                    "value": "theta_phi_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ntg,ncg->nct",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(theta_phi, g)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_99": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_131": {
                "variable": {
                    "value": "theta_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('nct,ncp->ntp', (theta, phi))",
                            "Call"
                        ],
                        [
                            "theta_phi * self.dim_inner ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "nn.functional.softmax(theta_phi, dim=2)",
                            "Call"
                        ],
                        [
                            "theta_phi / spatial_temporal_dim",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/model/layers/norm_helper.py": {
        "torch": {}
    },
    "tsn/model/layers/pool_helper.py": {
        "torch": {}
    },
    "tsn/model/recognizers/build.py": {
        "torch": {}
    },
    "tsn/model/recognizers/i3d_recognizer.py": {
        "torch": {}
    },
    "tsn/model/recognizers/tsn_recognizer.py": {
        "torch": {}
    },
    "tsn/optim/lr_schedulers/build.py": {
        "torch": {}
    },
    "tsn/optim/lr_schedulers/cosine_annearling_lr.py": {
        "torch": {
            "CosineAnnealingLR_25": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "max_iteration",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TRAIN.MAX_ITER",
                            "Attribute"
                        ],
                        [
                            "max_iteration - cfg.LR_SCHEDULER.WARMUP.ITERATION",
                            "BinOp"
                        ]
                    ]
                },
                "eta_min": {
                    "value": "minimal_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.LR_SCHEDULER.COSINE_ANNEALING_LR.MINIMAL_LR",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "tsn/optim/lr_schedulers/gradual_warmup.py": {
        "torch": {}
    },
    "tsn/optim/lr_schedulers/multistep_lr.py": {
        "torch": {
            "MultiStepLR_23": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.LR_SCHEDULER.MULTISTEP_LR.MILESTONES",
                            "Attribute"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.LR_SCHEDULER.GAMMA",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "tsn/optim/lr_schedulers/step_lr.py": {
        "torch": {
            "StepLR_23": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.LR_SCHEDULER.STEP_LR.STEP_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.LR_SCHEDULER.GAMMA",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "tsn/optim/optimizers/adam.py": {
        "torch": {
            "Adam_23": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.OPTIMIZER.LR",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.OPTIMIZER.WEIGHT_DECAY",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "tsn/optim/optimizers/build.py": {
        "torch": {}
    },
    "tsn/optim/optimizers/sgd.py": {
        "torch": {
            "SGD_25": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.OPTIMIZER.LR",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.OPTIMIZER.SGD.MOMENTUM",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.OPTIMIZER.WEIGHT_DECAY",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "tsn/util/checkpoint.py": {
        "torch": {
            "save_47": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, '{}.pth'.format(name))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, self._last_checkpoint_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, self._last_checkpoint_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, self._last_checkpoint_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_100": {
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_checkpoint_file()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_102": {
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_checkpoint_file()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_102": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/util/collect_env.py": {
        "torch": {
            "is_available_56": {
                "variable": {
                    "value": "has_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_126": {
                "device": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k in range(torch.cuda.device_count())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tsn/util/distributed.py": {
        "torch": {
            "device_179": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if backend == gloo else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_208": {
                "variable": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tensor.numel()]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_83": {
                "device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_rank",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_initialized_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_223": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_size - local_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_318": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_212": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_256": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_320": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_322": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{local_rank}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "ones_like_29": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors",
                            "variable"
                        ],
                        [
                            "tensors",
                            "variable"
                        ],
                        [
                            "tensors",
                            "variable"
                        ],
                        [
                            "torch.ByteTensor(storage).to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_pad_to_largest_tensor(tensor, group)",
                            "Call"
                        ],
                        [
                            "zip(size_list, tensor_list)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "gathered_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_list",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/util/metric_logger.py": {
        "torch": {}
    },
    "tsn/util/metrics.py": {
        "torch": {
            "randn_17": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/util/misc.py": {
        "torch": {}
    },
    "tsn/util/multiprocessing.py": {
        "torch": {
            "set_device_59": {
                "device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_rank",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tsn/visualization/predictor/async_predictor.py": {
        "torch": {
            "device_31": {
                "type": {
                    "value": "'cuda:{}'.format(self.gpu_id)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/visualization/predictor/predictor.py": {
        "torch": {
            "softmax_52": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(inputs)['probs']",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(preds, dim=1)",
                            "Call"
                        ],
                        [
                            "preds.cpu()",
                            "Call"
                        ],
                        [
                            "preds.detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/visualization/predictor/util.py": {
        "torch": {
            "stack_33": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[transform(frame) for frame in frames]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "transpose_33": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tsn/visualization/visualizer/async_visualizer.py": {
        "torch": {}
    },
    "tsn/visualization/visualizer/img_visualizer.py": {
        "torch": {}
    },
    "tsn/visualization/visualizer/video_visualizer.py": {
        "torch": {
            "from_numpy_276": {
                "variable": {
                    "value": "self.thres",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "thres_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full(shape=(self.num_classes,), fill_value=self.lower_thres)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_107": {
                "variable": {
                    "value": "(top_scores, top_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "self.top_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_115": {
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred >= self.thres",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    }
}