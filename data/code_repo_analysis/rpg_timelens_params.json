{
    "timelens/attention_average_network.py": {
        "torch": {
            "cat_9": {
                "tensors": {
                    "value": "[example['after']['flow'], example['middle']['after_refined_warped'], example['before']['flow'], example['middle']['before_refined_warped'], example['middle']['fusion'], th.Tensor(example['middle']['weight']).view(-1, 1, 1, 1).expand(number_of_examples, 1, height, width).type(fusion.type())]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_47": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_network(_pack_input_for_attention_computation(example))",
                            "Call"
                        ],
                        [
                            "self.attention_network(_pack_input_for_attention_computation(example))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_61": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_network(_pack_input_for_attention_computation(example))",
                            "Call"
                        ],
                        [
                            "self.attention_network(_pack_input_for_attention_computation(example))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "timelens/common/pytorch_tools.py": {
        "torch": {
            "meshgrid_75": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[th.arange(0, width), th.arange(0, height)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "dilated_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "morphology.binary_dilation(image.cpu().numpy(), dilation_window).astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_75": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "height",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "timelens/common/representation.py": {
        "torch": {
            "zeros_30": {
                "variable": {
                    "value": "voxel_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nb_of_time_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "event_sequence._image_height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "th.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "event_sequence._features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "remapping_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "remapping_maps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.from_numpy(remapping_maps)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "timelens/common/size_adapter.py": {
        "torch": {
            "ZeroPad2d_36": {
                "padding": {
                    "value": "(self._pixels_pad_to_width, 0, self._pixels_pad_to_height, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "timelens/common/transformers.py": {
        "torch": {
            "stack_78": {
                "variable": {
                    "value": "batch[packet_name][field_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[example[packet_name][field_name] for example in examples_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "timelens/common/warp.py": {
        "torch": {
            "stack_50": {
                "variable": {
                    "value": "grid_source",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_source, y_source]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grid_sample_51": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.stack([x_source, y_source], -1)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "timelens/fusion_network.py": {
        "torch": {
            "cat_6": {
                "tensors": {
                    "value": "[example['before']['voxel_grid'], example['before']['rgb_image_tensor'], example['after']['voxel_grid'], example['after']['rgb_image_tensor']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_21": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_filename",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "timelens/refine_warp_network.py": {
        "torch": {
            "cat_11": {
                "tensors": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[example['middle']['{}_warped'.format(packet)] for packet in ['after', 'before']]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_15": {
                "tensors": {
                    "value": "[example['middle']['after_warped'], example['middle']['before_warped']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "chunk_43": {
                "variable": {
                    "value": "(after_residual, before_residual)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.flow_refinement_network(_pack_for_residual_flow_computation(example))",
                            "Call"
                        ],
                        [
                            "th.cat([after_residual, before_residual], dim=0)",
                            "Call"
                        ],
                        [
                            "self.flow_refinement_network(_pack_for_residual_flow_computation(example))",
                            "Call"
                        ],
                        [
                            "th.cat([after_residual, before_residual], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[after_residual, before_residual]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_51": {
                "variable": {
                    "value": "(after_refined, before_refined)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "refined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "warp.backwarp_2d(source=_pack_images_for_second_warping(example), y_displacement=residual[:, 0, ...], x_displacement=residual[:, 1, ...])",
                            "Call"
                        ],
                        [
                            "warp.backwarp_2d(source=_pack_images_for_second_warping(example), y_displacement=residual[:, 0, ...], x_displacement=residual[:, 1, ...])",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_52": {
                "variable": {
                    "value": "(after_refined_invalid, before_refined_invalid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "refined_invalid.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_70": {
                "variable": {
                    "value": "(after_residual, before_residual)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.flow_refinement_network(_pack_for_residual_flow_computation(example))",
                            "Call"
                        ],
                        [
                            "th.cat([after_residual, before_residual], dim=0)",
                            "Call"
                        ],
                        [
                            "self.flow_refinement_network(_pack_for_residual_flow_computation(example))",
                            "Call"
                        ],
                        [
                            "th.cat([after_residual, before_residual], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[after_residual, before_residual]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_78": {
                "input": {
                    "value": "refined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "warp.backwarp_2d(source=_pack_images_for_second_warping(example), y_displacement=residual[:, 0, ...], x_displacement=residual[:, 1, ...])",
                            "Call"
                        ],
                        [
                            "warp.backwarp_2d(source=_pack_images_for_second_warping(example), y_displacement=residual[:, 0, ...], x_displacement=residual[:, 1, ...])",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "timelens/run_timelens.py": {
        "torch": {
            "clamp_66": {
                "variable": {
                    "value": "interpolated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame.squeeze().cpu().detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "timelens/superslomo/unet.py": {
        "torch": {
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChannels",
                            "Method Argument"
                        ],
                        [
                            "inChannels",
                            "Method Argument"
                        ],
                        [
                            "inChannels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChannels",
                            "Method Argument"
                        ],
                        [
                            "outChannels",
                            "Method Argument"
                        ],
                        [
                            "outChannels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * outChannels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChannels",
                            "Method Argument"
                        ],
                        [
                            "outChannels",
                            "Method Argument"
                        ],
                        [
                            "outChannels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv1(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv2(th.cat((x, skpCn), 1)), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv1(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv2(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "self._size_adapter.pad(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv1(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "self.down5(s5)",
                            "Call"
                        ],
                        [
                            "self.up1(x, s5)",
                            "Call"
                        ],
                        [
                            "self.up2(x, s4)",
                            "Call"
                        ],
                        [
                            "self.up3(x, s3)",
                            "Call"
                        ],
                        [
                            "self.up4(x, s2)",
                            "Call"
                        ],
                        [
                            "self.up5(x, s1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv3(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self._size_adapter.unpad(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "leaky_relu_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(th.cat((x, skpCn), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChannels",
                            "Method Argument"
                        ],
                        [
                            "inChannels",
                            "Method Argument"
                        ],
                        [
                            "inChannels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChannels",
                            "Method Argument"
                        ],
                        [
                            "outChannels",
                            "Method Argument"
                        ],
                        [
                            "outChannels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "filterSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filterSize",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((filterSize - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "outChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChannels",
                            "Method Argument"
                        ],
                        [
                            "outChannels",
                            "Method Argument"
                        ],
                        [
                            "outChannels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChannels",
                            "Method Argument"
                        ],
                        [
                            "outChannels",
                            "Method Argument"
                        ],
                        [
                            "outChannels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "filterSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filterSize",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((filterSize - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv1(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv2(th.cat((x, skpCn), 1)), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv1(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv2(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "self._size_adapter.pad(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv1(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "self.down5(s5)",
                            "Call"
                        ],
                        [
                            "self.up1(x, s5)",
                            "Call"
                        ],
                        [
                            "self.up2(x, s4)",
                            "Call"
                        ],
                        [
                            "self.up3(x, s3)",
                            "Call"
                        ],
                        [
                            "self.up4(x, s2)",
                            "Call"
                        ],
                        [
                            "self.up5(x, s1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv3(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self._size_adapter.unpad(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChannels",
                            "Method Argument"
                        ],
                        [
                            "inChannels",
                            "Method Argument"
                        ],
                        [
                            "inChannels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outChannels",
                            "Method Argument"
                        ],
                        [
                            "outChannels",
                            "Method Argument"
                        ],
                        [
                            "outChannels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_82": {
                "variable": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_96": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_21": {
                "tensors": {
                    "value": "(x, skpCn)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "timelens/warp_network.py": {
        "torch": {
            "cat_8": {
                "tensors": {
                    "value": "[example['before']['reversed_voxel_grid'], example['after']['voxel_grid']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_14": {
                "tensors": {
                    "value": "[example['before']['rgb_image_tensor'], example['after']['rgb_image_tensor']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_36": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "chunk_46": {
                "variable": {
                    "value": "(before_flow, after_flow)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.flow_network(_pack_voxel_grid_for_flow_estimation(example))",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_47": {
                "variable": {
                    "value": "(before_warped, after_warped)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "warped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "warp.backwarp_2d(source=_pack_images_for_warping(example), y_displacement=flow[:, 0, ...], x_displacement=flow[:, 1, ...])",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_48": {
                "variable": {
                    "value": "(before_warped_invalid, after_warped_invalid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "warped_invalid.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}