{
    "AllenCahn100D.py": {
        "torch": {
            "load_49": {
                "f": {
                    "value": "allen_uncert.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_21": {
                "input": {
                    "value": "X ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_24": {
                "input": {
                    "value": "X ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "MTL_FBSNNs.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.start1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layers[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layers[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_19": {
                "variable": {
                    "value": "self.processes1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(layers[1], layers[1]) for i in range(self.length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.end1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layers[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.start2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layers[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layers[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_24": {
                "variable": {
                    "value": "self.processes2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(layers[1], layers[1]) for i in range(self.length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.end2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layers[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_28": {
                "variable": {
                    "value": "self.cross_stiches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ct_module.CrossStich() for i in range(self.length + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "self.Xi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Xi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.log_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t, X_t1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t, X_t2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_156": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "X_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_157": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Y_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_181": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.cumsum(Dt, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(t).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_182": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.cumsum(DW, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(W).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_194": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_226": {
                "variable": {
                    "value": "Xi_star",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Xi_star",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Xi_star).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_57": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(device_idx) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_61": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_151": {
                "input": {
                    "value": "torch.pow(Y1_t1 - self.g_tf(X1_t1), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_152": {
                "input": {
                    "value": "torch.pow(Z1_t1 - self.Dg_tf(X1_t1), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_153": {
                "input": {
                    "value": "torch.pow(Y1_t2 - self.g_tf(X1_t2), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_154": {
                "input": {
                    "value": "torch.pow(Z1_t2 - self.Dg_tf(X1_t2), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_159": {
                "input": {
                    "value": "torch.exp(-self.log_vars[0]) * loss1 + self.log_vars[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_160": {
                "input": {
                    "value": "torch.exp(-self.log_vars[1]) * loss2 + self.log_vars[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "*size": {
                    "value": "[M, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "diag_embed_253": {
                "input": {
                    "value": "torch.ones([M, D])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_embed_259": {
                "input": {
                    "value": "torch.ones([M, D])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_40": {
                "input": {
                    "value": "self.start2(x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_89": {
                "outputs": {
                    "value": "[u1]",
                    "type": "List",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[X_t1]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones_like(u1)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_91": {
                "outputs": {
                    "value": "[u2]",
                    "type": "List",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[X_t2]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones_like(u2)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_98": {
                "outputs": {
                    "value": "[g]",
                    "type": "List",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[X]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones_like(g)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_136": {
                "input": {
                    "value": "torch.pow(Y1_t1 - Y1_tilde_t1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_137": {
                "input": {
                    "value": "torch.pow(Y1_t2 - Y1_tilde_t2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_151": {
                "input": {
                    "value": "Y1_t1 - self.g_tf(X1_t1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_152": {
                "input": {
                    "value": "Z1_t1 - self.Dg_tf(X1_t1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_153": {
                "input": {
                    "value": "Y1_t2 - self.g_tf(X1_t2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_154": {
                "input": {
                    "value": "Z1_t2 - self.Dg_tf(X1_t2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "layers[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layers[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "layers[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layers[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_44": {
                "input": {
                    "value": "self.processes2[i](feature2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_122": {
                "input": {
                    "value": "torch.matmul(self.sigma_tf(t0, X0_t1, Y0_t1), (W1 - W0).unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_124": {
                "input": {
                    "value": "torch.matmul(self.aux_sigma_tf(t0, X0_t2, Y0_t2), (W1 - W0).unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_127": {
                "input": {
                    "value": "Z0_t1 * torch.squeeze(torch.matmul(self.sigma_tf(t0, X0_t1, Y0_t1), (W1 - W0).unsqueeze(-1)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "Z0_t2 * torch.squeeze(torch.matmul(self.aux_sigma_tf(t0, X0_t2, Y0_t2), (W1 - W0).unsqueeze(-1)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_136": {
                "input": {
                    "value": "Y1_t1 - Y1_tilde_t1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_137": {
                "input": {
                    "value": "Y1_t2 - Y1_tilde_t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_89": {
                "input": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_91": {
                "input": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_98": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_tf(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_123": {
                "input": {
                    "value": "self.sigma_tf(t0, X0_t1, Y0_t1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "(W1 - W0).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "input": {
                    "value": "self.aux_sigma_tf(t0, X0_t2, Y0_t2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "(W1 - W0).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_159": {
                "input": {
                    "value": "-self.log_vars[0]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_160": {
                "input": {
                    "value": "-self.log_vars[1]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_253": {
                "*size": {
                    "value": "[M, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_259": {
                "*size": {
                    "value": "[M, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_128": {
                "input": {
                    "value": "torch.matmul(self.sigma_tf(t0, X0_t1, Y0_t1), (W1 - W0).unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_131": {
                "input": {
                    "value": "torch.matmul(self.aux_sigma_tf(t0, X0_t2, Y0_t2), (W1 - W0).unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "input": {
                    "value": "self.sigma_tf(t0, X0_t1, Y0_t1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "(W1 - W0).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_131": {
                "input": {
                    "value": "self.aux_sigma_tf(t0, X0_t2, Y0_t2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "(W1 - W0).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MTL_FBSNNs_Allen100D_uncert.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.start1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layers[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layers[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_19": {
                "variable": {
                    "value": "self.processes1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(layers[1], layers[1]) for i in range(self.length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.end1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layers[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.start2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layers[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layers[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_24": {
                "variable": {
                    "value": "self.processes2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(layers[1], layers[1]) for i in range(self.length)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.end2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layers[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_28": {
                "variable": {
                    "value": "self.cross_stiches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ct_module.CrossStich() for i in range(self.length + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "self.Xi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Xi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.log_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t, X_t1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t, X_t2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_161": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "X_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Y_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_164": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(-self.log_vars[0]) * loss1 + self.log_vars[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_165": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(-self.log_vars[1]) * loss2 + self.log_vars[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_186": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.cumsum(Dt, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(t).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_187": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.cumsum(DW, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(W).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_200": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_236": {
                "variable": {
                    "value": "Xi_star",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Xi_star",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Xi_star).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_57": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(device_idx) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_61": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_156": {
                "input": {
                    "value": "torch.pow(Y1_t1 - self.g_tf(X1_t1), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_157": {
                "input": {
                    "value": "torch.pow(Z1_t1 - self.Dg_tf(X1_t1), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_158": {
                "input": {
                    "value": "torch.pow(Y1_t2 - self.aux_g_tf(X1_t2), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_159": {
                "input": {
                    "value": "torch.pow(Z1_t2 - self.aux_Dg_tf(X1_t2), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_260": {
                "*size": {
                    "value": "[M, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "diag_embed_266": {
                "input": {
                    "value": "torch.ones([M, D])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_40": {
                "input": {
                    "value": "self.start2(x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_89": {
                "outputs": {
                    "value": "[u1]",
                    "type": "List",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[X_t1]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones_like(u1)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_91": {
                "outputs": {
                    "value": "[u2]",
                    "type": "List",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[X_t2]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones_like(u2)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_97": {
                "outputs": {
                    "value": "[g]",
                    "type": "List",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[X]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones_like(g)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_103": {
                "outputs": {
                    "value": "[g]",
                    "type": "List",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[X]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones_like(g)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "torch.pow(Y1_t1 - Y1_tilde_t1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_142": {
                "input": {
                    "value": "torch.pow(Y1_t2 - Y1_tilde_t2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_156": {
                "input": {
                    "value": "Y1_t1 - self.g_tf(X1_t1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_157": {
                "input": {
                    "value": "Z1_t1 - self.Dg_tf(X1_t1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_158": {
                "input": {
                    "value": "Y1_t2 - self.aux_g_tf(X1_t2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_159": {
                "input": {
                    "value": "Z1_t2 - self.aux_Dg_tf(X1_t2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "layers[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layers[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "layers[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layers[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_44": {
                "input": {
                    "value": "self.processes2[i](feature2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_127": {
                "input": {
                    "value": "torch.matmul(self.sigma_tf(t0, X0_t1, Y0_t1), (W1 - W0).unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_129": {
                "input": {
                    "value": "torch.matmul(self.sigma_tf(t0, X0_t2, Y0_t2), (W1 - W0).unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_132": {
                "input": {
                    "value": "Z0_t1 * torch.squeeze(torch.matmul(self.sigma_tf(t0, X0_t1, Y0_t1), (W1 - W0).unsqueeze(-1)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "Z0_t2 * torch.squeeze(torch.matmul(self.sigma_tf(t0, X0_t2, Y0_t2), (W1 - W0).unsqueeze(-1)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_141": {
                "input": {
                    "value": "Y1_t1 - Y1_tilde_t1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_142": {
                "input": {
                    "value": "Y1_t2 - Y1_tilde_t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_210": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'allen_uncert.pth'",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_89": {
                "input": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_91": {
                "input": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_97": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_tf(X)",
                            "Call"
                        ],
                        [
                            "self.aux_g_tf(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_103": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_tf(X)",
                            "Call"
                        ],
                        [
                            "self.aux_g_tf(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_128": {
                "input": {
                    "value": "self.sigma_tf(t0, X0_t1, Y0_t1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "(W1 - W0).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_130": {
                "input": {
                    "value": "self.sigma_tf(t0, X0_t2, Y0_t2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "(W1 - W0).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_164": {
                "input": {
                    "value": "-self.log_vars[0]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_165": {
                "input": {
                    "value": "-self.log_vars[1]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_266": {
                "*size": {
                    "value": "[M, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_133": {
                "input": {
                    "value": "torch.matmul(self.sigma_tf(t0, X0_t1, Y0_t1), (W1 - W0).unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_136": {
                "input": {
                    "value": "torch.matmul(self.sigma_tf(t0, X0_t2, Y0_t2), (W1 - W0).unsqueeze(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_133": {
                "input": {
                    "value": "self.sigma_tf(t0, X0_t1, Y0_t1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "(W1 - W0).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "input": {
                    "value": "self.sigma_tf(t0, X0_t2, Y0_t2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "(W1 - W0).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ct_module.py": {
        "torch": {
            "Parameter_9": {
                "variable": {
                    "value": "self.log_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(float(init_beta)).log()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2, 50)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2, 50)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(50, 50)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_222": {
                "variable": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_229": {
                "variable": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(2 * size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_231": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([input_1, input_2], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_14": {
                "condition": {
                    "value": "beta_x < 20",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.log1p(beta_x.exp()) / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_47": {
                "tensors": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._convert(X)",
                            "Call"
                        ],
                        [
                            "self._convert(X)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_9": {
                "data": {
                    "value": "float(init_beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_118": {
                "in_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_128": {
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_130": {
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_132": {
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_152": {
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_154": {
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_156": {
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_231": {
                "tensors": {
                    "value": "[input_1, input_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log1p_14": {
                "input": {
                    "value": "beta_x.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_222": {
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_229": {
                "n": {
                    "value": "2 * size",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}