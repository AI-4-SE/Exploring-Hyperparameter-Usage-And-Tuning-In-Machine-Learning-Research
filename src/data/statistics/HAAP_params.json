{
    "GAon101/random_forest_Surrogate.py": {
        "sklearn": {
            "RandomForestRegressor_82": {
                "variable": {
                    "value": "self.RFmodel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "self.num_estimators",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Toy_experiment.py": {
        "sklearn": {
            "DecisionTreeRegressor_22": {
                "variable": {
                    "value": "model_decision_tree_regression",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_25": {
                "variable": {
                    "value": "model_linear_regression",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SVR_28": {
                "variable": {
                    "value": "model_svm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KNeighborsRegressor_31": {
                "variable": {
                    "value": "model_k_neighbor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestRegressor_34": {
                "variable": {
                    "value": "model_random_forest_regressor",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "230",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaBoostRegressor_37": {
                "variable": {
                    "value": "model_adaboost_regressor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientBoostingRegressor_40": {
                "variable": {
                    "value": "model_gradient_boosting_regressor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BaggingRegressor_43": {
                "variable": {
                    "value": "model_bagging_regressor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExtraTreeRegressor_46": {
                "variable": {
                    "value": "model_extra_tree_regressor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GaussianProcessRegressor_49": {
                "variable": {
                    "value": "model_gaussian_process_regressor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MLPRegressor_52": {
                "variable": {
                    "value": "model_MLP_regressor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "r2_score_342": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "first_ground_truth",
                            "Name"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Model.predict(x_test)",
                            "Call"
                        ],
                        [
                            "list(result)",
                            "Call"
                        ],
                        [
                            "mean_result",
                            "Name"
                        ],
                        [
                            "model.predict(x_test)",
                            "Call"
                        ],
                        [
                            "list(result)",
                            "Call"
                        ]
                    ]
                }
            },
            "r2_score_170": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "first_ground_truth",
                            "Name"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Model.predict(x_test)",
                            "Call"
                        ],
                        [
                            "list(result)",
                            "Call"
                        ],
                        [
                            "mean_result",
                            "Name"
                        ],
                        [
                            "model.predict(x_test)",
                            "Call"
                        ],
                        [
                            "list(result)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomForestRegressor_137": {
                "variable": {
                    "value": "Model",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "parameter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(parameter_scale[0], parameter_scale[-1], step)",
                            "Call"
                        ]
                    ]
                }
            },
            "KNeighborsRegressor_139": {
                "variable": {
                    "value": "Model",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "parameter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(parameter_scale[0], parameter_scale[-1], step)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientBoostingRegressor_141": {
                "variable": {
                    "value": "Model",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "parameter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(parameter_scale[0], parameter_scale[-1], step)",
                            "Call"
                        ]
                    ]
                }
            },
            "BaggingRegressor_143": {
                "variable": {
                    "value": "Model",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "parameter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(parameter_scale[0], parameter_scale[-1], step)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "to_categorical_287": {
                "variable": {
                    "value": "module_integers",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "module_integers",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fixed_metrics['module_integers']",
                            "Subscript"
                        ],
                        [
                            "to_categorical(module_integers, 4, dtype='int8')",
                            "Call"
                        ],
                        [
                            "module_integers.flatten()",
                            "Call"
                        ],
                        [
                            "to_categorical(module_integers, 4, dtype='int8')",
                            "Call"
                        ],
                        [
                            "module_integers.flatten()",
                            "Call"
                        ],
                        [
                            "fixed_metrics['module_integers']",
                            "Subscript"
                        ],
                        [
                            "to_categorical(module_integers, 4, dtype='int8')",
                            "Call"
                        ],
                        [
                            "module_integers.flatten()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_categorical_259": {
                "variable": {
                    "value": "module_integers",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "module_integers",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fixed_metrics['module_integers']",
                            "Subscript"
                        ],
                        [
                            "to_categorical(module_integers, 4, dtype='int8')",
                            "Call"
                        ],
                        [
                            "module_integers.flatten()",
                            "Call"
                        ],
                        [
                            "to_categorical(module_integers, 4, dtype='int8')",
                            "Call"
                        ],
                        [
                            "module_integers.flatten()",
                            "Call"
                        ],
                        [
                            "fixed_metrics['module_integers']",
                            "Subscript"
                        ],
                        [
                            "to_categorical(module_integers, 4, dtype='int8')",
                            "Call"
                        ],
                        [
                            "module_integers.flatten()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_categorical_239": {
                "variable": {
                    "value": "module_integers",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "module_integers",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fixed_metrics['module_integers']",
                            "Subscript"
                        ],
                        [
                            "to_categorical(module_integers, 4, dtype='int8')",
                            "Call"
                        ],
                        [
                            "module_integers.flatten()",
                            "Call"
                        ],
                        [
                            "to_categorical(module_integers, 4, dtype='int8')",
                            "Call"
                        ],
                        [
                            "module_integers.flatten()",
                            "Call"
                        ],
                        [
                            "fixed_metrics['module_integers']",
                            "Subscript"
                        ],
                        [
                            "to_categorical(module_integers, 4, dtype='int8')",
                            "Call"
                        ],
                        [
                            "module_integers.flatten()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int8",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "demo0.py": {
        "sklearn": {
            "RandomForestRegressor_15": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "230",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "e2epp/e2epp.py": {
        "sklearn": {
            "DecisionTreeRegressor_31": {
                "variable": {
                    "value": "dt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "neuralpredictor.pytorch/dataset.py": {
        "torch": {
            "DataLoader_195": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Nb101DatasetAug('334')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "neuralpredictor.pytorch/loss.py": {
        "torch": {
            "mse_loss_69": {
                "variable": {
                    "value": "MSE",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triplet_margin_loss_70": {
                "variable": {
                    "value": "Triplet",
                    "type": "Variable",
                    "possible_values": []
                },
                "anchor": {
                    "value": "input.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "positive": {
                    "value": "positive.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative": {
                    "value": "negative.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "margin": {
                    "value": "self.margin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "swap": {
                    "value": "self.swap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "neuralpredictor.pytorch/model.py": {
        "torch": {
            "div_10": {
                "input": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "rowsum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "adj.sum(2, keepdim=True).repeat(1, 1, last_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_15": {
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs.sum(1)",
                            "Call"
                        ],
                        [
                            "(output1 + output2) / 2",
                            "BinOp"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "layer(out, adj_with_diag)",
                            "Call"
                        ],
                        [
                            "graph_pooling(out, numv)",
                            "Call"
                        ],
                        [
                            "self.fc1(out)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "num_vertices.unsqueeze(-1).expand_as(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.weight1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((in_features, out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.weight2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((in_features, out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "output1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(norm_adj, torch.matmul(inputs, self.weight1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(inv_norm_adj, torch.matmul(inputs, self.weight2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.gcn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.gcn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "gcn_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "144",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "linear_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "linear_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "(in_features, out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "(in_features, out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_60": {
                "n": {
                    "value": "gs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "adj.size(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "adj.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "neuralpredictor.pytorch/train.py": {
        "torch": {
            "DataLoader_76": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Nb101DatasetAug(split=args.train_split)",
                            "Call"
                        ],
                        [
                            "Nb101Dataset(split=args.train_split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Nb101Dataset(split=args.eval_split, arch_aug=args.arch_aug)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_84": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_85": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(net.parameters(), lr=args.lr, weight_decay=args.wd)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_133": {
                "variable": {
                    "value": "predict_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Nb101Dataset.denormalize(predict_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_134": {
                "variable": {
                    "value": "target_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Nb101Dataset.denormalize(target_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_24": {
                "input": {
                    "value": "predict",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "Nb101Dataset.denormalize(predict.detach()) * scale",
                            "BinOp"
                        ],
                        [
                            "Nb101Dataset.denormalize(predict) * scale",
                            "BinOp"
                        ],
                        [
                            "net(batch)",
                            "Call"
                        ],
                        [
                            "net(batch)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "Nb101Dataset.denormalize(target) * scale",
                            "BinOp"
                        ],
                        [
                            "Nb101Dataset.denormalize(target) * scale",
                            "BinOp"
                        ],
                        [
                            "batch['val_acc'].to(torch.float)",
                            "Call"
                        ],
                        [
                            "batch['val_acc']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "MSELoss_83": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_143": {
                "input": {
                    "value": "predict_[random_int:random_int + 5000]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target_[random_int:random_int + 5000]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "neuralpredictor.pytorch/utils.py": {
        "torch": {
            "manual_seed_11": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_12": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_19": {
                "obj": {
                    "value": "obj",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}