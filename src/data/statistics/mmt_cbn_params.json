{
    "bin/infer.py": {
        "tensorflow": {
            "DEFINE_string_40": {
                "name": {
                    "value": "tasks",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "{}",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "List of inference tasks to run.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_41": {
                "name": {
                    "value": "model_params",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "{}",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Optionally overwrite model\\n                        parameters for inference",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_44": {
                "name": {
                    "value": "config_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to a YAML configuration file defining FLAG\\n                       values and hyperparameters. Refer to the documentation\\n                       for more details.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_49": {
                "name": {
                    "value": "input_pipeline",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Defines how input data should be loaded.\\n                       A YAML string.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_53": {
                "name": {
                    "value": "model_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "directory to load model from",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_54": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Full path to the checkpoint to be loaded. If None,\\n                       the latest checkpoint in the model dir is used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "the train/dev batch size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_153": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Scaffold_162": {
                "variable": {
                    "value": "scaffold",
                    "type": "variable",
                    "possible_values": []
                },
                "init_fn": {
                    "value": "session_init_op",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_163": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "scaffold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Scaffold(init_fn=session_init_op)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_156": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_173": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_160": {
                "msg": {
                    "value": "Restored model from %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.checkpoint_path",
                            "Attribute"
                        ],
                        [
                            "tf.train.latest_checkpoint(FLAGS.model_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "MonitoredSession_164": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(scaffold=scaffold)",
                            "Call"
                        ]
                    ]
                },
                "hooks": {
                    "value": "hooks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "GFile_67": {
                "name": {
                    "value": "FLAGS.config_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bin/tools/profile.py": {
        "tensorflow": {
            "DEFINE_string_43": {
                "name": {
                    "value": "model_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "path to model directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RunMetadata_64": {
                "variable": {
                    "value": "run_meta",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_74": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "copy_127": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "copy_139": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "copy_152": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "copy_165": {
                "variable": {
                    "value": "options",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_65": {
                "filename": {
                    "value": "run_meta_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'metadata/run_meta')",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_75": {
                "filename": {
                    "value": "graph_def_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'graph.pbtxt')",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_89": {
                "filename": {
                    "value": "op_log_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'metadata/tfprof_log')",
                            "Call"
                        ]
                    ]
                }
            },
            "MakeDirs_181": {
                "dirname": {
                    "value": "output_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.model_dir, 'profile')",
                            "Call"
                        ]
                    ]
                }
            },
            "run_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_78": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_66": {
                "name": {
                    "value": "run_meta_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'metadata/run_meta')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "import_graph_def_81": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_90": {
                "name": {
                    "value": "op_log_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'metadata/tfprof_log')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_79": {
                "name": {
                    "value": "graph_def_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'graph.pbtxt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "bin/train.py": {
        "tensorflow": {
            "DEFINE_string_45": {
                "name": {
                    "value": "config_paths",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to a YAML configuration files defining FLAG\\n                       values. Multiple files can be separated by commas.\\n                       Files are merged recursively. Setting a key in these\\n                       files is equivalent to setting the FLAG value with\\n                       the same name.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_51": {
                "name": {
                    "value": "hooks",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "[]",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "YAML configuration string for the\\n                       training hooks to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_54": {
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "[]",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "YAML configuration string for the\\n                       training metrics to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_57": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Name of the model class.\\n                       Can be either a fully-qualified name, or the name\\n                       of a class defined in `seq2seq.models`.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_61": {
                "name": {
                    "value": "model_params",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "{}",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "YAML configuration string for the model\\n                       parameters.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_65": {
                "name": {
                    "value": "input_pipeline_train",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "{}",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "YAML configuration string for the training\\n                       data input pipeline.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_68": {
                "name": {
                    "value": "input_pipeline_dev",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "{}",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "YAML configuration string for the development\\n                       data input pipeline.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_72": {
                "name": {
                    "value": "buckets",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Buckets input sequences according to these length.\\n                       A comma-separated list of sequence length buckets, e.g.\\n                       \"10,20,30\" would result in 4 buckets:\\n                       <10, 10-20, 20-30, >30. None disabled bucketing. ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_77": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size used for training and evaluation.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_79": {
                "name": {
                    "value": "output_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory to write model checkpoints and summaries\\n                       to. If None, a local temporary directory is created.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_84": {
                "name": {
                    "value": "schedule",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "continuous_train_and_eval",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Estimator function to call, defaults to\\n                       continuous_train_and_eval for local run",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_87": {
                "name": {
                    "value": "train_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum number of training steps to run.\\n                         If None, train forever.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_90": {
                "name": {
                    "value": "eval_every_n_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Run evaluation on validation data every N steps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_94": {
                "name": {
                    "value": "tf_random_seed",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Random seed for TensorFlow initializers. Setting\\n                        this value allows consistency between reruns.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_97": {
                "name": {
                    "value": "save_checkpoints_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Save checkpoints every this many seconds.\\n                        Can not be specified with save_checkpoints_steps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_100": {
                "name": {
                    "value": "save_checkpoints_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Save checkpoints every this many steps.\\n                        Can not be specified with save_checkpoints_secs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_103": {
                "name": {
                    "value": "keep_checkpoint_max",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum number of recent checkpoint files to keep.\\n                        As new files are created, older files are deleted.\\n                        If None or 0, all checkpoint files are kept.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_107": {
                "name": {
                    "value": "keep_checkpoint_every_n_hours",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "In addition to keeping the most recent checkpoint\\n                        files, keep one checkpoint file for every N hours of\\n                        training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_111": {
                "name": {
                    "value": "gpu_memory_fraction",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Fraction of GPU memory used by the process on\\n                      each GPU uniformly on the same machine.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RunConfig_130": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "tf_random_seed": {
                    "value": "FLAGS.tf_random_seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_checkpoints_secs": {
                    "value": "FLAGS.save_checkpoints_secs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "FLAGS.save_checkpoints_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "FLAGS.keep_checkpoint_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "FLAGS.keep_checkpoint_every_n_hours",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gpu_memory_fraction": {
                    "value": "FLAGS.gpu_memory_fraction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_242": {
                "msg": {
                    "value": "Final Config:\\n%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "yaml.dump(final_config)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_269": {
                "experiment_fn": {
                    "value": "create_experiment",
                    "type": "variable",
                    "possible_values": []
                },
                "output_dir": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "schedule": {
                    "value": "FLAGS.schedule",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_145": {
                "dirname": {
                    "value": "output_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_257": {
                "msg": {
                    "value": "Setting save_checkpoints_secs to %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.save_checkpoints_secs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_276": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_verbosity_277": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_237": {
                "msg": {
                    "value": "Loading config from %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "config_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.config_paths.split(',')",
                            "Call"
                        ],
                        [
                            "config_path.strip()",
                            "Call"
                        ],
                        [
                            "os.path.abspath(config_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_238": {
                "name": {
                    "value": "config_path.strip()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "warning_252": {
                "msg": {
                    "value": "Ignoring config flag: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "flag_key",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/inspect_checkpoint.py": {
        "tensorflow": {
            "NewCheckpointReader_46": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "run_139": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                },
                "argv": {
                    "value": "[sys.argv[0]] + unparsed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BooleanParser_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/configurable.py": {
        "tensorflow": {
            "info_136": {
                "msg": {
                    "value": "Creating %s in mode=%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "classname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__class__.__name__",
                            "Attribute"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self._mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_137": {
                "msg": {
                    "value": "\\n%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "yaml.dump({classname: self._params})",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/contrib/experiment.py": {
        "tensorflow": {
            "info_42": {
                "msg": {
                    "value": "'New best meteor score:' + str(self.best_meteor)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_47": {
                "msg": {
                    "value": "'No best meteor score, early stop iter:' + str(self.early_stop_step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_130": {
                "msg": {
                    "value": "'Training model for %s steps ' + str(train_steps_per_iteration)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_137": {
                "msg": {
                    "value": "Evaluating model now.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_121": {
                "msg": {
                    "value": "Early stop reached",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_126": {
                "msg": {
                    "value": "Stop training model as max steps reached",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/contrib/layers/layers.py": {
        "tensorflow": {
            "convert_to_tensor_570": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1555": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(outer_dimensions, [math_ops.reduce_prod(inner_dimensions)])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assert_rank_at_least_1563": {
                "variable": {
                    "value": "rank_assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "new_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "message": {
                    "value": "inputs has rank less than new_rank",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_133": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "AveragePooling2D_136": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ]
                    ]
                },
                "_scope": {
                    "value": "sc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_181": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "AveragePooling3D_184": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ]
                    ]
                },
                "_scope": {
                    "value": "sc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_284": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_value_393": {
                "variable": {
                    "value": "is_training_value",
                    "type": "variable",
                    "possible_values": []
                },
                "pylist": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_602": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_value_761": {
                "variable": {
                    "value": "is_training_value",
                    "type": "variable",
                    "possible_values": []
                },
                "pylist": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rsqrt_895": {
                "variable": {
                    "value": "inv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "variance + variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_897": {
                "variable": {
                    "value": "expanded_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.rsqrt(variance + variance_epsilon)",
                            "Call"
                        ],
                        [
                            "inv * scale",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_898": {
                "variable": {
                    "value": "expanded_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(mean, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(mean, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(mean, params_shape_broadcast)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_899": {
                "variable": {
                    "value": "expanded_betas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_908": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_950": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_971": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('biases', shape=[num_features], dtype=dtype, initializer=initializer, regularizer=regularizer, collections=biases_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('biases', shape=[num_filters_in], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, collections=biases_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('biases', shape=[num_outputs], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, trainable=trainable, collections=biases_collections)",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NDHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NDHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NDHWC",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_993": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_1077": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_1142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tile_1209": {
                "variable": {
                    "value": "depthwise_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('weights', shape=weights_shape, dtype=dtype, initializer=weights_initializer, regularizer=weights_regularizer, collections=weights_collections, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, num_filters_in, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_1210": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "depthwise_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.tile(weights, [1, 1, num_filters_in, 1])",
                            "Call"
                        ],
                        [
                            "variables.model_variable('depthwise_weights', shape=depthwise_shape, dtype=dtype, initializer=weights_initializer, regularizer=weights_regularizer, trainable=trainable, collections=weights_collections)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_1247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_1308": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_1360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_1418": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_1487": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_1488": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "1 - keep_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "_scope": {
                    "value": "sc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1516": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1521": {
                "variable": {
                    "value": "inputs_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_1523": {
                "variable": {
                    "value": "batch_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape()",
                            "Call"
                        ],
                        [
                            "inputs.get_shape()",
                            "Call"
                        ],
                        [
                            "inputs.get_shape()",
                            "Call"
                        ],
                        [
                            "array_ops.shape(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.shape",
                            "Attribute"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_1524": {
                "variable": {
                    "value": "spatial_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape()",
                            "Call"
                        ],
                        [
                            "inputs.get_shape()",
                            "Call"
                        ],
                        [
                            "inputs.get_shape()",
                            "Call"
                        ],
                        [
                            "array_ops.shape(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.shape",
                            "Attribute"
                        ]
                    ]
                },
                "begin": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[inputs_rank - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_prod_1526": {
                "variable": {
                    "value": "flat_spatial_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "spatial_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.slice(inputs_shape, [1], [inputs_rank - 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_1527": {
                "variable": {
                    "value": "flat_spatial_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_spatial_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_prod(spatial_dims)",
                            "Call"
                        ],
                        [
                            "array_ops.expand_dims(flat_spatial_dim, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1528": {
                "variable": {
                    "value": "flat_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_dim, flat_spatial_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1530": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "flat_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat([batch_dim, flat_spatial_dim], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "strided_slice_1566": {
                "variable": {
                    "value": "outer_dimensions",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "array_ops.shape(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[new_rank - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_1568": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(outer_dimensions, [-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1569": {
                "variable": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, 1, 1, channels]",
                            "List"
                        ],
                        [
                            "[-1, channels, 1, 1]",
                            "List"
                        ],
                        [
                            "array_ops.concat((outer_dimensions, [math_ops.reduce_prod(inner_dimensions)]), 0)",
                            "Call"
                        ],
                        [
                            "array_ops.concat((outer_dimensions, [-1]), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_1672": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_1732": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_1733": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_multiplier * num_filters_in",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "not normalizer_fn and biases_initializer",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "weights_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initializers.xavier_initializer()",
                            "Method Argument"
                        ],
                        [
                            "initializers.xavier_initializer()",
                            "Method Argument"
                        ],
                        [
                            "initializers.xavier_initializer()",
                            "Method Argument"
                        ],
                        [
                            "initializers.xavier_initializer()",
                            "Method Argument"
                        ],
                        [
                            "initializers.xavier_initializer()",
                            "Method Argument"
                        ],
                        [
                            "initializers.xavier_initializer()",
                            "Method Argument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "biases_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_ops.zeros_initializer()",
                            "Method Argument"
                        ],
                        [
                            "init_ops.zeros_initializer()",
                            "Method Argument"
                        ],
                        [
                            "init_ops.zeros_initializer()",
                            "Method Argument"
                        ],
                        [
                            "init_ops.zeros_initializer()",
                            "Method Argument"
                        ],
                        [
                            "init_ops.zeros_initializer()",
                            "Method Argument"
                        ],
                        [
                            "init_ops.zeros_initializer()",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "weights_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "biases_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "activity_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "_scope": {
                    "value": "sc",
                    "type": "variable",
                    "possible_values": []
                },
                "_reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_1841": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_1883": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "norm_axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(begin_norm_axis, inputs_rank))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_1886": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(mean, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(mean, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(mean, params_shape_broadcast)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(variance, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(variance, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(variance, params_shape_broadcast)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('beta', shape=params_shape, dtype=dtype, initializer=beta_initializer, collections=beta_collections, trainable=trainable_beta)",
                            "Call"
                        ],
                        [
                            "array_ops.constant(0.0, shape=params_shape)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('beta', shape=params_shape, dtype=dtype, initializer=beta_initializer, collections=beta_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(beta, params_shape_broadcast)",
                            "Call"
                        ],
                        [
                            "beta + delta_beta",
                            "BinOp"
                        ],
                        [
                            "variables.model_variable('beta', shape=params_shape, dtype=dtype, initializer=init_ops.zeros_initializer(), collections=beta_collections, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('gamma', shape=params_shape, dtype=dtype, initializer=gamma_initializer, collections=gamma_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "array_ops.constant(1.0, shape=params_shape)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('gamma', shape=params_shape, dtype=dtype, initializer=gamma_initializer, collections=gamma_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(gamma, params_shape_broadcast)",
                            "Call"
                        ],
                        [
                            "gamma + delta_gamma",
                            "BinOp"
                        ],
                        [
                            "variables.model_variable('gamma', shape=params_shape, dtype=dtype, initializer=init_ops.ones_initializer(), collections=gamma_collections, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "variance_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "float"
                        ]
                    ]
                }
            },
            "convert_to_tensor_1934": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPooling2D_1937": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ]
                    ]
                },
                "_scope": {
                    "value": "sc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1983": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPooling3D_1986": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ],
                        [
                            "'channels_first' if data_format and data_format.startswith('NC') else 'channels_last'",
                            "IfExp"
                        ]
                    ]
                },
                "_scope": {
                    "value": "sc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_2045": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "pool_2052": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "window_shape": {
                    "value": "utils.n_positive_integers(num_spatial_dims, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "pooling_type": {
                    "value": "pooling_type",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NDHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NDHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NDHWC",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "utils.n_positive_integers(num_spatial_dims, dilation_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "utils.n_positive_integers(num_spatial_dims, stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "sc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_2086": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(labels)",
                            "Call"
                        ],
                        [
                            "standard_ops.to_int64(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_2089": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(labels)",
                            "Call"
                        ],
                        [
                            "standard_ops.to_int64(labels)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "on_value": {
                    "value": "on_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "off_value": {
                    "value": "off_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_to_collections_2099": {
                "names": {
                    "value": "list(output_collections or []) + [ops.GraphKeys.ACTIVATIONS]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation_fn(y)",
                            "Call"
                        ],
                        [
                            "standard_ops.matmul(x_2_dim, w)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(y, b)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(y, array_ops.stack(out_shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_2135": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_2206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_2268": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_2372": {
                "variable": {
                    "value": "logits_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_2373": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(logits, [-1, num_logits])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_2374": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.softmax(logits_2d)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(predictions, array_ops.shape(logits))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "array_ops.shape(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_2416": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_2460": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "epsilon + math_ops.reduce_sum(math_ops.square(inputs), dim, True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_2469": {
                "variable": {
                    "value": "multiples",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "multiples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "array_ops.concat(multiples, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_2504": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_2505": {
                "variable": {
                    "value": "square_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "math_ops.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if data_format == DATA_FORMAT_NCHW else -1",
                            "IfExp"
                        ],
                        [
                            "1 if data_format == DATA_FORMAT_NCHW else -1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rsqrt_2506": {
                "variable": {
                    "value": "x_inv_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "square_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_sum(math_ops.square(x), axis, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_2507": {
                "variable": {
                    "value": "x_inv_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(1.0 - epsilon) * x_inv_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_2515": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_2591": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_2604": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_input_units, num_output_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initializers.xavier_initializer()",
                            "Method Argument"
                        ]
                    ]
                },
                "collections": {
                    "value": "weight_collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set(list(weight_collections or []) + [ops.GraphKeys.GLOBAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "(ops.GraphKeys.WEIGHTS",
                            "Method Argument"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_2613": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_2_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if len(dims) <= 2 else array_ops.reshape(x, [-1, num_input_units])",
                            "IfExp"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('weights', shape=[num_input_units, num_output_units], dtype=dtype, initializer=weight_init, collections=weight_collections, regularizer=weight_regularizer, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_132": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_180": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_282": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BatchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_301": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, 1, 1, channels]",
                            "List"
                        ],
                        [
                            "[-1, channels, 1, 1]",
                            "List"
                        ],
                        [
                            "array_ops.concat((outer_dimensions, [math_ops.reduce_prod(inner_dimensions)]), 0)",
                            "Call"
                        ],
                        [
                            "array_ops.concat((outer_dimensions, [-1]), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_329": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ],
                        [
                            "inputs_shape[1:2]",
                            "Subscript"
                        ],
                        [
                            "inputs_shape[1:2]",
                            "Subscript"
                        ],
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ],
                        [
                            "inputs_shape[begin_params_axis:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_344": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ],
                        [
                            "inputs_shape[1:2]",
                            "Subscript"
                        ],
                        [
                            "inputs_shape[1:2]",
                            "Subscript"
                        ],
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ],
                        [
                            "inputs_shape[begin_params_axis:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_429": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "utils.smart_cond(is_training, _force_updates, no_updates)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, array_ops.shape(original_inputs))",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs, training=is_training)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "batch_normalization(inputs, mean, variance, beta, gamma, epsilon, num_output)",
                            "Call"
                        ],
                        [
                            "nn.batch_normalization(inputs, mean, variance, beta, gamma, epsilon)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(inputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d(inputs, depthwise_weights, [1, stride_h, stride_w, 1], padding)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs, training=is_training)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, flat_shape)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.batch_normalization(inputs, mean, variance, offset=beta, scale=gamma, variance_epsilon=variance_epsilon)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "standard_ops.one_hot(labels, num_classes, on_value=on_value, off_value=off_value)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "layer(outputs, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d(inputs, depthwise_weights, strides, padding, rate=utils.two_element_tuple(rate))",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "layer(outputs, *layer_args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "array_ops.shape(original_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_599": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BatchNorm",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "custom_getter": {
                    "value": "layer_variable_getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_build_variable_getter()",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'depthwise_kernel': 'depthwise_weights', 'pointwise_kernel': 'pointwise_weights'})",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNormalization_624": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if data_format == DATA_FORMAT_NCHW else -1",
                            "IfExp"
                        ],
                        [
                            "1 if data_format == DATA_FORMAT_NCHW else -1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.999",
                            "Method Argument"
                        ],
                        [
                            "0.999",
                            "Method Argument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "1e-07",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                },
                "center": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "beta_initializer": {
                    "value": "beta_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_initializers.get('beta', init_ops.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "param_initializers.get('beta', init_ops.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "param_initializers.get('beta', init_ops.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "gamma_initializer": {
                    "value": "gamma_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_initializers.get('gamma', init_ops.ones_initializer())",
                            "Call"
                        ],
                        [
                            "param_initializers.get('gamma', init_ops.ones_initializer())",
                            "Call"
                        ],
                        [
                            "param_initializers.get('gamma', init_ops.ones_initializer())",
                            "Call"
                        ]
                    ]
                },
                "moving_mean_initializer": {
                    "value": "moving_mean_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_initializers.get('moving_mean', init_ops.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "param_initializers.get('moving_mean', init_ops.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "param_initializers.get('moving_mean', init_ops.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "moving_variance_initializer": {
                    "value": "moving_variance_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_initializers.get('moving_variance', init_ops.ones_initializer())",
                            "Call"
                        ],
                        [
                            "param_initializers.get('moving_variance', init_ops.ones_initializer())",
                            "Call"
                        ],
                        [
                            "param_initializers.get('moving_variance', init_ops.ones_initializer())",
                            "Call"
                        ]
                    ]
                },
                "beta_regularizer": {
                    "value": "beta_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_regularizers.get('beta')",
                            "Call"
                        ]
                    ]
                },
                "gamma_regularizer": {
                    "value": "gamma_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_regularizers.get('gamma')",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "renorm": {
                    "value": "renorm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "renorm_clipping": {
                    "value": "renorm_clipping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "renorm_momentum": {
                    "value": "renorm_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "_scope": {
                    "value": "sc",
                    "type": "variable",
                    "possible_values": []
                },
                "_reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "fused": {
                    "value": "fused",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_677": {
                "variable": {
                    "value": "batch_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "batch_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(batch_weights)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(batch_weights, nshape)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_681": {
                "variable": {
                    "value": "batch_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(batch_weights)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(batch_weights, nshape)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "nshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1] + [1 for _ in range(inputs_rank - 1)]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_817": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(mean, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(mean, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(mean, params_shape_broadcast)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "params_shape_broadcast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list([1, inputs_shape[1].value] + [1 for _ in range(2, inputs_rank)])",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "reshape_818": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(variance, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(variance, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(variance, params_shape_broadcast)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "params_shape_broadcast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list([1, inputs_shape[1].value] + [1 for _ in range(2, inputs_rank)])",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "reshape_819": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('beta', shape=params_shape, dtype=dtype, initializer=beta_initializer, collections=beta_collections, trainable=trainable_beta)",
                            "Call"
                        ],
                        [
                            "array_ops.constant(0.0, shape=params_shape)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('beta', shape=params_shape, dtype=dtype, initializer=beta_initializer, collections=beta_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(beta, params_shape_broadcast)",
                            "Call"
                        ],
                        [
                            "beta + delta_beta",
                            "BinOp"
                        ],
                        [
                            "variables.model_variable('beta', shape=params_shape, dtype=dtype, initializer=init_ops.zeros_initializer(), collections=beta_collections, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "params_shape_broadcast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list([1, inputs_shape[1].value] + [1 for _ in range(2, inputs_rank)])",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "concat_837": {
                "variable": {
                    "value": "final_states",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "encoder_final_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomUniform_840": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-0.0001",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "batch_normalization_873": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(mean, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(mean, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(mean, params_shape_broadcast)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(variance, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(variance, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(variance, params_shape_broadcast)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('beta', shape=params_shape, dtype=dtype, initializer=beta_initializer, collections=beta_collections, trainable=trainable_beta)",
                            "Call"
                        ],
                        [
                            "array_ops.constant(0.0, shape=params_shape)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('beta', shape=params_shape, dtype=dtype, initializer=beta_initializer, collections=beta_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(beta, params_shape_broadcast)",
                            "Call"
                        ],
                        [
                            "beta + delta_beta",
                            "BinOp"
                        ],
                        [
                            "variables.model_variable('beta', shape=params_shape, dtype=dtype, initializer=init_ops.zeros_initializer(), collections=beta_collections, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('gamma', shape=params_shape, dtype=dtype, initializer=gamma_initializer, collections=gamma_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "array_ops.constant(1.0, shape=params_shape)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('gamma', shape=params_shape, dtype=dtype, initializer=gamma_initializer, collections=gamma_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(gamma, params_shape_broadcast)",
                            "Call"
                        ],
                        [
                            "gamma + delta_gamma",
                            "BinOp"
                        ],
                        [
                            "variables.model_variable('gamma', shape=params_shape, dtype=dtype, initializer=init_ops.ones_initializer(), collections=gamma_collections, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "1e-07",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_894": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/'.join(name_components)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_948": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BiasAdd",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1074": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Conv",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "custom_getter": {
                    "value": "layer_variable_getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_build_variable_getter()",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'depthwise_kernel': 'depthwise_weights', 'pointwise_kernel': 'pointwise_weights'})",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_1193": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "ConvInPlane",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1302": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Conv2d_transpose",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "custom_getter": {
                    "value": "layer_variable_getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_build_variable_getter()",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'depthwise_kernel': 'depthwise_weights', 'pointwise_kernel': 'pointwise_weights'})",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_1412": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Conv3d_transpose",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "custom_getter": {
                    "value": "layer_variable_getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_build_variable_getter()",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'depthwise_kernel': 'depthwise_weights', 'pointwise_kernel': 'pointwise_weights'})",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_1485": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Dropout",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "_model_variable_getter",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_1515": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_1565": {
                "control_inputs": {
                    "value": "[rank_assertion]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_1613": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_1617": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_1729": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "fully_connected",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "custom_getter": {
                    "value": "layer_variable_getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_build_variable_getter()",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'depthwise_kernel': 'depthwise_weights', 'pointwise_kernel': 'pointwise_weights'})",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_1839": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "LayerNorm",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_1933": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_1982": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_2043": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_2085": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_int64_2088": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(labels)",
                            "Call"
                        ],
                        [
                            "standard_ops.to_int64(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_2134": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Repeat",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_2265": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "SeparableConv2d",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "custom_getter": {
                    "value": "layer_variable_getter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_build_variable_getter()",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'kernel': 'weights'})",
                            "Call"
                        ],
                        [
                            "_build_variable_getter({'bias': 'biases', 'depthwise_kernel': 'depthwise_weights', 'pointwise_kernel': 'pointwise_weights'})",
                            "Call"
                        ]
                    ]
                }
            },
            "depthwise_conv2d_2329": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "depthwise_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.tile(weights, [1, 1, num_filters_in, 1])",
                            "Call"
                        ],
                        [
                            "variables.model_variable('depthwise_weights', shape=depthwise_shape, dtype=dtype, initializer=weights_initializer, regularizer=weights_regularizer, trainable=trainable, collections=weights_collections)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride_h, stride_w, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "utils.two_element_tuple(rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_2370": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_2415": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Stack",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_2452": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'repeat'",
                            "str"
                        ],
                        [
                            "kwargs.pop('scope', None)",
                            "Call"
                        ],
                        [
                            "layer.__name__",
                            "Attribute"
                        ],
                        [
                            "layer.func.__name__",
                            "Attribute"
                        ],
                        [
                            "'stack'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "UnitNorm",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_2470": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "array_ops.tile(lengths, multiples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_2503": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/'.join(name_components)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_2508": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_inv_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.rsqrt(square_sum)",
                            "Call"
                        ],
                        [
                            "math_ops.minimum((1.0 - epsilon) * x_inv_norm, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/'.join(name_components)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_2590": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/'.join(name_components)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "fully_connected",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_2618": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_output_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_ops.zeros_initializer()",
                            "Method Argument"
                        ]
                    ]
                },
                "collections": {
                    "value": "bias_collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set(list(bias_collections or []) + [ops.GraphKeys.GLOBAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "(ops.GraphKeys.BIASES",
                            "Method Argument"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "bias_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_2626": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation_fn(y)",
                            "Call"
                        ],
                        [
                            "standard_ops.matmul(x_2_dim, w)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(y, b)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(y, array_ops.stack(out_shape))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('bias', shape=[num_output_units], dtype=dtype, initializer=bias_init, collections=bias_collections, regularizer=bias_regularizer, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_2629": {
                "variable": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "array_ops.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_2632": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation_fn(y)",
                            "Call"
                        ],
                        [
                            "standard_ops.matmul(x_2_dim, w)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(y, b)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(y, array_ops.stack(out_shape))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "array_ops.stack(out_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "fused_batch_norm_372": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('gamma', shape=params_shape, dtype=dtype, initializer=gamma_initializer, collections=gamma_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "array_ops.constant(1.0, shape=params_shape)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('gamma', shape=params_shape, dtype=dtype, initializer=gamma_initializer, collections=gamma_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(gamma, params_shape_broadcast)",
                            "Call"
                        ],
                        [
                            "gamma + delta_gamma",
                            "BinOp"
                        ],
                        [
                            "variables.model_variable('gamma', shape=params_shape, dtype=dtype, initializer=init_ops.ones_initializer(), collections=gamma_collections, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('beta', shape=params_shape, dtype=dtype, initializer=beta_initializer, collections=beta_collections, trainable=trainable_beta)",
                            "Call"
                        ],
                        [
                            "array_ops.constant(0.0, shape=params_shape)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('beta', shape=params_shape, dtype=dtype, initializer=beta_initializer, collections=beta_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(beta, params_shape_broadcast)",
                            "Call"
                        ],
                        [
                            "beta + delta_beta",
                            "BinOp"
                        ],
                        [
                            "variables.model_variable('beta', shape=params_shape, dtype=dtype, initializer=init_ops.zeros_initializer(), collections=beta_collections, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "1e-07",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NDHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NDHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NDHWC",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fused_batch_norm_376": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('gamma', shape=params_shape, dtype=dtype, initializer=gamma_initializer, collections=gamma_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "array_ops.constant(1.0, shape=params_shape)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('gamma', shape=params_shape, dtype=dtype, initializer=gamma_initializer, collections=gamma_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(gamma, params_shape_broadcast)",
                            "Call"
                        ],
                        [
                            "gamma + delta_gamma",
                            "BinOp"
                        ],
                        [
                            "variables.model_variable('gamma', shape=params_shape, dtype=dtype, initializer=init_ops.ones_initializer(), collections=gamma_collections, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('beta', shape=params_shape, dtype=dtype, initializer=beta_initializer, collections=beta_collections, trainable=trainable_beta)",
                            "Call"
                        ],
                        [
                            "array_ops.constant(0.0, shape=params_shape)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('beta', shape=params_shape, dtype=dtype, initializer=beta_initializer, collections=beta_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(beta, params_shape_broadcast)",
                            "Call"
                        ],
                        [
                            "beta + delta_beta",
                            "BinOp"
                        ],
                        [
                            "variables.model_variable('beta', shape=params_shape, dtype=dtype, initializer=init_ops.zeros_initializer(), collections=beta_collections, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "moving_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('moving_mean', shape=params_shape, dtype=dtype, initializer=moving_mean_initializer, trainable=False, collections=moving_mean_collections)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('moving_mean', shape=params_shape, dtype=dtype, initializer=moving_mean_initializer, trainable=False, collections=moving_mean_collections)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "moving_variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('moving_variance', shape=params_shape, dtype=dtype, initializer=moving_variance_initializer, trainable=False, collections=moving_variance_collections)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('moving_variance', shape=params_shape, dtype=dtype, initializer=moving_variance_initializer, trainable=False, collections=moving_variance_collections)",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "1e-07",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                },
                "is_training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NDHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NDHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NHWC",
                            "Method Argument"
                        ],
                        [
                            "DATA_FORMAT_NDHWC",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_730": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_732": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_756": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_821": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('gamma', shape=params_shape, dtype=dtype, initializer=gamma_initializer, collections=gamma_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "array_ops.constant(1.0, shape=params_shape)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('gamma', shape=params_shape, dtype=dtype, initializer=gamma_initializer, collections=gamma_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(gamma, params_shape_broadcast)",
                            "Call"
                        ],
                        [
                            "gamma + delta_gamma",
                            "BinOp"
                        ],
                        [
                            "variables.model_variable('gamma', shape=params_shape, dtype=dtype, initializer=init_ops.ones_initializer(), collections=gamma_collections, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "params_shape_broadcast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list([1, inputs_shape[1].value] + [1 for _ in range(2, inputs_rank)])",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "get_variable_scope_830": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bias_add_1226": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "utils.smart_cond(is_training, _force_updates, no_updates)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, array_ops.shape(original_inputs))",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs, training=is_training)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "batch_normalization(inputs, mean, variance, beta, gamma, epsilon, num_output)",
                            "Call"
                        ],
                        [
                            "nn.batch_normalization(inputs, mean, variance, beta, gamma, epsilon)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(inputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d(inputs, depthwise_weights, [1, stride_h, stride_w, 1], padding)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs, training=is_training)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, flat_shape)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.batch_normalization(inputs, mean, variance, offset=beta, scale=gamma, variance_epsilon=variance_epsilon)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "standard_ops.one_hot(labels, num_classes, on_value=on_value, off_value=off_value)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "layer(outputs, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d(inputs, depthwise_weights, strides, padding, rate=utils.two_element_tuple(rate))",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "layer(outputs, *layer_args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('biases', shape=[num_features], dtype=dtype, initializer=initializer, regularizer=regularizer, collections=biases_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('biases', shape=[num_filters_in], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, collections=biases_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('biases', shape=[num_outputs], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, trainable=trainable, collections=biases_collections)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1567": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_2374": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "strided_slice_2466": {
                "input_": {
                    "value": "array_ops.shape(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[dim + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_2470": {
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.sqrt(epsilon + math_ops.reduce_sum(math_ops.square(inputs), dim, True))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "multiples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "array_ops.concat(multiples, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_2505": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_2611": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_input_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_to_collections_424": {
                "names": {
                    "value": "updates_collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.GraphKeys.UPDATE_OPS",
                            "Method Argument"
                        ],
                        [
                            "ops.GraphKeys.UPDATE_OPS",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "update_mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_to_collections_425": {
                "names": {
                    "value": "updates_collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.GraphKeys.UPDATE_OPS",
                            "Method Argument"
                        ],
                        [
                            "ops.GraphKeys.UPDATE_OPS",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "update_variance",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_429": {
                "input": {
                    "value": "original_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_initializer_613": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_615": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_617": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_619": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_707": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_718": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_736": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_747": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "moments_767": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "moments_axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] + list(range(2, inputs_rank))",
                            "BinOp"
                        ],
                        [
                            "list(range(inputs_rank - 1))",
                            "Call"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_768": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(mean, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(mean, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(mean, params_shape_broadcast)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_769": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(variance, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(variance, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(variance, params_shape_broadcast)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_771": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "moments_axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] + list(range(2, inputs_rank))",
                            "BinOp"
                        ],
                        [
                            "list(range(inputs_rank - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_moments_774": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "moments_axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] + list(range(2, inputs_rank))",
                            "BinOp"
                        ],
                        [
                            "list(range(inputs_rank - 1))",
                            "Call"
                        ]
                    ]
                },
                "frequency_weights": {
                    "value": "batch_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(batch_weights)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(batch_weights, nshape)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_776": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(mean, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(mean, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(mean, params_shape_broadcast)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_777": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(variance, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(variance, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(variance, params_shape_broadcast)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "weighted_moments_779": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "moments_axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] + list(range(2, inputs_rank))",
                            "BinOp"
                        ],
                        [
                            "list(range(inputs_rank - 1))",
                            "Call"
                        ]
                    ]
                },
                "frequency_weights": {
                    "value": "batch_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(batch_weights)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(batch_weights, nshape)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_to_collections_809": {
                "names": {
                    "value": "updates_collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.GraphKeys.UPDATE_OPS",
                            "Method Argument"
                        ],
                        [
                            "ops.GraphKeys.UPDATE_OPS",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "update_mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_to_collections_810": {
                "names": {
                    "value": "updates_collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.GraphKeys.UPDATE_OPS",
                            "Method Argument"
                        ],
                        [
                            "ops.GraphKeys.UPDATE_OPS",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "update_variance",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_prod_1556": {
                "input_tensor": {
                    "value": "inner_dimensions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.dense_shape[new_rank - 1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "get_collection_1660": {
                "key": {
                    "value": "collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collections",
                            "variable"
                        ]
                    ]
                }
            },
            "add_to_collection_1661": {
                "name": {
                    "value": "collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collections",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables_list",
                            "variable"
                        ]
                    ]
                }
            },
            "bias_add_2347": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "utils.smart_cond(is_training, _force_updates, no_updates)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, array_ops.shape(original_inputs))",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs, training=is_training)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "batch_normalization(inputs, mean, variance, beta, gamma, epsilon, num_output)",
                            "Call"
                        ],
                        [
                            "nn.batch_normalization(inputs, mean, variance, beta, gamma, epsilon)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(inputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d(inputs, depthwise_weights, [1, stride_h, stride_w, 1], padding)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs, training=is_training)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, flat_shape)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.batch_normalization(inputs, mean, variance, offset=beta, scale=gamma, variance_epsilon=variance_epsilon)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "standard_ops.one_hot(labels, num_classes, on_value=on_value, off_value=off_value)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "layer(outputs, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d(inputs, depthwise_weights, strides, padding, rate=utils.two_element_tuple(rate))",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "layer(outputs, *layer_args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables.model_variable('biases', shape=[num_features], dtype=dtype, initializer=initializer, regularizer=regularizer, collections=biases_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('biases', shape=[num_filters_in], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, collections=biases_collections, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "variables.model_variable('biases', shape=[num_outputs], dtype=dtype, initializer=biases_initializer, regularizer=biases_regularizer, trainable=trainable, collections=biases_collections)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_2460": {
                "input_tensor": {
                    "value": "math_ops.square(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_2464": {
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_2466": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_2468": {
                "shape": {
                    "value": "[input_rank - 1 - dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_2629": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_2632": {
                "values": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.unstack(array_ops.shape(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_1868": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_1878": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_2461": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_405": {
                "control_inputs": {
                    "value": "[update_moving_mean, update_moving_variance]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_407": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "utils.smart_cond(is_training, _force_updates, no_updates)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, array_ops.shape(original_inputs))",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs, training=is_training)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "batch_normalization(inputs, mean, variance, beta, gamma, epsilon, num_output)",
                            "Call"
                        ],
                        [
                            "nn.batch_normalization(inputs, mean, variance, beta, gamma, epsilon)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(inputs, biases, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d(inputs, depthwise_weights, [1, stride_h, stride_w, 1], padding)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs, training=is_training)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, flat_shape)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "nn.batch_normalization(inputs, mean, variance, offset=beta, scale=gamma, variance_epsilon=variance_epsilon)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "standard_ops.one_hot(labels, num_classes, on_value=on_value, off_value=off_value)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "layer(outputs, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "layer.apply(inputs)",
                            "Call"
                        ],
                        [
                            "nn.depthwise_conv2d(inputs, depthwise_weights, strides, padding, rate=utils.two_element_tuple(rate))",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "layer(outputs, *layer_args, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_790": {
                "control_inputs": {
                    "value": "[update_moving_mean, update_moving_variance]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_792": {
                "input": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(variance, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(variance, [-1])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(variance, params_shape_broadcast)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "seq2seq/contrib/learn/estimator.py": {
        "tensorflow": {
            "get_334": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "identifier": {
                    "value": "output_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Summary_335": {
                "variable": {
                    "value": "summary_proto",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_332": {
                "msg": {
                    "value": "Saving dict for global step %d: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "current_global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_results[global_step_key]",
                            "Subscript"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "_dict_to_str(dictionary)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "latest_checkpoint_881": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self._model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_955": {
                "variable": {
                    "value": "self._graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "replica_device_setter_226": {
                "ps_tasks": {
                    "value": "config.num_ps_replicas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_device": {
                    "value": "worker_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/job:%s/task:%d' % (config.task_type, config.task_id)",
                            "BinOp"
                        ],
                        [
                            "'/job:worker'",
                            "str"
                        ]
                    ]
                },
                "merge_devices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "ps_ops": {
                    "value": "ps_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['Variable', 'VariableV2', 'AutoReloadVariable', 'MutableHashTable', 'MutableHashTableV2', 'MutableHashTableOfTensors', 'MutableHashTableOfTensorsV2', 'MutableDenseHashTable', 'MutableDenseHashTableV2']",
                            "List"
                        ]
                    ]
                },
                "cluster": {
                    "value": "config.cluster_spec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "warning_278": {
                "msg": {
                    "value": "Please specify metrics using MetricSpec. Using bare functions or (key, fn) tuples is deprecated and support for it will be removed on Oct 1, 2016.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_389": {
                "variable": {
                    "value": "self._session_config",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "info_411": {
                "msg": {
                    "value": "Using config: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "str(vars(self._config))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_462": {
                "msg": {
                    "value": "Loss for final step: %s.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._train_model(input_fn=input_fn, hooks=hooks)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "warning_505": {
                "msg": {
                    "value": "The current implementation of partial_fit is not optimized for use in a loop. Consider using fit() instead.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_variable_607": {
                "ckpt_dir_or_file": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "group_797": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "latest_checkpoint_819": {
                "variable": {
                    "value": "latest_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self._model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "create_global_step_831": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MonitoredSession_892": {
                "variable": {
                    "value": "mon_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "session_creator": {
                    "value": "monitored_session.ChiefSessionCreator(checkpoint_filename_with_path=checkpoint_path, scaffold=infer_ops.scaffold, config=self._session_config)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "create_global_step_958": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_100": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_384": {
                "msg": {
                    "value": "Using default config.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_407": {
                "msg": {
                    "value": "Using temporary folder as model directory: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_variable_450": {
                "variable": {
                    "value": "start_step",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "self._model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ops.GraphKeys.GLOBAL_STEP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "debug_758": {
                "msg": {
                    "value": "Given features: %s, required signatures: %s.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "str(features)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "str(self._features_info)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "debug_766": {
                "msg": {
                    "value": "Setting feature info to %s.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "str(self._features_info)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_829": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_830": {
                "seed": {
                    "value": "self._config.tf_random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_886": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_887": {
                "seed": {
                    "value": "self._config.tf_random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "create_global_step_888": {
                "graph": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_random_seed_957": {
                "seed": {
                    "value": "self._config.tf_random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_962": {
                "name": {
                    "value": "ops.GraphKeys.LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "model_fn_ops.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_1305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_1306": {
                "graph": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "latest_checkpoint_1334": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self._model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_1346": {
                "variable": {
                    "value": "saver_for_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "sharded": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "group_1349": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "variables.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "resources.initialize_resources(resources.shared_resources())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_101": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "warn_351": {
                "msg": {
                    "value": "Skipping summary for %s, must be a float, np.float32, np.int64, np.int32 or int.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dictionary",
                            "variable"
                        ]
                    ]
                }
            },
            "list_variables_615": {
                "ckpt_dir_or_file": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "debug_769": {
                "msg": {
                    "value": "Given labels: %s, required signatures: %s.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "str(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "str(self._labels_info)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "debug_777": {
                "msg": {
                    "value": "Setting labels info to %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "str(self._labels_info)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Scaffold_974": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_to_collection_976": {
                "name": {
                    "value": "ops.GraphKeys.SAVERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "saver.Saver(sharded=True, max_to_keep=self._config.keep_checkpoint_max, defer_build=True, save_relative_paths=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MonitoredTrainingSession_1042": {
                "master": {
                    "value": "self._config.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "is_chief": {
                    "value": "self._config.is_chief",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self._model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "scaffold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn_ops.scaffold or monitored_session.Scaffold()",
                            "BoolOp"
                        ]
                    ]
                },
                "hooks": {
                    "value": "all_hooks + model_fn_ops.training_hooks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "chief_only_hooks": {
                    "value": "chief_hooks + model_fn_ops.training_chief_hooks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "save_checkpoint_secs": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "save_summaries_steps": {
                    "value": "self._config.save_summary_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._session_config",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "warning_1147": {
                "msg": {
                    "value": "\"Estimator's model_fn (%s) includes params argument, but params are not passed to Estimator.\"",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_to_collection_1317": {
                "name": {
                    "value": "constants.COLLECTION_DEF_KEY_FOR_INPUT_FEATURE_KEYS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "feature_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ops.features.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_1347": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_452": {
                "msg": {
                    "value": "Skipping training since max_steps has already saved.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_789": {
                "msg": {
                    "value": "'Ignoring metric {}. It returned a list|tuple with len {}, expected 2'.format(name, len(metric_ops))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_893": {
                "checkpoint_filename_with_path": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latest_path",
                            "variable"
                        ],
                        [
                            "saver.latest_checkpoint(self._model_dir)",
                            "Call"
                        ],
                        [
                            "saver.latest_checkpoint(self._model_dir)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "scaffold": {
                    "value": "infer_ops.scaffold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self._session_config",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_975": {
                "key": {
                    "value": "ops.GraphKeys.SAVERS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_978": {
                "sharded": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self._config.keep_checkpoint_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "defer_build": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "save_relative_paths": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "local_variables_initializer_1350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_1352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_bytes_1366": {
                "bytes_or_text": {
                    "value": "export_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "saved_model_export_utils.get_timestamped_export_dir(export_dir_base)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_bytes_1367": {
                "bytes_or_text": {
                    "value": "assets.extra",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MakeDirs_1372": {
                "dirname": {
                    "value": "dest_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.dirname(dest_absolute)",
                            "Call"
                        ]
                    ]
                }
            },
            "Copy_1373": {
                "oldpath": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "newpath": {
                    "value": "dest_absolute",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(compat.as_bytes(assets_extra_path), compat.as_bytes(dest_relative))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_1359": {
                "key": {
                    "value": "ops.GraphKeys.ASSET_FILEPATHS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_bytes_1369": {
                "bytes_or_text": {
                    "value": "assets_extra_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(compat.as_bytes(export_dir), compat.as_bytes('assets.extra'))",
                            "Call"
                        ]
                    ]
                }
            },
            "as_bytes_1370": {
                "bytes_or_text": {
                    "value": "dest_relative",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/contrib/learn/partial_restore_session.py": {
        "tensorflow": {
            "ChiefSessionCreator_187": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "scaffold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scaffold or monitored_session.Scaffold()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "checkpoint_dir": {
                    "value": "restore_checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_dir",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "master": {
                    "value": "master",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Saver_70": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self._var_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_81": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self._dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "WorkerSessionCreator_169": {
                "variable": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "scaffold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scaffold or monitored_session.Scaffold()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "master": {
                    "value": "master",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_collection_184": {
                "variable": {
                    "value": "all_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "ops.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MonitoredSession_210": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "monitored_session.WorkerSessionCreator(scaffold=scaffold, master=master, config=config)",
                            "Call"
                        ],
                        [
                            "monitored_session.ChiefSessionCreator(scaffold=scaffold, checkpoint_dir=restore_checkpoint_dir, master=master, config=config)",
                            "Call"
                        ]
                    ]
                },
                "hooks": {
                    "value": "all_hooks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "stop_grace_period_secs": {
                    "value": "stop_grace_period_secs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "120",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_65": {
                "msg": {
                    "value": "Create CheckpointRestorerHook.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Scaffold_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MonitoredSession_171": {
                "session_creator": {
                    "value": "session_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "monitored_session.WorkerSessionCreator(scaffold=scaffold, master=master, config=config)",
                            "Call"
                        ],
                        [
                            "monitored_session.ChiefSessionCreator(scaffold=scaffold, checkpoint_dir=restore_checkpoint_dir, master=master, config=config)",
                            "Call"
                        ]
                    ]
                },
                "hooks": {
                    "value": "hooks or []",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "stop_grace_period_secs": {
                    "value": "stop_grace_period_secs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "120",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "warning_186": {
                "msg": {
                    "value": "MonitoredTrainingSession not restoring %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "missing_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda v: not v in restore_var_list, all_vars)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_76": {
                "msg": {
                    "value": "Restoring params from file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_78": {
                "msg": {
                    "value": "Finished restoring",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_87": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self._dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepCounterHook_194": {
                "output_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "every_n_steps": {
                    "value": "log_step_count_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_84": {
                "msg": {
                    "value": "Waiting for checkpoint to be available.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SummarySaverHook_199": {
                "scaffold": {
                    "value": "scaffold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scaffold or monitored_session.Scaffold()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "save_steps": {
                    "value": "save_summaries_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "monitored_session.USE_DEFAULT",
                            "Method Argument"
                        ]
                    ]
                },
                "save_secs": {
                    "value": "save_summaries_secs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "monitored_session.USE_DEFAULT",
                            "Method Argument"
                        ]
                    ]
                },
                "output_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CheckpointSaverHook_205": {
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "save_secs": {
                    "value": "save_checkpoint_secs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "600",
                            "Method Argument"
                        ]
                    ]
                },
                "scaffold": {
                    "value": "scaffold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scaffold or monitored_session.Scaffold()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "seq2seq/contrib/resnet/resnet_utils.py": {
        "tensorflow": {
            "pad_120": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/contrib/resnet/resnet_v1.py": {
        "tensorflow": {
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_124": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, depth_bottleneck, [1, 1], stride=1, scope='conv1')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(residual, depth_bottleneck, 3, stride, rate=rate, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(residual, depth, [1, 1], stride=1, activation_fn=None, scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(residual, -6.0, 6.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu6_125": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "shortcut + residual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "shortcut + residual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_226": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "type": "str",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_231": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/contrib/resnet/resnet_v2.py": {
        "tensorflow": {
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_219": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "layers.batch_norm(net, activation_fn=tf.nn.relu, scope='postnorm')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "type": "str",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_226": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "layers.batch_norm(net, activation_fn=tf.nn.relu, scope='postnorm')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/contrib/resnet/test.py": {
        "tensorflow": {
            "placeholder_49": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_51": {
                "x": {
                    "value": "np.tile(np.reshape(np.reshape(np.arange(height), [height, 1]) + np.reshape(np.arange(width), [1, width]), [1, height, width, 1]), [batch_size, 1, 1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/contrib/rnn/__init__.py": {
        "tensorflow": {}
    },
    "seq2seq/contrib/rnn/python/ops/rnn_cell.py": {
        "tensorflow": {
            "concat_62": {
                "variable": {
                    "value": "concat_variable",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "sharded_variable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_sharded_variable(name, shape, dtype, num_shards)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "concat_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name + '/concat'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_2157": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_size + [total_arg_size_depth, num_features]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_2173": {
                "variable": {
                    "value": "bias_term",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_ops.constant_initializer(bias_start, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_58": {
                "key": {
                    "value": "ops.GraphKeys.CONCATENATED_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_63": {
                "name": {
                    "value": "ops.GraphKeys.CONCATENATED_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "concat_variable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat(sharded_variable, 0, name=concat_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_297": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "B",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3 * self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_ops.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_304": {
                "variable": {
                    "value": "cell_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, m_prev]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bias_add_305": {
                "variable": {
                    "value": "lstm_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "math_ops.matmul(cell_inputs, concat_w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('B', shape=[3 * self._num_units], initializer=init_ops.zeros_initializer(), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "vs.get_variable('B', shape=[4 * self._num_units], initializer=init_ops.zeros_initializer(), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "range(len(self._start_freqindex_list))",
                            "Call"
                        ],
                        [
                            "vs.get_variable('bias', shape=[8 * self._num_units], initializer=init_ops.zeros_initializer(), dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_306": {
                "variable": {
                    "value": "(j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "lstm_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_ops.bias_add(math_ops.matmul(cell_inputs, concat_w), b)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(math_ops.matmul(cell_inputs, concat_w), b)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_430": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "B",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4 * self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_ops.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_446": {
                "variable": {
                    "value": "m_prev_freq",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(inputs.get_shape()[0]), self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_662": {
                "variable": {
                    "value": "m_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "m_out_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[m_time, m_freq]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_697": {
                "variable": {
                    "value": "b_f",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'B_f_%d' % block",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_gates * self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_ops.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_744": {
                "variable": {
                    "value": "m_prev_freq",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_745": {
                "variable": {
                    "value": "c_prev_freq",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_1098": {
                "variable": {
                    "value": "m_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "fwd_m_out_lst + bwd_m_out_lst",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1187": {
                "variable": {
                    "value": "attn_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.slice(states, [0, self._cell.state_size + self._attn_size], [-1, self._attn_size * self._attn_length])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(attn_states, [-1, self._attn_length, self._attn_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._attn_length, self._attn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_1201": {
                "variable": {
                    "value": "new_attn_states",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[new_attn_states, array_ops.expand_dims(output, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1203": {
                "variable": {
                    "value": "new_attn_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "new_attn_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat([new_attn_states, array_ops.expand_dims(output, 1)], 1)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(new_attn_states, [-1, self._attn_length * self._attn_size])",
                            "Call"
                        ],
                        [
                            "array_ops.slice(attn_states, [0, 1, 0], [-1, -1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._attn_length * self._attn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_1272": {
                "variable": {
                    "value": "carry_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "carry_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_1273": {
                "variable": {
                    "value": "carry_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "carry_b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_ops.constant_initializer(self._carry_bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1277": {
                "variable": {
                    "value": "carry",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "nn_ops.xw_plus_b(inp, carry_weight, carry_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_structure_1313": {
                "variable": {
                    "value": "res_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "self._highway",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, 0, slice_offset], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, -slice_offset, 0], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_feat",
                            "variable"
                        ],
                        [
                            "_linear([inputs, attns], input_size, True)",
                            "Call"
                        ],
                        [
                            "_linear(inputs, self._num_units, True)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_initializer_1387": {
                "variable": {
                    "value": "gamma_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_1388": {
                "variable": {
                    "value": "beta_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_1399": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[proj_size, out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1400": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat([inputs, h], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('kernel', [proj_size, out_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1409": {
                "variable": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_1412": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._linear(args)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_1429": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c * math_ops.sigmoid(f + self._forget_bias) + math_ops.sigmoid(i) * g",
                            "BinOp"
                        ],
                        [
                            "self._norm(new_c, 'state')",
                            "Call"
                        ],
                        [
                            "l3_0_pre",
                            "variable"
                        ],
                        [
                            "c_prev * forget_gate + input_gate * new_input",
                            "BinOp"
                        ],
                        [
                            "k * new_c + (1 - k) * c_prev",
                            "BinOp"
                        ]
                    ]
                },
                "h": {
                    "value": "new_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - z) * state + z * self._activation(h_hat)",
                            "BinOp"
                        ],
                        [
                            "self._activation(new_c) * math_ops.sigmoid(o)",
                            "BinOp"
                        ],
                        [
                            "math_ops.tanh(new_c) * output_gate",
                            "BinOp"
                        ],
                        [
                            "k * new_h + (1 - k) * h_prev",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_1517": {
                "variable": {
                    "value": "concat_w_m",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "recurrent_kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_proj, 8 * self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_1520": {
                "variable": {
                    "value": "concat_w_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size.value, 8 * self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_1524": {
                "variable": {
                    "value": "m_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "m_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.slice(state, [0, self._num_units], [-1, num_proj])",
                            "Call"
                        ],
                        [
                            "array_ops.slice(state, [0, (2 * fq + 1) * self._num_units], [-1, self._num_units])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "concat_w_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('recurrent_kernel', [num_proj, 8 * self._num_units], dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1525": {
                "variable": {
                    "value": "inputs_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, 0, slice_offset], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, -slice_offset, 0], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_feat",
                            "variable"
                        ],
                        [
                            "_linear([inputs, attns], input_size, True)",
                            "Call"
                        ],
                        [
                            "_linear(inputs, self._num_units, True)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "concat_w_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('kernel', [input_size.value, 8 * self._num_units], dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_1537": {
                "variable": {
                    "value": "m_matrix_splits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "m_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(m_prev, concat_w_m)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(m_matrix, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_1539": {
                "variable": {
                    "value": "inputs_matrix_splits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(inputs, concat_w_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_1577": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c * math_ops.sigmoid(f + self._forget_bias) + math_ops.sigmoid(i) * g",
                            "BinOp"
                        ],
                        [
                            "self._norm(new_c, 'state')",
                            "Call"
                        ],
                        [
                            "l3_0_pre",
                            "variable"
                        ],
                        [
                            "c_prev * forget_gate + input_gate * new_input",
                            "BinOp"
                        ],
                        [
                            "k * new_c + (1 - k) * c_prev",
                            "BinOp"
                        ]
                    ]
                },
                "h": {
                    "value": "new_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tanh(l3_0 * l3_1)",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(new_m, concat_w_proj)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_1922": {
                "variable": {
                    "value": "phase_casted",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('phase', [self._num_units], initializer=init_ops.random_uniform_initializer(0.0, period.initial_value))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "time.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1923": {
                "variable": {
                    "value": "period_casted",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "period",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('period', [self._num_units], initializer=_random_exp_initializer(self._period_init_min, self._period_init_max))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "time.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_1975": {
                "variable": {
                    "value": "period",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "period",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "_random_exp_initializer(self._period_init_min, self._period_init_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_1979": {
                "variable": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "phase",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_ops.random_uniform_initializer(0.0, period.initial_value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_1983": {
                "variable": {
                    "value": "ratio_on",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ratio_on",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_ops.constant_initializer(self._ratio_on)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self._trainable_ratio_on",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_1994": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cycle_ratio < ratio_on",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "k_down",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 - k_up",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "k_closed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._leak * cycle_ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_1995": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cycle_ratio < 0.5 * ratio_on",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "k_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * cycle_ratio / ratio_on",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('attn_w', [1, 1, self._attn_size, self._attn_vec_size])",
                            "Call"
                        ],
                        [
                            "array_ops.where(cycle_ratio < ratio_on, k_down, k_closed)",
                            "Call"
                        ],
                        [
                            "array_ops.where(cycle_ratio < 0.5 * ratio_on, k_up, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_2000": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c * math_ops.sigmoid(f + self._forget_bias) + math_ops.sigmoid(i) * g",
                            "BinOp"
                        ],
                        [
                            "self._norm(new_c, 'state')",
                            "Call"
                        ],
                        [
                            "l3_0_pre",
                            "variable"
                        ],
                        [
                            "c_prev * forget_gate + input_gate * new_input",
                            "BinOp"
                        ],
                        [
                            "k * new_c + (1 - k) * c_prev",
                            "BinOp"
                        ]
                    ]
                },
                "h": {
                    "value": "new_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - z) * state + z * self._activation(h_hat)",
                            "BinOp"
                        ],
                        [
                            "self._activation(new_c) * math_ops.sigmoid(o)",
                            "BinOp"
                        ],
                        [
                            "math_ops.tanh(new_c) * output_gate",
                            "BinOp"
                        ],
                        [
                            "k * new_h + (1 - k) * h_prev",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TensorShape_2053": {
                "variable": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "self._input_shape[:-1] + [self._output_channels]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_2055": {
                "variable": {
                    "value": "self._state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "c": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(self._input_shape[:-1] + [self._output_channels])",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(self._input_shape[:-1] + [self._output_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_2056": {
                "variable": {
                    "value": "self._output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "self._input_shape[:-1] + [self._total_output_channels]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_2073": {
                "variable": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "new_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_conv([inputs, hidden], self._kernel_shape, 4 * self._output_channels, self._use_bias)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "self._conv_ndims + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_2084": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "new_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.sigmoid(forget_gate + self._forget_bias) * cell",
                            "BinOp"
                        ],
                        [
                            "new_cell + math_ops.sigmoid(input_gate) * math_ops.tanh(new_input)",
                            "BinOp"
                        ]
                    ]
                },
                "h": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_linear([cell_output, new_attns], self._attn_size, True)",
                            "Call"
                        ],
                        [
                            "math_ops.tanh(new_cell) * math_ops.sigmoid(output_gate)",
                            "BinOp"
                        ],
                        [
                            "array_ops.concat([output, inputs], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_2295": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMStateTuple_2351": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_act * c_prev + (1 - f_act) * self._activation(j)",
                            "BinOp"
                        ],
                        [
                            "sigmoid(f + self._forget_bias + w_f_diag * c_prev) * c_prev + sigmoid(i + w_i_diag * c_prev) * tanh(j)",
                            "BinOp"
                        ],
                        [
                            "sigmoid(f + self._forget_bias) * c_prev + sigmoid(i) * tanh(j)",
                            "BinOp"
                        ],
                        [
                            "clip_ops.clip_by_value(c, -self._cell_clip, self._cell_clip)",
                            "Call"
                        ],
                        [
                            "self._activation(c_act)",
                            "Call"
                        ],
                        [
                            "math_ops.sigmoid(f + self._forget_bias) * c_prev + math_ops.sigmoid(i) * math_ops.tanh(j)",
                            "BinOp"
                        ]
                    ]
                },
                "h": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigmoid(o + w_o_diag * c) * self._activation(c)",
                            "BinOp"
                        ],
                        [
                            "sigmoid(o) * self._activation(c)",
                            "BinOp"
                        ],
                        [
                            "math_ops.matmul(m, concat_w_proj)",
                            "Call"
                        ],
                        [
                            "clip_ops.clip_by_value(m, -self._proj_clip, self._proj_clip)",
                            "Call"
                        ],
                        [
                            "sigmoid(o + w_o_diag * c) * tanh(c)",
                            "BinOp"
                        ],
                        [
                            "sigmoid(o) * tanh(c)",
                            "BinOp"
                        ],
                        [
                            "math_ops.sigmoid(o) * self._activation(c)",
                            "BinOp"
                        ],
                        [
                            "_linear(m, self._num_proj, bias=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_286": {
                "variable": {
                    "value": "c_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.slice(states, [0, 0], [-1, self._cell.state_size])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_287": {
                "variable": {
                    "value": "m_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.slice(states, [0, 0], [-1, self._cell.state_size])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, num_proj]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_310": {
                "variable": {
                    "value": "w_f_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_F_diag",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_312": {
                "variable": {
                    "value": "w_o_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_O_diag",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_331": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigmoid(o + w_o_diag * c) * self._activation(c)",
                            "BinOp"
                        ],
                        [
                            "sigmoid(o) * self._activation(c)",
                            "BinOp"
                        ],
                        [
                            "math_ops.matmul(m, concat_w_proj)",
                            "Call"
                        ],
                        [
                            "clip_ops.clip_by_value(m, -self._proj_clip, self._proj_clip)",
                            "Call"
                        ],
                        [
                            "sigmoid(o + w_o_diag * c) * tanh(c)",
                            "BinOp"
                        ],
                        [
                            "sigmoid(o) * tanh(c)",
                            "BinOp"
                        ],
                        [
                            "math_ops.sigmoid(o) * self._activation(c)",
                            "BinOp"
                        ],
                        [
                            "_linear(m, self._num_proj, bias=False)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "concat_w_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_concat_variable('W_P', [self._num_units, self._num_proj], dtype, self._num_proj_shards)",
                            "Call"
                        ],
                        [
                            "vs.get_variable('projection_weights', [self._num_units, self._num_proj], dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_438": {
                "variable": {
                    "value": "w_f_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_F_diag",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_440": {
                "variable": {
                    "value": "w_i_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_I_diag",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_442": {
                "variable": {
                    "value": "w_o_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_O_diag",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "slice_449": {
                "variable": {
                    "value": "c_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.slice(states, [0, 0], [-1, self._cell.state_size])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2 * fq * self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_451": {
                "variable": {
                    "value": "m_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.slice(states, [0, 0], [-1, self._cell.state_size])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, (2 * fq + 1) * self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_454": {
                "variable": {
                    "value": "cell_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[freq_inputs[fq], m_prev, m_prev_freq]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bias_add_456": {
                "variable": {
                    "value": "lstm_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "math_ops.matmul(cell_inputs, concat_w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('B', shape=[3 * self._num_units], initializer=init_ops.zeros_initializer(), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "vs.get_variable('B', shape=[4 * self._num_units], initializer=init_ops.zeros_initializer(), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "range(len(self._start_freqindex_list))",
                            "Call"
                        ],
                        [
                            "vs.get_variable('bias', shape=[8 * self._num_units], initializer=init_ops.zeros_initializer(), dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_457": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "lstm_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_ops.bias_add(math_ops.matmul(cell_inputs, concat_w), b)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(math_ops.matmul(cell_inputs, concat_w), b)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_504": {
                "variable": {
                    "value": "cur_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "input_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, f * self._frequency_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_661": {
                "variable": {
                    "value": "state_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "state_out_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[c_time, m_time]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_707": {
                "variable": {
                    "value": "b_t",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'B_t_%d' % block",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_gates * self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_ops.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_720": {
                "variable": {
                    "value": "w_i_diag_freqf",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_I_diag_freqf_%d' % block",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_722": {
                "variable": {
                    "value": "w_i_diag_freqt",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_I_diag_freqt_%d' % block",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_724": {
                "variable": {
                    "value": "w_o_diag_freqf",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_O_diag_freqf_%d' % block",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_726": {
                "variable": {
                    "value": "w_o_diag_freqt",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_O_diag_freqt_%d' % block",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_760": {
                "variable": {
                    "value": "cell_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[freq_inputs[freq_index], m_prev_time, m_prev_freq]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bias_add_764": {
                "variable": {
                    "value": "lstm_matrix_freq",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "math_ops.matmul(cell_inputs, concat_w_f)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('B_f_%d' % block, shape=[num_gates * self._num_units], initializer=init_ops.zeros_initializer(), dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_907": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "array_ops.constant([0, 0, 0, slice_offset], shape=[2, 2], dtype=dtypes.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_1181": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "variable"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._cell.state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_1182": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "variable"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, self._cell.state_size]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._attn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_1184": {
                "variable": {
                    "value": "attn_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "variable"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, self._cell.state_size + self._attn_size]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._attn_size * self._attn_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_1195": {
                "variable": {
                    "value": "new_state_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "nest.flatten(new_state)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1207": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "list(new_state)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_1217": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attn_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, self._attn_size, self._attn_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_1219": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "attn_v",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._attn_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1220": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.slice(states, [0, self._cell.state_size + self._attn_size], [-1, self._attn_size * self._attn_length])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(attn_states, [-1, self._attn_length, self._attn_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._attn_length, 1, self._attn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1224": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_linear(query, self._attn_vec_size, True)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(y, [-1, 1, 1, self._attn_vec_size])",
                            "Call"
                        ],
                        [
                            "self._y_activation(y_act)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, self._attn_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1229": {
                "variable": {
                    "value": "new_attns",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_sum(array_ops.reshape(a, [-1, self._attn_length, 1, 1]) * hidden, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._attn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_1230": {
                "variable": {
                    "value": "new_attn_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "attn_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.slice(states, [0, self._cell.state_size + self._attn_size], [-1, self._attn_size * self._attn_length])",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(attn_states, [-1, self._attn_length, self._attn_size])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_1281": {
                "variable": {
                    "value": "transform_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "transform_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_1283": {
                "variable": {
                    "value": "transform_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "transform_b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_ops.constant_initializer(-self._carry_bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1287": {
                "variable": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "nn_ops.xw_plus_b(inp, transform_weight, transform_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assert_same_structure_1308": {
                "nest1": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, 0, slice_offset], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, -slice_offset, 0], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_feat",
                            "variable"
                        ],
                        [
                            "_linear([inputs, attns], input_size, True)",
                            "Call"
                        ],
                        [
                            "_linear(inputs, self._num_units, True)",
                            "Call"
                        ]
                    ]
                },
                "nest2": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "map_structure_1312": {
                "func": {
                    "value": "assert_shape_match",
                    "type": "variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, 0, slice_offset], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, -slice_offset, 0], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_feat",
                            "variable"
                        ],
                        [
                            "_linear([inputs, attns], input_size, True)",
                            "Call"
                        ],
                        [
                            "_linear(inputs, self._num_units, True)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_1379": {
                "c": {
                    "value": "self._num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "h": {
                    "value": "self._num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_1402": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_1403": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(args, weights)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(out, bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('bias', [out_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_1421": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._activation(j)",
                            "Call"
                        ],
                        [
                            "nn_ops.dropout(g, self._keep_prob, seed=self._seed)",
                            "Call"
                        ],
                        [
                            "sigmoid(g_act + self._forget_bias)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self._seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_1467": {
                "variable": {
                    "value": "self._state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "c": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_units",
                            "Attribute"
                        ]
                    ]
                },
                "h": {
                    "value": "num_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_units if self._num_proj is None else self._num_proj",
                            "IfExp"
                        ],
                        [
                            "self._num_units if self._num_proj is None else self._num_proj",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_1470": {
                "variable": {
                    "value": "self._state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "c": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_units",
                            "Attribute"
                        ]
                    ]
                },
                "h": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_units",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_variable_1528": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[8 * self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_ops.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_1533": {
                "variable": {
                    "value": "m_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "m_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(m_prev, concat_w_m)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(m_matrix, b)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('B', shape=[3 * self._num_units], initializer=init_ops.zeros_initializer(), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "vs.get_variable('B', shape=[4 * self._num_units], initializer=init_ops.zeros_initializer(), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "range(len(self._start_freqindex_list))",
                            "Call"
                        ],
                        [
                            "vs.get_variable('bias', shape=[8 * self._num_units], initializer=init_ops.zeros_initializer(), dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_1572": {
                "variable": {
                    "value": "concat_w_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "projection_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units, self._num_proj]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_1575": {
                "variable": {
                    "value": "new_m",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "new_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tanh(l3_0 * l3_1)",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(new_m, concat_w_proj)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "concat_w_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_concat_variable('W_P', [self._num_units, self._num_proj], dtype, self._num_proj_shards)",
                            "Call"
                        ],
                        [
                            "vs.get_variable('projection_weights', [self._num_units, self._num_proj], dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1654": {
                "variable": {
                    "value": "cell_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, state]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_1657": {
                "variable": {
                    "value": "[g_act, c_act]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "rnn_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_linear(cell_inputs, 2 * self._num_units, True)",
                            "Call"
                        ],
                        [
                            "_linear(cell_inputs, 2 * n_dim + 2 * i_dim, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1769": {
                "variable": {
                    "value": "cell_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, state]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_1851": {
                "x": {
                    "value": "random_ops.random_uniform(shape, math_ops.log(minval), math_ops.log(maxval), dtype, seed=seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_1910": {
                "c": {
                    "value": "self._num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "h": {
                    "value": "self._num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1926": {
                "x": {
                    "value": "cycle_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._mod(shifted_time, period_casted) / period_casted",
                            "BinOp"
                        ],
                        [
                            "self._get_cycle_ratio(time, phase, period)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_1954": {
                "variable": {
                    "value": "mask_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "_linear(in_mask_gates, 2 * self._num_units, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_1956": {
                "variable": {
                    "value": "[input_gate, forget_gate]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "mask_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.sigmoid(_linear(in_mask_gates, 2 * self._num_units, True))",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_1960": {
                "variable": {
                    "value": "new_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "_linear([x, h_prev], self._num_units, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1970": {
                "variable": {
                    "value": "output_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "_linear(in_out_gate, self._num_units, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_2083": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output, inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_2236": {
                "variable": {
                    "value": "self._state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "c": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_units",
                            "Attribute"
                        ]
                    ]
                },
                "h": {
                    "value": "num_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_units if self._num_proj is None else self._num_proj",
                            "IfExp"
                        ],
                        [
                            "self._num_units if self._num_proj is None else self._num_proj",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_2239": {
                "variable": {
                    "value": "self._state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "c": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_units",
                            "Attribute"
                        ]
                    ]
                },
                "h": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_units",
                            "Attribute"
                        ]
                    ]
                }
            },
            "slice_2263": {
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, 0, slice_offset], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, -slice_offset, 0], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_feat",
                            "variable"
                        ],
                        [
                            "_linear([inputs, attns], input_size, True)",
                            "Call"
                        ],
                        [
                            "_linear(inputs, self._num_units, True)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, group_id * group_size]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[self._batch_size, group_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'GLSTM_group%d_input_generation' % group_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_2317": {
                "variable": {
                    "value": "bi",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_i",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_ops.constant_initializer(0.0, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_2322": {
                "variable": {
                    "value": "bj",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_j",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_ops.constant_initializer(0.0, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_2327": {
                "variable": {
                    "value": "bf",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_f",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_ops.constant_initializer(0.0, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_2332": {
                "variable": {
                    "value": "bo",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_o",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_ops.constant_initializer(0.0, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_2338": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "array_ops.concat(i_parts, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable(name='bias_i', shape=[self._num_units], dtype=dtype, initializer=init_ops.constant_initializer(0.0, dtype=dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_2339": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "array_ops.concat(j_parts, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable(name='bias_j', shape=[self._num_units], dtype=dtype, initializer=init_ops.constant_initializer(0.0, dtype=dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_2340": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "array_ops.concat(f_parts, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable(name='bias_f', shape=[self._num_units], dtype=dtype, initializer=init_ops.constant_initializer(0.0, dtype=dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_2341": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "array_ops.concat(o_parts, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable(name='bias_o', shape=[self._num_units], dtype=dtype, initializer=init_ops.constant_initializer(0.0, dtype=dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_81": {
                "name": {
                    "value": "name + '_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[current_size] + shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "scope or 'gru_cell'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "get_variable_138": {
                "variable": {
                    "value": "w_h",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_h",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_units, 2 * num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_140": {
                "variable": {
                    "value": "w_x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_x",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_dim, 2 * num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_144": {
                "variable": {
                    "value": "(z, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.sigmoid(z_and_r)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_146": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_dim, num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_148": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_units, num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "warn_223": {
                "msg": {
                    "value": "%s: Using a concatenated state is slower and will soon be deprecated.  Use state_is_tuple=True.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_305": {
                "a": {
                    "value": "cell_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat([inputs, m_prev], 1)",
                            "Call"
                        ],
                        [
                            "array_ops.concat([freq_inputs[fq], m_prev, m_prev_freq], 1)",
                            "Call"
                        ],
                        [
                            "array_ops.concat([freq_inputs[freq_index], m_prev_time, m_prev_freq], 1)",
                            "Call"
                        ],
                        [
                            "array_ops.concat([inputs, state], 1)",
                            "Call"
                        ],
                        [
                            "array_ops.concat([inputs, state], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "concat_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_concat_variable('W', [input_size.value + num_proj, 3 * self._num_units], dtype, self._num_unit_shards)",
                            "Call"
                        ],
                        [
                            "_get_concat_variable('W', [actual_input_size + 2 * self._num_units, 4 * self._num_units], dtype, self._num_unit_shards)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_334": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigmoid(o + w_o_diag * c) * self._activation(c)",
                            "BinOp"
                        ],
                        [
                            "sigmoid(o) * self._activation(c)",
                            "BinOp"
                        ],
                        [
                            "math_ops.matmul(m, concat_w_proj)",
                            "Call"
                        ],
                        [
                            "clip_ops.clip_by_value(m, -self._proj_clip, self._proj_clip)",
                            "Call"
                        ],
                        [
                            "sigmoid(o + w_o_diag * c) * tanh(c)",
                            "BinOp"
                        ],
                        [
                            "sigmoid(o) * tanh(c)",
                            "BinOp"
                        ],
                        [
                            "math_ops.sigmoid(o) * self._activation(c)",
                            "BinOp"
                        ],
                        [
                            "_linear(m, self._num_proj, bias=False)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self._proj_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self._proj_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_337": {
                "c": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_act * c_prev + (1 - f_act) * self._activation(j)",
                            "BinOp"
                        ],
                        [
                            "sigmoid(f + self._forget_bias + w_f_diag * c_prev) * c_prev + sigmoid(i + w_i_diag * c_prev) * tanh(j)",
                            "BinOp"
                        ],
                        [
                            "sigmoid(f + self._forget_bias) * c_prev + sigmoid(i) * tanh(j)",
                            "BinOp"
                        ],
                        [
                            "clip_ops.clip_by_value(c, -self._cell_clip, self._cell_clip)",
                            "Call"
                        ],
                        [
                            "self._activation(c_act)",
                            "Call"
                        ],
                        [
                            "math_ops.sigmoid(f + self._forget_bias) * c_prev + math_ops.sigmoid(i) * math_ops.tanh(j)",
                            "BinOp"
                        ]
                    ]
                },
                "h": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigmoid(o + w_o_diag * c) * self._activation(c)",
                            "BinOp"
                        ],
                        [
                            "sigmoid(o) * self._activation(c)",
                            "BinOp"
                        ],
                        [
                            "math_ops.matmul(m, concat_w_proj)",
                            "Call"
                        ],
                        [
                            "clip_ops.clip_by_value(m, -self._proj_clip, self._proj_clip)",
                            "Call"
                        ],
                        [
                            "sigmoid(o + w_o_diag * c) * tanh(c)",
                            "BinOp"
                        ],
                        [
                            "sigmoid(o) * tanh(c)",
                            "BinOp"
                        ],
                        [
                            "math_ops.sigmoid(o) * self._activation(c)",
                            "BinOp"
                        ],
                        [
                            "_linear(m, self._num_proj, bias=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_338": {
                "values": {
                    "value": "[c, m]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_468": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_act * c_prev + (1 - f_act) * self._activation(j)",
                            "BinOp"
                        ],
                        [
                            "sigmoid(f + self._forget_bias + w_f_diag * c_prev) * c_prev + sigmoid(i + w_i_diag * c_prev) * tanh(j)",
                            "BinOp"
                        ],
                        [
                            "sigmoid(f + self._forget_bias) * c_prev + sigmoid(i) * tanh(j)",
                            "BinOp"
                        ],
                        [
                            "clip_ops.clip_by_value(c, -self._cell_clip, self._cell_clip)",
                            "Call"
                        ],
                        [
                            "self._activation(c_act)",
                            "Call"
                        ],
                        [
                            "math_ops.sigmoid(f + self._forget_bias) * c_prev + math_ops.sigmoid(i) * math_ops.tanh(j)",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self._cell_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self._cell_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_477": {
                "variable": {
                    "value": "state_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[c, m]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_480": {
                "variable": {
                    "value": "state_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[state_out, c, m]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_481": {
                "variable": {
                    "value": "m_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[m_out, m]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "warn_579": {
                "msg": {
                    "value": "%s: Using a concatenated state is slower and will soon be deprecated.  Use state_is_tuple=True.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_716": {
                "variable": {
                    "value": "w_f_diag_freqf",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_F_diag_freqf_%d' % block",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_718": {
                "variable": {
                    "value": "w_f_diag_freqt",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_F_diag_freqt_%d' % block",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_734": {
                "variable": {
                    "value": "w_i_diag_timef",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_I_diag_timef_%d' % block",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_736": {
                "variable": {
                    "value": "w_i_diag_timet",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_I_diag_timet_%d' % block",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_738": {
                "variable": {
                    "value": "w_o_diag_timef",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_O_diag_timef_%d' % block",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_740": {
                "variable": {
                    "value": "w_o_diag_timet",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_O_diag_timet_%d' % block",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "slice_752": {
                "variable": {
                    "value": "c_prev_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.slice(states, [0, 0], [-1, self._cell.state_size])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2 * freq_index * self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_755": {
                "variable": {
                    "value": "m_prev_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.slice(states, [0, 0], [-1, self._cell.state_size])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, (2 * freq_index + 1) * self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_767": {
                "variable": {
                    "value": "(i_freq, j_freq, o_freq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "lstm_matrix_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_ops.bias_add(math_ops.matmul(cell_inputs, concat_w_f), b_f)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if self._couple_input_forget_gates else 4",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_771": {
                "variable": {
                    "value": "(i_freq, j_freq, f_freq, o_freq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "lstm_matrix_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_ops.bias_add(math_ops.matmul(cell_inputs, concat_w_f), b_f)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if self._couple_input_forget_gates else 4",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bias_add_780": {
                "variable": {
                    "value": "lstm_matrix_time",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "math_ops.matmul(cell_inputs, concat_w_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('B_t_%d' % block, shape=[num_gates * self._num_units], initializer=init_ops.zeros_initializer(), dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_812": {
                "variable": {
                    "value": "c_freq",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "c_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_freq_g * c_prev_freq + i_freq_g * tanh(j_freq)",
                            "BinOp"
                        ],
                        [
                            "clip_ops.clip_by_value(c_freq, -self._cell_clip, self._cell_clip)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self._cell_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self._cell_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_848": {
                "variable": {
                    "value": "c_time",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "c_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_time_g * c_prev_time + i_time_g * tanh(j_time)",
                            "BinOp"
                        ],
                        [
                            "clip_ops.clip_by_value(c_time, -self._cell_clip, self._cell_clip)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self._cell_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self._cell_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_913": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "array_ops.constant([0, 0, -slice_offset, 0], shape=[2, 2], dtype=dtypes.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_935": {
                "variable": {
                    "value": "cur_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, 0, slice_offset], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, -slice_offset, 0], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_feat",
                            "variable"
                        ],
                        [
                            "_linear([inputs, attns], input_size, True)",
                            "Call"
                        ],
                        [
                            "_linear(inputs, self._num_units, True)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, slice_offset + f * self._frequency_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_1075": {
                "name_or_scope": {
                    "value": "fwd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1087": {
                "name_or_scope": {
                    "value": "bwd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warn_1147": {
                "msg": {
                    "value": "%s: Using a concatenated state is slower and will soon be deprecated.  Use state_is_tuple=True.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_1199": {
                "name_or_scope": {
                    "value": "attn_output_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1216": {
                "name_or_scope": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_1267": {
                "name": {
                    "value": "type(self).__name__ + 'ZeroState'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "xw_plus_b_1277": {
                "x": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "carry_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('carry_w', [input_size, input_size])",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "carry_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('carry_b', [input_size], initializer=init_ops.constant_initializer(self._carry_bias_init))",
                            "Call"
                        ]
                    ]
                }
            },
            "warn_1365": {
                "msg": {
                    "value": "%s: The input_size parameter is deprecated.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_1389": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_1391": {
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shapes",
                            "variable"
                        ],
                        [
                            "inp.get_shape()[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "gamma_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_ops.constant_initializer(self._g)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_1392": {
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shapes",
                            "variable"
                        ],
                        [
                            "inp.get_shape()[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "beta_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_ops.constant_initializer(self._b)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_1427": {
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._norm(o, 'output')",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(array_ops.concat(o_parts, axis=1), bo)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_1652": {
                "name_or_scope": {
                    "value": "vs.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_1755": {
                "name_or_scope": {
                    "value": "vs.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_1814": {
                "name": {
                    "value": "type(self).__name__ + 'ZeroState'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_1918": {
                "input": {
                    "value": "math_ops.mod(x, y) - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_1953": {
                "name_or_scope": {
                    "value": "mask_gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1959": {
                "name_or_scope": {
                    "value": "new_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1969": {
                "name_or_scope": {
                    "value": "output_gate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_1973": {
                "x": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c * math_ops.sigmoid(f + self._forget_bias) + math_ops.sigmoid(i) * g",
                            "BinOp"
                        ],
                        [
                            "self._norm(new_c, 'state')",
                            "Call"
                        ],
                        [
                            "l3_0_pre",
                            "variable"
                        ],
                        [
                            "c_prev * forget_gate + input_gate * new_input",
                            "BinOp"
                        ],
                        [
                            "k * new_c + (1 - k) * c_prev",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_2078": {
                "x": {
                    "value": "forget_gate + self._forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_2079": {
                "x": {
                    "value": "input_gate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_2079": {
                "x": {
                    "value": "new_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.tanh(_linear([x, h_prev], self._num_units, True))",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_2080": {
                "x": {
                    "value": "new_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.sigmoid(forget_gate + self._forget_bias) * cell",
                            "BinOp"
                        ],
                        [
                            "new_cell + math_ops.sigmoid(input_gate) * math_ops.tanh(new_input)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_2080": {
                "x": {
                    "value": "output_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.sigmoid(_linear(in_out_gate, self._num_units, True))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_2167": {
                "axis": {
                    "value": "shape_length - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat([inputs, h], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_2176": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_2296": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "self._initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_2345": {
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._norm(o, 'output')",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(array_ops.concat(o_parts, axis=1), bo)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_137": {
                "name_or_scope": {
                    "value": "gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "candidate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_239": {
                "c": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_units",
                            "Attribute"
                        ]
                    ]
                },
                "h": {
                    "value": "num_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_units if self._num_proj is None else self._num_proj",
                            "IfExp"
                        ],
                        [
                            "self._num_units if self._num_proj is None else self._num_proj",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_243": {
                "c": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_units",
                            "Attribute"
                        ]
                    ]
                },
                "h": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_units",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_initializer_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_433": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_456": {
                "a": {
                    "value": "cell_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat([inputs, m_prev], 1)",
                            "Call"
                        ],
                        [
                            "array_ops.concat([freq_inputs[fq], m_prev, m_prev_freq], 1)",
                            "Call"
                        ],
                        [
                            "array_ops.concat([freq_inputs[freq_index], m_prev_time, m_prev_freq], 1)",
                            "Call"
                        ],
                        [
                            "array_ops.concat([inputs, state], 1)",
                            "Call"
                        ],
                        [
                            "array_ops.concat([inputs, state], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "concat_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_concat_variable('W', [input_size.value + num_proj, 3 * self._num_units], dtype, self._num_unit_shards)",
                            "Call"
                        ],
                        [
                            "_get_concat_variable('W', [actual_input_size + 2 * self._num_units, 4 * self._num_units], dtype, self._num_unit_shards)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_648": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, 0, slice_offset], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, -slice_offset, 0], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_feat",
                            "variable"
                        ],
                        [
                            "_linear([inputs, attns], input_size, True)",
                            "Call"
                        ],
                        [
                            "_linear(inputs, self._num_units, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_700": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_730": {
                "variable": {
                    "value": "w_f_diag_timef",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_F_diag_timef_%d' % block",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_732": {
                "variable": {
                    "value": "w_f_diag_timet",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'W_F_diag_timet_%d' % block",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_764": {
                "a": {
                    "value": "cell_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat([inputs, m_prev], 1)",
                            "Call"
                        ],
                        [
                            "array_ops.concat([freq_inputs[fq], m_prev, m_prev_freq], 1)",
                            "Call"
                        ],
                        [
                            "array_ops.concat([freq_inputs[freq_index], m_prev_time, m_prev_freq], 1)",
                            "Call"
                        ],
                        [
                            "array_ops.concat([inputs, state], 1)",
                            "Call"
                        ],
                        [
                            "array_ops.concat([inputs, state], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "concat_w_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_concat_variable('W_f_%d' % block, [actual_input_size + 2 * self._num_units, num_gates * self._num_units], dtype, self._num_unit_shards)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_783": {
                "variable": {
                    "value": "(i_time, j_time, o_time)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "lstm_matrix_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_ops.bias_add(math_ops.matmul(cell_inputs, concat_w_t), b_t)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if self._couple_input_forget_gates else 4",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_787": {
                "variable": {
                    "value": "(i_time, j_time, f_time, o_time)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "lstm_matrix_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_ops.bias_add(math_ops.matmul(cell_inputs, concat_w_t), b_t)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if self._couple_input_forget_gates else 4",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_908": {
                "value": {
                    "value": "[0, 0, 0, slice_offset]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_964": {
                "variable": {
                    "value": "cur_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, 0, slice_offset], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, -slice_offset, 0], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_feat",
                            "variable"
                        ],
                        [
                            "_linear([inputs, attns], input_size, True)",
                            "Call"
                        ],
                        [
                            "_linear(inputs, self._num_units, True)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, start_index + slice_offset + f * self._frequency_skip]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_1067": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, 0, slice_offset], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, -slice_offset, 0], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_feat",
                            "variable"
                        ],
                        [
                            "_linear([inputs, attns], input_size, True)",
                            "Call"
                        ],
                        [
                            "_linear(inputs, self._num_units, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_1195": {
                "structure": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_cell_impl.LSTMStateTuple(c, m) if self._state_is_tuple else array_ops.concat([c, m], 1)",
                            "IfExp"
                        ],
                        [
                            "(new_state, new_attns, new_attn_states)",
                            "Tuple"
                        ],
                        [
                            "array_ops.concat(list(new_state), 1)",
                            "Call"
                        ],
                        [
                            "rnn_cell_impl.LSTMStateTuple(new_c, new_h)",
                            "Call"
                        ],
                        [
                            "rnn_cell_impl.LSTMStateTuple(new_c, new_m)",
                            "Call"
                        ],
                        [
                            "g * state + (1.0 - g) * c",
                            "BinOp"
                        ],
                        [
                            "gh * state + (1.0 - gh) * h",
                            "BinOp"
                        ],
                        [
                            "rnn_cell_impl.LSTMStateTuple(new_c, new_h)",
                            "Call"
                        ],
                        [
                            "rnn_cell_impl.LSTMStateTuple(new_cell, output)",
                            "Call"
                        ],
                        [
                            "rnn_cell_impl.LSTMStateTuple(c, m)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_1202": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_linear([cell_output, new_attns], self._attn_size, True)",
                            "Call"
                        ],
                        [
                            "math_ops.tanh(new_cell) * math_ops.sigmoid(output_gate)",
                            "BinOp"
                        ],
                        [
                            "array_ops.concat([output, inputs], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_1275": {
                "value": {
                    "value": "self._carry_bias_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_1287": {
                "x": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "transform_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('transform_w', [input_size, input_size])",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "transform_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('transform_b', [input_size], initializer=init_ops.constant_initializer(-self._carry_bias_init))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_1423": {
                "x": {
                    "value": "f + self._forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_1424": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_shards)",
                            "Call"
                        ],
                        [
                            "self._norm(i, 'input')",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(array_ops.concat(i_parts, axis=1), bi)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_1652": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_1755": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_1854": {
                "x": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_1855": {
                "x": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_1981": {
                "minval": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "period.initial_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_1985": {
                "value": {
                    "value": "self._ratio_on",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_2293": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, 0, slice_offset], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, -slice_offset, 0], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_feat",
                            "variable"
                        ],
                        [
                            "_linear([inputs, attns], input_size, True)",
                            "Call"
                        ],
                        [
                            "_linear(inputs, self._num_units, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_2304": {
                "variable": {
                    "value": "x_g_id",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self._get_input_for_group(inputs, group_id, self._group_shape[0]), self._get_input_for_group(m_prev, group_id, self._group_shape[0])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_2310": {
                "variable": {
                    "value": "(i_k, j_k, f_k, o_k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "R_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_linear(x_g_id, 4 * self._group_shape[1], bias=False)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_2338": {
                "values": {
                    "value": "i_parts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_2339": {
                "values": {
                    "value": "j_parts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_2340": {
                "values": {
                    "value": "f_parts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_2341": {
                "values": {
                    "value": "o_parts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_2343": {
                "x": {
                    "value": "f + self._forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_2344": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_shards)",
                            "Call"
                        ],
                        [
                            "self._norm(i, 'input')",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(array_ops.concat(i_parts, axis=1), bi)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_2344": {
                "x": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._norm(j, 'transform')",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(array_ops.concat(j_parts, axis=1), bj)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_2348": {
                "name_or_scope": {
                    "value": "projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_144": {
                "x": {
                    "value": "z_and_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_layer_norm(tf.matmul(state, w_h), scope='layer_norm/w_h') + _layer_norm(tf.matmul(inputs, w_x), scope='layer_norm/w_x')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_initializer_710": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_780": {
                "a": {
                    "value": "cell_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat([inputs, m_prev], 1)",
                            "Call"
                        ],
                        [
                            "array_ops.concat([freq_inputs[fq], m_prev, m_prev_freq], 1)",
                            "Call"
                        ],
                        [
                            "array_ops.concat([freq_inputs[freq_index], m_prev_time, m_prev_freq], 1)",
                            "Call"
                        ],
                        [
                            "array_ops.concat([inputs, state], 1)",
                            "Call"
                        ],
                        [
                            "array_ops.concat([inputs, state], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "concat_w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_concat_variable('W_t_%d' % block, [actual_input_size + 2 * self._num_units, num_gates * self._num_units], dtype, self._num_unit_shards)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_914": {
                "value": {
                    "value": "[0, 0, -slice_offset, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1228": {
                "tensor": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax(s)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._attn_length, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_1285": {
                "value": {
                    "value": "-self._carry_bias_init",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_1531": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mod_1918": {
                "x1": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_linear(query, self._attn_vec_size, True)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(y, [-1, 1, 1, self._attn_vec_size])",
                            "Call"
                        ],
                        [
                            "self._y_activation(y_act)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_2303": {
                "name_or_scope": {
                    "value": "'group%d' % group_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_2321": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_2326": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_2331": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_2336": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "freq_inputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "inputs.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_142": {
                "a": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.slice(states, [0, 0], [-1, self._cell.state_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_h', [num_units, 2 * num_units])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_143": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, 0, slice_offset], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, -slice_offset, 0], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_feat",
                            "variable"
                        ],
                        [
                            "_linear([inputs, attns], input_size, True)",
                            "Call"
                        ],
                        [
                            "_linear(inputs, self._num_units, True)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_x', [input_dim, 2 * num_units])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_151": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, 0, slice_offset], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "array_ops.pad(input_feat, array_ops.constant([0, 0, -slice_offset, 0], shape=[2, 2], dtype=dtypes.int32), 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input_feat",
                            "variable"
                        ],
                        [
                            "_linear([inputs, attns], input_size, True)",
                            "Call"
                        ],
                        [
                            "_linear(inputs, self._num_units, True)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [input_dim, num_units])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_1761": {
                "name_or_scope": {
                    "value": "in_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_150": {
                "a": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.slice(states, [0, 0], [-1, self._cell.state_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('u', [num_units, num_units])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "seq2seq/contrib/rnn_cell.py": {
        "tensorflow": {
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "scope or 'extended_multi_rnn_cell'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "concat_125": {
                "values": {
                    "value": "new_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple(new_states) if self._state_is_tuple else array_ops.concat(new_states, 1)",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "'cell_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_116": {
                "variable": {
                    "value": "combined_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(input_to_combine)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_119": {
                "variable": {
                    "value": "next_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[next_input] + input_to_combine",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_116": {
                "values": {
                    "value": "input_to_combine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_inputs[-1:]",
                            "Subscript"
                        ],
                        [
                            "prev_inputs",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "seq2seq/contrib/seq2seq/decoder.py": {
        "tensorflow": {
            "rank_69": {
                "variable": {
                    "value": "x_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_70": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "array_ops.concat(([1, 0], math_ops.range(2, x_rank)), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_structure_140": {
                "func": {
                    "value": "_create",
                    "type": "variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_201": {
                "variable": {
                    "value": "initial_time",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_structure_219": {
                "variable": {
                    "value": "initial_outputs_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_create_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "decoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "decoder.output_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_279": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[initial_time, initial_outputs_ta, initial_state, initial_inputs, initial_finished]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "parallel_iterations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "swap_memory": {
                    "value": "swap_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_structure_292": {
                "variable": {
                    "value": "final_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda ta: ta.stack()",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "final_outputs_ta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_71": {
                "values": {
                    "value": "([1, 0], math_ops.range(2, x_rank))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_74": {
                "dims": {
                    "value": "[x_static_shape[1].value, x_static_shape[0].value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_74": {
                "arys": {
                    "value": "x_static_shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "shape": {
                    "value": "array_ops.concat(([batch_size], _t(s)), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "scope or 'decoder'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_187": {
                "variable": {
                    "value": "maximum_iterations",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "maximum_iterations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(maximum_iterations, dtype=dtypes.int32, name='maximum_iterations')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "maximum_iterations",
                    "type": "str",
                    "possible_values": []
                }
            },
            "logical_or_199": {
                "variable": {
                    "value": "initial_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "initial_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.logical_or(initial_finished, 0 >= maximum_iterations)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0 >= maximum_iterations",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_or_241": {
                "variable": {
                    "value": "next_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "decoder_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "map_structure_275": {
                "variable": {
                    "value": "outputs_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda ta, out: ta.write(time, out)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "outputs_ta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda ta, out: ta.write(time, out), outputs_ta, emit)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "emit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda out, zero: array_ops.where(finished, zero, out), next_outputs, zero_outputs)",
                            "Call"
                        ],
                        [
                            "next_outputs",
                            "variable"
                        ]
                    ]
                }
            },
            "map_structure_294": {
                "variable": {
                    "value": "final_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_transpose_batch_time",
                    "type": "variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "final_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda ta: ta.stack(), final_outputs_ta)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, final_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_130": {
                "value": {
                    "value": "tensor_shape.TensorShape(s).as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "zero_suffix_shape",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_137": {
                "values": {
                    "value": "([batch_size], _t(s))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_value_207": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "pylist": {
                    "value": "ops.convert_to_tensor(batch_size, name='batch_size')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorArray_213": {
                "dtype": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "element_shape": {
                    "value": "_shape(decoder.batch_size, s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_224": {
                "x": {
                    "value": "math_ops.reduce_all(finished)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_or_243": {
                "variable": {
                    "value": "next_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.logical_or(decoder_finished, finished)",
                            "Call"
                        ],
                        [
                            "math_ops.logical_or(next_finished, time + 1 >= maximum_iterations)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "time + 1 >= maximum_iterations",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "assert_same_structure_246": {
                "nest1": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "nest2": {
                    "value": "decoder_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assert_same_structure_247": {
                "nest1": {
                    "value": "outputs_ta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda ta, out: ta.write(time, out), outputs_ta, emit)",
                            "Call"
                        ]
                    ]
                },
                "nest2": {
                    "value": "next_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assert_same_structure_248": {
                "nest1": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "nest2": {
                    "value": "next_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "map_structure_252": {
                "variable": {
                    "value": "emit",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda out, zero: array_ops.where(finished, zero, out)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "next_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "zero_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_create_zero_outputs(decoder.output_size, decoder.output_dtype, decoder.batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_structure_270": {
                "variable": {
                    "value": "next_state",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_maybe_copy_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "decoder_state",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorShape_131": {
                "dims": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorShape_205": {
                "dims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "TensorShape_210": {
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_210": {
                "arys": {
                    "value": "from_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_all_224": {
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_208": {
                "value": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_util.constant_value(ops.convert_to_tensor(batch_size, name='batch_size'))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_267": {
                "condition": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cur",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "new",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_253": {
                "condition": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/contrib/seq2seq/helper.py": {
        "tensorflow": {
            "TensorArray_63": {
                "dtype": {
                    "value": "inp.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "array_ops.shape(inp)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "element_shape": {
                    "value": "inp.get_shape()[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unstack_63": {
                "value": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_474": {
                "variable": {
                    "value": "self._start_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "start_tokens",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_476": {
                "variable": {
                    "value": "self._end_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "end_token",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_token",
                    "type": "str",
                    "possible_values": []
                }
            },
            "size_480": {
                "variable": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tile_490": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[False]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self._batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_500": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.argmax(outputs, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_507": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(math_ops.argmax(outputs, axis=-1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(math_ops.argmax(outputs, axis=-1), dtypes.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._end_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_508": {
                "variable": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.equal(0, self._sequence_length)",
                            "Call"
                        ],
                        [
                            "next_time >= self._sequence_length",
                            "Compare"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "math_ops.equal(sample_ids, self._end_token)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_509": {
                "variable": {
                    "value": "next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : self._start_inputs",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self._embedding_fn(sample_ids)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "convert_to_tensor_157": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_structure_161": {
                "variable": {
                    "value": "self._input_tas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "_unstack_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_162": {
                "variable": {
                    "value": "self._sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "sequence_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_structure_169": {
                "variable": {
                    "value": "self._zero_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda inp: array_ops.zeros_like(inp[0, :])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ]
                    ]
                }
            },
            "size_172": {
                "variable": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_180": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "self._sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_181": {
                "variable": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.equal(0, self._sequence_length)",
                            "Call"
                        ],
                        [
                            "next_time >= self._sequence_length",
                            "Compare"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "math_ops.equal(sample_ids, self._end_token)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_182": {
                "variable": {
                    "value": "next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : self._zero_inputs",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : nest.map_structure(lambda inp: inp.read(0), self._input_tas)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_189": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.argmax(outputs, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_199": {
                "variable": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.equal(0, self._sequence_length)",
                            "Call"
                        ],
                        [
                            "next_time >= self._sequence_length",
                            "Compare"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "math_ops.equal(sample_ids, self._end_token)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_202": {
                "variable": {
                    "value": "next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : self._zero_inputs",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : nest.map_structure(read_from_ta, self._input_tas)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "convert_to_tensor_243": {
                "variable": {
                    "value": "self._sampling_probability",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "sampling_probability",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "sampling_probability",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Categorical_267": {
                "variable": {
                    "value": "sample_id_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_all_304": {
                "variable": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.equal(0, self._sequence_length)",
                            "Call"
                        ],
                        [
                            "next_time >= self._sequence_length",
                            "Compare"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "math_ops.equal(sample_ids, self._end_token)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_305": {
                "variable": {
                    "value": "next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : base_next_inputs",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "maybe_sample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_343": {
                "variable": {
                    "value": "self._sampling_probability",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "sampling_probability",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "sampling_probability",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Bernoulli_387": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "self._sampling_probability",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_443": {
                "variable": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.equal(0, self._sequence_length)",
                            "Call"
                        ],
                        [
                            "next_time >= self._sequence_length",
                            "Compare"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "math_ops.equal(sample_ids, self._end_token)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_444": {
                "variable": {
                    "value": "next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : base_next_inputs",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "maybe_sample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_119": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "size_122": {
                "variable": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.equal(0, self._sequence_length)",
                            "Call"
                        ],
                        [
                            "next_time >= self._sequence_length",
                            "Compare"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "math_ops.equal(sample_ids, self._end_token)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_126": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_131": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_156": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_structure_159": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_transpose_batch_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder._transpose_batch_time",
                            "Attribute"
                        ]
                    ]
                },
                "*structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_179": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_188": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_195": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_236": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_261": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_268": {
                "condition": {
                    "value": "select_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sampling_probability > select_sample_noise",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "sample_id_sampler.sample(seed=self._seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "array_ops.tile([-1], [self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_274": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_286": {
                "variable": {
                    "value": "where_sampling",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "array_ops.where(sample_ids > -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_288": {
                "variable": {
                    "value": "where_not_sampling",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "array_ops.where(sample_ids <= -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_290": {
                "variable": {
                    "value": "where_sampling_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "where_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(array_ops.where(sample_ids > -1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(array_ops.where(sample_ids), dtypes.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_291": {
                "variable": {
                    "value": "where_not_sampling_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "where_not_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(array_ops.where(sample_ids <= -1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(array_ops.where(math_ops.logical_not(sample_ids)), dtypes.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_292": {
                "variable": {
                    "value": "sample_ids_sampling",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(math_ops.argmax(outputs, axis=-1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(math_ops.argmax(outputs, axis=-1), dtypes.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "where_sampling_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(where_sampling, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_293": {
                "variable": {
                    "value": "inputs_not_sampling",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "base_next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "where_not_sampling_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(where_not_sampling, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_296": {
                "variable": {
                    "value": "base_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "base_next_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_341": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_353": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_354": {
                "variable": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(auxiliary_inputs, name='auxiliary_inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, auxiliary_inputs)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta: ta.read(next_time), self._auxiliary_input_tas)",
                            "Call"
                        ],
                        [
                            "array_ops.gather_nd(auxiliary_inputs, indices)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "auxiliary_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_structure_356": {
                "variable": {
                    "value": "maybe_concatenated_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x, y: array_ops.concat((x, y), -1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(auxiliary_inputs, name='auxiliary_inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, auxiliary_inputs)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta: ta.read(next_time), self._auxiliary_input_tas)",
                            "Call"
                        ],
                        [
                            "array_ops.gather_nd(auxiliary_inputs, indices)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_385": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_388": {
                "x": {
                    "value": "sampler.sample(sample_shape=self.batch_size, seed=self._seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_393": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_425": {
                "variable": {
                    "value": "where_sampling",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "array_ops.where(sample_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_427": {
                "variable": {
                    "value": "where_not_sampling",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "array_ops.where(math_ops.logical_not(sample_ids))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_429": {
                "variable": {
                    "value": "outputs_sampling",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "where_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(array_ops.where(sample_ids > -1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(array_ops.where(sample_ids), dtypes.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_430": {
                "variable": {
                    "value": "inputs_not_sampling",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "base_next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "where_not_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(array_ops.where(sample_ids <= -1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(array_ops.where(math_ops.logical_not(sample_ids)), dtypes.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_435": {
                "variable": {
                    "value": "base_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "base_next_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_501": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_190": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_271": {
                "input": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_360": {
                "variable": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_transpose_batch_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder._transpose_batch_time",
                            "Attribute"
                        ]
                    ]
                },
                "*structure": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(auxiliary_inputs, name='auxiliary_inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, auxiliary_inputs)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta: ta.read(next_time), self._auxiliary_input_tas)",
                            "Call"
                        ],
                        [
                            "array_ops.gather_nd(auxiliary_inputs, indices)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_structure_364": {
                "func": {
                    "value": "_unstack_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(auxiliary_inputs, name='auxiliary_inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, auxiliary_inputs)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta: ta.read(next_time), self._auxiliary_input_tas)",
                            "Call"
                        ],
                        [
                            "array_ops.gather_nd(auxiliary_inputs, indices)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_structure_412": {
                "variable": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda ta: ta.read(next_time)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._auxiliary_input_tas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_472": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_170": {
                "input": {
                    "value": "inp[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "map_structure_184": {
                "func": {
                    "value": "lambda inp: inp.read(0)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._input_tas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_structure_204": {
                "func": {
                    "value": "read_from_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._input_tas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_242": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_287": {
                "condition": {
                    "value": "sample_ids > -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_289": {
                "condition": {
                    "value": "sample_ids <= -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "scatter_nd_297": {
                "indices": {
                    "value": "where_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(array_ops.where(sample_ids > -1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(array_ops.where(sample_ids), dtypes.int32)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "sampled_next_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._embedding_fn(sample_ids_sampling)",
                            "Call"
                        ],
                        [
                            "maybe_concatenate_auxiliary_inputs(self._next_input_layer(outputs_sampling), where_sampling)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "base_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.shape(base_next_inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.shape(base_next_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_nd_300": {
                "indices": {
                    "value": "where_not_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(array_ops.where(sample_ids <= -1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(array_ops.where(math_ops.logical_not(sample_ids)), dtypes.int32)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "inputs_not_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.gather(base_next_inputs, where_not_sampling_flat)",
                            "Call"
                        ],
                        [
                            "array_ops.gather_nd(base_next_inputs, where_not_sampling)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "base_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.shape(base_next_inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.shape(base_next_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_415": {
                "variable": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(auxiliary_inputs, name='auxiliary_inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, auxiliary_inputs)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta: ta.read(next_time), self._auxiliary_input_tas)",
                            "Call"
                        ],
                        [
                            "array_ops.gather_nd(auxiliary_inputs, indices)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_structure_416": {
                "func": {
                    "value": "lambda x, y: array_ops.concat((x, y), -1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "outputs_",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(auxiliary_inputs, name='auxiliary_inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, auxiliary_inputs)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta: ta.read(next_time), self._auxiliary_input_tas)",
                            "Call"
                        ],
                        [
                            "array_ops.gather_nd(auxiliary_inputs, indices)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_421": {
                "condition": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(math_ops.argmax(outputs, axis=-1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(math_ops.argmax(outputs, axis=-1), dtypes.int32)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "maybe_concatenate_auxiliary_inputs(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "base_next_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_426": {
                "condition": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(math_ops.argmax(outputs, axis=-1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(math_ops.argmax(outputs, axis=-1), dtypes.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_428": {
                "condition": {
                    "value": "math_ops.logical_not(sample_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scatter_nd_436": {
                "indices": {
                    "value": "where_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(array_ops.where(sample_ids > -1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(array_ops.where(sample_ids), dtypes.int32)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "sampled_next_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._embedding_fn(sample_ids_sampling)",
                            "Call"
                        ],
                        [
                            "maybe_concatenate_auxiliary_inputs(self._next_input_layer(outputs_sampling), where_sampling)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "base_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.shape(base_next_inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.shape(base_next_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_nd_439": {
                "indices": {
                    "value": "where_not_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(array_ops.where(sample_ids <= -1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(array_ops.where(math_ops.logical_not(sample_ids)), dtypes.int32)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "inputs_not_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.gather(base_next_inputs, where_not_sampling_flat)",
                            "Call"
                        ],
                        [
                            "array_ops.gather_nd(base_next_inputs, where_not_sampling)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "base_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.shape(base_next_inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.shape(base_next_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_64": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_357": {
                "values": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logical_not_428": {
                "x": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(math_ops.argmax(outputs, axis=-1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(math_ops.argmax(outputs, axis=-1), dtypes.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_417": {
                "values": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/contrib/training/basic_session_run_hooks.py": {
        "tensorflow": {
            "get_default_graph_807": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_global_step_297": {
                "variable": {
                    "value": "self._global_step_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_415": {
                "variable": {
                    "value": "self._summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "self._checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_global_step_416": {
                "variable": {
                    "value": "self._global_step_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_515": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self._var_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_global_step_549": {
                "variable": {
                    "value": "self._global_step_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_global_step_656": {
                "variable": {
                    "value": "self._global_step_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_global_step_734": {
                "variable": {
                    "value": "self._global_step_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SessionRunArgs_307": {
                "fetches": {
                    "value": "self._global_step_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_401": {
                "msg": {
                    "value": "Create CheckpointSaverHook.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_graph_433": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SessionRunArgs_440": {
                "fetches": {
                    "value": "self._global_step_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_457": {
                "msg": {
                    "value": "Saving checkpoints for %d into %s.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self._save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_510": {
                "msg": {
                    "value": "Create CheckpointRestorerHook.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_548": {
                "variable": {
                    "value": "self._summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "self._output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SessionRunArgs_556": {
                "fetches": {
                    "value": "self._global_step_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SessionRunArgs_596": {
                "fetches": {
                    "value": "self._loss_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_654": {
                "variable": {
                    "value": "self._summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "self._output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SessionRunArgs_670": {
                "fetches": {
                    "value": "requests",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'global_step': self._global_step_tensor}",
                            "Dict"
                        ]
                    ]
                }
            },
            "info_747": {
                "msg": {
                    "value": "Waiting for global step %d before starting training.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._wait_until_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SessionRunArgs_801": {
                "fetches": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "self.feed_fn()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SessionRunArgs_234": {
                "fetches": {
                    "value": "self._current_tensors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_243": {
                "msg": {
                    "value": "self._formatter(tensor_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "write_graph_428": {
                "graph_or_graph_def": {
                    "value": "ops.get_default_graph().as_graph_def(add_shapes=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self._checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "graph.pbtxt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_global_step_449": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SessionLog_464": {
                "status": {
                    "value": "SessionLog.CHECKPOINT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint_path": {
                    "value": "self._save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_249": {
                "msg": {
                    "value": "%s (%.3f sec)",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "', '.join(stats)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "elapsed_secs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "current_time - self._last_triggered_time",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_251": {
                "msg": {
                    "value": "%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "', '.join(stats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_graph_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_521": {
                "msg": {
                    "value": "Restoring params from file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_524": {
                "msg": {
                    "value": "Finished restoring",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Summary_568": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[Summary.Value(tag=self._summary_tag, simple_value=steps_per_sec)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "info_571": {
                "msg": {
                    "value": "%s: %g",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._summary_tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "steps_per_sec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "elapsed_steps / elapsed_time",
                            "BinOp"
                        ]
                    ]
                }
            },
            "error_602": {
                "msg": {
                    "value": "failure_message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Model diverged with loss = NaN.'",
                            "str"
                        ]
                    ]
                }
            },
            "warning_605": {
                "msg": {
                    "value": "failure_message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Model diverged with loss = NaN.'",
                            "str"
                        ]
                    ]
                }
            },
            "SessionLog_681": {
                "status": {
                    "value": "SessionLog.START",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_756": {
                "msg": {
                    "value": "Waiting for global step %d before starting training. Current step is %d.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._wait_until_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "current_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_context.session.run(self._global_step_tensor)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "seq2seq/data/ToTfRecord.py": {
        "tensorflow": {
            "Feature_6": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_11": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_17": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_55": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'source': _string_feature(source[i]), 'target': _string_feature(target[i]), 'image': _bytes_feature(encoded_image)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_50": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "tfrecords_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dir_txt + '/' + out_dir + '/' + 'dataset_' + mode + str(int(i / num_per_file)) + '.tfrecords'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BytesList_6": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_11": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_17": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FastGFile_52": {
                "name": {
                    "value": "dir_img + '/' + img[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Features_55": {
                "feature": {
                    "value": "{'source': _string_feature(source[i]), 'target': _string_feature(target[i]), 'image': _bytes_feature(encoded_image)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/data/ToTfRecord2.py": {
        "tensorflow": {
            "Feature_6": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_11": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_17": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_55": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'source': _string_feature(source[i]), 'target': _string_feature(target[i]), 'image': _bytes_feature(encoded_image)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_50": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "tfrecords_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dir_txt + '/' + out_dir + '/' + 'dataset_' + mode + str(int(i / num_per_file)) + '.tfrecords'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BytesList_6": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_11": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_17": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FastGFile_52": {
                "name": {
                    "value": "dir_img + '/' + img[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Features_55": {
                "feature": {
                    "value": "{'source': _string_feature(source[i]), 'target': _string_feature(target[i]), 'image': _bytes_feature(encoded_image)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/data/inception_preprocessing.py": {
        "tensorflow": {
            "sample_distorted_bounding_box_141": {
                "variable": {
                    "value": "sample_distorted_bounding_box",
                    "type": "variable",
                    "possible_values": []
                },
                "image_size": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "min_object_covered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "aspect_ratio_range": {
                    "value": "aspect_ratio_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.75",
                            "Method Argument"
                        ]
                    ]
                },
                "area_range": {
                    "value": "area_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.05",
                            "Method Argument"
                        ]
                    ]
                },
                "max_attempts": {
                    "value": "max_attempts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "slice_152": {
                "variable": {
                    "value": "cropped_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "bbox_begin",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "bbox_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "draw_bounding_boxes_195": {
                "variable": {
                    "value": "image_with_box",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "draw_bounding_boxes_204": {
                "variable": {
                    "value": "image_with_distorted_box",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "distorted_bbox",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "random_flip_left_right_227": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_238": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_239": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "subtract_279": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_280": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_40": {
                "inputs": {
                    "value": "[func(control_flow_ops.switch(x, tf.equal(sel, case))[1], case) for case in range(num_cases)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_96": {
                "t": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_130": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_186": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_188": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_192": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_265": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_image_dtype_267": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "central_crop_271": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "central_fraction": {
                    "value": "central_fraction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.875",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_275": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_276": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_278": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_brightness_66": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_67": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_saturation_69": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_70": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_brightness_73": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_74": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_75": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_76": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_195": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_198": {
                "name": {
                    "value": "image_with_bounding_boxes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image_with_box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.draw_bounding_boxes(tf.expand_dims(image, 0), bbox)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_205": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_207": {
                "name": {
                    "value": "images_with_distorted_bounding_box",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image_with_distorted_box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.draw_bounding_boxes(tf.expand_dims(image, 0), distorted_bbox)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_223": {
                "name": {
                    "value": "cropped_resized_image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_236": {
                "name": {
                    "value": "final_distorted_image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_saturation_78": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_79": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_contrast_80": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_81": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_224": {
                "input": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_237": {
                "input": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_contrast_83": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_84": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_85": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_86": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_88": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_saturation_89": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_90": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_91": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_41": {
                "x": {
                    "value": "sel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=num_cases, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "case",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/data/input_pipeline.py": {
        "tensorflow": {
            "Dataset_155": {
                "variable": {
                    "value": "dataset_source",
                    "type": "variable",
                    "possible_values": []
                },
                "data_sources": {
                    "value": "self.params['source_files']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reader": {
                    "value": "tf.TextLineReader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decoder": {
                    "value": "decoder_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_tokens_decoder.SplitTokensDecoder(tokens_feature_name='source_tokens', length_feature_name='source_len', append_token='SEQUENCE_END', delimiter=self.params['source_delimiter'])",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "items_to_descriptions": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Dataset_277": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "data_sources": {
                    "value": "self.params['files']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reader": {
                    "value": "tf.TFRecordReader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decoder": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfexample_decoder.TFExampleDecoder(keys_to_features, items_to_handlers)",
                            "Call"
                        ],
                        [
                            "TFSEquenceExampleDecoder(context_keys_to_features, sequence_keys_to_features, items_to_handlers)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "items_to_descriptions": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Dataset_360": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "data_sources": {
                    "value": "self.params['files']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reader": {
                    "value": "tf.TFRecordReader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decoder": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfexample_decoder.TFExampleDecoder(keys_to_features, items_to_handlers)",
                            "Call"
                        ],
                        [
                            "TFSEquenceExampleDecoder(context_keys_to_features, sequence_keys_to_features, items_to_handlers)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "items_to_descriptions": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Dataset_171": {
                "variable": {
                    "value": "dataset_target",
                    "type": "variable",
                    "possible_values": []
                },
                "data_sources": {
                    "value": "self.params['target_files']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reader": {
                    "value": "tf.TextLineReader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decoder": {
                    "value": "decoder_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_tokens_decoder.SplitTokensDecoder(tokens_feature_name='target_tokens', length_feature_name='target_len', prepend_token='SEQUENCE_START', append_token='SEQUENCE_END', delimiter=self.params['target_delimiter'])",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "items_to_descriptions": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FixedLenFeature_245": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_246": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_247": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_330": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_332": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "self.params['image_format']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_337": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_339": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_349": {
                "op": {
                    "value": "self.params['caption_ids_field']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_351": {
                "op": {
                    "value": "self.params['caption_tokens_field']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "size_354": {
                "input": {
                    "value": "x[self.params['caption_tokens_field']]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/data/parallel_data_provider.py": {
        "tensorflow": {
            "Dataset_59": {
                "variable": {
                    "value": "dataset_source",
                    "type": "variable",
                    "possible_values": []
                },
                "data_sources": {
                    "value": "data_sources_source",
                    "type": "variable",
                    "possible_values": []
                },
                "reader": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.TextLineReader",
                            "Method Argument"
                        ]
                    ]
                },
                "decoder": {
                    "value": "decoder_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_tokens_decoder.SplitTokensDecoder(tokens_feature_name='source_tokens', length_feature_name='source_len', append_token='SEQUENCE_END', delimiter=source_delimiter)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "items_to_descriptions": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Dataset_75": {
                "variable": {
                    "value": "dataset_target",
                    "type": "variable",
                    "possible_values": []
                },
                "data_sources": {
                    "value": "data_sources_target",
                    "type": "variable",
                    "possible_values": []
                },
                "reader": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.TextLineReader",
                            "Method Argument"
                        ]
                    ]
                },
                "decoder": {
                    "value": "decoder_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split_tokens_decoder.SplitTokensDecoder(tokens_feature_name='target_tokens', length_feature_name='target_len', prepend_token='SEQUENCE_START', append_token='SEQUENCE_END', delimiter=target_delimiter)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "items_to_descriptions": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "RandomShuffleQueue_141": {
                "variable": {
                    "value": "shuffle_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "common_queue_capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4096",
                            "Method Argument"
                        ]
                    ]
                },
                "min_after_dequeue": {
                    "value": "common_queue_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "dtypes": {
                    "value": "[tf.string, tf.string]",
                    "type": "List",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(1000000000.0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_queue_runner_148": {
                "qr": {
                    "value": "tf.train.QueueRunner(shuffle_queue, enqueue_ops)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "QueueRunner_149": {
                "queue": {
                    "value": "shuffle_queue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.RandomShuffleQueue(capacity=common_queue_capacity, min_after_dequeue=common_queue_min, dtypes=[tf.string, tf.string], seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "enqueue_ops": {
                    "value": "enqueue_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "seq2seq/data/sequence_example_decoder.py": {
        "tensorflow": {
            "parse_single_sequence_example_63": {
                "variable": {
                    "value": "(context, sequence)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "context_features": {
                    "value": "self._context_keys_to_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_features": {
                    "value": "self._sequence_keys_to_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "example[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "example[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "value.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/data/split_tokens_decoder.py": {
        "tensorflow": {
            "decode_jpeg_67": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_image_dtype_68": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image, self.height, self.width, self.resize_side_min, self.resize_side_max)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image, self.height, self.width, self.resize_side_min)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "size_125": {
                "variable": {
                    "value": "decoded_items[self.length_feature_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.string_split([data], delimiter=self.delimiter).values",
                            "Attribute"
                        ],
                        [
                            "tf.concat([[self.prepend_token], tokens], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tokens, [self.append_token]], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_119": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[self.prepend_token], tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_123": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tokens, [self.append_token]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "string_split_115": {
                "source": {
                    "value": "[data]",
                    "type": "List",
                    "possible_values": []
                },
                "delimiter": {
                    "value": "self.delimiter",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/data/vgg_preprocessing.py": {
        "tensorflow": {
            "shape_27": {
                "variable": {
                    "value": "original_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "Assert_29": {
                "variable": {
                    "value": "rank_assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(tf.rank(image), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Rank of image must be equal to 3.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_35": {
                "variable": {
                    "value": "size_assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(original_shape[0], crop_height), tf.greater_equal(original_shape[1], crop_width))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Crop size greater than the image size.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_41": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([offset_height, offset_width, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Assert_84": {
                "variable": {
                    "value": "crop_size_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(image_height, crop_height), tf.greater_equal(image_width, crop_width))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Crop size greater than the image size.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_173": {
                "variable": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_192": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_194": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_195": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_196": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_198": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(height, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : smallest_side / width",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : smallest_side / height",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "to_int32_201": {
                "variable": {
                    "value": "new_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_202": {
                "variable": {
                    "value": "new_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_215": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_217": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_221": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_222": {
                "variable": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[new_height, new_width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_224": {
                "variable": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(image, [new_height, new_width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_258": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_flip_left_right_259": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_282": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_33": {
                "variable": {
                    "value": "cropped_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[crop_height, crop_width, original_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_46": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.stack([offset_height, offset_width, 0]))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "cropped_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([crop_height, crop_width, original_shape[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_47": {
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "cropped_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([crop_height, crop_width, original_shape[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_73": {
                "variable": {
                    "value": "image_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Assert_74": {
                "variable": {
                    "value": "rank_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(image_rank, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong rank for tensor  %s [expected] [actual]', image_list[i].name, 3, image_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_81": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Assert_100": {
                "variable": {
                    "value": "height_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(height, image_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong height for tensor %s [expected][actual]', image.name, height, image_height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_104": {
                "variable": {
                    "value": "width_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(width, image_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong width for tensor %s [expected][actual]', image.name, width, image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "max_offset_height",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_height - crop_height + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "max_offset_width",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_width - crop_width + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_176": {
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=2, num_or_size_splits=num_channels, value=image)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_30": {
                "x": {
                    "value": "tf.rank(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_32": {
                "control_inputs": {
                    "value": "[rank_assertion]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_36": {
                "x": {
                    "value": "tf.greater_equal(original_shape[0], crop_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(original_shape[1], crop_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_41": {
                "values": {
                    "value": "[offset_height, offset_width, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_45": {
                "control_inputs": {
                    "value": "[size_assertion]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_80": {
                "control_inputs": {
                    "value": "[rank_assertions[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_85": {
                "x": {
                    "value": "tf.greater_equal(image_height, crop_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(image_width, crop_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_96": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_115": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[rank_assertions[0], crop_size_assert]",
                            "List"
                        ]
                    ]
                }
            },
            "control_dependencies_117": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[rank_assertions[0], crop_size_assert]",
                            "List"
                        ]
                    ]
                }
            },
            "greater_198": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "image_250": {
                "name": {
                    "value": "image0",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_264": {
                "name": {
                    "value": "image1",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rank_30": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_37": {
                "x": {
                    "value": "original_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "greater_equal_38": {
                "x": {
                    "value": "original_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_75": {
                "x": {
                    "value": "image_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rank(image_list[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_86": {
                "x": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "greater_equal_87": {
                "x": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_95": {
                "control_inputs": {
                    "value": "[rank_assertions[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_101": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_105": {
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_140": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_141": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_250": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_264": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/data/vocab.py": {
        "tensorflow": {
            "constant_104": {
                "variable": {
                    "value": "vocab_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list((line.strip('\\n') for line in file))",
                            "Call"
                        ],
                        [
                            "list(vocab)",
                            "Call"
                        ],
                        [
                            "vocab + list(special_vocab._fields)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_105": {
                "variable": {
                    "value": "count_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[float(_) for _ in counts]",
                            "ListComp"
                        ],
                        [
                            "[-1.0 for _ in vocab]",
                            "ListComp"
                        ],
                        [
                            "counts + [-1.0 for _ in list(special_vocab._fields)]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_106": {
                "variable": {
                    "value": "vocab_idx_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KeyValueTensorInitializer_109": {
                "variable": {
                    "value": "id_to_vocab_init",
                    "type": "variable",
                    "possible_values": []
                },
                "keys": {
                    "value": "vocab_idx_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(vocab_size, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "vocab_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(vocab)",
                            "Call"
                        ]
                    ]
                },
                "key_dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value_dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "HashTable_111": {
                "variable": {
                    "value": "id_to_vocab_table",
                    "type": "variable",
                    "possible_values": []
                },
                "key_dtype": {
                    "value": "id_to_vocab_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.lookup.KeyValueTensorInitializer(vocab_idx_tensor, vocab_tensor, tf.int64, tf.string)",
                            "Call"
                        ]
                    ]
                },
                "value_dtype": {
                    "value": "UNK",
                    "type": "str",
                    "possible_values": []
                }
            },
            "KeyValueTensorInitializer_114": {
                "variable": {
                    "value": "vocab_to_id_init",
                    "type": "variable",
                    "possible_values": []
                },
                "keys": {
                    "value": "vocab_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(vocab)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "vocab_idx_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(vocab_size, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "key_dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value_dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "HashTable_116": {
                "variable": {
                    "value": "vocab_to_id_table",
                    "type": "variable",
                    "possible_values": []
                },
                "key_dtype": {
                    "value": "vocab_to_id_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.lookup.KeyValueTensorInitializer(vocab_tensor, vocab_idx_tensor, tf.string, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "value_dtype": {
                    "value": "default_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "special_vocab.UNK",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "KeyValueTensorInitializer_120": {
                "variable": {
                    "value": "word_to_count_init",
                    "type": "variable",
                    "possible_values": []
                },
                "keys": {
                    "value": "vocab_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(vocab)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "count_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(counts, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "key_dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value_dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "HashTable_122": {
                "variable": {
                    "value": "word_to_count_table",
                    "type": "variable",
                    "possible_values": []
                },
                "key_dtype": {
                    "value": "word_to_count_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.lookup.KeyValueTensorInitializer(vocab_tensor, count_tensor, tf.string, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value_dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "info_102": {
                "msg": {
                    "value": "Creating vocabulary lookup table of size %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((1 for _ in file))",
                            "Call"
                        ],
                        [
                            "len(vocab)",
                            "Call"
                        ],
                        [
                            "vocab_size + len(special_vocab)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "GFile_51": {
                "name": {
                    "value": "vocab_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Exists_77": {
                "filename": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GFile_81": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/decoders/attention.py": {
        "tensorflow": {
            "reduce_sum_40": {
                "input_tensor": {
                    "value": "v_att * tf.tanh(keys + tf.expand_dims(query, 1))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_46": {
                "input_tensor": {
                    "value": "keys * tf.expand_dims(query, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_115": {
                "variable": {
                    "value": "scores_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "tf.to_int32(values_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.to_int32(num_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_122": {
                "variable": {
                    "value": "scores_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score_fn(att_keys, att_query)",
                            "Call"
                        ],
                        [
                            "scores * scores_mask + (1.0 - scores_mask) * tf.float32.min",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "scores_normalized",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_127": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(scores_normalized, 2) * values",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(context, 1, name='context')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "context",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_148": {
                "variable": {
                    "value": "v_att",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "v_att",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.params['num_units']]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_40": {
                "x": {
                    "value": "keys + tf.expand_dims(query, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_114": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score_fn(att_keys, att_query)",
                            "Call"
                        ],
                        [
                            "scores * scores_mask + (1.0 - scores_mask) * tf.float32.min",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_126": {
                "input": {
                    "value": "scores_normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores, name='scores_normalized')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_116": {
                "x": {
                    "value": "values_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_int32_117": {
                "x": {
                    "value": "num_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(scores)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_40": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/decoders/attention_decoder.py": {
        "tensorflow": {
            "zeros_107": {
                "variable": {
                    "value": "attention_context",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(first_inputs)[0], self.attention_values.get_shape().as_list()[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_111": {
                "variable": {
                    "value": "first_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[first_inputs, attention_context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_129": {
                "variable": {
                    "value": "deep_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.concat([inputs, cell_output, attention_context], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_params['dropout_deep_output_layer']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_179": {
                "variable": {
                    "value": "w_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(inputs=self.image_features, num_outputs=int(self.attention_values.shape[2]), activation_fn=tf.nn.tanh, scope='W_img')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_img, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_181": {
                "variable": {
                    "value": "self.attention_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.attention_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "w_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(inputs=self.image_features, num_outputs=int(self.attention_values.shape[2]), activation_fn=tf.nn.tanh, scope='W_img')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(w_img, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_159": {
                "variable": {
                    "value": "next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[next_inputs, outputs.attention_context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_sequence_198": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reverse_sequence(input=attention_scores, seq_lengths=self.reverse_scores_lengths, seq_dim=1, batch_dim=0)",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "self.reverse_scores_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seq_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_129": {
                "values": {
                    "value": "[inputs, cell_output, attention_context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "rec1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "rec2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorShape_89": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_91": {
                "input": {
                    "value": "self.attention_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_108": {
                "input": {
                    "value": "first_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([first_inputs, attention_context], 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "seq2seq/decoders/basic_decoder.py": {
        "tensorflow": {
            "TensorShape_44": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/decoders/beam_search_decoder.py": {
        "tensorflow": {
            "map_structure_130": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: tf.expand_dims(x, 1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda x: tf.expand_dims(x, 1), outputs)",
                            "Call"
                        ],
                        [
                            "BeamDecoderOutput(logits=tf.zeros([self.config.beam_width, self.config.vocab_size]), predicted_ids=bs_output.predicted_ids, log_probs=beam_state.log_probs, scores=bs_output.scores, beam_parent_ids=bs_output.beam_parent_ids, original_outputs=decoder_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_structure_140": {
                "variable": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: tf.tile(x, [self.batch_size, 1])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda x: tf.tile(x, [self.batch_size, 1]), initial_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_structure_161": {
                "variable": {
                    "value": "decoder_state",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: tf.gather(x, bs_output.beam_parent_ids)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "decoder_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda x: tf.gather(x, bs_output.beam_parent_ids), decoder_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_structure_163": {
                "variable": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: tf.gather(x, bs_output.beam_parent_ids)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda x: tf.gather(x, bs_output.beam_parent_ids), decoder_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_95": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_96": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_97": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_98": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_130": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_133": {
                "input": {
                    "value": "predicted_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_search.gather_tree(outputs.predicted_ids, outputs.beam_parent_ids)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_141": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_162": {
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "bs_output.beam_parent_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_164": {
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "bs_output.beam_parent_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "shape": {
                    "value": "[self.config.beam_width, self.config.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/decoders/rnn_decoder.py": {
        "tensorflow": {
            "get_variable_scope_124": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "rec1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "rec2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_96": {
                "input": {
                    "value": "nest.flatten([self.initial_state])[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_96": {
                "structure": {
                    "value": "[self.initial_state]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/encoders/conv_encoder.py": {
        "tensorflow": {
            "dropout_82": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._combiner_fn(inputs, positions_embed)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(inputs=inputs, keep_prob=self.params['embedding_dropout_keep_prob'], is_training=self.mode == tf.contrib.learn.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "self.params['embedding_dropout_keep_prob']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "is_training": {
                    "value": "self.mode == tf.contrib.learn.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "variable": {
                    "value": "final_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cnn_c_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.tanh(next_layer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "cnn_a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_90": {
                "variable": {
                    "value": "next_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "cnn_a_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.tanh(next_layer)",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "self.params['attention_cnn.units']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.params['attention_cnn.kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "tanh_99": {
                "variable": {
                    "value": "cnn_a_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.conv2d(inputs=cnn_a_output, num_outputs=self.params['attention_cnn.units'], kernel_size=self.params['attention_cnn.kernel_size'], padding='SAME', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "next_layer + cnn_c_output",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.conv2d(inputs=cnn_c_output, num_outputs=self.params['output_cnn.units'], kernel_size=self.params['output_cnn.kernel_size'], padding='SAME', activation_fn=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "cnn_c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_104": {
                "variable": {
                    "value": "next_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "cnn_c_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.tanh(next_layer)",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "self.params['output_cnn.units']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.params['output_cnn.kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "tanh_113": {
                "variable": {
                    "value": "cnn_c_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.conv2d(inputs=cnn_a_output, num_outputs=self.params['attention_cnn.units'], kernel_size=self.params['attention_cnn.kernel_size'], padding='SAME', activation_fn=None)",
                            "Call"
                        ],
                        [
                            "next_layer + cnn_c_output",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.conv2d(inputs=cnn_c_output, num_outputs=self.params['output_cnn.units'], kernel_size=self.params['output_cnn.kernel_size'], padding='SAME', activation_fn=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_78": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._combiner_fn(inputs, positions_embed)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(inputs=inputs, keep_prob=self.params['embedding_dropout_keep_prob'], is_training=self.mode == tf.contrib.learn.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "seq2seq/encoders/image_encoder.py": {
        "tensorflow": {
            "reshape_63": {
                "variable": {
                    "value": "outputs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape_list[0], -1, shape_list[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool2d_67": {
                "variable": {
                    "value": "final_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "output_shape[1:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_69": {
                "variable": {
                    "value": "final_state",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_57": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(images=inputs, size=[self.params['resize_height'], self.params['resize_width']], method=tf.image.ResizeMethod.BILINEAR)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_75": {
                "input": {
                    "value": "outputs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(outputs, [shape_list[0], -1, shape_list[-1]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "seq2seq/encoders/pooling_encoder.py": {
        "tensorflow": {
            "constant_71": {
                "variable": {
                    "value": "position_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "position_encoding(num_positions, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "position_encoding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_79": {
                "variable": {
                    "value": "pe_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[pe_slice]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_82": {
                "variable": {
                    "value": "positions_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "maxlen",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_136": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._combiner_fn(inputs, positions_embed)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(inputs=inputs, keep_prob=self.params['dropout_keep_prob'], is_training=self.mode == tf.contrib.learn.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "self.params['dropout_keep_prob']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "is_training": {
                    "value": "self.mode == tf.contrib.learn.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_mean_148": {
                "variable": {
                    "value": "final_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._pooling_fn(inputs=inputs, pool_size=self.params['pool_size'], strides=self.params['strides'], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_78": {
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_84": {
                "input": {
                    "value": "positions_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(lengths=lengths, maxlen=maxlen, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_132": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._combiner_fn(inputs, positions_embed)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.dropout(inputs=inputs, keep_prob=self.params['dropout_keep_prob'], is_training=self.mode == tf.contrib.learn.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "seq2seq/encoders/rnn_encoder.py": {
        "tensorflow": {
            "get_variable_scope_203": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dynamic_rnn_210": {
                "variable": {
                    "value": "(outputs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "training_utils.get_rnn_cell(**self.params['rnn_cell'])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_247": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_252": {
                "variable": {
                    "value": "(outputs, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "training_utils.get_rnn_cell(**self.params['rnn_cell'])",
                            "Call"
                        ],
                        [
                            "training_utils.get_rnn_cell(**self.params['rnn_cell'])",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "training_utils.get_rnn_cell(**self.params['rnn_cell'])",
                            "Call"
                        ],
                        [
                            "training_utils.get_rnn_cell(**self.params['rnn_cell'])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_261": {
                "variable": {
                    "value": "outputs_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_276": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits, [-1, 2048])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2048]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_scope_309": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_120": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_122": {
                "x": {
                    "value": "np.tile(np.reshape(np.reshape(np.arange(height), [height, 1]) + np.reshape(np.arange(width), [1, width]), [1, height, width, 1]), [batch_size, 1, 1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_171": {
                "msg": {
                    "value": "\"Setting dropout of '\" + str(param_name) + \"' to 1.0\"",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_204": {
                "minval": {
                    "value": "-self.params['init_scale']",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "self.params['init_scale']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_310": {
                "minval": {
                    "value": "-self.params['init_scale']",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "self.params['init_scale']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/graph_module.py": {
        "tensorflow": {
            "make_template_44": {
                "variable": {
                    "value": "self._template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._build",
                    "type": "Attribute",
                    "possible_values": []
                },
                "create_scope_now_": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "self._template.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/graph_utils.py": {
        "tensorflow": {
            "get_collection_70": {
                "variable": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "key_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collection_name + '_keys'",
                            "BinOp"
                        ],
                        [
                            "collection_name + '_keys'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_collection_71": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "value_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collection_name + '_values'",
                            "BinOp"
                        ],
                        [
                            "collection_name + '_values'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "make_template_37": {
                "variable": {
                    "value": "templated_func",
                    "type": "variable",
                    "possible_values": []
                },
                "name_": {
                    "value": "name_",
                    "type": "variable",
                    "possible_values": []
                },
                "func_": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_to_collection_55": {
                "name": {
                    "value": "key_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collection_name + '_keys'",
                            "BinOp"
                        ],
                        [
                            "collection_name + '_keys'",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_to_collection_56": {
                "name": {
                    "value": "value_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collection_name + '_values'",
                            "BinOp"
                        ],
                        [
                            "collection_name + '_values'",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/inference/beam_search.py": {
        "tensorflow": {
            "py_func_90": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "gather_tree_py",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[values, parents]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "values.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_146": {
                "variable": {
                    "value": "(next_beam_scores, word_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(scores, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.convert_to_tensor(time_) > 0, lambda : scores_flat, lambda : scores[0])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "config.beam_width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_181": {
                "variable": {
                    "value": "finished_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.to_float(1.0 - tf.to_float(finished))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_186": {
                "variable": {
                    "value": "finished_row",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "eos_token",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(probs)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "tf.float32.min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_217": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "one_hot_224": {
                "variable": {
                    "value": "lengths_to_add",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "[config.eos_token] * config.beam_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "off_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_237": {
                "variable": {
                    "value": "scores_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyp_score(log_probs=total_probs, sequence_lengths=new_prediction_lengths, config=config)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_239": {
                "variable": {
                    "value": "scores_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.convert_to_tensor(time_) > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : scores_flat",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : scores[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_249": {
                "variable": {
                    "value": "total_probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "total_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(beam_state.log_probs, 1) + probs",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "total_probs_flat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_250": {
                "variable": {
                    "value": "next_beam_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "total_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(total_probs, [-1], name='total_probs_flat')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "word_indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mod_252": {
                "variable": {
                    "value": "next_word_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "word_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_253": {
                "variable": {
                    "value": "next_beam_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "word_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_or_256": {
                "variable": {
                    "value": "next_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.gather(beam_state.finished, next_beam_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(next_word_ids, config.eos_token)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_264": {
                "variable": {
                    "value": "lengths_to_add",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(next_word_ids, config.eos_token)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_266": {
                "variable": {
                    "value": "next_prediction_len",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "beam_state.lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "next_beam_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(word_indices, config.vocab_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_126": {
                "x": {
                    "value": "(5.0 + tf.to_float(sequence_lengths)) ** penalty_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "(5.0 + 1.0) ** penalty_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_154": {
                "variable": {
                    "value": "inputs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_sequence_as_156": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "y_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[map_fn(_) for _ in inputs_flat]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "identity_160": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.pack_sequence_as(inputs, y_flat)",
                            "Call"
                        ],
                        [
                            "map_fn(inputs)",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_180": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "mask_probs(probs, config.eos_token, previously_finished)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_181": {
                "x": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_219": {
                "input": {
                    "value": "beam_state.log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_226": {
                "x": {
                    "value": "previously_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_state.finished",
                            "Attribute"
                        ]
                    ]
                }
            },
            "expand_dims_227": {
                "input": {
                    "value": "add_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - tf.to_int32(previously_finished)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_228": {
                "input": {
                    "value": "prediction_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_state.lengths",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_257": {
                "params": {
                    "value": "beam_state.finished",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "next_beam_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(word_indices, config.vocab_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_258": {
                "x": {
                    "value": "next_word_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mod(word_indices, config.vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "config.eos_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_264": {
                "x": {
                    "value": "next_word_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mod(word_indices, config.vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "config.eos_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "shape": {
                    "value": "[config.beam_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "shape": {
                    "value": "[config.beam_width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "shape": {
                    "value": "[config.beam_width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_240": {
                "value": {
                    "value": "time_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_int32_265": {
                "x": {
                    "value": "next_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.gather(beam_state.finished, next_beam_ids), tf.equal(next_word_ids, config.eos_token))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_126": {
                "x": {
                    "value": "sequence_lengths",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/inference/inference.py": {
        "tensorflow": {
            "info_44": {
                "msg": {
                    "value": "Setting batch size to 1 for beam search.",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/losses.py": {
        "tensorflow": {
            "sparse_softmax_cross_entropy_with_logits_38": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sequence_mask_43": {
                "variable": {
                    "value": "loss_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "tf.to_int32(sequence_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.to_int32(tf.shape(targets)[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_37": {
                "name": {
                    "value": "cross_entropy_sequence_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_50": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_44": {
                "x": {
                    "value": "tf.shape(targets)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_45": {
                "a": {
                    "value": "tf.to_float(loss_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_45": {
                "x": {
                    "value": "loss_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(tf.to_int32(sequence_length), tf.to_int32(tf.shape(targets)[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_52": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_44": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/metrics/bleu.py": {
        "tensorflow": {
            "info_56": {
                "msg": {
                    "value": "Unable to fetch multi-bleu.perl script, using local.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_85": {
                "msg": {
                    "value": "multi-bleu.perl script returned non-zero exit code",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_86": {
                "msg": {
                    "value": "error.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/metrics/metric_specs.py": {
        "tensorflow": {
            "Variable_50": {
                "variable": {
                    "value": "strings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'strings'",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collections": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "validate_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "identity_57": {
                "variable": {
                    "value": "value_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "strings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(name=name, initial_value=[], dtype=tf.string, trainable=False, collections=[], validate_shape=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_58": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "strings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(name=name, initial_value=[], dtype=tf.string, trainable=False, collections=[], validate_shape=True)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.concat([strings, values], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "validate_shape": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assert_type_49": {
                "tensor": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tf_type": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_240": {
                "variable": {
                    "value": "loss_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "tf.to_int32(labels['target_len'] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.to_int32(tf.shape(predictions['losses'])[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_join_111": {
                "variable": {
                    "value": "predictions_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "predictions['predicted_tokens']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "separator": {
                    "value": "self._separator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_join_113": {
                "variable": {
                    "value": "labels_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "labels['target_tokens']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "separator": {
                    "value": "self._separator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_121": {
                "variable": {
                    "value": "metric_value",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "self._py_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[sources_value, targets_value]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_128": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "metric_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(func=self._py_func, inp=[sources_value, targets_value], Tout=tf.float32, name='value')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "update_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_59": {
                "values": {
                    "value": "[strings, values]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_127": {
                "control_inputs": {
                    "value": "[sources_update, targets_update]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_241": {
                "x": {
                    "value": "labels['target_len'] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_242": {
                "x": {
                    "value": "tf.shape(predictions['losses'])[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_242": {
                "input": {
                    "value": "predictions['losses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/models/attention_seq2seq.py": {
        "tensorflow": {
            "tile_71": {
                "variable": {
                    "value": "reverse_scores_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reverse_scores_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "features['source_len']",
                            "Subscript"
                        ],
                        [
                            "tf.tile(input=reverse_scores_lengths, multiples=[self.params['inference.beam_search.beam_width']])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[self.params['inference.beam_search.beam_width']]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/models/basic_seq2seq.py": {
        "tensorflow": {
            "embedding_lookup_82": {
                "variable": {
                    "value": "target_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.target_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "labels['target_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "embedding_lookup_108": {
                "variable": {
                    "value": "source_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.source_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "features['source_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "fill_100": {
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "target_start_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_vocab_info.special_vocab.SEQUENCE_START",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "seq2seq/models/bridges.py": {
        "tensorflow": {
            "map_structure_90": {
                "variable": {
                    "value": "zero_state",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: tf.zeros([self.batch_size, x], dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self.decoder_state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_structure_149": {
                "variable": {
                    "value": "bridge_input",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: tf.reshape(x, [self.batch_size, _total_tensor_depth(x)])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._bridge_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_152": {
                "variable": {
                    "value": "bridge_input_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "[bridge_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_153": {
                "variable": {
                    "value": "bridge_input_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "bridge_input_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten([bridge_input])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_155": {
                "variable": {
                    "value": "state_size_splits",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.decoder_state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_165": {
                "variable": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "initial_state_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(inputs=bridge_input_concat, num_outputs=total_decoder_state_size, activation_fn=self._activation_fn)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(inputs=mean_outputs, num_outputs=total_decoder_state_size, activation_fn=self._activation_fn)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "state_size_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(self.decoder_state_size)",
                            "Call"
                        ],
                        [
                            "nest.flatten(self.decoder_state_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_206": {
                "variable": {
                    "value": "mean_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self._bridge_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_208": {
                "variable": {
                    "value": "state_size_splits",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.decoder_state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_219": {
                "variable": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "initial_state_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(inputs=bridge_input_concat, num_outputs=total_decoder_state_size, activation_fn=self._activation_fn)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(inputs=mean_outputs, num_outputs=total_decoder_state_size, activation_fn=self._activation_fn)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "state_size_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(self.decoder_state_size)",
                            "Call"
                        ],
                        [
                            "nest.flatten(self.decoder_state_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assert_same_structure_107": {
                "nest1": {
                    "value": "self.encoder_outputs.final_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nest2": {
                    "value": "self.decoder_state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_sequence_as_166": {
                "structure": {
                    "value": "self.decoder_state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(initial_state_flat, state_size_splits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.split(initial_state_flat, state_size_splits, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_sequence_as_220": {
                "structure": {
                    "value": "self.decoder_state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(initial_state_flat, state_size_splits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.split(initial_state_flat, state_size_splits, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_58": {
                "input": {
                    "value": "nest.flatten(self.encoder_outputs.final_state)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "shape": {
                    "value": "[self.batch_size, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_150": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, _total_tensor_depth(x)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_59": {
                "structure": {
                    "value": "self.encoder_outputs.final_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/models/image2seq.py": {
        "tensorflow": {
            "to_int32_109": {
                "variable": {
                    "value": "labels[target_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "labels['target_len']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "minimum_103": {
                "variable": {
                    "value": "labels[target_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "labels['target_len']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.params['target.max_seq_len']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_110": {
                "name": {
                    "value": "target_len",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.to_float(labels['target_len'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_71": {
                "input": {
                    "value": "features['image']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_110": {
                "x": {
                    "value": "labels['target_len']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/models/model_base.py": {
        "tensorflow": {
            "clip_by_global_norm_71": {
                "variable": {
                    "value": "(clipped_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.params['optimizer.clip_gradients']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_global_step_109": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SyncReplicasOptimizer_84": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.OPTIMIZER_CLS_NAMES[name](learning_rate=self.params['optimizer.learning_rate'], **self.params['optimizer.params'])",
                            "Call"
                        ],
                        [
                            "tf.train.SyncReplicasOptimizer(opt=optimizer, replicas_to_aggregate=self.params['optimizer.sync_replicas_to_aggregate'], total_num_replicas=self.params['optimizer.sync_replicas'])",
                            "Call"
                        ],
                        [
                            "self._create_optimizer()",
                            "Call"
                        ]
                    ]
                },
                "replicas_to_aggregate": {
                    "value": "self.params['optimizer.sync_replicas_to_aggregate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "total_num_replicas": {
                    "value": "self.params['optimizer.sync_replicas']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_163": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/models/seq2seq_model.py": {
        "tensorflow": {
            "to_int32_235": {
                "variable": {
                    "value": "features[source_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "features['source_len']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_253": {
                "variable": {
                    "value": "labels[target_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "labels['target_len']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_257": {
                "variable": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "labels['target_len']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_259": {
                "variable": {
                    "value": "token_counter_var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "tokens_counter",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_add_260": {
                "variable": {
                    "value": "total_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "token_counter_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='tokens_counter', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(labels['target_len'])",
                            "Call"
                        ],
                        [
                            "num_tokens + tf.reduce_sum(features['source_len'])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_131": {
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.source_vocab_info.total_size, self.params['embedding.dim']]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-self.params['embedding.init_scale'], self.params['embedding.init_scale'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_145": {
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.target_vocab_info.total_size, self.params['embedding.dim']]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-self.params['embedding.init_scale'], self.params['embedding.init_scale'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_220": {
                "variable": {
                    "value": "features[source_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "features['source_len']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.params['source.max_seq_len']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reverse_sequence_228": {
                "variable": {
                    "value": "features[source_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "seq_lengths": {
                    "value": "features['source_len']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "seq_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "histogram_236": {
                "name": {
                    "value": "source_len",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.to_float(features['source_len'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_247": {
                "variable": {
                    "value": "labels[target_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "labels['target_len']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.params['target.max_seq_len']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_254": {
                "name": {
                    "value": "target_len",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.to_float(labels['target_len'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_258": {
                "input_tensor": {
                    "value": "features['source_len']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_261": {
                "name": {
                    "value": "num_tokens",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.assign_add(token_counter_var, num_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_264": {
                "variable": {
                    "value": "features[source_tokens]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source_tokens']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_norm_78": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "gradient.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.params['optimizer.clip_embed_gradients']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "IndexedSlices_80": {
                "variable": {
                    "value": "gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_norm(gradient.values, self.params['optimizer.clip_embed_gradients'])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "gradient.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "gradient.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_124": {
                "input": {
                    "value": "features['source_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_236": {
                "x": {
                    "value": "features['source_len']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_254": {
                "x": {
                    "value": "labels['target_len']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "control_dependencies_263": {
                "control_inputs": {
                    "value": "[total_tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_287": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq2seq_losses.cross_entropy_sequence_loss(logits=decoder_output.logits[:, :, :], targets=tf.transpose(labels['target_ids'][:, 1:], [1, 0]), sequence_length=labels['target_len'] - 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_287": {
                "x": {
                    "value": "tf.reduce_sum(labels['target_len'] - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int64_114": {
                "x": {
                    "value": "predictions['predicted_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_134": {
                "minval": {
                    "value": "-self.params['embedding.init_scale']",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "self.params['embedding.init_scale']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_148": {
                "minval": {
                    "value": "-self.params['embedding.init_scale']",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "self.params['embedding.init_scale']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_283": {
                "a": {
                    "value": "labels['target_ids'][:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_288": {
                "input_tensor": {
                    "value": "labels['target_len'] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/tasks/decode_text.py": {
        "tensorflow": {
            "GFile_53": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SessionRunArgs_150": {
                "fetches": {
                    "value": "fetches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "unbatch_dict(fetches_batch)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "seq2seq/tasks/dump_attention.py": {
        "tensorflow": {
            "MakeDirs_103": {
                "dirname": {
                    "value": "self.params['output_dir']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SessionRunArgs_112": {
                "fetches": {
                    "value": "fetches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "unbatch_dict(fetches_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_137": {
                "msg": {
                    "value": "Wrote %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "scores_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.params['output_dir'], 'attention_scores.npz')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_129": {
                "msg": {
                    "value": "Wrote %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.params['output_dir'], '{:05d}.png'.format(self._idx))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "seq2seq/tasks/dump_beams.py": {
        "tensorflow": {
            "SessionRunArgs_66": {
                "fetches": {
                    "value": "fetches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "unbatch_dict(fetches_batch)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "seq2seq/tasks/inference_task.py": {
        "tensorflow": {}
    },
    "seq2seq/test/attention_test.py": {
        "tensorflow": {
            "placeholder_50": {
                "variable": {
                    "value": "inputs_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, self.input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "inputs_length_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "state_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.state_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_37": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/test/beam_search_test.py": {
        "tensorflow": {
            "convert_to_tensor_92": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full([self.config.beam_width, self.config.vocab_size], 0.0001)",
                            "Call"
                        ],
                        [
                            "np.full([self.config.beam_width, self.config.vocab_size], 0.0001)",
                            "Call"
                        ],
                        [
                            "np.full([self.config.beam_width, self.config.vocab_size], 0.0001)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_93": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(logits_, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(logits_, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(logits_, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_125": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full([self.config.beam_width, self.config.vocab_size], 0.0001)",
                            "Call"
                        ],
                        [
                            "np.full([self.config.beam_width, self.config.vocab_size], 0.0001)",
                            "Call"
                        ],
                        [
                            "np.full([self.config.beam_width, self.config.vocab_size], 0.0001)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_126": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(logits_, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(logits_, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(logits_, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_158": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full([self.config.beam_width, self.config.vocab_size], 0.0001)",
                            "Call"
                        ],
                        [
                            "np.full([self.config.beam_width, self.config.vocab_size], 0.0001)",
                            "Call"
                        ],
                        [
                            "np.full([self.config.beam_width, self.config.vocab_size], 0.0001)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_159": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(logits_, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(logits_, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(logits_, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_185": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-0.2, -0.2, -0.2, -0.2, -0.2], [-0.3, -0.3, -0.3, 3, 0], [5, 6, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_188": {
                "variable": {
                    "value": "previously_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_38": {
                "value": {
                    "value": "parent_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0, 0], [0, 1, 1], [2, 1, 2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_53": {
                "value": {
                    "value": "lengths_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1, 2, 3], [3, 3, 3]])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_81": {
                "logits": {
                    "value": "tf.ones(self.config.beam_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_82": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.beam_width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "shape": {
                    "value": "[self.config.beam_width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_115": {
                "logits": {
                    "value": "tf.ones(self.config.beam_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_116": {
                "value": {
                    "value": "[2, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_118": {
                "value": {
                    "value": "[False, True, False]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_147": {
                "logits": {
                    "value": "tf.ones(self.config.beam_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_148": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.beam_width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "shape": {
                    "value": "[self.config.beam_width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_81": {
                "shape": {
                    "value": "self.config.beam_width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_115": {
                "shape": {
                    "value": "self.config.beam_width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_147": {
                "shape": {
                    "value": "self.config.beam_width",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/test/bridges_test.py": {
        "tensorflow": {
            "MultiRNNCell_42": {
                "variable": {
                    "value": "self.encoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.contrib.rnn.GRUCell(4), tf.contrib.rnn.GRUCell(8)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiRNNCell_44": {
                "variable": {
                    "value": "self.decoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.contrib.rnn.LSTMCell(16), tf.contrib.rnn.GRUCell(8)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_46": {
                "variable": {
                    "value": "final_encoder_state",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: tf.convert_to_tensor(value=np.random.randn(self.batch_size, x), dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self.encoder_cell.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_95": {
                "variable": {
                    "value": "initial_state_flat_",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "initial_state_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(initial_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_117": {
                "variable": {
                    "value": "encoder_state_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.encoder_outputs.final_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_121": {
                "variable": {
                    "value": "initial_state_flat_",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "initial_state_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(initial_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "main_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assert_same_structure_114": {
                "nest1": {
                    "value": "initial_state_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(initial_state)",
                            "Call"
                        ]
                    ]
                },
                "nest2": {
                    "value": "self.decoder_cell.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_same_structure_115": {
                "nest1": {
                    "value": "initial_state_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(initial_state)",
                            "Call"
                        ]
                    ]
                },
                "nest2": {
                    "value": "self.encoder_outputs.final_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_same_structure_141": {
                "nest1": {
                    "value": "initial_state_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(initial_state)",
                            "Call"
                        ]
                    ]
                },
                "nest2": {
                    "value": "self.decoder_cell.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "scope or 'bridge'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "GRUCell_43": {
                "units": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_45": {
                "units": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRUCell_45": {
                "units": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_47": {
                "value": {
                    "value": "np.random.randn(self.batch_size, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_52": {
                "value": {
                    "value": "np.random.randn(self.batch_size, 10, 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_54": {
                "value": {
                    "value": "np.random.randn(self.batch_size, 10, 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/test/conv_encoder_test.py": {
        "tensorflow": {
            "main_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_45": {
                "shape": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/test/data_test.py": {
        "tensorflow": {
            "constant_44": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Hello world ! \u7b11\uff57",
                    "type": "str",
                    "possible_values": []
                }
            },
            "main_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/test/decoder_test.py": {
        "tensorflow": {
            "sparse_softmax_cross_entropy_with_logits_94": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "decoder_output.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(0, self.vocab_size, [self.batch_size, self.sequence_length])",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_110": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_embed",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.vocab_size, self.input_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_142": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_embed",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.vocab_size, self.input_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_213": {
                "variable": {
                    "value": "attention_values",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.randn(self.batch_size, self.input_seq_len, 32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_216": {
                "variable": {
                    "value": "attention_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.randn(self.batch_size, self.input_seq_len, 32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_187": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_204": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_56": {
                "shape": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_82": {
                "shape": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_97": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=decoder_output.logits, labels=labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/test/example_config_test.py": {
        "tensorflow": {
            "main_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_41": {
                "name": {
                    "value": "config_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/test/hooks_test.py": {
        "tensorflow": {
            "constant_66": {
                "variable": {
                    "value": "pred_dict[predicted_tokens]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[['Hello', 'World', '\u7b11w']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_67": {
                "variable": {
                    "value": "pred_dict[labels.target_tokens]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[['Hello', 'World', '\u7b11w']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_80": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_op_81": {
                "variable": {
                    "value": "no_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_126": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_128": {
                "variable": {
                    "value": "some_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weigths",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_129": {
                "variable": {
                    "value": "computation",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "some_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weigths', [2, 128])",
                            "Call"
                        ]
                    ]
                }
            },
            "main_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_42": {
                "name": {
                    "value": "weigths",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[128, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_47": {
                "name": {
                    "value": "os.path.join(model_dir, 'model_analysis.txt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_68": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RunConfig_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunConfig_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_91": {
                "ref": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_100": {
                "ref": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_106": {
                "ref": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RunConfig_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_141": {
                "ref": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ListDirectory_143": {
                "dirname": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_145": {
                "ref": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ListDirectory_147": {
                "dirname": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ListDirectory_150": {
                "dirname": {
                    "value": "self.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/test/input_pipeline_test.py": {
        "tensorflow": {
            "main_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_82": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_125": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/test/losses_test.py": {
        "tensorflow": {
            "main_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_35": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/test/metrics_test.py": {
        "tensorflow": {
            "main_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/test/models_test.py": {
        "tensorflow": {
            "LSTMCell_215": {
                "variable": {
                    "value": "self.encoder_rnn_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_216": {
                "variable": {
                    "value": "self.decoder_rnn_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "main_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_60": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/test/pipeline_test.py": {
        "tensorflow": {
            "main_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_147": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_106": {
                "name": {
                    "value": "config_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.output_dir, 'train_config.yml')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/test/pooling_encoder_test.py": {
        "tensorflow": {
            "main_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_45": {
                "shape": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/test/rnn_cell_test.py": {
        "tensorflow": {
            "constant_34": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.randn(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_58": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.random.randn(1, 2))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(1, 2)",
                            "Call"
                        ],
                        [
                            "np.random.randn(1, 5)",
                            "Call"
                        ],
                        [
                            "np.random.randn(1, 5)",
                            "Call"
                        ],
                        [
                            "np.random.randn(1, 2)",
                            "Call"
                        ],
                        [
                            "np.random.randn(1, 5)",
                            "Call"
                        ],
                        [
                            "np.random.randn(1, 2)",
                            "Call"
                        ],
                        [
                            "np.random.randn(1, 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "main_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiRNNCell_39": {
                "variable": {
                    "value": "standard_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.contrib.rnn.GRUCell(2) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_35": {
                "value": {
                    "value": "np.random.randn(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_36": {
                "value": {
                    "value": "np.random.randn(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "root",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_59": {
                "value": {
                    "value": "np.random.randn(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_60": {
                "value": {
                    "value": "np.random.randn(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "root",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "same_input_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "diff_input_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "same_input_size_dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "diff_input_size_dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "same_input_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "diff_input_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "same_input_size_dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "diff_input_size_dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_38": {
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GRUCell_40": {
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRUCell_44": {
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_62": {
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GRUCell_64": {
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/test/rnn_encoder_test.py": {
        "tensorflow": {
            "main_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_36": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_75": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_122": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_48": {
                "shape": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_87": {
                "shape": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_132": {
                "shape": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/test/train_utils_test.py": {
        "tensorflow": {
            "main_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/test/utils.py": {
        "tensorflow": {
            "TFRecordWriter_59": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_61": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/test/vocab_test.py": {
        "tensorflow": {
            "main_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_36": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_74": {
                "value": {
                    "value": "['Hello', '.', '\u7b11', '??', 'xxx']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_79": {
                "value": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_103": {
                "value": {
                    "value": "['Hello', '.', '\u7b11', '??', 'xxx']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_108": {
                "value": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_116": {
                "value": {
                    "value": "['Hello', '.', '\u7b11', '??', 'xxx']",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/training/hooks.py": {
        "tensorflow": {
            "get_global_step_93": {
                "variable": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SecondOrStepTimer_158": {
                "variable": {
                    "value": "self._timer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "every_secs": {
                    "value": "self.params['every_n_secs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "every_steps": {
                    "value": "self.params['every_n_steps']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_global_step_179": {
                "variable": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_289": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{k: v for (k, v) in zip(target_names, variables)}",
                            "DictComp"
                        ]
                    ]
                }
            },
            "RunOptions_102": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SessionRunArgs_194": {
                "fetches": {
                    "value": "[{}, self._global_step]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "info_221": {
                "msg": {
                    "value": "result_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "str"
                        ],
                        [
                            "result_str + ('=' * 100 + '\\n\\n')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_285": {
                "msg": {
                    "value": "Restoring variables: \\n%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "yaml.dump({k: v.op.name for (k, v) in restore_map.items()})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_293": {
                "msg": {
                    "value": "Successfully restored all variables",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_360": {
                "msg": {
                    "value": "Found SyncReplicasOptimizer. Initializing.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SessionRunArgs_99": {
                "fetches": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_101": {
                "msg": {
                    "value": "Performing full trace on next step.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SessionRunArgs_103": {
                "fetches": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "options": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_111": {
                "msg": {
                    "value": "Captured full trace at step %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "step_done",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_values.results",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MakeDirs_113": {
                "dirname": {
                    "value": "self._output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "write_op_log_130": {
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self._output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "run_meta": {
                    "value": "run_values.run_metadata",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_134": {
                "msg": {
                    "value": "Saved op log to %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_183": {
                "dirname": {
                    "value": "self._sample_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SessionRunArgs_193": {
                "fetches": {
                    "value": "[fetches, self._global_step]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_252": {
                "name": {
                    "value": "self._filename",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_253": {
                "msg": {
                    "value": "file.read()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_117": {
                "name": {
                    "value": "trace_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._output_dir, 'run_meta')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_119": {
                "msg": {
                    "value": "Saved run_metadata to %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "trace_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._output_dir, 'run_meta')",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_123": {
                "name": {
                    "value": "timeline_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._output_dir, 'timeline.json')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_127": {
                "msg": {
                    "value": "Saved timeline to %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "timeline_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._output_dir, 'timeline.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_225": {
                "name": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._sample_dir, 'samples_{:06d}.txt'.format(step))",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_graph_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/training/utils.py": {
        "tensorflow": {
            "to_int32_204": {
                "variable": {
                    "value": "start_decay_at",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "start_decay_at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(start_decay_at)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_int32_205": {
                "variable": {
                    "value": "stop_decay_at",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "stop_decay_at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(stop_decay_at)",
                            "Call"
                        ],
                        [
                            "1000000000.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_int32_210": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "piecewise_constant_221": {
                "variable": {
                    "value": "final_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(global_step)",
                            "Call"
                        ]
                    ]
                },
                "boundaries": {
                    "value": "[start_decay_at]",
                    "type": "List",
                    "possible_values": []
                },
                "values": {
                    "value": "[learning_rate, decayed_learning_rate]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MakeDirs_76": {
                "dirname": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DropoutWrapper_159": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell_from_spec(cell_class, cell_params)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell=cell, input_keep_prob=dropout_input_keep_prob, output_keep_prob=dropout_output_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "dropout_input_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "dropout_output_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_227": {
                "variable": {
                    "value": "final_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "final_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.piecewise_constant(x=global_step, boundaries=[start_decay_at], values=[learning_rate, decayed_learning_rate])",
                            "Call"
                        ],
                        [
                            "tf.maximum(final_lr, min_learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "min_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GFile_82": {
                "name": {
                    "value": "TrainOptions.path(model_dir)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_92": {
                "name": {
                    "value": "TrainOptions.path(model_dir)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_259": {
                "name_or_scope": {
                    "value": "scope or 'input_fn'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "bucket_by_sequence_length_268": {
                "variable": {
                    "value": "(_, batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input_length": {
                    "value": "features_and_labels['source_len']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pipeline.read_from_data_provider(data_provider)",
                            "Call"
                        ]
                    ]
                },
                "bucket_boundaries": {
                    "value": "bucket_boundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "tensors": {
                    "value": "features_and_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pipeline.read_from_data_provider(data_provider)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "keep_input": {
                    "value": "features_and_labels['source_len'] >= 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dynamic_pad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5000 + 16 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "allow_smaller_final_batch": {
                    "value": "allow_smaller_final_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "bucket_queue",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_279": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features_and_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pipeline.read_from_data_provider(data_provider)",
                            "Call"
                        ]
                    ]
                },
                "enqueue_many": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dynamic_pad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5000 + 16 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "allow_smaller_final_batch": {
                    "value": "allow_smaller_final_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "batch_queue",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_215": {
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(global_step)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "stop_decay_at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(stop_decay_at)",
                            "Call"
                        ],
                        [
                            "1000000000.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}