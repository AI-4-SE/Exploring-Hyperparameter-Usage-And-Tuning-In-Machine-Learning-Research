{
    "AttentionUnit.py": {
        "tensorflow": {
            "transpose_12": {
                "variable": {
                    "value": "self.hs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_28": {
                "variable": {
                    "value": "hs2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.hs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_29": {
                "variable": {
                    "value": "phi_hs2d",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.xw_plus_b(hs2d, self.Wh, self.bh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_30": {
                "variable": {
                    "value": "self.phi_hs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "phi_hs2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(tf.nn.xw_plus_b(hs2d, self.Wh, self.bh))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(self.hs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_33": {
                "variable": {
                    "value": "gamma_h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.xw_plus_b(x, self.Ws, self.bs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_34": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.phi_hs * gamma_h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_36": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights - tf.reduce_max(weights, reduction_indices=0, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_37": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(self.phi_hs * gamma_h, reduction_indices=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.exp(weights - tf.reduce_max(weights, reduction_indices=0, keep_dims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights, 1e-06 + tf.reduce_sum(weights, reduction_indices=0, keep_dims=True))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-06 + tf.reduce_sum(weights, reduction_indices=0, keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_38": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.hs * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_40": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.xw_plus_b(tf.concat([context, x], -1), self.Wo, self.bo)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_19": {
                "variable": {
                    "value": "self.Wh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wh",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "self.bh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bh",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_21": {
                "variable": {
                    "value": "self.Ws",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Ws",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_22": {
                "variable": {
                    "value": "self.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bs",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wo",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * input_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bo",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_43": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros_like(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(tf.nn.xw_plus_b(tf.concat([context, x], -1), self.Wo, self.bo))",
                            "Call"
                        ],
                        [
                            "tf.where(finished, tf.zeros_like(out), out)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "xw_plus_b_29": {
                "x": {
                    "value": "hs2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.hs, [-1, input_size])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "self.Wh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.bh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_30": {
                "input": {
                    "value": "self.hs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_33": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Ws",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.bs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_40": {
                "x": {
                    "value": "tf.concat([context, x], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_36": {
                "input_tensor": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(self.phi_hs * gamma_h, reduction_indices=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.exp(weights - tf.reduce_max(weights, reduction_indices=0, keep_dims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights, 1e-06 + tf.reduce_sum(weights, reduction_indices=0, keep_dims=True))",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_37": {
                "input_tensor": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(self.phi_hs * gamma_h, reduction_indices=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.exp(weights - tf.reduce_max(weights, reduction_indices=0, keep_dims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights, 1e-06 + tf.reduce_sum(weights, reduction_indices=0, keep_dims=True))",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_40": {
                "values": {
                    "value": "[context, x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_43": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(tf.nn.xw_plus_b(tf.concat([context, x], -1), self.Wo, self.bo))",
                            "Call"
                        ],
                        [
                            "tf.where(finished, tf.zeros_like(out), out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LstmUnit.py": {
        "tensorflow": {
            "concat_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, h_prev]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_27": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.xw_plus_b(x, self.W, self.b)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_18": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.input_size + self.hidden_size, 4 * self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_19": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4 * self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer([4 * self.hidden_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_35": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros_like(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(o) * tf.tanh(c)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_17": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "xw_plus_b_27": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x, h_prev], 1)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_31": {
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_31": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(f + 1.0) * c_prev + tf.sigmoid(i) * tf.tanh(j)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_30": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_30": {
                "x": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_35": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(o) * tf.tanh(c)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_36": {
                "condition": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "c_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(f + 1.0) * c_prev + tf.sigmoid(i) * tf.tanh(j)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "SeqUnit.py": {
        "tensorflow": {
            "cast_105": {
                "variable": {
                    "value": "self.copy_gate_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(self.decoder_pos_input, tf.zeros_like(self.decoder_pos_input))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "self.copy_gate_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.copy_gate_mask, tf.zeros([tf.shape(self.encoder_input)[0], 1], tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_112": {
                "variable": {
                    "value": "dist0",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context_outputs['logits'][:, -1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_113": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(dist0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_123": {
                "variable": {
                    "value": "self.decoder_output_one_hot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.decoder_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.target_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_129": {
                "variable": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_130": {
                "variable": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, dec_shape_len)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, encoder_len])",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, encoder_len])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_131": {
                "variable": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, dec_shape_len)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, encoder_len])",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, encoder_len])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_132": {
                "variable": {
                    "value": "decoder_len_com",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decoder_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_133": {
                "variable": {
                    "value": "decoder_len_com",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_len_com",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(self.decoder_len, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(decoder_len_com, [1, dec_shape_len])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, dec_shape_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_134": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less_equal(batch_nums, decoder_len_com)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_142": {
                "variable": {
                    "value": "self.mean_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(self.decoder_output_one_hot * tf.log(de_outputs + 1e-06), 2)",
                            "UnaryOp"
                        ],
                        [
                            "mask * losses",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trainable_variables_154": {
                "variable": {
                    "value": "train_params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_189": {
                "variable": {
                    "value": "acc_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "placeholder_201": {
                "variable": {
                    "value": "self.gpt_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_202": {
                "variable": {
                    "value": "self.encoder_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_203": {
                "variable": {
                    "value": "self.encoder_field",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_204": {
                "variable": {
                    "value": "self.encoder_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_205": {
                "variable": {
                    "value": "self.encoder_rpos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_206": {
                "variable": {
                    "value": "self.decoder_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_207": {
                "variable": {
                    "value": "self.encoder_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_208": {
                "variable": {
                    "value": "self.decoder_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_209": {
                "variable": {
                    "value": "self.decoder_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_210": {
                "variable": {
                    "value": "self.enc_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(self.encoder_pos)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_211": {
                "variable": {
                    "value": "self.decoder_field_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_212": {
                "variable": {
                    "value": "self.decoder_pos_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_213": {
                "variable": {
                    "value": "self.decoder_rpos_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_214": {
                "variable": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_250": {
                "variable": {
                    "value": "self.gpt_context_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.context, self.gpt_context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_300": {
                "variable": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_303": {
                "variable": {
                    "value": "f0",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_304": {
                "variable": {
                    "value": "inputs_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "max_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.encoder_embed)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.decoder_input)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TensorArray_306": {
                "variable": {
                    "value": "fields_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "max_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.encoder_embed)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.decoder_input)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TensorArray_308": {
                "variable": {
                    "value": "emit_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_320": {
                "variable": {
                    "value": "(_, _, _, state, emit_ta, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda _1, _2, _3, _4, _5, finished: tf.logical_not(tf.reduce_all(finished))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "loop_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(time, inputs_ta.read(0), fields_ta.read(0), h0, emit_ta, f0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_325": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "emit_ta.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_367": {
                "variable": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_368": {
                "variable": {
                    "value": "f0",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_370": {
                "variable": {
                    "value": "inputs_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "max_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.encoder_embed)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.decoder_input)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TensorArray_372": {
                "variable": {
                    "value": "emit_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorArray_373": {
                "variable": {
                    "value": "emit_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_376": {
                "variable": {
                    "value": "coverage_att_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, encoder_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_450": {
                "variable": {
                    "value": "(_, _, past_final, hidden_final, emit_ta, emit_gate, coverage_att_sum, emit_covloss, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda _1, _2, _3, _4, _5, _6, _7, _8, finished: tf.logical_not(tf.reduce_all(finished))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "loop_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(time, x0, past0, hidden0, emit_ta, emit_gate, coverage_att_sum, covloss0, f0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_455": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "emit_ta.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_456": {
                "variable": {
                    "value": "outputs_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(emit_gate.stack(), [1, 0, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_473": {
                "variable": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_474": {
                "variable": {
                    "value": "f0",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_477": {
                "variable": {
                    "value": "x0_field",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "tf.fill([batch_size], self.empty_token)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_478": {
                "variable": {
                    "value": "x0_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.pembedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "tf.zeros([batch_size], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_479": {
                "variable": {
                    "value": "x0_rpos",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.rembedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "tf.zeros([batch_size], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_480": {
                "variable": {
                    "value": "field_pos0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x0_field, x0_pos, x0_rpos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorArray_482": {
                "variable": {
                    "value": "emit_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorArray_483": {
                "variable": {
                    "value": "att_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_486": {
                "variable": {
                    "value": "coverage_att_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, encoder_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_488": {
                "variable": {
                    "value": "att_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, encoder_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_589": {
                "variable": {
                    "value": "(_, _, past_final, hidden_final, field_pos_nt, emit_ta, att_ta, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda _1, _2, _3, _4, _5, _6, _7, _8, _9, finished: tf.logical_not(tf.reduce_all(finished))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "loop_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(time, x0, past0, hidden0, field_pos0, emit_ta, att_ta, coverage_att_sum, att_mask, f0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_594": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "emit_ta.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_595": {
                "variable": {
                    "value": "pred_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(emit_ta.stack(), [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(emit_ta.stack(), [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(emit_ta.stack(), [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_691": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "import_meta_graph_693": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "ckpt.model_checkpoint_path + '.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_158": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_159": {
                "variable": {
                    "value": "(self.grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.mean_loss, train_params, colocate_gradients_with_ops=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_162": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_169": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "acc_loss",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_170": {
                "variable": {
                    "value": "self._cov_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "acc_cov_loss",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_171": {
                "variable": {
                    "value": "self._gate_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "acc_gate_loss",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_185": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_257": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "wte_tune",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.gpt_hparams.n_vocab, self.gpt_hparams.n_embd]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_262": {
                "variable": {
                    "value": "self.field_id2word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.fieldid2word",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_264": {
                "variable": {
                    "value": "self.encoder_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.encoder_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_265": {
                "variable": {
                    "value": "self.decoder_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.decoder_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_281": {
                "variable": {
                    "value": "self.field_word_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.field_id2word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.decoder_field_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_282": {
                "variable": {
                    "value": "self.field_embed_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.embedding_lookup(self.embedding, self.field_word_dec)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_285": {
                "variable": {
                    "value": "self.pos_embed_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.pembedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.decoder_pos_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_286": {
                "variable": {
                    "value": "self.rpos_embed_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.rembedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.decoder_rpos_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_289": {
                "variable": {
                    "value": "self.decoder_field_pos_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.field_embed_dec, self.pos_embed_dec, self.rpos_embed_dec]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_291": {
                "variable": {
                    "value": "field_pos_embed_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 1, field_pos_embed_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_292": {
                "variable": {
                    "value": "self.decoder_field_pos_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[field_pos_embed_zeros, self.decoder_field_pos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_313": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "inputs_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cond_314": {
                "variable": {
                    "value": "x_nt",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.reduce_all(finished)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.zeros([batch_size, self.uni_size], dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : inputs_ta.read(t + 1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_316": {
                "variable": {
                    "value": "d_nt",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.reduce_all(finished)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.zeros([batch_size, self.field_attention_size], dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : fields_ta.read(t + 1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "softmax_400": {
                "variable": {
                    "value": "o_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_401": {
                "variable": {
                    "value": "past_nt",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[past, next_outputs['presents']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_405": {
                "variable": {
                    "value": "batch_nums_time",
                    "type": "variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.encoder_input)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.decoder_input)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.encoder_input)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "fill_406": {
                "variable": {
                    "value": "time_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_407": {
                "variable": {
                    "value": "collect_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_nums_time, time_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_408": {
                "variable": {
                    "value": "this_field_pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder_field_pos_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "collect_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_nums_time, time_batch], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_409": {
                "variable": {
                    "value": "att_x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_410": {
                "variable": {
                    "value": "att_x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[att_x_in, this_field_pos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_422": {
                "variable": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.encoder_input)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.decoder_input)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.encoder_input)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_423": {
                "variable": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, dec_shape_len)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, encoder_len])",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, encoder_len])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_424": {
                "variable": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, dec_shape_len)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, encoder_len])",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, encoder_len])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, encoder_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_425": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_nums, self.encoder_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_427": {
                "variable": {
                    "value": "attn_dists_projected",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((batch_nums, self.encoder_input), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stack((batch_nums, self.encoder_input), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "att_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o_weight",
                            "variable"
                        ],
                        [
                            "(1 - p_gen) * o_weight",
                            "BinOp"
                        ],
                        [
                            "att_dist * att_mask",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, self.target_vocab]",
                            "List"
                        ],
                        [
                            "[batch_size, self.target_vocab]",
                            "List"
                        ]
                    ]
                }
            },
            "gather_nd_433": {
                "variable": {
                    "value": "copy_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.copy_gate_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "collect_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_nums_time, time_batch], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_439": {
                "variable": {
                    "value": "this_covloss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.minimum(coverage_att_sum, o_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_equal_444": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "inputs_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cond_445": {
                "variable": {
                    "value": "x_nt",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.reduce_all(finished)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.fill([batch_size], self.stop_token)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : inputs_ta.read(t)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "softmax_512": {
                "variable": {
                    "value": "o_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_output['logits'][:, :, :hparams.n_vocab]",
                            "Subscript"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ],
                        [
                            "next_outputs['logits'][:, -1, :] / tf.to_float(temperature)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_513": {
                "variable": {
                    "value": "past_nt",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[past, next_outputs['presents']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_517": {
                "variable": {
                    "value": "att_x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_518": {
                "variable": {
                    "value": "att_x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[att_x_in, field_pos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_532": {
                "variable": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.encoder_input)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.decoder_input)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.encoder_input)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_533": {
                "variable": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, dec_shape_len)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, encoder_len])",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, encoder_len])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_534": {
                "variable": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, dec_shape_len)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, encoder_len])",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, encoder_len])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, encoder_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_535": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_nums, self.encoder_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_537": {
                "variable": {
                    "value": "attn_dists_projected",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((batch_nums, self.encoder_input), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stack((batch_nums, self.encoder_input), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "att_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o_weight",
                            "variable"
                        ],
                        [
                            "(1 - p_gen) * o_weight",
                            "BinOp"
                        ],
                        [
                            "att_dist * att_mask",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, self.target_vocab]",
                            "List"
                        ],
                        [
                            "[batch_size, self.target_vocab]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_549": {
                "variable": {
                    "value": "x_nt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(final_dists, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_552": {
                "variable": {
                    "value": "next_token_att",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(attn_dists_projected, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_553": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(x_nt, next_token_att)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_555": {
                "variable": {
                    "value": "att_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(att_dist, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_556": {
                "variable": {
                    "value": "batch_num",
                    "type": "variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.encoder_input)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.decoder_input)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.encoder_input)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_557": {
                "variable": {
                    "value": "this_dec_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_num, att_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_558": {
                "variable": {
                    "value": "this_dec_field_id",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder_field",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "this_dec_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_num, att_pos], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_559": {
                "variable": {
                    "value": "this_dec_pos_id",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "this_dec_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_num, att_pos], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_560": {
                "variable": {
                    "value": "this_dec_rpos_id",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder_rpos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "this_dec_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_num, att_pos], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_566": {
                "variable": {
                    "value": "this_dec_field_word",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.field_id2word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "this_dec_field_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(self.encoder_field, this_dec_indices)",
                            "Call"
                        ],
                        [
                            "this_dec_field_id * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_567": {
                "variable": {
                    "value": "this_dec_field_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.embedding_lookup(self.embedding, this_dec_field_word)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_570": {
                "variable": {
                    "value": "this_dec_pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.pembedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "this_dec_pos_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(self.encoder_pos, this_dec_indices)",
                            "Call"
                        ],
                        [
                            "this_dec_pos_id * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "embedding_lookup_571": {
                "variable": {
                    "value": "this_dec_rpos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.rembedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "this_dec_rpos_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(self.encoder_rpos, this_dec_indices)",
                            "Call"
                        ],
                        [
                            "this_dec_rpos_id * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_573": {
                "variable": {
                    "value": "field_pos_nt",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[this_dec_field_emb, this_dec_pos_emb, this_dec_rpos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_577": {
                "variable": {
                    "value": "att_pos_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(att_dist, 1), tf.int32)",
                            "Call"
                        ],
                        [
                            "att_pos * mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_578": {
                "variable": {
                    "value": "att_pos_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_pos_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(att_pos, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(att_pos_tile, [1, encoder_len])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, encoder_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_579": {
                "variable": {
                    "value": "att_mask_enc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_580": {
                "variable": {
                    "value": "att_mask_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_mask_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, encoder_len)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(att_mask_enc, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(att_mask_enc, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_581": {
                "variable": {
                    "value": "att_mask_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_mask_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, encoder_len)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(att_mask_enc, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(att_mask_enc, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_582": {
                "variable": {
                    "value": "mask_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(att_pos_tile, att_mask_enc)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_or_585": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(t + 1, inputs_len)",
                            "Call"
                        ],
                        [
                            "tf.greater_equal(t, inputs_len)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.equal(x_nt, self.stop_token))",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.greater_equal(t, self.max_length))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.equal(x_nt, self.stop_token)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_or_586": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(t + 1, inputs_len)",
                            "Call"
                        ],
                        [
                            "tf.greater_equal(t, inputs_len)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.equal(x_nt, self.stop_token))",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.greater_equal(t, self.max_length))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.greater_equal(t, self.max_length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_106": {
                "x": {
                    "value": "self.decoder_pos_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(self.decoder_pos_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_113": {
                "input": {
                    "value": "dist0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_128": {
                "input": {
                    "value": "self.decoder_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_equal_135": {
                "x": {
                    "value": "batch_nums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, dec_shape_len)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, encoder_len])",
                            "Call"
                        ],
                        [
                            "tf.range(0, limit=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_nums, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(batch_nums, [1, encoder_len])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "decoder_len_com",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(self.decoder_len, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(decoder_len_com, [1, dec_shape_len])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_138": {
                "input_tensor": {
                    "value": "self.decoder_output_one_hot * tf.log(de_outputs + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_146": {
                "input_tensor": {
                    "value": "self.copy_gate_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_float_210": {
                "x": {
                    "value": "self.encoder_pos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_246": {
                "input": {
                    "value": "self.decoder_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_255": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_261": {
                "name_or_scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_268": {
                "variable": {
                    "value": "self.field_word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.field_id2word",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.encoder_field",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_269": {
                "variable": {
                    "value": "self.field_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.embedding_lookup(self.embedding, self.field_word)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_274": {
                "variable": {
                    "value": "self.pembedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "pembedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.position_vocab, self.pos_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_275": {
                "variable": {
                    "value": "self.rembedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "rembedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.position_vocab, self.pos_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_276": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.pembedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.encoder_pos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_277": {
                "variable": {
                    "value": "self.rpos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.rembedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.encoder_rpos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_296": {
                "input": {
                    "value": "self.encoder_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_297": {
                "input": {
                    "value": "self.encoder_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "shape": {
                    "value": "[batch_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_302": {
                "shape": {
                    "value": "[batch_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_305": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_307": {
                "a": {
                    "value": "fields",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_363": {
                "input": {
                    "value": "self.decoder_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_364": {
                "input": {
                    "value": "self.decoder_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_365": {
                "input": {
                    "value": "self.encoder_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_371": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_456": {
                "a": {
                    "value": "emit_gate.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_470": {
                "input": {
                    "value": "self.encoder_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_471": {
                "input": {
                    "value": "self.encoder_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_477": {
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "self.empty_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_478": {
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_479": {
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_106": {
                "input": {
                    "value": "self.decoder_pos_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "shape": {
                    "value": "[tf.shape(self.encoder_input)[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_159": {
                "ys": {
                    "value": "self.mean_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "train_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "colocate_gradients_with_ops": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_initializer_169": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_170": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_171": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_279": {
                "variable": {
                    "value": "self.field_pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.field_embed, self.pos_embed, self.rpos_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_283": {
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.field_word_dec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_290": {
                "input": {
                    "value": "self.decoder_field_pos_emb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_314": {
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(t + 1, inputs_len)",
                            "Call"
                        ],
                        [
                            "tf.greater_equal(t, inputs_len)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.equal(x_nt, self.stop_token))",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.greater_equal(t, self.max_length))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_all_316": {
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(t + 1, inputs_len)",
                            "Call"
                        ],
                        [
                            "tf.greater_equal(t, inputs_len)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.equal(x_nt, self.stop_token))",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.greater_equal(t, self.max_length))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_399": {
                "x": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "multiply_436": {
                "x": {
                    "value": "p_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "copy_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(self.copy_gate_mask, collect_ind)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_439": {
                "x": {
                    "value": "coverage_att_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, encoder_len], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "coverage_att_sum + o_weight",
                            "BinOp"
                        ],
                        [
                            "tf.zeros([batch_size, encoder_len], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "o_weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_all_445": {
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(t + 1, inputs_len)",
                            "Call"
                        ],
                        [
                            "tf.greater_equal(t, inputs_len)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.equal(x_nt, self.stop_token))",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.greater_equal(t, self.max_length))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_511": {
                "x": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "transpose_547": {
                "a": {
                    "value": "o_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_549": {
                "input": {
                    "value": "final_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dist + (1 - p_gen) * attn_dists_projected",
                            "BinOp"
                        ],
                        [
                            "out_dist + attn_dists_projected",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_552": {
                "input": {
                    "value": "attn_dists_projected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scatter_nd(indices, att_dist, shape)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices, att_dist, shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_553": {
                "x": {
                    "value": "x_nt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.reduce_all(finished), lambda : tf.zeros([batch_size, self.uni_size], dtype=tf.float32), lambda : inputs_ta.read(t + 1))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.reduce_all(finished), lambda : tf.fill([batch_size], self.stop_token), lambda : inputs_ta.read(t))",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(final_dists, 1), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "next_token_att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(attn_dists_projected, 1), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_555": {
                "input": {
                    "value": "att_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o_weight",
                            "variable"
                        ],
                        [
                            "(1 - p_gen) * o_weight",
                            "BinOp"
                        ],
                        [
                            "att_dist * att_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_568": {
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "this_dec_field_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.field_id2word, this_dec_field_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "not_equal_582": {
                "x": {
                    "value": "att_pos_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(att_pos, 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(att_pos_tile, [1, encoder_len])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "att_mask_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, encoder_len)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(att_mask_enc, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(att_mask_enc, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_585": {
                "x": {
                    "value": "x_nt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.reduce_all(finished), lambda : tf.zeros([batch_size, self.uni_size], dtype=tf.float32), lambda : inputs_ta.read(t + 1))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.reduce_all(finished), lambda : tf.fill([batch_size], self.stop_token), lambda : inputs_ta.read(t))",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(final_dists, 1), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.stop_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_586": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self.max_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_138": {
                "x": {
                    "value": "de_outputs + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_270": {
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.field_word",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_314": {
                "shape": {
                    "value": "[batch_size, self.uni_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_316": {
                "shape": {
                    "value": "[batch_size, self.field_attention_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_not_321": {
                "x": {
                    "value": "tf.reduce_all(finished)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_445": {
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "self.stop_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_not_451": {
                "x": {
                    "value": "tf.reduce_all(finished)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_590": {
                "x": {
                    "value": "tf.reduce_all(finished)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_163": {
                "name": {
                    "value": "param.name.split(':')[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_all_321": {
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(t + 1, inputs_len)",
                            "Call"
                        ],
                        [
                            "tf.greater_equal(t, inputs_len)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.equal(x_nt, self.stop_token))",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.greater_equal(t, self.max_length))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_all_451": {
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(t + 1, inputs_len)",
                            "Call"
                        ],
                        [
                            "tf.greater_equal(t, inputs_len)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.equal(x_nt, self.stop_token))",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.greater_equal(t, self.max_length))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_all_590": {
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(t + 1, inputs_len)",
                            "Call"
                        ],
                        [
                            "tf.greater_equal(t, inputs_len)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.equal(x_nt, self.stop_token))",
                            "Call"
                        ],
                        [
                            "tf.logical_or(finished, tf.greater_equal(t, self.max_length))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_107": {
                "input": {
                    "value": "self.encoder_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_165": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "dualAttentionUnit.py": {
        "tensorflow": {
            "transpose_65": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(hs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_66": {
                "variable": {
                    "value": "fds",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(fds, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "hs2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(hs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_71": {
                "variable": {
                    "value": "phi_hs2d",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.xw_plus_b(hs2d, self.Wh, self.bh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "phi_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "phi_hs2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(tf.nn.xw_plus_b(hs2d, self.Wh, self.bh))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(hs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "fds2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(fds, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.field_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_74": {
                "variable": {
                    "value": "phi_fds2d",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.xw_plus_b(fds2d, self.Wf, self.bf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "phi_fds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "phi_fds2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(tf.nn.xw_plus_b(fds2d, self.Wf, self.bf))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(hs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_86": {
                "variable": {
                    "value": "gamma_h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.xw_plus_b(x, self.Ws, self.bs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_87": {
                "variable": {
                    "value": "alpha_h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.xw_plus_b(x, self.Wr, self.br)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_88": {
                "variable": {
                    "value": "fd_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "phi_fds * alpha_h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_89": {
                "variable": {
                    "value": "fd_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fd_weights - tf.reduce_max(fd_weights, reduction_indices=0, keepdims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_90": {
                "variable": {
                    "value": "fd_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fd_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(phi_fds * alpha_h, reduction_indices=2, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.exp(fd_weights - tf.reduce_max(fd_weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(fd_weights, 1e-06 + tf.reduce_sum(fd_weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-06 + tf.reduce_sum(fd_weights, reduction_indices=0, keepdims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_93": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "phi_hs * gamma_h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_96": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights - tf.reduce_max(weights, reduction_indices=0, keepdims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_97": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(phi_hs * gamma_h, reduction_indices=2, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.exp(weights - tf.reduce_max(weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights, 1e-06 + tf.reduce_sum(weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights * fd_weights, 1e-06 + tf.reduce_sum(weights * fd_weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights * coverage_penalty, 1e-06 + tf.reduce_sum(weights * coverage_penalty, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(weights, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weights, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.where(finished, tf.zeros_like(weights), weights)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-06 + tf.reduce_sum(weights, reduction_indices=0, keepdims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_98": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights * fd_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-06 + tf.reduce_sum(weights * fd_weights, reduction_indices=0, keepdims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_102": {
                "variable": {
                    "value": "coverage_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "coverage_att_sum * self.Wc + self.bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_103": {
                "variable": {
                    "value": "coverage_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(coverage_penalty, [1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_104": {
                "variable": {
                    "value": "coverage_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "coverage_penalty - tf.reduce_max(coverage_penalty, reduction_indices=0, keepdims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_105": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights * coverage_penalty",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-06 + tf.reduce_sum(weights * coverage_penalty, reduction_indices=0, keepdims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_107": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "hs * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_113": {
                "variable": {
                    "value": "p_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(context, self.wh_ptr) + tf.matmul(last_x, self.ws_ptr) + tf.matmul(in_t, self.wx_ptr) + self.b_ptr",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(p_gen)",
                            "Call"
                        ],
                        [
                            "tf.where(finished, tf.ones_like(p_gen), p_gen)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_115": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(phi_hs * gamma_h, reduction_indices=2, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.exp(weights - tf.reduce_max(weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights, 1e-06 + tf.reduce_sum(weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights * fd_weights, 1e-06 + tf.reduce_sum(weights * fd_weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights * coverage_penalty, 1e-06 + tf.reduce_sum(weights * coverage_penalty, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(weights, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weights, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.where(finished, tf.zeros_like(weights), weights)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_116": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(phi_hs * gamma_h, reduction_indices=2, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.exp(weights - tf.reduce_max(weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights, 1e-06 + tf.reduce_sum(weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights * fd_weights, 1e-06 + tf.reduce_sum(weights * fd_weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights * coverage_penalty, 1e-06 + tf.reduce_sum(weights * coverage_penalty, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(weights, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weights, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.where(finished, tf.zeros_like(weights), weights)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "self.Wh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wh",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_26": {
                "variable": {
                    "value": "self.bh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bh",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_27": {
                "variable": {
                    "value": "self.Ws",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Ws",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "self.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bs",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wo",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * input_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_30": {
                "variable": {
                    "value": "self.bo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bo",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_31": {
                "variable": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wf",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[field_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bf",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "self.Wr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wr",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "self.br",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "br",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_37": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wc",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "self.bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bc",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_42": {
                "variable": {
                    "value": "self.wh_ptr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "wh_ptr",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "self.ws_ptr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ws_ptr",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "self.wx_ptr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "wx_ptr",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.emb_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_46": {
                "variable": {
                    "value": "self.b_ptr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b_ptr",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_120": {
                "variable": {
                    "value": "p_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.ones_like(p_gen)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "p_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(context, self.wh_ptr) + tf.matmul(last_x, self.ws_ptr) + tf.matmul(in_t, self.wx_ptr) + self.b_ptr",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(p_gen)",
                            "Call"
                        ],
                        [
                            "tf.where(finished, tf.ones_like(p_gen), p_gen)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_121": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros_like(weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(phi_hs * gamma_h, reduction_indices=2, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.exp(weights - tf.reduce_max(weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights, 1e-06 + tf.reduce_sum(weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights * fd_weights, 1e-06 + tf.reduce_sum(weights * fd_weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights * coverage_penalty, 1e-06 + tf.reduce_sum(weights * coverage_penalty, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(weights, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weights, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.where(finished, tf.zeros_like(weights), weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "xw_plus_b_71": {
                "x": {
                    "value": "hs2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(hs, [-1, self.input_size])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "self.Wh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.bh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_72": {
                "input": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(hs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "xw_plus_b_74": {
                "x": {
                    "value": "fds2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(fds, [-1, self.field_size])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "self.Wf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_75": {
                "input": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(hs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "xw_plus_b_86": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Ws",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.bs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_87": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.Wr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.br",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_103": {
                "a": {
                    "value": "coverage_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(coverage_att_sum * self.Wc + self.bc)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.transpose(coverage_penalty, [1, 0]), -1)",
                            "Call"
                        ],
                        [
                            "tf.exp(coverage_penalty - tf.reduce_max(coverage_penalty, reduction_indices=0, keepdims=True))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_68": {
                "input": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(hs, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_89": {
                "input_tensor": {
                    "value": "fd_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(phi_fds * alpha_h, reduction_indices=2, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.exp(fd_weights - tf.reduce_max(fd_weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(fd_weights, 1e-06 + tf.reduce_sum(fd_weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_90": {
                "input_tensor": {
                    "value": "fd_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(phi_fds * alpha_h, reduction_indices=2, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.exp(fd_weights - tf.reduce_max(fd_weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(fd_weights, 1e-06 + tf.reduce_sum(fd_weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_96": {
                "input_tensor": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(phi_hs * gamma_h, reduction_indices=2, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.exp(weights - tf.reduce_max(weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights, 1e-06 + tf.reduce_sum(weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights * fd_weights, 1e-06 + tf.reduce_sum(weights * fd_weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights * coverage_penalty, 1e-06 + tf.reduce_sum(weights * coverage_penalty, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(weights, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weights, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.where(finished, tf.zeros_like(weights), weights)",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_97": {
                "input_tensor": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(phi_hs * gamma_h, reduction_indices=2, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.exp(weights - tf.reduce_max(weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights, 1e-06 + tf.reduce_sum(weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights * fd_weights, 1e-06 + tf.reduce_sum(weights * fd_weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights * coverage_penalty, 1e-06 + tf.reduce_sum(weights * coverage_penalty, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(weights, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weights, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.where(finished, tf.zeros_like(weights), weights)",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "input_tensor": {
                    "value": "weights * fd_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_104": {
                "input_tensor": {
                    "value": "coverage_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(coverage_att_sum * self.Wc + self.bc)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.transpose(coverage_penalty, [1, 0]), -1)",
                            "Call"
                        ],
                        [
                            "tf.exp(coverage_penalty - tf.reduce_max(coverage_penalty, reduction_indices=0, keepdims=True))",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_105": {
                "input_tensor": {
                    "value": "weights * coverage_penalty",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_112": {
                "a": {
                    "value": "last_x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.ws_ptr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_120": {
                "input": {
                    "value": "p_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(context, self.wh_ptr) + tf.matmul(last_x, self.ws_ptr) + tf.matmul(in_t, self.wx_ptr) + self.b_ptr",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(p_gen)",
                            "Call"
                        ],
                        [
                            "tf.where(finished, tf.ones_like(p_gen), p_gen)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_121": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(phi_hs * gamma_h, reduction_indices=2, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.exp(weights - tf.reduce_max(weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights, 1e-06 + tf.reduce_sum(weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights * fd_weights, 1e-06 + tf.reduce_sum(weights * fd_weights, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.divide(weights * coverage_penalty, 1e-06 + tf.reduce_sum(weights * coverage_penalty, reduction_indices=0, keepdims=True))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(weights, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weights, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.where(finished, tf.zeros_like(weights), weights)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fgateLstmUnit.py": {
        "tensorflow": {
            "concat_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, h_prev]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_36": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.xw_plus_b(x, self.W, self.b)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_37": {
                "variable": {
                    "value": "(r, d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.xw_plus_b(fd, self.W1, self.b1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_19": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.input_size + self.hidden_size, 4 * self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4 * self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_21": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.field_size, 2 * self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_22": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_44": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros_like(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(o) * tf.tanh(c)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "xw_plus_b_36": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x, h_prev], 1)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_37": {
                "x": {
                    "value": "fd",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_40": {
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_40": {
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(f + 1.0) * c_prev + tf.sigmoid(i) * tf.tanh(j) + tf.sigmoid(r) * tf.tanh(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_39": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_39": {
                "x": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_44": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(o) * tf.tanh(c)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_45": {
                "condition": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "c_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(f + 1.0) * c_prev + tf.sigmoid(i) * tf.tanh(j) + tf.sigmoid(r) * tf.tanh(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_initializer_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "shape_20": {
                "variable": {
                    "value": "dynamic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_26": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                }
            },
            "convert_to_tensor_149": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(value, name='value')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_state]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_39": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_state]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_40": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_41": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x - u)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "start + [n, m // n]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "start + [a * b]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, nx, nf]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=w_init_stdev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_63": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nf]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [1, nx, nf], initializer=tf.random_normal_initializer(stddev=w_init_stdev))",
                            "Call"
                        ],
                        [
                            "w * b - tf.cast(10000000000.0, w.dtype) * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w * tf.rsqrt(tf.cast(v.shape[-1].value, w.dtype))",
                            "BinOp"
                        ],
                        [
                            "mask_attn_weights(w)",
                            "Call"
                        ],
                        [
                            "softmax(w)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_76": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i >= j - ns + nd",
                            "Compare"
                        ],
                        [
                            "mlp(norm(x, 'ln_2'), 'mlp', nx * 4, hparams=hparams)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [n_state], initializer=tf.constant_initializer(0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [nf], initializer=tf.constant_initializer(0))",
                            "Call"
                        ],
                        [
                            "attention_mask(nd, ns, dtype=w.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [1, 1, nd, ns])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, nd, ns]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_103": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([pk, k], axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_108": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [1, nx, nf], initializer=tf.random_normal_initializer(stddev=w_init_stdev))",
                            "Call"
                        ],
                        [
                            "w * b - tf.cast(10000000000.0, w.dtype) * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w * tf.rsqrt(tf.cast(v.shape[-1].value, w.dtype))",
                            "BinOp"
                        ],
                        [
                            "mask_attn_weights(w)",
                            "Call"
                        ],
                        [
                            "softmax(w)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([pv, v], axis=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_114": {
                "variable": {
                    "value": "present",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[k, v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_151": {
                "input": {
                    "value": "tf.expand_dims(value, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[size] + [1] * ndims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_164": {
                "variable": {
                    "value": "wte",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wte",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hparams.n_vocab, hparams.n_embd]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_167": {
                "variable": {
                    "value": "wte_tune",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wte_tune",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "wte",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wte', [hparams.n_vocab, hparams.n_embd], initializer=tf.random_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_177": {
                "variable": {
                    "value": "wpe",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wpe",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hparams.n_ctx, hparams.n_embd]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_184": {
                "variable": {
                    "value": "wte_tune",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wte_tune",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hparams.n_vocab, hparams.n_embd]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_191": {
                "variable": {
                    "value": "wte_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "wte_tune",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wte_tune', initializer=wte, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('wte_tune', [hparams.n_vocab, hparams.n_embd], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wte_emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_192": {
                "variable": {
                    "value": "wpe_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "wpe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wpe', [hparams.n_ctx, hparams.n_embd], initializer=tf.random_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "positions_for(X, past_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "wpe_emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_25": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_27": {
                "input_tensor": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_87": {
                "a": {
                    "value": "split_states(x, hparams.n_head)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unstack_116": {
                "variable": {
                    "value": "(pk, pv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "past",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_117": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pk, k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_118": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pv, v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_151": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(value, name='value')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_155": {
                "input": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_156": {
                "input": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_202": {
                "variable": {
                    "value": "results[present]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "presents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_206": {
                "variable": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu(conv1d(x, 'c_fc', n_state))",
                            "Call"
                        ],
                        [
                            "wte_emb + wpe_emb",
                            "BinOp"
                        ],
                        [
                            "norm(h, 'ln_f')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch * sequence, hparams.n_embd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_209": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h, [batch * sequence, hparams.n_embd])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "wte_tune",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wte_tune', initializer=wte, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('wte_tune', [hparams.n_vocab, hparams.n_embd], trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_210": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_flat, wte_tune, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch, sequence, hparams.n_vocab])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, sequence, hparams.n_vocab]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_31": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_41": {
                "x": {
                    "value": "x - u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_42": {
                "x": {
                    "value": "s + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_91": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rsqrt_104": {
                "x": {
                    "value": "tf.cast(v.shape[-1].value, w.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_113": {
                "value": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(tf.reshape(x, [-1, nx]), tf.reshape(w, [-1, nf])) + b, start + [nf])",
                            "Call"
                        ],
                        [
                            "conv1d(x, 'c_attn', n_state * 3)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_157": {},
            "device_195": {
                "device_name": {
                    "value": "/gpu:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_38": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_39": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_normal_initializer_62": {
                "stddev": {
                    "value": "w_init_stdev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_63": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "a": {
                    "value": "tf.reshape(x, [-1, nx])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.reshape(w, [-1, nf])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_98": {
                "x": {
                    "value": "10000000000.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_104": {
                "x": {
                    "value": "v.shape[-1].value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_165": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_178": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_186": {
                "input": {
                    "value": "past",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unstack_197": {
                "value": {
                    "value": "past",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_31": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, axis=axis, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "(x - u) * tf.rsqrt(s + epsilon)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "tensorflow": {
            "warning_32": {
                "msg": {
                    "value": "'{} script returned non-zero exit code: {}'.format(bleu_script, msg)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}