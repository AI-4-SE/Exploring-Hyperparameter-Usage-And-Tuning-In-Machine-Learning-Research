{
    "src/bayRel_AML.py": {
        "sklearn": {},
        "tensorflow": {
            "Session_857": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_16": {
                "seed": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_77": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(random_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_dtype_374": {
                "variable": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_dtype_382": {
                "variable": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_444": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logp",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-0.69314718056",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_445": {
                "variable": {
                    "value": "neg",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logp",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "-0.69314718056",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_452": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.matmul(Z1, tf.transpose(Z2)), [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_453": {
                "variable": {
                    "value": "A_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.sigmoid(LogitRelaxedBernoulli(logits=logits, temperature=temperature).rsample())",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tfp.distributions.Bernoulli(logits=logits, dtype=tf.float32).sample()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_458": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "A_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(training, lambda : tf.sigmoid(LogitRelaxedBernoulli(logits=logits, temperature=temperature).rsample()), lambda : tfp.distributions.Bernoulli(logits=logits, dtype=tf.float32).sample())",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[Z1.shape[0], Z2.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_54": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([input_dim, output_dim], minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('name')",
                            "Call"
                        ],
                        [
                            "layer + '_' + str(get_layer_uid(layer))",
                            "BinOp"
                        ],
                        [
                            "kwargs.get('name')",
                            "Call"
                        ],
                        [
                            "self.__class__.__name__.lower()",
                            "Call"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_158": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_159": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_178": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_179": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_181": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_182": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_184": {
                "variable": {
                    "value": "deg_sa",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_185": {
                "variable": {
                    "value": "deg_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_205": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_206": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_208": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_209": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_211": {
                "variable": {
                    "value": "root_deg_sa",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(adj, axis=1, keepdims=True) + tf.ones([adj.shape[0], 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_212": {
                "variable": {
                    "value": "root_deg_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(adj, axis=0, keepdims=True) + tf.ones([1, adj.shape[1]])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_231": {
                "variable": {
                    "value": "root_deg_so",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "deg_so + tf.ones_like(deg_so)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_233": {
                "variable": {
                    "value": "root_deg_to",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "deg_to + tf.ones_like(deg_to)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_245": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_246": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_248": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_249": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_270": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_271": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_276": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_277": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_304": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_307": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_324": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_325": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_326": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_327": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_334": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_342": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(x, ignore_value)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "indices",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseTensor_343": {
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(x, ignore_value), name='indices')",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "tf.gather_nd(x, indices, name='values')",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "tf.shape(x, out_type=tf.int64, name='dense_shape')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_354": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value - self.means",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_417": {
                "variable": {
                    "value": "na",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(A)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_418": {
                "variable": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(B)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_421": {
                "variable": {
                    "value": "na",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "na",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(A), 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(na, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_422": {
                "variable": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(B), 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(nb, [1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_425": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(na - 2 * tf.matmul(A, B, False, True) + nb, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Uniform_435": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "high": {
                    "value": "1 - 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_489": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_508": {
                "variable": {
                    "value": "(self.inputs_s, self.inp_u_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "placeholders['features_source']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.input_dim_s, self.inp_dim_u]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_510": {
                "variable": {
                    "value": "(self.inputs_t, self.inp_u_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "placeholders['features_target']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.input_dim_t, self.inp_dim_u]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_521": {
                "variable": {
                    "value": "self.pairwise_g_logscale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "math.log(math.sqrt(dim_u))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_649": {
                "variable": {
                    "value": "self.nll_f_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(prd_f_s, lbl_f_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_653": {
                "variable": {
                    "value": "self.nll_f_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(prd_f_t, lbl_f_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_668": {
                "variable": {
                    "value": "self.qpzf_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(model.q_zf_s.log_prob(model.zf_s) - 30 * model.p_zf_s.log_prob(model.zf_s), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_670": {
                "variable": {
                    "value": "self.qpzf_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(model.q_zf_t.log_prob(model.zf_t) - 30 * model.p_zf_t.log_prob(model.zf_t), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_677": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "auc_681": {
                "variable": {
                    "value": "(self.recong_s_auc, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.sigmoid(prd_g_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "lbl_g_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['adj_source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "auc_682": {
                "variable": {
                    "value": "(self.recong_t_auc, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.sigmoid(prd_g_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "lbl_g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['adj_target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_684": {
                "variable": {
                    "value": "self.corp_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.greater_equal(tf.sigmoid(prd_g_s), 0.5), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(lbl_g_s, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_686": {
                "variable": {
                    "value": "self.acc_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.corp_s, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_687": {
                "variable": {
                    "value": "self.corp_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.greater_equal(tf.sigmoid(prd_g_t), 0.5), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(lbl_g_t, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_689": {
                "variable": {
                    "value": "self.acc_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.corp_t, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_691": {
                "variable": {
                    "value": "self.reconf_s_rmse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(prd_f_s, lbl_f_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_692": {
                "variable": {
                    "value": "self.reconf_t_rmse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(prd_f_t, lbl_f_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_738": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes_s, num_features_s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_739": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes_t, num_features_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_placeholder_740": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes_s, num_nodes_s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_placeholder_741": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes_t, num_nodes_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_placeholder_742": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes_s, num_nodes_s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_placeholder_743": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes_t, num_nodes_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_with_default_744": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_745": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_746": {
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_831": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_858": {
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_77": {
                "x": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "variable"
                        ],
                        [
                            "random_tensor + tf.random_uniform(noise_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_333": {
                "name": {
                    "value": "name or 'dense_to_sparse'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "cast_341": {
                "variable": {
                    "value": "ignore_value",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ignore_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "str"
                        ],
                        [
                            "as_numpy_dtype(x.dtype)(0)",
                            "Call"
                        ],
                        [
                            "tf.cast(ignore_value, x.dtype, name='ignore_value')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ignore_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_415": {
                "name_or_scope": {
                    "value": "pairwise_dist",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_446": {
                "x": {
                    "value": "1 - tf.math.exp(neg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_447": {
                "x": {
                    "value": "tf.clip_by_value(tf.math.expm1(-pos), clip_value_min=1e-20, clip_value_max=1000000.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_452": {
                "tensor": {
                    "value": "tf.matmul(Z1, tf.transpose(Z2))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_836": {
                "input_": {
                    "value": "placeholders['features_source']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[num_nodes_s, nfeat_s_recon]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_838": {
                "input_": {
                    "value": "placeholders['features_target']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[num_nodes_t, nfeat_s_recon]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_840": {
                "tensor": {
                    "value": "tf.eye(num_nodes_s) + tf.sparse_tensor_to_dense(placeholders['adj_orig_source'], validate_indices=False)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_843": {
                "tensor": {
                    "value": "tf.eye(num_nodes_t) + tf.sparse_tensor_to_dense(placeholders['adj_orig_target'], validate_indices=False)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_858": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_858": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_169": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_230": {
                "input_tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sparse_reduce_sum_230": {
                "sp_input": {
                    "value": "adj_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('data/drug/adj_drug.npy', allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "adj_s",
                            "Method Argument"
                        ],
                        [
                            "adj_s",
                            "Method Argument"
                        ],
                        [
                            "adj_s",
                            "Method Argument"
                        ],
                        [
                            "adj_s",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_232": {
                "input_tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sparse_reduce_sum_232": {
                "sp_input": {
                    "value": "adj_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('data/drug/adj_gene_db.npy', allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "adj_t",
                            "Method Argument"
                        ],
                        [
                            "adj_t",
                            "Method Argument"
                        ],
                        [
                            "adj_t",
                            "Method Argument"
                        ],
                        [
                            "adj_t",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_235": {
                "a": {
                    "value": "root_deg_so",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(deg_so + tf.ones_like(deg_so))",
                            "Call"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_236": {
                "a": {
                    "value": "root_deg_to",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(deg_to + tf.ones_like(deg_to))",
                            "Call"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_292": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_295": {
                "variable": {
                    "value": "self.vars[bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([output_dim], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "not_equal_342": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "ignore_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "str"
                        ],
                        [
                            "as_numpy_dtype(x.dtype)(0)",
                            "Call"
                        ],
                        [
                            "tf.cast(ignore_value, x.dtype, name='ignore_value')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_nd_344": {
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(x, ignore_value), name='indices')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "values",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_345": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_shape",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_417": {
                "x": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(A_vals, [Z1.shape[0], Z2.shape[0]])",
                            "Call"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_418": {
                "x": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_425": {
                "x": {
                    "value": "na - 2 * tf.matmul(A, B, False, True) + nb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_447": {
                "t": {
                    "value": "tf.math.expm1(-pos)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_452": {
                "a": {
                    "value": "Z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Z1",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(Z2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_453": {
                "x": {
                    "value": "LogitRelaxedBernoulli(logits=logits, temperature=temperature).rsample()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_487": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_522": {
                "tensor": {
                    "value": "logitexp(-0.5 * x / tf.exp(self.pairwise_g_logscale))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_621": {
                "input": {
                    "value": "self.p_zf_mean_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_622": {
                "input": {
                    "value": "self.p_zf_mean_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_646": {
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(logits=prd_g_s, targets=lbl_g_s, pos_weight=posw_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_649": {
                "x": {
                    "value": "prd_f_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['features_source']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "lbl_f_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['features_source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_650": {
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(logits=prd_g_t, targets=lbl_g_t, pos_weight=posw_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_653": {
                "x": {
                    "value": "prd_f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['features_target']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "lbl_f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['features_target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_659": {
                "input_tensor": {
                    "value": "tf.reduce_sum(1 + 2 * model.u_lstd_s - tf.square(model.u_mean_s) - tf.square(tf.exp(model.u_lstd_s)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_662": {
                "input_tensor": {
                    "value": "tf.reduce_sum(1 + 2 * model.u_lstd_t - tf.square(model.u_mean_t) - tf.square(tf.exp(model.u_lstd_t)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_668": {
                "input_tensor": {
                    "value": "model.q_zf_s.log_prob(model.zf_s) - 30 * model.p_zf_s.log_prob(model.zf_s)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_670": {
                "input_tensor": {
                    "value": "model.q_zf_t.log_prob(model.zf_t) - 30 * model.p_zf_t.log_prob(model.zf_t)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_681": {
                "x": {
                    "value": "prd_g_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['adj_source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_682": {
                "x": {
                    "value": "prd_g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['adj_target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_684": {
                "x": {
                    "value": "tf.greater_equal(tf.sigmoid(prd_g_s), 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_685": {
                "x": {
                    "value": "lbl_g_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['adj_source']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_686": {
                "x": {
                    "value": "self.corp_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_687": {
                "x": {
                    "value": "tf.greater_equal(tf.sigmoid(prd_g_t), 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_688": {
                "x": {
                    "value": "lbl_g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['adj_target']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_689": {
                "x": {
                    "value": "self.corp_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_691": {
                "x": {
                    "value": "prd_f_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['features_source']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "lbl_f_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['features_source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squared_difference_692": {
                "x": {
                    "value": "prd_f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['features_target']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "lbl_f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['features_target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_211": {
                "input_tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_211": {
                "shape": {
                    "value": "[adj.shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_212": {
                "input_tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_212": {
                "shape": {
                    "value": "[1, adj.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_215": {
                "a": {
                    "value": "nrm_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj / root_deg_sa / root_deg_ta",
                            "BinOp"
                        ],
                        [
                            "adj / root_deg_so / root_deg_to",
                            "BinOp"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_216": {
                "a": {
                    "value": "tf.transpose(nrm_adj)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_231": {
                "input": {
                    "value": "deg_so",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(adj, axis=1, keepdims=True) + tf.sparse_reduce_sum(adj_s, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_233": {
                "input": {
                    "value": "deg_to",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(adj, axis=0, keepdims=True) + tf.sparse_reduce_sum(adj_t, axis=0, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_253": {
                "a": {
                    "value": "nrm_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj / root_deg_sa / root_deg_ta",
                            "BinOp"
                        ],
                        [
                            "adj / root_deg_so / root_deg_to",
                            "BinOp"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_255": {
                "a": {
                    "value": "tf.transpose(nrm_adj)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_436": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.distributions.Uniform(low=1e-06, high=1 - 1e-06).sample(self.logits.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_440": {
                "features": {
                    "value": "-self.temperature * value + self.logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_446": {
                "x": {
                    "value": "neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(logp, clip_value_min=-1000000.0, clip_value_max=-0.69314718056)",
                            "Call"
                        ]
                    ]
                }
            },
            "expm1_447": {
                "x": {
                    "value": "-pos",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_452": {
                "a": {
                    "value": "Z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Z2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_547": {
                "x": {
                    "value": "self.u_lstd_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_548": {
                "x": {
                    "value": "self.u_lstd_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_597": {
                "x": {
                    "value": "self.zf_lstd_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_598": {
                "x": {
                    "value": "self.zf_lstd_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weighted_cross_entropy_with_logits_646": {
                "logits": {
                    "value": "prd_g_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['adj_source']",
                            "Subscript"
                        ]
                    ]
                },
                "targets": {
                    "value": "lbl_g_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['adj_source']",
                            "Subscript"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "posw_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_weight_dict['source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_650": {
                "logits": {
                    "value": "prd_g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['adj_target']",
                            "Subscript"
                        ]
                    ]
                },
                "targets": {
                    "value": "lbl_g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['adj_target']",
                            "Subscript"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "posw_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_weight_dict['target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_659": {
                "input_tensor": {
                    "value": "1 + 2 * model.u_lstd_s - tf.square(model.u_mean_s) - tf.square(tf.exp(model.u_lstd_s))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_662": {
                "input_tensor": {
                    "value": "1 + 2 * model.u_lstd_t - tf.square(model.u_mean_t) - tf.square(tf.exp(model.u_lstd_t))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_684": {
                "x": {
                    "value": "tf.sigmoid(prd_g_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "greater_equal_687": {
                "x": {
                    "value": "tf.sigmoid(prd_g_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "eye_840": {
                "num_rows": {
                    "value": "num_nodes_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj_s_sp.shape[0]",
                            "Subscript"
                        ],
                        [
                            "num_nodes_dict['source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_843": {
                "num_rows": {
                    "value": "num_nodes_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj_t_sp.shape[0]",
                            "Subscript"
                        ],
                        [
                            "num_nodes_dict['target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_188": {
                "a": {
                    "value": "adj / deg_sa / deg_ta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_216": {
                "a": {
                    "value": "nrm_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj / root_deg_sa / root_deg_ta",
                            "BinOp"
                        ],
                        [
                            "adj / root_deg_so / root_deg_to",
                            "BinOp"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_255": {
                "a": {
                    "value": "nrm_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj / root_deg_sa / root_deg_ta",
                            "BinOp"
                        ],
                        [
                            "adj / root_deg_so / root_deg_to",
                            "BinOp"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_295": {
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_355": {
                "x": {
                    "value": "2 * self.logscales",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_684": {
                "x": {
                    "value": "prd_g_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['adj_source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_687": {
                "x": {
                    "value": "prd_g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['adj_target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_254": {
                "a": {
                    "value": "root_deg_to",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(deg_to + tf.ones_like(deg_to))",
                            "Call"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_522": {
                "x": {
                    "value": "self.pairwise_g_logscale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_661": {
                "x": {
                    "value": "tf.exp(model.u_lstd_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_664": {
                "x": {
                    "value": "tf.exp(model.u_lstd_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_425": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(A_vals, [Z1.shape[0], Z2.shape[0]])",
                            "Call"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_660": {
                "x": {
                    "value": "model.u_mean_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_661": {
                "x": {
                    "value": "model.u_lstd_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_663": {
                "x": {
                    "value": "model.u_mean_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_664": {
                "x": {
                    "value": "model.u_lstd_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/bayRel_CF.py": {
        "sklearn": {},
        "tensorflow": {
            "Session_834": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_16": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_79": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(random_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_dtype_375": {
                "variable": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_dtype_383": {
                "variable": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_446": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logp",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-0.69314718056",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_447": {
                "variable": {
                    "value": "neg",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logp",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "-0.69314718056",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_454": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(Z1, tf.transpose(Z2))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_455": {
                "variable": {
                    "value": "A_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.sigmoid(LogitRelaxedBernoulli(logits=logits, temperature=temperature).rsample())",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tfp.distributions.Bernoulli(logits=logits, dtype=tf.float32).sample()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_459": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "A_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(training, lambda : tf.sigmoid(LogitRelaxedBernoulli(logits=logits, temperature=temperature).rsample()), lambda : tfp.distributions.Bernoulli(logits=logits, dtype=tf.float32).sample())",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[Z1.shape[0], Z2.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_56": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([input_dim, output_dim], minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('name')",
                            "Call"
                        ],
                        [
                            "layer + '_' + str(get_layer_uid(layer))",
                            "BinOp"
                        ],
                        [
                            "kwargs.get('name')",
                            "Call"
                        ],
                        [
                            "self.__class__.__name__.lower()",
                            "Call"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_159": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_179": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_180": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_182": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_183": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_185": {
                "variable": {
                    "value": "deg_sa",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_186": {
                "variable": {
                    "value": "deg_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_206": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_207": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_209": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_210": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_212": {
                "variable": {
                    "value": "root_deg_sa",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(adj, axis=1, keepdims=True) + tf.ones([adj.shape[0], 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_213": {
                "variable": {
                    "value": "root_deg_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(adj, axis=0, keepdims=True) + tf.ones([1, adj.shape[1]])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_232": {
                "variable": {
                    "value": "root_deg_so",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "deg_so + tf.ones_like(deg_so)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_234": {
                "variable": {
                    "value": "root_deg_to",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "deg_to + tf.ones_like(deg_to)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_246": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_247": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_249": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_250": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_271": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_272": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_277": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_278": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_305": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_308": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_325": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_326": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_327": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_328": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_335": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_343": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(x, ignore_value)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "indices",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseTensor_344": {
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(x, ignore_value), name='indices')",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "tf.gather_nd(x, indices, name='values')",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "tf.shape(x, out_type=tf.int64, name='dense_shape')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_355": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value - self.means",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_419": {
                "variable": {
                    "value": "na",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(A)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_420": {
                "variable": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(B)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_423": {
                "variable": {
                    "value": "na",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "na",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(A), 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(na, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_424": {
                "variable": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(B), 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(nb, [1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_427": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(na - 2 * tf.matmul(A, B, False, True) + nb, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Uniform_437": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "high": {
                    "value": "1 - 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_490": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_509": {
                "variable": {
                    "value": "(self.inputs_s, self.inp_u_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "placeholders['features_source']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.input_dim_s, self.inp_dim_u]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_511": {
                "variable": {
                    "value": "(self.inputs_t, self.inp_u_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "placeholders['features_target']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.input_dim_t, self.inp_dim_u]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_522": {
                "variable": {
                    "value": "self.pairwise_g_logscale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "math.log(math.sqrt(dim_u))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_646": {
                "variable": {
                    "value": "self.nll_f_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(prd_f_s, lbl_f_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_650": {
                "variable": {
                    "value": "self.nll_f_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(prd_f_t, lbl_f_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_665": {
                "variable": {
                    "value": "self.qpzf_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(model.q_zf_s.log_prob(model.zf_s) - 30 * model.p_zf_s.log_prob(model.zf_s), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_667": {
                "variable": {
                    "value": "self.qpzf_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(model.q_zf_t.log_prob(model.zf_t) - 30 * model.p_zf_t.log_prob(model.zf_t), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_674": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "auc_678": {
                "variable": {
                    "value": "(self.recong_s_auc, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.sigmoid(prd_g_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "lbl_g_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['adj_source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "auc_679": {
                "variable": {
                    "value": "(self.recong_t_auc, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.sigmoid(prd_g_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "lbl_g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['adj_target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_681": {
                "variable": {
                    "value": "self.corp_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.greater_equal(tf.sigmoid(prd_g_s), 0.5), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(lbl_g_s, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_683": {
                "variable": {
                    "value": "self.acc_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.corp_s, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_684": {
                "variable": {
                    "value": "self.corp_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.greater_equal(tf.sigmoid(prd_g_t), 0.5), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(lbl_g_t, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_686": {
                "variable": {
                    "value": "self.acc_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.corp_t, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_688": {
                "variable": {
                    "value": "self.reconf_s_rmse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(prd_f_s, lbl_f_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_689": {
                "variable": {
                    "value": "self.reconf_t_rmse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(prd_f_t, lbl_f_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_737": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes_s, num_features_s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_738": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes_t, num_features_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_placeholder_739": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes_s, num_nodes_s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_placeholder_740": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes_t, num_nodes_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_placeholder_741": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes_s, num_nodes_s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_placeholder_742": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes_t, num_nodes_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_with_default_743": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_744": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_745": {
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_808": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_835": {
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_79": {
                "x": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "variable"
                        ],
                        [
                            "random_tensor + tf.random_uniform(noise_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_334": {
                "name": {
                    "value": "name or 'dense_to_sparse'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "cast_342": {
                "variable": {
                    "value": "ignore_value",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ignore_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "str"
                        ],
                        [
                            "as_numpy_dtype(x.dtype)(0)",
                            "Call"
                        ],
                        [
                            "tf.cast(ignore_value, x.dtype, name='ignore_value')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ignore_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_417": {
                "name_or_scope": {
                    "value": "pairwise_dist",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_448": {
                "x": {
                    "value": "1 - tf.math.exp(neg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_449": {
                "x": {
                    "value": "tf.clip_by_value(tf.math.expm1(-pos), clip_value_min=1e-20, clip_value_max=1000000.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_454": {
                "a": {
                    "value": "Z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Z1",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(Z2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_813": {
                "input_": {
                    "value": "placeholders['features_source']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[num_nodes_s, nfeat_s_recon]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_815": {
                "input_": {
                    "value": "placeholders['features_target']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[num_nodes_t, nfeat_s_recon]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_817": {
                "tensor": {
                    "value": "tf.eye(num_nodes_s) + tf.sparse_tensor_to_dense(placeholders['adj_orig_source'], validate_indices=False)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_820": {
                "tensor": {
                    "value": "tf.eye(num_nodes_t) + tf.sparse_tensor_to_dense(placeholders['adj_orig_target'], validate_indices=False)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_835": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_835": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_231": {
                "input_tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sparse_reduce_sum_231": {
                "sp_input": {
                    "value": "adj_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('data/CF/adj_mirCF.npy', allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "adj_s",
                            "Method Argument"
                        ],
                        [
                            "adj_s",
                            "Method Argument"
                        ],
                        [
                            "adj_s",
                            "Method Argument"
                        ],
                        [
                            "adj_s",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_233": {
                "input_tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sparse_reduce_sum_233": {
                "sp_input": {
                    "value": "adj_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('data/CF/adj_metCF.npy', allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "adj_t",
                            "Method Argument"
                        ],
                        [
                            "adj_t",
                            "Method Argument"
                        ],
                        [
                            "adj_t",
                            "Method Argument"
                        ],
                        [
                            "adj_t",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_236": {
                "a": {
                    "value": "root_deg_so",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(deg_so + tf.ones_like(deg_so))",
                            "Call"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_237": {
                "a": {
                    "value": "root_deg_to",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(deg_to + tf.ones_like(deg_to))",
                            "Call"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_264": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_293": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_296": {
                "variable": {
                    "value": "self.vars[bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([output_dim], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "not_equal_343": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "ignore_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "str"
                        ],
                        [
                            "as_numpy_dtype(x.dtype)(0)",
                            "Call"
                        ],
                        [
                            "tf.cast(ignore_value, x.dtype, name='ignore_value')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_nd_345": {
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(x, ignore_value), name='indices')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "values",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_346": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_shape",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_419": {
                "x": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(A_vals, [Z1.shape[0], Z2.shape[0]])",
                            "Call"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_420": {
                "x": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_427": {
                "x": {
                    "value": "na - 2 * tf.matmul(A, B, False, True) + nb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_449": {
                "t": {
                    "value": "tf.math.expm1(-pos)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "transpose_454": {
                "a": {
                    "value": "Z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Z2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_455": {
                "x": {
                    "value": "LogitRelaxedBernoulli(logits=logits, temperature=temperature).rsample()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_488": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_523": {
                "tensor": {
                    "value": "logitexp(-0.5 * x / tf.exp(self.pairwise_g_logscale))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_618": {
                "input": {
                    "value": "self.p_zf_mean_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_619": {
                "input": {
                    "value": "self.p_zf_mean_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_643": {
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(logits=prd_g_s, targets=lbl_g_s, pos_weight=posw_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_646": {
                "x": {
                    "value": "prd_f_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['features_source']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "lbl_f_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['features_source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_647": {
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(logits=prd_g_t, targets=lbl_g_t, pos_weight=posw_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_650": {
                "x": {
                    "value": "prd_f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['features_target']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "lbl_f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['features_target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_656": {
                "input_tensor": {
                    "value": "tf.reduce_sum(1 + 2 * model.u_lstd_s - tf.square(model.u_mean_s) - tf.square(tf.exp(model.u_lstd_s)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_659": {
                "input_tensor": {
                    "value": "tf.reduce_sum(1 + 2 * model.u_lstd_t - tf.square(model.u_mean_t) - tf.square(tf.exp(model.u_lstd_t)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_665": {
                "input_tensor": {
                    "value": "model.q_zf_s.log_prob(model.zf_s) - 30 * model.p_zf_s.log_prob(model.zf_s)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_667": {
                "input_tensor": {
                    "value": "model.q_zf_t.log_prob(model.zf_t) - 30 * model.p_zf_t.log_prob(model.zf_t)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_678": {
                "x": {
                    "value": "prd_g_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['adj_source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_679": {
                "x": {
                    "value": "prd_g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['adj_target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_681": {
                "x": {
                    "value": "tf.greater_equal(tf.sigmoid(prd_g_s), 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_682": {
                "x": {
                    "value": "lbl_g_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['adj_source']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_683": {
                "x": {
                    "value": "self.corp_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_684": {
                "x": {
                    "value": "tf.greater_equal(tf.sigmoid(prd_g_t), 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_685": {
                "x": {
                    "value": "lbl_g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['adj_target']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_686": {
                "x": {
                    "value": "self.corp_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_688": {
                "x": {
                    "value": "prd_f_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['features_source']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "lbl_f_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['features_source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squared_difference_689": {
                "x": {
                    "value": "prd_f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['features_target']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "lbl_f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['features_target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_212": {
                "input_tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_212": {
                "shape": {
                    "value": "[adj.shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_213": {
                "input_tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_213": {
                "shape": {
                    "value": "[1, adj.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_216": {
                "a": {
                    "value": "nrm_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj / root_deg_sa / root_deg_ta",
                            "BinOp"
                        ],
                        [
                            "adj / root_deg_so / root_deg_to",
                            "BinOp"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_217": {
                "a": {
                    "value": "tf.transpose(nrm_adj)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_232": {
                "input": {
                    "value": "deg_so",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(adj, axis=1, keepdims=True) + tf.sparse_reduce_sum(adj_s, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_234": {
                "input": {
                    "value": "deg_to",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(adj, axis=0, keepdims=True) + tf.sparse_reduce_sum(adj_t, axis=0, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_254": {
                "a": {
                    "value": "nrm_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj / root_deg_sa / root_deg_ta",
                            "BinOp"
                        ],
                        [
                            "adj / root_deg_so / root_deg_to",
                            "BinOp"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_256": {
                "a": {
                    "value": "tf.transpose(nrm_adj)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_438": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.distributions.Uniform(low=1e-06, high=1 - 1e-06).sample(self.logits.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_442": {
                "features": {
                    "value": "-self.temperature * value + self.logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_448": {
                "x": {
                    "value": "neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(logp, clip_value_min=-1000000.0, clip_value_max=-0.69314718056)",
                            "Call"
                        ]
                    ]
                }
            },
            "expm1_449": {
                "x": {
                    "value": "-pos",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_548": {
                "x": {
                    "value": "self.u_lstd_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_549": {
                "x": {
                    "value": "self.u_lstd_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_597": {
                "x": {
                    "value": "self.zf_lstd_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_598": {
                "x": {
                    "value": "self.zf_lstd_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weighted_cross_entropy_with_logits_643": {
                "logits": {
                    "value": "prd_g_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['adj_source']",
                            "Subscript"
                        ]
                    ]
                },
                "targets": {
                    "value": "lbl_g_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['adj_source']",
                            "Subscript"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "posw_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_weight_dict['source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_647": {
                "logits": {
                    "value": "prd_g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['adj_target']",
                            "Subscript"
                        ]
                    ]
                },
                "targets": {
                    "value": "lbl_g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['adj_target']",
                            "Subscript"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "posw_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_weight_dict['target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_656": {
                "input_tensor": {
                    "value": "1 + 2 * model.u_lstd_s - tf.square(model.u_mean_s) - tf.square(tf.exp(model.u_lstd_s))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_659": {
                "input_tensor": {
                    "value": "1 + 2 * model.u_lstd_t - tf.square(model.u_mean_t) - tf.square(tf.exp(model.u_lstd_t))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_681": {
                "x": {
                    "value": "tf.sigmoid(prd_g_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "greater_equal_684": {
                "x": {
                    "value": "tf.sigmoid(prd_g_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "eye_817": {
                "num_rows": {
                    "value": "num_nodes_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj_s_sp.shape[0]",
                            "Subscript"
                        ],
                        [
                            "num_nodes_dict['source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_820": {
                "num_rows": {
                    "value": "num_nodes_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj_t_sp.shape[0]",
                            "Subscript"
                        ],
                        [
                            "num_nodes_dict['target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_189": {
                "a": {
                    "value": "adj / deg_sa / deg_ta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_217": {
                "a": {
                    "value": "nrm_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj / root_deg_sa / root_deg_ta",
                            "BinOp"
                        ],
                        [
                            "adj / root_deg_so / root_deg_to",
                            "BinOp"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_256": {
                "a": {
                    "value": "nrm_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj / root_deg_sa / root_deg_ta",
                            "BinOp"
                        ],
                        [
                            "adj / root_deg_so / root_deg_to",
                            "BinOp"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_296": {
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_356": {
                "x": {
                    "value": "2 * self.logscales",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_681": {
                "x": {
                    "value": "prd_g_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['adj_source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_684": {
                "x": {
                    "value": "prd_g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['adj_target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_255": {
                "a": {
                    "value": "root_deg_to",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(deg_to + tf.ones_like(deg_to))",
                            "Call"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_523": {
                "x": {
                    "value": "self.pairwise_g_logscale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_658": {
                "x": {
                    "value": "tf.exp(model.u_lstd_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_661": {
                "x": {
                    "value": "tf.exp(model.u_lstd_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_427": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(A_vals, [Z1.shape[0], Z2.shape[0]])",
                            "Call"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_657": {
                "x": {
                    "value": "model.u_mean_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_658": {
                "x": {
                    "value": "model.u_lstd_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_660": {
                "x": {
                    "value": "model.u_mean_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_661": {
                "x": {
                    "value": "model.u_lstd_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/bayRel_TCGA.py": {
        "sklearn": {},
        "tensorflow": {
            "Session_807": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_16": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_79": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(random_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_dtype_375": {
                "variable": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_dtype_383": {
                "variable": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "tf.as_dtype(dtype)",
                            "Call"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_446": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logp",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-0.69314718056",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_447": {
                "variable": {
                    "value": "neg",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logp",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "-0.69314718056",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_454": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(Z1, tf.transpose(Z2))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_455": {
                "variable": {
                    "value": "A_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.sigmoid(LogitRelaxedBernoulli(logits=logits, temperature=temperature).rsample())",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tfp.distributions.Bernoulli(logits=logits, dtype=tf.float32).sample()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_460": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "A_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(training, lambda : tf.sigmoid(LogitRelaxedBernoulli(logits=logits, temperature=temperature).rsample()), lambda : tfp.distributions.Bernoulli(logits=logits, dtype=tf.float32).sample())",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[Z1.shape[0], Z2.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_56": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([input_dim, output_dim], minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('name')",
                            "Call"
                        ],
                        [
                            "layer + '_' + str(get_layer_uid(layer))",
                            "BinOp"
                        ],
                        [
                            "kwargs.get('name')",
                            "Call"
                        ],
                        [
                            "self.__class__.__name__.lower()",
                            "Call"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_159": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_179": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_180": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_182": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_183": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_185": {
                "variable": {
                    "value": "deg_sa",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_186": {
                "variable": {
                    "value": "deg_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_206": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_207": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_209": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_210": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_212": {
                "variable": {
                    "value": "root_deg_sa",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(adj, axis=1, keepdims=True) + tf.ones([adj.shape[0], 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_213": {
                "variable": {
                    "value": "root_deg_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(adj, axis=0, keepdims=True) + tf.ones([1, adj.shape[1]])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_232": {
                "variable": {
                    "value": "root_deg_so",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "deg_so + tf.ones_like(deg_so)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_234": {
                "variable": {
                    "value": "root_deg_to",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "deg_to + tf.ones_like(deg_to)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_246": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_247": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_249": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_250": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_271": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_272": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_277": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_278": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_305": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_308": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_325": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_326": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_327": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_328": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_335": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_343": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(x, ignore_value)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "indices",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseTensor_344": {
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(x, ignore_value), name='indices')",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "tf.gather_nd(x, indices, name='values')",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "tf.shape(x, out_type=tf.int64, name='dense_shape')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_355": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value - self.means",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_419": {
                "variable": {
                    "value": "na",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(A)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_420": {
                "variable": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(B)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_423": {
                "variable": {
                    "value": "na",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "na",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(A), 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(na, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_424": {
                "variable": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(B), 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(nb, [1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_427": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(na - 2 * tf.matmul(A, B, False, True) + nb, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Uniform_437": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "high": {
                    "value": "1 - 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_491": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_510": {
                "variable": {
                    "value": "(self.inputs_s, self.inp_u_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "placeholders['features_source']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.input_dim_s, self.inp_dim_u]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_512": {
                "variable": {
                    "value": "(self.inputs_t, self.inp_u_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "placeholders['features_target']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.input_dim_t, self.inp_dim_u]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_523": {
                "variable": {
                    "value": "self.pairwise_g_logscale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "math.log(math.sqrt(dim_u))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_649": {
                "variable": {
                    "value": "self.nll_f_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(prd_f_s, lbl_f_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_653": {
                "variable": {
                    "value": "self.nll_f_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(prd_f_t, lbl_f_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_668": {
                "variable": {
                    "value": "self.qpzf_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(model.q_zf_s.log_prob(model.zf_s) - 30 * model.p_zf_s.log_prob(model.zf_s), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_670": {
                "variable": {
                    "value": "self.qpzf_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(model.q_zf_t.log_prob(model.zf_t) - 30 * model.p_zf_t.log_prob(model.zf_t), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_677": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "float"
                        ]
                    ]
                }
            },
            "auc_681": {
                "variable": {
                    "value": "(self.recong_s_auc, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.sigmoid(prd_g_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "lbl_g_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['adj_source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "auc_682": {
                "variable": {
                    "value": "(self.recong_t_auc, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.sigmoid(prd_g_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "lbl_g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['adj_target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_684": {
                "variable": {
                    "value": "self.corp_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.greater_equal(tf.sigmoid(prd_g_s), 0.5), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(lbl_g_s, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_686": {
                "variable": {
                    "value": "self.acc_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.corp_s, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_687": {
                "variable": {
                    "value": "self.corp_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.greater_equal(tf.sigmoid(prd_g_t), 0.5), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(lbl_g_t, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_689": {
                "variable": {
                    "value": "self.acc_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.corp_t, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_691": {
                "variable": {
                    "value": "self.reconf_s_rmse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(prd_f_s, lbl_f_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_692": {
                "variable": {
                    "value": "self.reconf_t_rmse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(prd_f_t, lbl_f_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_737": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes_s, num_features_s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_738": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes_t, num_features_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_placeholder_739": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes_s, num_nodes_s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_placeholder_740": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes_t, num_nodes_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_placeholder_741": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes_s, num_nodes_s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_placeholder_742": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_nodes_t, num_nodes_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_with_default_743": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_744": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_745": {
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_781": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_808": {
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_79": {
                "x": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "variable"
                        ],
                        [
                            "random_tensor + tf.random_uniform(noise_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_334": {
                "name": {
                    "value": "name or 'dense_to_sparse'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "cast_342": {
                "variable": {
                    "value": "ignore_value",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ignore_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "str"
                        ],
                        [
                            "as_numpy_dtype(x.dtype)(0)",
                            "Call"
                        ],
                        [
                            "tf.cast(ignore_value, x.dtype, name='ignore_value')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ignore_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_417": {
                "name_or_scope": {
                    "value": "pairwise_dist",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_448": {
                "x": {
                    "value": "1 - tf.math.exp(neg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_449": {
                "x": {
                    "value": "tf.clip_by_value(tf.math.expm1(-pos), clip_value_min=1e-20, clip_value_max=1000000.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_454": {
                "a": {
                    "value": "Z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Z1",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(Z2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_786": {
                "input_": {
                    "value": "placeholders['features_source']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[num_nodes_s, nfeat_s_recon]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_788": {
                "input_": {
                    "value": "placeholders['features_target']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[num_nodes_t, nfeat_s_recon]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_790": {
                "tensor": {
                    "value": "tf.eye(num_nodes_s) + tf.sparse_tensor_to_dense(placeholders['adj_orig_source'], validate_indices=False)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_793": {
                "tensor": {
                    "value": "tf.eye(num_nodes_t) + tf.sparse_tensor_to_dense(placeholders['adj_orig_target'], validate_indices=False)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_808": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_808": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_231": {
                "input_tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sparse_reduce_sum_231": {
                "sp_input": {
                    "value": "adj_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('data/breastTCGA/adj_mirTCGA.npy', allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "adj_s",
                            "Method Argument"
                        ],
                        [
                            "adj_s",
                            "Method Argument"
                        ],
                        [
                            "adj_s",
                            "Method Argument"
                        ],
                        [
                            "adj_s",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_233": {
                "input_tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sparse_reduce_sum_233": {
                "sp_input": {
                    "value": "adj_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('data/breastTCGA/adj_geneTCGA.npy', allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "adj_t",
                            "Method Argument"
                        ],
                        [
                            "adj_t",
                            "Method Argument"
                        ],
                        [
                            "adj_t",
                            "Method Argument"
                        ],
                        [
                            "adj_t",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_236": {
                "a": {
                    "value": "root_deg_so",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(deg_so + tf.ones_like(deg_so))",
                            "Call"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_237": {
                "a": {
                    "value": "root_deg_to",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(deg_to + tf.ones_like(deg_to))",
                            "Call"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_264": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_293": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_296": {
                "variable": {
                    "value": "self.vars[bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([output_dim], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "not_equal_343": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "ignore_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "str"
                        ],
                        [
                            "as_numpy_dtype(x.dtype)(0)",
                            "Call"
                        ],
                        [
                            "tf.cast(ignore_value, x.dtype, name='ignore_value')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_nd_345": {
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(x, ignore_value), name='indices')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "values",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_346": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_shape",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_419": {
                "x": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(A_vals, [Z1.shape[0], Z2.shape[0]])",
                            "Call"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_420": {
                "x": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_427": {
                "x": {
                    "value": "na - 2 * tf.matmul(A, B, False, True) + nb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_449": {
                "t": {
                    "value": "tf.math.expm1(-pos)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "transpose_454": {
                "a": {
                    "value": "Z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Z2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_455": {
                "x": {
                    "value": "LogitRelaxedBernoulli(logits=logits, temperature=temperature).rsample()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_489": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_524": {
                "tensor": {
                    "value": "logitexp(-0.5 * x / tf.exp(self.pairwise_g_logscale))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_620": {
                "input": {
                    "value": "self.p_zf_mean_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_621": {
                "input": {
                    "value": "self.p_zf_mean_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_646": {
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(logits=prd_g_s, targets=lbl_g_s, pos_weight=posw_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_649": {
                "x": {
                    "value": "prd_f_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['features_source']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "lbl_f_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['features_source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_650": {
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(logits=prd_g_t, targets=lbl_g_t, pos_weight=posw_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_653": {
                "x": {
                    "value": "prd_f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['features_target']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "lbl_f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['features_target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_659": {
                "input_tensor": {
                    "value": "tf.reduce_sum(1 + 2 * model.u_lstd_s - tf.square(model.u_mean_s) - tf.square(tf.exp(model.u_lstd_s)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_662": {
                "input_tensor": {
                    "value": "tf.reduce_sum(1 + 2 * model.u_lstd_t - tf.square(model.u_mean_t) - tf.square(tf.exp(model.u_lstd_t)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_668": {
                "input_tensor": {
                    "value": "model.q_zf_s.log_prob(model.zf_s) - 30 * model.p_zf_s.log_prob(model.zf_s)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_670": {
                "input_tensor": {
                    "value": "model.q_zf_t.log_prob(model.zf_t) - 30 * model.p_zf_t.log_prob(model.zf_t)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_681": {
                "x": {
                    "value": "prd_g_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['adj_source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_682": {
                "x": {
                    "value": "prd_g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['adj_target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_684": {
                "x": {
                    "value": "tf.greater_equal(tf.sigmoid(prd_g_s), 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_685": {
                "x": {
                    "value": "lbl_g_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['adj_source']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_686": {
                "x": {
                    "value": "self.corp_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_687": {
                "x": {
                    "value": "tf.greater_equal(tf.sigmoid(prd_g_t), 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_688": {
                "x": {
                    "value": "lbl_g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['adj_target']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_689": {
                "x": {
                    "value": "self.corp_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_691": {
                "x": {
                    "value": "prd_f_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['features_source']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "lbl_f_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['features_source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squared_difference_692": {
                "x": {
                    "value": "prd_f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['features_target']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "lbl_f_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['features_target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_212": {
                "input_tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_212": {
                "shape": {
                    "value": "[adj.shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_213": {
                "input_tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_213": {
                "shape": {
                    "value": "[1, adj.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_216": {
                "a": {
                    "value": "nrm_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj / root_deg_sa / root_deg_ta",
                            "BinOp"
                        ],
                        [
                            "adj / root_deg_so / root_deg_to",
                            "BinOp"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_217": {
                "a": {
                    "value": "tf.transpose(nrm_adj)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_232": {
                "input": {
                    "value": "deg_so",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(adj, axis=1, keepdims=True) + tf.sparse_reduce_sum(adj_s, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_234": {
                "input": {
                    "value": "deg_to",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(adj, axis=0, keepdims=True) + tf.sparse_reduce_sum(adj_t, axis=0, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_254": {
                "a": {
                    "value": "nrm_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj / root_deg_sa / root_deg_ta",
                            "BinOp"
                        ],
                        [
                            "adj / root_deg_so / root_deg_to",
                            "BinOp"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y + tf.sparse_tensor_dense_matmul(tf.transpose(adj / deg_sa / deg_ta), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_ta) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(y / tf.transpose(root_deg_to) + tf.sparse_tensor_dense_matmul(nrm_adj_t, y) + tf.matmul(tf.transpose(nrm_adj), x))",
                            "Call"
                        ],
                        [
                            "inp_t",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(y, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_t, y)",
                            "Call"
                        ],
                        [
                            "(self.logits + tf.math.log(eps) - tf.math.log(1.0 - eps)) / self.temperature",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_256": {
                "a": {
                    "value": "tf.transpose(nrm_adj)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x, name='x')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x + tf.sparse_tensor_dense_matmul(adj / deg_sa / deg_ta, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_sa + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.act(x / root_deg_so + tf.sparse_tensor_dense_matmul(nrm_adj_s, x) + tf.matmul(nrm_adj, y))",
                            "Call"
                        ],
                        [
                            "inp_s",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_s, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_438": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.distributions.Uniform(low=1e-06, high=1 - 1e-06).sample(self.logits.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_442": {
                "features": {
                    "value": "-self.temperature * value + self.logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_448": {
                "x": {
                    "value": "neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(logp, clip_value_min=-1000000.0, clip_value_max=-0.69314718056)",
                            "Call"
                        ]
                    ]
                }
            },
            "expm1_449": {
                "x": {
                    "value": "-pos",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_549": {
                "x": {
                    "value": "self.u_lstd_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_550": {
                "x": {
                    "value": "self.u_lstd_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_597": {
                "x": {
                    "value": "self.zf_lstd_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_598": {
                "x": {
                    "value": "self.zf_lstd_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weighted_cross_entropy_with_logits_646": {
                "logits": {
                    "value": "prd_g_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['adj_source']",
                            "Subscript"
                        ]
                    ]
                },
                "targets": {
                    "value": "lbl_g_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['adj_source']",
                            "Subscript"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "posw_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_weight_dict['source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_650": {
                "logits": {
                    "value": "prd_g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['adj_target']",
                            "Subscript"
                        ]
                    ]
                },
                "targets": {
                    "value": "lbl_g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_dict['adj_target']",
                            "Subscript"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "posw_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_weight_dict['target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_659": {
                "input_tensor": {
                    "value": "1 + 2 * model.u_lstd_s - tf.square(model.u_mean_s) - tf.square(tf.exp(model.u_lstd_s))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_662": {
                "input_tensor": {
                    "value": "1 + 2 * model.u_lstd_t - tf.square(model.u_mean_t) - tf.square(tf.exp(model.u_lstd_t))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_684": {
                "x": {
                    "value": "tf.sigmoid(prd_g_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "greater_equal_687": {
                "x": {
                    "value": "tf.sigmoid(prd_g_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "eye_790": {
                "num_rows": {
                    "value": "num_nodes_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj_s_sp.shape[0]",
                            "Subscript"
                        ],
                        [
                            "num_nodes_dict['source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_793": {
                "num_rows": {
                    "value": "num_nodes_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj_t_sp.shape[0]",
                            "Subscript"
                        ],
                        [
                            "num_nodes_dict['target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_189": {
                "a": {
                    "value": "adj / deg_sa / deg_ta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_217": {
                "a": {
                    "value": "nrm_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj / root_deg_sa / root_deg_ta",
                            "BinOp"
                        ],
                        [
                            "adj / root_deg_so / root_deg_to",
                            "BinOp"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_256": {
                "a": {
                    "value": "nrm_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj / root_deg_sa / root_deg_ta",
                            "BinOp"
                        ],
                        [
                            "adj / root_deg_so / root_deg_to",
                            "BinOp"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_296": {
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_356": {
                "x": {
                    "value": "2 * self.logscales",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_684": {
                "x": {
                    "value": "prd_g_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['adj_source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_687": {
                "x": {
                    "value": "prd_g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_dict['adj_target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_255": {
                "a": {
                    "value": "root_deg_to",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(deg_to + tf.ones_like(deg_to))",
                            "Call"
                        ],
                        [
                            "self.norm_adj(adj, adj_s, adj_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_524": {
                "x": {
                    "value": "self.pairwise_g_logscale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_661": {
                "x": {
                    "value": "tf.exp(model.u_lstd_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_664": {
                "x": {
                    "value": "tf.exp(model.u_lstd_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_427": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(A_vals, [Z1.shape[0], Z2.shape[0]])",
                            "Call"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_660": {
                "x": {
                    "value": "model.u_mean_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_661": {
                "x": {
                    "value": "model.u_lstd_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_663": {
                "x": {
                    "value": "model.u_mean_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_664": {
                "x": {
                    "value": "model.u_lstd_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}