{
    "dataset.py": {
        "torch": {
            "from_numpy_459": {
                "ndarray": {
                    "value": "rotation_1_wrt_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(relative_motion[:3, :3], (3, 3)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "rotation_1_wrt_2.reshape((3, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_460": {
                "ndarray": {
                    "value": "translation_1_wrt_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(np.reshape(relative_motion[:3, 3], (3, 1)) / self.estimated_scale_per_seq[folder]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "translation_1_wrt_2.reshape((3, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_461": {
                "ndarray": {
                    "value": "intrinsic_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "queue_intrinsic_matrix.get()",
                            "Call"
                        ],
                        [
                            "queue_intrinsic_matrix.get()",
                            "Call"
                        ],
                        [
                            "self.intrinsic_matrix_per_seq[folder][:3, :3]",
                            "Subscript"
                        ],
                        [
                            "intrinsic_matrix.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "intrinsic_matrix.reshape((3, 3))",
                            "Call"
                        ],
                        [
                            "self.intrinsic_matrix_per_seq[folder][:3, :3]",
                            "Subscript"
                        ],
                        [
                            "intrinsic_matrix.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "intrinsic_matrix.reshape((3, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_485": {
                "ndarray": {
                    "value": "intrinsic_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "queue_intrinsic_matrix.get()",
                            "Call"
                        ],
                        [
                            "queue_intrinsic_matrix.get()",
                            "Call"
                        ],
                        [
                            "self.intrinsic_matrix_per_seq[folder][:3, :3]",
                            "Subscript"
                        ],
                        [
                            "intrinsic_matrix.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "intrinsic_matrix.reshape((3, 3))",
                            "Call"
                        ],
                        [
                            "self.intrinsic_matrix_per_seq[folder][:3, :3]",
                            "Subscript"
                        ],
                        [
                            "intrinsic_matrix.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "intrinsic_matrix.reshape((3, 3))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "evaluate.py": {
        "torch": {
            "manual_seed_69": {
                "seed": {
                    "value": "10085",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.SfMDataset(image_file_names=test_filenames, folder_list=folder_list, adjacent_range=adjacent_range, transform=None, downsampling=input_downsampling, network_downsampling=network_downsampling, inlier_percentage=inlier_percentage, use_store_data=load_intermediate_data, store_data_root=evaluation_data_root, phase='validation', is_hsv=is_hsv, num_pre_workers=num_pre_workers, visible_interval=visibility_overlap, rgb_mode='rgb')",
                            "Call"
                        ],
                        [
                            "dataset.SfMDataset(image_file_names=test_filenames, folder_list=folder_list, adjacent_range=adjacent_range, transform=None, downsampling=input_downsampling, network_downsampling=network_downsampling, inlier_percentage=inlier_percentage, use_store_data=load_intermediate_data, store_data_root=evaluation_data_root, phase='test', is_hsv=is_hsv, num_pre_workers=num_pre_workers, visible_interval=visibility_overlap, rgb_mode='rgb')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_139": {
                "variable": {
                    "value": "depth_estimation_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "depth_estimation_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.FCDenseNet57(n_classes=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(depth_estimation_model)",
                            "Call"
                        ],
                        [
                            "models.FCDenseNet57(n_classes=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(depth_estimation_model)",
                            "Call"
                        ],
                        [
                            "depth_estimation_model.module",
                            "Attribute"
                        ],
                        [
                            "depth_estimation_model.module",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_147": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(trained_model_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_292": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.SfMDataset(image_file_names=test_filenames, folder_list=folder_list, adjacent_range=adjacent_range, transform=None, downsampling=input_downsampling, network_downsampling=network_downsampling, inlier_percentage=inlier_percentage, use_store_data=load_intermediate_data, store_data_root=evaluation_data_root, phase='validation', is_hsv=is_hsv, num_pre_workers=num_pre_workers, visible_interval=visibility_overlap, rgb_mode='rgb')",
                            "Call"
                        ],
                        [
                            "dataset.SfMDataset(image_file_names=test_filenames, folder_list=folder_list, adjacent_range=adjacent_range, transform=None, downsampling=input_downsampling, network_downsampling=network_downsampling, inlier_percentage=inlier_percentage, use_store_data=load_intermediate_data, store_data_root=evaluation_data_root, phase='test', is_hsv=is_hsv, num_pre_workers=num_pre_workers, visible_interval=visibility_overlap, rgb_mode='rgb')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_299": {
                "variable": {
                    "value": "depth_estimation_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "depth_estimation_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.FCDenseNet57(n_classes=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(depth_estimation_model)",
                            "Call"
                        ],
                        [
                            "models.FCDenseNet57(n_classes=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(depth_estimation_model)",
                            "Call"
                        ],
                        [
                            "depth_estimation_model.module",
                            "Attribute"
                        ],
                        [
                            "depth_estimation_model.module",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_307": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(trained_model_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_197": {
                "input": {
                    "value": "predicted_depth_maps_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_estimation_model(colors_1)",
                            "Call"
                        ],
                        [
                            "depth_estimation_model(colors_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_199": {
                "input": {
                    "value": "predicted_depth_maps_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_estimation_model(colors_2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "losses.py": {
        "torch": {
            "tensor_20": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_27": {
                "variable": {
                    "value": "weighted_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_30": {
                "variable": {
                    "value": "sum_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_ratio_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(boundaries * predicted_depths + self.epsilon) - torch.log(boundaries * goal_depths + self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "torch.where(input_sparse_depths < 0.5, self.zero, torch.log(absolute_depth_estimations + self.epsilon) - torch.log(input_sparse_depths))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_45": {
                "variable": {
                    "value": "translation_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(translations * translations, dim=(1, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "translation_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_116": {
                "variable": {
                    "value": "(self.y_grid, self.x_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(start=0, end=height, dtype=torch.float32).cuda(), torch.arange(start=0, end=width, dtype=torch.float32).cuda()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "location_3d_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(self.x_grid - cx) / fx * depth_maps, (self.y_grid - cy) / fy * depth_maps, depth_maps]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "warped_location_3d_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(self.x_grid - cx) / fx * warped_depth_maps, (self.y_grid - cy) / fy * warped_depth_maps, warped_depth_maps]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_171": {
                "variable": {
                    "value": "self.zero",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "where_176": {
                "variable": {
                    "value": "depth_ratio_map",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "input_sparse_depths < 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.zero",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.log(absolute_depth_estimations + self.epsilon) - torch.log(input_sparse_depths)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_180": {
                "variable": {
                    "value": "weighted_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_sparse_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_183": {
                "variable": {
                    "value": "sum_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(input_sparse_masks, depth_ratio_map)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_32": {
                "input": {
                    "value": "loss_1 + loss_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_66": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(intersect_masks * (depth_maps - warped_depth_maps) * (depth_maps - warped_depth_maps), dim=(1, 2, 3), keepdim=False) / (0.5 * torch.sum(intersect_masks * (depth_maps * depth_maps + warped_depth_maps * warped_depth_maps), dim=(1, 2, 3), keepdim=False) + self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss * translation_weights) / torch.sum(translation_weights)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(sparse_masks * torch.abs(flows - flows_from_depth), dim=(1, 2, 3)) / (self.epsilon + torch.sum(sparse_masks, dim=(1, 2, 3)))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(sparse_masks * torch.abs(flows - flows_from_depth), dim=(1, 2, 3), keepdim=False) / (self.epsilon + torch.sum(sparse_masks, dim=(1, 2, 3), keepdim=False))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(intersect_masks * torch.abs(images - twice_warped_images), dim=(1, 2, 3)) / (self.epsilon + torch.sum(intersect_masks, dim=(1, 2, 3)))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(intersect_masks * (depth_maps - warped_depth_maps) * (depth_maps - warped_depth_maps), dim=(1, 2, 3), keepdim=False) / (0.5 * torch.sum(intersect_masks * (depth_maps * depth_maps + warped_depth_maps * warped_depth_maps), dim=(1, 2, 3), keepdim=False) + 1e-05 * mean_value * mean_value)",
                            "BinOp"
                        ],
                        [
                            "2.0 * torch.sum(intersect_masks * torch.abs(location_3d_maps - warped_location_3d_maps), dim=(1, 2, 3), keepdim=False) / (1e-05 * mean_value + torch.sum(intersect_masks * (depth_maps + torch.abs(warped_depth_maps)), dim=(1, 2, 3), keepdim=False))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(masks * torch.abs(depth_maps - warped_depth_maps), dim=(1, 2, 3), keepdim=False) / (0.5 * torch.sum(masks * (torch.abs(depth_maps) + torch.abs(warped_depth_maps)), dim=(1, 2, 3), keepdim=False) + 1e-05 * mean_value)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(sparse_depth_masks * torch.abs(scaled_depth_maps - sparse_depth_maps) / (self.eps + sparse_depth_maps), dim=(1, 2, 3), keepdim=False) / torch.sum(sparse_depth_masks, dim=(1, 2, 3), keepdim=False)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_91": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(intersect_masks * (depth_maps - warped_depth_maps) * (depth_maps - warped_depth_maps), dim=(1, 2, 3), keepdim=False) / (0.5 * torch.sum(intersect_masks * (depth_maps * depth_maps + warped_depth_maps * warped_depth_maps), dim=(1, 2, 3), keepdim=False) + self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss * translation_weights) / torch.sum(translation_weights)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(sparse_masks * torch.abs(flows - flows_from_depth), dim=(1, 2, 3)) / (self.epsilon + torch.sum(sparse_masks, dim=(1, 2, 3)))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(sparse_masks * torch.abs(flows - flows_from_depth), dim=(1, 2, 3), keepdim=False) / (self.epsilon + torch.sum(sparse_masks, dim=(1, 2, 3), keepdim=False))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(intersect_masks * torch.abs(images - twice_warped_images), dim=(1, 2, 3)) / (self.epsilon + torch.sum(intersect_masks, dim=(1, 2, 3)))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(intersect_masks * (depth_maps - warped_depth_maps) * (depth_maps - warped_depth_maps), dim=(1, 2, 3), keepdim=False) / (0.5 * torch.sum(intersect_masks * (depth_maps * depth_maps + warped_depth_maps * warped_depth_maps), dim=(1, 2, 3), keepdim=False) + 1e-05 * mean_value * mean_value)",
                            "BinOp"
                        ],
                        [
                            "2.0 * torch.sum(intersect_masks * torch.abs(location_3d_maps - warped_location_3d_maps), dim=(1, 2, 3), keepdim=False) / (1e-05 * mean_value + torch.sum(intersect_masks * (depth_maps + torch.abs(warped_depth_maps)), dim=(1, 2, 3), keepdim=False))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(masks * torch.abs(depth_maps - warped_depth_maps), dim=(1, 2, 3), keepdim=False) / (0.5 * torch.sum(masks * (torch.abs(depth_maps) + torch.abs(warped_depth_maps)), dim=(1, 2, 3), keepdim=False) + 1e-05 * mean_value)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(sparse_depth_masks * torch.abs(scaled_depth_maps - sparse_depth_maps) / (self.eps + sparse_depth_maps), dim=(1, 2, 3), keepdim=False) / torch.sum(sparse_depth_masks, dim=(1, 2, 3), keepdim=False)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_109": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(intersect_masks * (depth_maps - warped_depth_maps) * (depth_maps - warped_depth_maps), dim=(1, 2, 3), keepdim=False) / (0.5 * torch.sum(intersect_masks * (depth_maps * depth_maps + warped_depth_maps * warped_depth_maps), dim=(1, 2, 3), keepdim=False) + self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss * translation_weights) / torch.sum(translation_weights)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(sparse_masks * torch.abs(flows - flows_from_depth), dim=(1, 2, 3)) / (self.epsilon + torch.sum(sparse_masks, dim=(1, 2, 3)))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(sparse_masks * torch.abs(flows - flows_from_depth), dim=(1, 2, 3), keepdim=False) / (self.epsilon + torch.sum(sparse_masks, dim=(1, 2, 3), keepdim=False))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(intersect_masks * torch.abs(images - twice_warped_images), dim=(1, 2, 3)) / (self.epsilon + torch.sum(intersect_masks, dim=(1, 2, 3)))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(intersect_masks * (depth_maps - warped_depth_maps) * (depth_maps - warped_depth_maps), dim=(1, 2, 3), keepdim=False) / (0.5 * torch.sum(intersect_masks * (depth_maps * depth_maps + warped_depth_maps * warped_depth_maps), dim=(1, 2, 3), keepdim=False) + 1e-05 * mean_value * mean_value)",
                            "BinOp"
                        ],
                        [
                            "2.0 * torch.sum(intersect_masks * torch.abs(location_3d_maps - warped_location_3d_maps), dim=(1, 2, 3), keepdim=False) / (1e-05 * mean_value + torch.sum(intersect_masks * (depth_maps + torch.abs(warped_depth_maps)), dim=(1, 2, 3), keepdim=False))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(masks * torch.abs(depth_maps - warped_depth_maps), dim=(1, 2, 3), keepdim=False) / (0.5 * torch.sum(masks * (torch.abs(depth_maps) + torch.abs(warped_depth_maps)), dim=(1, 2, 3), keepdim=False) + 1e-05 * mean_value)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(sparse_depth_masks * torch.abs(scaled_depth_maps - sparse_depth_maps) / (self.eps + sparse_depth_maps), dim=(1, 2, 3), keepdim=False) / torch.sum(sparse_depth_masks, dim=(1, 2, 3), keepdim=False)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_146": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(intersect_masks * (depth_maps - warped_depth_maps) * (depth_maps - warped_depth_maps), dim=(1, 2, 3), keepdim=False) / (0.5 * torch.sum(intersect_masks * (depth_maps * depth_maps + warped_depth_maps * warped_depth_maps), dim=(1, 2, 3), keepdim=False) + self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss * translation_weights) / torch.sum(translation_weights)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(sparse_masks * torch.abs(flows - flows_from_depth), dim=(1, 2, 3)) / (self.epsilon + torch.sum(sparse_masks, dim=(1, 2, 3)))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(sparse_masks * torch.abs(flows - flows_from_depth), dim=(1, 2, 3), keepdim=False) / (self.epsilon + torch.sum(sparse_masks, dim=(1, 2, 3), keepdim=False))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(intersect_masks * torch.abs(images - twice_warped_images), dim=(1, 2, 3)) / (self.epsilon + torch.sum(intersect_masks, dim=(1, 2, 3)))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(intersect_masks * (depth_maps - warped_depth_maps) * (depth_maps - warped_depth_maps), dim=(1, 2, 3), keepdim=False) / (0.5 * torch.sum(intersect_masks * (depth_maps * depth_maps + warped_depth_maps * warped_depth_maps), dim=(1, 2, 3), keepdim=False) + 1e-05 * mean_value * mean_value)",
                            "BinOp"
                        ],
                        [
                            "2.0 * torch.sum(intersect_masks * torch.abs(location_3d_maps - warped_location_3d_maps), dim=(1, 2, 3), keepdim=False) / (1e-05 * mean_value + torch.sum(intersect_masks * (depth_maps + torch.abs(warped_depth_maps)), dim=(1, 2, 3), keepdim=False))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(masks * torch.abs(depth_maps - warped_depth_maps), dim=(1, 2, 3), keepdim=False) / (0.5 * torch.sum(masks * (torch.abs(depth_maps) + torch.abs(warped_depth_maps)), dim=(1, 2, 3), keepdim=False) + 1e-05 * mean_value)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(sparse_depth_masks * torch.abs(scaled_depth_maps - sparse_depth_maps) / (self.eps + sparse_depth_maps), dim=(1, 2, 3), keepdim=False) / torch.sum(sparse_depth_masks, dim=(1, 2, 3), keepdim=False)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_164": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(intersect_masks * (depth_maps - warped_depth_maps) * (depth_maps - warped_depth_maps), dim=(1, 2, 3), keepdim=False) / (0.5 * torch.sum(intersect_masks * (depth_maps * depth_maps + warped_depth_maps * warped_depth_maps), dim=(1, 2, 3), keepdim=False) + self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss * translation_weights) / torch.sum(translation_weights)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(sparse_masks * torch.abs(flows - flows_from_depth), dim=(1, 2, 3)) / (self.epsilon + torch.sum(sparse_masks, dim=(1, 2, 3)))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(sparse_masks * torch.abs(flows - flows_from_depth), dim=(1, 2, 3), keepdim=False) / (self.epsilon + torch.sum(sparse_masks, dim=(1, 2, 3), keepdim=False))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(intersect_masks * torch.abs(images - twice_warped_images), dim=(1, 2, 3)) / (self.epsilon + torch.sum(intersect_masks, dim=(1, 2, 3)))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(intersect_masks * (depth_maps - warped_depth_maps) * (depth_maps - warped_depth_maps), dim=(1, 2, 3), keepdim=False) / (0.5 * torch.sum(intersect_masks * (depth_maps * depth_maps + warped_depth_maps * warped_depth_maps), dim=(1, 2, 3), keepdim=False) + 1e-05 * mean_value * mean_value)",
                            "BinOp"
                        ],
                        [
                            "2.0 * torch.sum(intersect_masks * torch.abs(location_3d_maps - warped_location_3d_maps), dim=(1, 2, 3), keepdim=False) / (1e-05 * mean_value + torch.sum(intersect_masks * (depth_maps + torch.abs(warped_depth_maps)), dim=(1, 2, 3), keepdim=False))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(masks * torch.abs(depth_maps - warped_depth_maps), dim=(1, 2, 3), keepdim=False) / (0.5 * torch.sum(masks * (torch.abs(depth_maps) + torch.abs(warped_depth_maps)), dim=(1, 2, 3), keepdim=False) + 1e-05 * mean_value)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(sparse_depth_masks * torch.abs(scaled_depth_maps - sparse_depth_maps) / (self.eps + sparse_depth_maps), dim=(1, 2, 3), keepdim=False) / torch.sum(sparse_depth_masks, dim=(1, 2, 3), keepdim=False)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_186": {
                "input": {
                    "value": "loss_1 + loss_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_24": {
                "input": {
                    "value": "boundaries * predicted_depths + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_25": {
                "input": {
                    "value": "boundaries * goal_depths + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_28": {
                "input": {
                    "value": "depth_ratio_map * depth_ratio_map",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "intersect_masks * (depth_maps - warped_depth_maps) * (depth_maps - warped_depth_maps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_53": {
                "input": {
                    "value": "translation_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.tensor(1.0).float().cuda() / (torch.tensor(1e-08).float().cuda() + translation_norms)).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_64": {
                "input": {
                    "value": "sparse_masks * torch.abs(flows - flows_from_depth)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_76": {
                "input": {
                    "value": "sparse_masks * torch.abs(flows - flows_from_depth)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "intersect_masks * torch.abs(images - twice_warped_images)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "intersect_masks * (depth_maps - warped_depth_maps) * (depth_maps - warped_depth_maps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_157": {
                "input": {
                    "value": "masks * depth_maps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_160": {
                "input": {
                    "value": "masks * torch.abs(depth_maps - warped_depth_maps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_181": {
                "input": {
                    "value": "torch.mul(input_sparse_masks, depth_ratio_map * depth_ratio_map)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_183": {
                "input": {
                    "value": "input_sparse_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "depth_ratio_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(boundaries * predicted_depths + self.epsilon) - torch.log(boundaries * goal_depths + self.epsilon)",
                            "BinOp"
                        ],
                        [
                            "torch.where(input_sparse_depths < 0.5, self.zero, torch.log(absolute_depth_estimations + self.epsilon) - torch.log(input_sparse_depths))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_196": {
                "input": {
                    "value": "sparse_depth_masks * torch.abs(scaled_depth_maps - sparse_depth_maps) / (self.eps + sparse_depth_maps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_198": {
                "input": {
                    "value": "sparse_depth_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_214": {
                "input": {
                    "value": "sparse_depth_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_218": {
                "input": {
                    "value": "sparse_depth_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_222": {
                "input": {
                    "value": "sparse_depth_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_65": {
                "input": {
                    "value": "sparse_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_78": {
                "input": {
                    "value": "sparse_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_90": {
                "input": {
                    "value": "intersect_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_102": {
                "input": {
                    "value": "intersect_masks * depth_maps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_117": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "height",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_118": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "intersect_masks * depth_maps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "intersect_masks * torch.abs(location_3d_maps - warped_location_3d_maps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_143": {
                "input": {
                    "value": "intersect_masks * (depth_maps + torch.abs(warped_depth_maps))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_158": {
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_177": {
                "input": {
                    "value": "absolute_depth_estimations + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_178": {
                "input": {
                    "value": "input_sparse_depths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mul_181": {
                "input": {
                    "value": "input_sparse_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "depth_ratio_map * depth_ratio_map",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_210": {
                "input": {
                    "value": "scaled_depth_maps * sparse_depth_masks / (self.eps + sparse_depth_maps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "translations * translations",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "intersect_masks * (depth_maps * depth_maps + warped_depth_maps * warped_depth_maps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_64": {
                "input": {
                    "value": "flows - flows_from_depth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_76": {
                "input": {
                    "value": "flows - flows_from_depth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_89": {
                "input": {
                    "value": "images - twice_warped_images",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "intersect_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "intersect_masks * (depth_maps * depth_maps + warped_depth_maps * warped_depth_maps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_131": {
                "input": {
                    "value": "intersect_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_160": {
                "input": {
                    "value": "depth_maps - warped_depth_maps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_161": {
                "input": {
                    "value": "masks * (torch.abs(depth_maps) + torch.abs(warped_depth_maps))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_141": {
                "input": {
                    "value": "location_3d_maps - warped_location_3d_maps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_197": {
                "input": {
                    "value": "scaled_depth_maps - sparse_depth_maps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_144": {
                "input": {
                    "value": "warped_depth_maps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_162": {
                "input": {
                    "value": "warped_depth_maps",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "cat_328": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(2.0).float().cuda() * (x.reshape(num_batch, height, width, 1) / torch.tensor(width).float().cuda()) - torch.tensor(1.0).float().cuda(), torch.tensor(2.0).float().cuda() * (y.reshape(num_batch, height, width, 1) / torch.tensor(height).float().cuda()) - torch.tensor(1.0).float().cuda()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "meshgrid_381": {
                "variable": {
                    "value": "(y_grid, x_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(start=0, end=height, dtype=torch.float32).cuda(), torch.arange(start=0, end=width, dtype=torch.float32).cuda()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_388": {
                "variable": {
                    "value": "ones_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, height, width, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_391": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_391": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "solve_392": {
                "variable": {
                    "value": "(intrinsic_matrices_inverse, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(3).float().cuda().reshape(1, 3, 3).expand(intrinsic_matrices.shape[0], -1, -1)",
                            "Call"
                        ],
                        [
                            "torch.eye(3).float().cuda().reshape(1, 3, 3).expand(intrinsic_matrices.shape[0], -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "intrinsic_matrices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsic_matrices",
                            "Method Argument"
                        ],
                        [
                            "intrinsic_matrices",
                            "Method Argument"
                        ],
                        [
                            "intrinsic_matrices",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_397": {
                "variable": {
                    "value": "temp_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intrinsic_matrices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsic_matrices",
                            "Method Argument"
                        ],
                        [
                            "intrinsic_matrices",
                            "Method Argument"
                        ],
                        [
                            "intrinsic_matrices",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rotation_matrices_inverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_matrices.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "rotation_matrices.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_398": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(intrinsic_matrices, rotation_matrices_inverse)",
                            "Call"
                        ],
                        [
                            "torch.bmm(intrinsic_matrices, rotation_matrices_inverse)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "-translation_vectors",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_399": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(intrinsic_matrices, rotation_matrices_inverse)",
                            "Call"
                        ],
                        [
                            "torch.bmm(intrinsic_matrices, rotation_matrices_inverse)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "intrinsic_matrices_inverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.solve(eye, intrinsic_matrices)",
                            "Call"
                        ],
                        [
                            "torch.solve(eye, intrinsic_matrices)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_401": {
                "variable": {
                    "value": "mesh_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_grid, y_grid, ones_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_401": {
                "variable": {
                    "value": "mesh_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_402": {
                "variable": {
                    "value": "intermediate_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M.reshape(-1, 1, 1, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "mesh_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_grid, y_grid, ones_grid), dim=-1).reshape(height, width, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_grid, y_grid, ones_grid), dim=-1).reshape(height, width, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_402": {
                "variable": {
                    "value": "intermediate_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "meshgrid_439": {
                "variable": {
                    "value": "(y_grid, x_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(start=0, end=height, dtype=torch.float32).cuda(), torch.arange(start=0, end=width, dtype=torch.float32).cuda()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mul_473": {
                "variable": {
                    "value": "depth_maps_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_maps_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_maps_1.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.mul(depth_maps_1, img_masks)",
                            "Call"
                        ],
                        [
                            "depth_maps_1.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "img_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_masks.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "img_masks.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "img_masks",
                            "Method Argument"
                        ],
                        [
                            "img_masks",
                            "Method Argument"
                        ],
                        [
                            "img_masks",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mul_474": {
                "variable": {
                    "value": "depth_maps_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_maps_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(depth_maps_2, img_masks)",
                            "Call"
                        ],
                        [
                            "depth_maps_2.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "depth_maps_2",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "img_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_masks.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "img_masks.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "img_masks",
                            "Method Argument"
                        ],
                        [
                            "img_masks",
                            "Method Argument"
                        ],
                        [
                            "img_masks",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_482": {
                "variable": {
                    "value": "(y_grid, x_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(start=0, end=height, dtype=torch.float32).cuda(), torch.arange(start=0, end=width, dtype=torch.float32).cuda()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_489": {
                "variable": {
                    "value": "ones_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, height, width, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_492": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_492": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "solve_493": {
                "variable": {
                    "value": "(intrinsic_matrices_inverse, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(3).float().cuda().reshape(1, 3, 3).expand(intrinsic_matrices.shape[0], -1, -1)",
                            "Call"
                        ],
                        [
                            "torch.eye(3).float().cuda().reshape(1, 3, 3).expand(intrinsic_matrices.shape[0], -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "intrinsic_matrices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsic_matrices",
                            "Method Argument"
                        ],
                        [
                            "intrinsic_matrices",
                            "Method Argument"
                        ],
                        [
                            "intrinsic_matrices",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_497": {
                "variable": {
                    "value": "temp_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intrinsic_matrices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsic_matrices",
                            "Method Argument"
                        ],
                        [
                            "intrinsic_matrices",
                            "Method Argument"
                        ],
                        [
                            "intrinsic_matrices",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rotation_matrices_inverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_matrices.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "rotation_matrices.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_498": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(intrinsic_matrices, rotation_matrices_inverse)",
                            "Call"
                        ],
                        [
                            "torch.bmm(intrinsic_matrices, rotation_matrices_inverse)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "-translation_vectors",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_499": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(intrinsic_matrices, rotation_matrices_inverse)",
                            "Call"
                        ],
                        [
                            "torch.bmm(intrinsic_matrices, rotation_matrices_inverse)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "intrinsic_matrices_inverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.solve(eye, intrinsic_matrices)",
                            "Call"
                        ],
                        [
                            "torch.solve(eye, intrinsic_matrices)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_501": {
                "variable": {
                    "value": "mesh_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_grid, y_grid, ones_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_501": {
                "variable": {
                    "value": "mesh_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_502": {
                "variable": {
                    "value": "intermediate_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M.reshape(-1, 1, 1, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "mesh_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_grid, y_grid, ones_grid), dim=-1).reshape(height, width, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_grid, y_grid, ones_grid), dim=-1).reshape(height, width, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_502": {
                "variable": {
                    "value": "intermediate_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_509": {
                "variable": {
                    "value": "depth_maps_2_calculate",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "img_masks > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "depth_maps_2_calculate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.reshape(-1, 3).narrow(dim=-1, start=2, length=1).reshape(-1, 1, 1, 1) + torch.mul(depth_maps_1, intermediate_result.narrow(dim=-1, start=2, length=1).reshape(-1, height, width, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(1e+30).float().cuda() * (torch.tensor(1.0).float().cuda() - img_masks) + img_masks * depth_maps_2_calculate",
                            "BinOp"
                        ],
                        [
                            "W.reshape(-1, 3).narrow(dim=-1, start=2, length=1).reshape(-1, 1, 1, 1) + torch.mul(depth_maps_1, intermediate_result.narrow(dim=-1, start=2, length=1).reshape(-1, height, width, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.where(img_masks > 0.5, depth_maps_2_calculate, epsilon)",
                            "Call"
                        ],
                        [
                            "torch.where(depth_maps_2_calculate > 0.0, depth_maps_2_calculate, epsilon)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_510": {
                "variable": {
                    "value": "depth_maps_2_calculate",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "depth_maps_2_calculate > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "depth_maps_2_calculate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.reshape(-1, 3).narrow(dim=-1, start=2, length=1).reshape(-1, 1, 1, 1) + torch.mul(depth_maps_1, intermediate_result.narrow(dim=-1, start=2, length=1).reshape(-1, height, width, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(1e+30).float().cuda() * (torch.tensor(1.0).float().cuda() - img_masks) + img_masks * depth_maps_2_calculate",
                            "BinOp"
                        ],
                        [
                            "W.reshape(-1, 3).narrow(dim=-1, start=2, length=1).reshape(-1, 1, 1, 1) + torch.mul(depth_maps_1, intermediate_result.narrow(dim=-1, start=2, length=1).reshape(-1, height, width, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.where(img_masks > 0.5, depth_maps_2_calculate, epsilon)",
                            "Call"
                        ],
                        [
                            "torch.where(depth_maps_2_calculate > 0.0, depth_maps_2_calculate, epsilon)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_531": {
                "variable": {
                    "value": "W_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intrinsic_matrices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsic_matrices",
                            "Method Argument"
                        ],
                        [
                            "intrinsic_matrices",
                            "Method Argument"
                        ],
                        [
                            "intrinsic_matrices",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "translation_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "translation_vectors",
                            "Method Argument"
                        ],
                        [
                            "translation_vectors",
                            "Method Argument"
                        ],
                        [
                            "translation_vectors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_532": {
                "input": {
                    "value": "intrinsic_matrices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intrinsic_matrices",
                            "Method Argument"
                        ],
                        [
                            "intrinsic_matrices",
                            "Method Argument"
                        ],
                        [
                            "intrinsic_matrices",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rotation_matrices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_matrices",
                            "Method Argument"
                        ],
                        [
                            "rotation_matrices",
                            "Method Argument"
                        ],
                        [
                            "rotation_matrices",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_534": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M_2.reshape(-1, 1, 1, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "mesh_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_grid, y_grid, ones_grid), dim=-1).reshape(height, width, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_grid, y_grid, ones_grid), dim=-1).reshape(height, width, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_534": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "narrow_534": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "start": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "length": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_541": {
                "variable": {
                    "value": "depth_maps_1_calculate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_masks.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "img_masks.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "img_masks",
                            "Method Argument"
                        ],
                        [
                            "img_masks",
                            "Method Argument"
                        ],
                        [
                            "img_masks",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "depth_maps_1_calculate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_2.reshape(-1, 3).narrow(dim=-1, start=2, length=1).reshape(-1, 1, 1, 1) + torch.mul(depth_maps_2, temp)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(img_masks, depth_maps_1_calculate)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_550": {
                "variable": {
                    "value": "intersect_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "_bilinear_interpolate(img_masks, u_2_flat, v_2_flat) * img_masks >= 0.9",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.tensor(1.0).float().cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(0.0).float().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_550": {
                "variable": {
                    "value": "intersect_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_35": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DenseLayer(in_channels + i * growth_rate, growth_rate) for i in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.convTrans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(mode='nearest', scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_120": {
                "variable": {
                    "value": "self.denseBlocksDown",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.transDownBlocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_142": {
                "variable": {
                    "value": "self.transUpBlocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_143": {
                "variable": {
                    "value": "self.denseBlocksUp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_167": {
                "variable": {
                    "value": "self.finalConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cur_channels_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "out_chans_first_conv",
                            "variable"
                        ],
                        [
                            "cur_channels_count + growth_rate * up_blocks[-1]",
                            "BinOp"
                        ],
                        [
                            "prev_block_channels + skip_connection_channel_counts[i]",
                            "BinOp"
                        ],
                        [
                            "prev_block_channels + skip_connection_channel_counts[-1]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_186": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.finalConv(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_240": {
                "variable": {
                    "value": "self.down_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_246": {
                "variable": {
                    "value": "self.up_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_251": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "prev_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "2 ** (wf + i)",
                            "BinOp"
                        ],
                        [
                            "2 ** (wf + i)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up, crop1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_335": {
                "input": {
                    "value": "im.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.tensor(2.0).float().cuda() * (x.reshape(num_batch, height, width, 1) / torch.tensor(width).float().cuda()) - torch.tensor(1.0).float().cuda(), torch.tensor(2.0).float().cuda() * (y.reshape(num_batch, height, width, 1) / torch.tensor(height).float().cuda()) - torch.tensor(1.0).float().cuda()], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'zeros'",
                            "Method Argument"
                        ],
                        [
                            "'zeros'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "permute_335": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_342": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_343": {
                "variable": {
                    "value": "self.zero",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_344": {
                "variable": {
                    "value": "self.one",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "where_350": {
                "variable": {
                    "value": "input_sparse_binary_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "input_weighted_sparse_masks > 1e-08",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.one",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.zero",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_353": {
                "variable": {
                    "value": "above_mean_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "input_sparse_depths > 0.5 * mean_sparse_depths",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.one",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.zero",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_360": {
                "variable": {
                    "value": "scale_stds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(centered_sparse_scale_maps * centered_sparse_scale_maps, dim=(1, 2, 3), keepdim=False) / torch.sum(above_mean_masks, dim=(1, 2, 3), keepdim=False)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_449": {
                "tensors": {
                    "value": "[(u_2 - x_grid) / torch.tensor(width).float().cuda(), (v_2 - y_grid) / torch.tensor(height).float().cuda()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_449": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_457": {
                "variable": {
                    "value": "self.zero",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_458": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_291": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "int(padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_404": {
                "input": {
                    "value": "depth_maps_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_maps_1.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.mul(depth_maps_1, img_masks)",
                            "Call"
                        ],
                        [
                            "depth_maps_1.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "intermediate_result.narrow(dim=-1, start=2, length=1).reshape(-1, height, width, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_504": {
                "input": {
                    "value": "depth_maps_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_maps_1.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.mul(depth_maps_1, img_masks)",
                            "Call"
                        ],
                        [
                            "depth_maps_1.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "intermediate_result.narrow(dim=-1, start=2, length=1).reshape(-1, height, width, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_539": {
                "input": {
                    "value": "depth_maps_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(depth_maps_2, img_masks)",
                            "Call"
                        ],
                        [
                            "depth_maps_2.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "depth_maps_2",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(M_2.reshape(-1, 1, 1, 3, 3), mesh_grid).reshape(-1, height, width, 3).narrow(dim=-1, start=2, length=1).reshape(-1, height, width, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_48": {
                "tensors": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_64": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_73": {
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_chans_first_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "48",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_259": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x, out], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, out], 1)",
                            "Call"
                        ],
                        [
                            "down(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "up(x, blocks[-i - 1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_272": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_276": {
                "in_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_296": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(mode='nearest', scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_351": {
                "input": {
                    "value": "input_sparse_depths * input_sparse_binary_masks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_352": {
                "input": {
                    "value": "input_sparse_binary_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(input_weighted_sparse_masks > 1e-08, self.one, self.zero)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_357": {
                "input": {
                    "value": "above_mean_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(input_sparse_depths > 0.5 * mean_sparse_depths, self.one, self.zero)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_362": {
                "input": {
                    "value": "above_mean_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(input_sparse_depths > 0.5 * mean_sparse_depths, self.one, self.zero)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_363": {
                "input": {
                    "value": "scales.reshape(-1, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "absolute_depth_estimations",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_363": {
                "input": {
                    "value": "scale_stds / mean_scales",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_382": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_383": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_410": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mul_414": {
                "input": {
                    "value": "depth_maps_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_maps_1.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.mul(depth_maps_1, img_masks)",
                            "Call"
                        ],
                        [
                            "depth_maps_1.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "intermediate_result.narrow(dim=-1, start=0, length=1).reshape(-1, height, width, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_422": {
                "input": {
                    "value": "depth_maps_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_maps_1.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.mul(depth_maps_1, img_masks)",
                            "Call"
                        ],
                        [
                            "depth_maps_1.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "intermediate_result.narrow(dim=-1, start=1, length=1).reshape(-1, height, width, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_440": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_441": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_483": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_484": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_513": {
                "input": {
                    "value": "depth_maps_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_maps_1.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.mul(depth_maps_1, img_masks)",
                            "Call"
                        ],
                        [
                            "depth_maps_1.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "intermediate_result.narrow(dim=-1, start=0, length=1).reshape(-1, height, width, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_522": {
                "input": {
                    "value": "depth_maps_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_maps_1.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.mul(depth_maps_1, img_masks)",
                            "Call"
                        ],
                        [
                            "depth_maps_1.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ],
                        [
                            "depth_maps_1",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "intermediate_result.narrow(dim=-1, start=1, length=1).reshape(-1, height, width, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_330": {
                "data": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_360": {
                "input": {
                    "value": "centered_sparse_scale_maps * centered_sparse_scale_maps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_361": {
                "input": {
                    "value": "above_mean_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(input_sparse_depths > 0.5 * mean_sparse_depths, self.one, self.zero)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_551": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_552": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Upsample_296": {
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_297": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_328": {
                "data": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_329": {
                "data": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_331": {
                "data": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_450": {
                "data": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "scheduler.py": {
        "torch": {}
    },
    "train.py": {
        "torch": {
            "DataLoader_186": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.SfMDataset(image_file_names=train_filenames, folder_list=folder_list, adjacent_range=adjacent_range, transform=training_transforms, downsampling=input_downsampling, network_downsampling=network_downsampling, inlier_percentage=inlier_percentage, use_store_data=load_intermediate_data, store_data_root=training_data_root, phase='train', is_hsv=is_hsv, num_pre_workers=num_pre_workers, visible_interval=visibility_overlap, rgb_mode='rgb', num_iter=num_iter)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.num_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_188": {
                "variable": {
                    "value": "validation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.SfMDataset(image_file_names=val_filenames, folder_list=folder_list, adjacent_range=adjacent_range, transform=None, downsampling=input_downsampling, network_downsampling=network_downsampling, inlier_percentage=inlier_percentage, use_store_data=True, store_data_root=training_data_root, phase='validation', is_hsv=is_hsv, num_pre_workers=num_pre_workers, visible_interval=visibility_overlap, rgb_mode='rgb', num_iter=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataParallel_197": {
                "variable": {
                    "value": "depth_estimation_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "depth_estimation_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.FCDenseNet57(n_classes=1)",
                            "Call"
                        ],
                        [
                            "utils.init_net(depth_estimation_model, type='kaiming', mode='fan_in', activation_mode='relu', distribution='normal')",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(depth_estimation_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_202": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "depth_estimation_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "max_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.max_lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_80": {
                "seed": {
                    "value": "10085",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_217": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "trained_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.trained_model_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_231": {
                "seed": {
                    "value": "10086 + epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__327": {
                "parameters": {
                    "value": "depth_estimation_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_412": {
                "input": {
                    "value": "predicted_depth_maps_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_estimation_model(colors_1)",
                            "Call"
                        ],
                        [
                            "depth_estimation_model(colors_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_414": {
                "input": {
                    "value": "predicted_depth_maps_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_estimation_model(colors_2)",
                            "Call"
                        ],
                        [
                            "depth_estimation_model(colors_2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "cat_874": {
                "variable": {
                    "value": "flows_display",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[flows_x_display[0, :, :].reshape(1, flows_x_display.shape[1], flows_x_display.shape[2]), flows_y_display[0, :, :].reshape(1, flows_x_display.shape[1], flows_x_display.shape[2])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_921": {
                "variable": {
                    "value": "min_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_depths_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_depths_1",
                            "Method Argument"
                        ],
                        [
                            "pred_depths_1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_922": {
                "variable": {
                    "value": "max_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_depths_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_depths_1",
                            "Method Argument"
                        ],
                        [
                            "pred_depths_1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_1427": {
                "variable": {
                    "value": "indice_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "display([flows_1, flows_from_depth_1, flow_masks_1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_1428": {
                "variable": {
                    "value": "indice_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "display([flows_2, flows_from_depth_2, flow_masks_2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_1471": {
                "variable": {
                    "value": "abs_goal_depth_maps_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "goal_depth_maps_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_estimation_model_teacher(colors_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_1472": {
                "variable": {
                    "value": "abs_goal_depth_maps_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "goal_depth_maps_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_estimation_model_teacher(colors_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_1474": {
                "variable": {
                    "value": "abs_predicted_depth_maps_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted_depth_maps_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_estimation_model_student(colors_1)",
                            "Call"
                        ],
                        [
                            "depth_estimation_model_student(colors_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_1475": {
                "variable": {
                    "value": "abs_predicted_depth_maps_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted_depth_maps_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_estimation_model_student(colors_2)",
                            "Call"
                        ],
                        [
                            "depth_estimation_model_student(colors_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_1622": {
                "variable": {
                    "value": "depth_consistency_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_1623": {
                "variable": {
                    "value": "sparse_flow_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_1624": {
                "variable": {
                    "value": "scale_std_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_620": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_675": {
                "obj": {
                    "value": "{'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': epoch, 'step': step, 'validation': validation_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_1655": {
                "variable": {
                    "value": "boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "boundaries >= torch.tensor(0.9).float().cuda()",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.tensor(1.0).float().cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(0.0).float().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_1481": {
                "input": {
                    "value": "predicted_depth_maps_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_estimation_model_student(colors_2)",
                            "Call"
                        ],
                        [
                            "depth_estimation_model_student(colors_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_1482": {
                "input": {
                    "value": "goal_depth_maps_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_estimation_model_teacher(colors_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_1430": {
                "input": {
                    "value": "losses_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "display([flows_1, flows_from_depth_1, flow_masks_1])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_1431": {
                "input": {
                    "value": "losses_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "display([flows_2, flows_from_depth_2, flow_masks_2])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_1656": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_1655": {
                "data": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_1665": {
                "input": {
                    "value": "predicted_depth_maps_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_estimation_model_student(colors_1)",
                            "Call"
                        ],
                        [
                            "depth_estimation_model_student(colors_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_1667": {
                "input": {
                    "value": "predicted_depth_maps_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_estimation_model_student(colors_2)",
                            "Call"
                        ],
                        [
                            "depth_estimation_model_student(colors_2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}