{
    "layers.py": {
        "tensorflow": {
            "sign_224": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(tf.abs(target), 2)",
                    "possible_values": []
                }
            },
            "reduce_sum_227": {
                "variable": {
                    "value": "cross_entropy",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "possible_values": [
                        [
                            "target * tf.log(tf.nn.softmax(output))",
                            "BinOp"
                        ],
                        [
                            "-tf.reduce_sum(cross_entropy, 2)",
                            "UnaryOp"
                        ],
                        [
                            "cross_entropy / tf.reduce_sum(mask, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(cross_entropy, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Variable_18": {
                "variable": {
                    "value": "self.W_values",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initialization_fn",
                    "possible_values": [
                        [
                            "RandomUniformInitializer((ninput, noutput))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_19": {
                "variable": {
                    "value": "self.b_values",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros((noutput,), tf.float32)",
                    "possible_values": []
                }
            },
            "Variable_34": {
                "variable": {
                    "value": "self.W_values",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform(shape=(nhidden, ntokens), minval=-initrange, maxval=initrange)",
                    "possible_values": []
                }
            },
            "Variable_108": {
                "variable": {
                    "value": "self.start_symbols",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([2, 3], tf.int64)",
                    "possible_values": []
                }
            },
            "dynamic_rnn_142": {
                "variable": {
                    "value": "(packed_output, state)",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.encoder",
                    "possible_values": []
                },
                "inputs": {
                    "value": "embeddings",
                    "possible_values": [
                        [
                            "self.embedding(indices)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "lengths",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "l2_normalize_146": {
                "variable": {
                    "value": "hidden",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(hidden, 1)",
                            "Call"
                        ],
                        [
                            "hidden + gauss_noise",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tile_162": {
                "variable": {
                    "value": "all_hidden",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(hidden, 1)",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, maxlen, 1]",
                    "possible_values": []
                }
            },
            "concat_171": {
                "variable": {
                    "value": "augmented_embeddings",
                    "possible_values": []
                },
                "values": {
                    "value": "[embeddings_decoded, all_hidden]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "dynamic_rnn_174": {
                "variable": {
                    "value": "(output, state)",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.decoder",
                    "possible_values": []
                },
                "inputs": {
                    "value": "augmented_embeddings",
                    "possible_values": [
                        [
                            "tf.concat([embeddings_decoded, all_hidden], 2)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "lengths",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "state",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMStateTuple(hidden, self.init_state())",
                            "Call"
                        ],
                        [
                            "self.init_hidden()",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMStateTuple(hidden, self.init_state())",
                            "Call"
                        ],
                        [
                            "self.init_hidden()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reshape_176": {
                "tensor": {
                    "value": "output",
                    "possible_values": [
                        [
                            "tf.matmul(input, self.W_values) + self.b_values",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(output, momentum=0.1, epsilon=1e-05, training=is_train)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size * maxlen, self.nhidden)",
                    "possible_values": []
                }
            },
            "ones_190": {
                "variable": {
                    "value": "start_symbols",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, 1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "concat_192": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "values": {
                    "value": "[embeddings_decoded, tf.expand_dims(hidden, 1)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "concat_216": {
                "variable": {
                    "value": "max_indices",
                    "possible_values": []
                },
                "values": {
                    "value": "all_indices",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_228": {
                "input_tensor": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "tf.sign(tf.reduce_max(tf.abs(target), 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_mean_229": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "possible_values": [
                        [
                            "target * tf.log(tf.nn.softmax(output))",
                            "BinOp"
                        ],
                        [
                            "-tf.reduce_sum(cross_entropy, 2)",
                            "UnaryOp"
                        ],
                        [
                            "cross_entropy / tf.reduce_sum(mask, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(cross_entropy, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_24": {
                "value": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "batch_normalization_27": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "possible_values": [
                        [
                            "tf.matmul(input, self.W_values) + self.b_values",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(output, momentum=0.1, epsilon=1e-05, training=is_train)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(output)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.1",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train",
                    "possible_values": [
                        [
                            "tf.constant(True)",
                            "MethodArgument"
                        ],
                        [
                            "tf.constant(True)",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "embedding_lookup_36": {
                "params": {
                    "value": "self.W_values",
                    "possible_values": []
                },
                "ids": {
                    "value": "input",
                    "possible_values": []
                }
            },
            "constant_57": {
                "value": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_114": {
                "variable": {
                    "value": "self.encoder",
                    "possible_values": []
                },
                "num_units": {
                    "value": "nhidden",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_119": {
                "variable": {
                    "value": "self.decoder",
                    "possible_values": []
                },
                "num_units": {
                    "value": "nhidden",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_155": {
                "c": {
                    "value": "tf.zeros((self.batch_size, self.nhidden))",
                    "possible_values": []
                },
                "h": {
                    "value": "tf.zeros((self.batch_size, self.nhidden))",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "shape": {
                    "value": "(self.batch_size, self.nhidden)",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_166": {
                "variable": {
                    "value": "state",
                    "possible_values": []
                },
                "c": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(hidden, 1)",
                            "Call"
                        ],
                        [
                            "hidden + gauss_noise",
                            "BinOp"
                        ]
                    ]
                },
                "h": {
                    "value": "self.init_state()",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_185": {
                "variable": {
                    "value": "state",
                    "possible_values": []
                },
                "c": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(hidden, 1)",
                            "Call"
                        ],
                        [
                            "hidden + gauss_noise",
                            "BinOp"
                        ]
                    ]
                },
                "h": {
                    "value": "self.init_state()",
                    "possible_values": []
                }
            },
            "log_222": {
                "x": {
                    "value": "tf.nn.softmax(output)",
                    "possible_values": []
                }
            },
            "reduce_sum_223": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "possible_values": [
                        [
                            "target * tf.log(tf.nn.softmax(output))",
                            "BinOp"
                        ],
                        [
                            "-tf.reduce_sum(cross_entropy, 2)",
                            "UnaryOp"
                        ],
                        [
                            "cross_entropy / tf.reduce_sum(mask, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(cross_entropy, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reduce_max_224": {
                "input_tensor": {
                    "value": "tf.abs(target)",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "relu_12": {
                "features": {
                    "value": "-input",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "shape": {
                    "value": "(noutput,)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "matmul_25": {
                "a": {
                    "value": "input",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_values",
                    "possible_values": []
                }
            },
            "identity_91": {
                "input": {
                    "value": "tf.reduce_mean(final_layer, name='d_reduce_mean')",
                    "possible_values": []
                }
            },
            "ones_108": {
                "shape": {
                    "value": "[2, 3]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "encoder",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "decoder",
                    "possible_values": []
                }
            },
            "shape_124": {
                "input": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.argmax(overvocab, axis=1), 1)",
                            "Call"
                        ],
                        [
                            "tf.multinomial(overvocab / temp, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "encoder",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "decoder",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_155": {
                "shape": {
                    "value": "(self.batch_size, self.nhidden)",
                    "possible_values": []
                }
            },
            "expand_dims_162": {
                "input": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(hidden, 1)",
                            "Call"
                        ],
                        [
                            "hidden + gauss_noise",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "decoder",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dynamic_rnn_199": {
                "variable": {
                    "value": "(output, state)",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.decoder",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.concat([embeddings_decoded, tf.expand_dims(hidden, 1)], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([embedding, tf.expand_dims(hidden, 1)], 2)",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "state",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMStateTuple(hidden, self.init_state())",
                            "Call"
                        ],
                        [
                            "self.init_hidden()",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMStateTuple(hidden, self.init_state())",
                            "Call"
                        ],
                        [
                            "self.init_hidden()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "concat_214": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "values": {
                    "value": "[embedding, tf.expand_dims(hidden, 1)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "softmax_222": {
                "logits": {
                    "value": "output",
                    "possible_values": [
                        [
                            "tf.matmul(input, self.W_values) + self.b_values",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(output, momentum=0.1, epsilon=1e-05, training=is_train)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_224": {
                "x": {
                    "value": "target",
                    "possible_values": []
                }
            },
            "reduce_mean_91": {
                "input_tensor": {
                    "value": "final_layer",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "name": {
                    "value": "d_reduce_mean",
                    "possible_values": []
                }
            },
            "shape_149": {
                "input": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(hidden, 1)",
                            "Call"
                        ],
                        [
                            "hidden + gauss_noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_192": {
                "input": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(hidden, 1)",
                            "Call"
                        ],
                        [
                            "hidden + gauss_noise",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "expand_dims_203": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.argmax(overvocab, axis=1)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_max_204": {
                "variable": {
                    "value": "probs",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "overvocab",
                    "possible_values": [
                        [
                            "self.linear(tf.squeeze(output), tf.constant(False))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "multinomial_209": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "logits": {
                    "value": "overvocab / temp",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "squeeze_200": {
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "tf.matmul(input, self.W_values) + self.b_values",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(output, momentum=0.1, epsilon=1e-05, training=is_train)",
                            "Call"
                        ],
                        [
                            "self.activation_fn(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_200": {
                "value": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "argmax_203": {
                "input": {
                    "value": "overvocab",
                    "possible_values": [
                        [
                            "self.linear(tf.squeeze(output), tf.constant(False))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "expand_dims_214": {
                "input": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "self.encode(indices, lengths, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(hidden, 1)",
                            "Call"
                        ],
                        [
                            "hidden + gauss_noise",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "Variable_78": {
                "variable": {
                    "value": "fixed_noise",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(shape=(args.batch_size, args.z_size), mean=0.0, stddev=1.0, dtype=tf.float32)",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "source",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, args.maxlen]",
                    "possible_values": []
                },
                "name": {
                    "value": "source",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "target",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, args.maxlen]",
                    "possible_values": []
                },
                "name": {
                    "value": "target",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "lengths",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "possible_values": []
                },
                "name": {
                    "value": "lengths",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "hidden_input",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, args.nhidden]",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden_input",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "is_train",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "possible_values": []
                }
            },
            "argmax_98": {
                "variable": {
                    "value": "output_predictions",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "possible_values": [
                        [
                            "output / args.temp",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "logical_not_103": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(output_predictions, tf.constant(0, dtype=tf.int64))",
                    "possible_values": []
                }
            },
            "reduce_sum_105": {
                "variable": {
                    "value": "accuracy",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.logical_and(tf.equal(output_predictions, target), mask), tf.float32)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "variable": {
                    "value": "accuracy",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "accuracy",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(tf.logical_and(tf.equal(output_predictions, target), mask), tf.float32), 1)",
                            "Call"
                        ],
                        [
                            "accuracy / tf.cast(lengths, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(accuracy)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_128": {
                "variable": {
                    "value": "gan_disc_params",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope_critic",
                    "possible_values": [
                        [
                            "'critic'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_collection_140": {
                "variable": {
                    "value": "autoencoder_params",
                    "possible_values": []
                },
                "key": {
                    "value": "scope_autoencoder",
                    "possible_values": [
                        [
                            "'autoencoder'",
                            "Constant"
                        ]
                    ]
                }
            },
            "trainable_variables_146": {
                "variable": {
                    "value": "t_vars",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_collection_150": {
                "variable": {
                    "value": "bn_update_ops",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "possible_values": []
                }
            },
            "FileWriter_171": {
                "variable": {
                    "value": "writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "/tmp/tensorboard",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "possible_values": []
                }
            },
            "Saver_176": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_184": {
                "variable": {
                    "value": "init",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reset_default_graph_75": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cast_106": {
                "x": {
                    "value": "lengths",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [None], name='lengths')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_155": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.lr_ae",
                    "possible_values": []
                }
            },
            "AdamOptimizer_162": {
                "variable": {
                    "value": "train_op_g",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.lr_gan_g",
                    "possible_values": []
                },
                "beta1": {
                    "value": "args.beta1",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "possible_values": []
                }
            },
            "AdamOptimizer_163": {
                "variable": {
                    "value": "train_op_d_real",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.lr_gan_d",
                    "possible_values": []
                },
                "beta1": {
                    "value": "args.beta1",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "possible_values": []
                }
            },
            "AdamOptimizer_164": {
                "variable": {
                    "value": "train_op_d_fake",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.lr_gan_d",
                    "possible_values": []
                },
                "beta1": {
                    "value": "args.beta1",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "scope_autoencoder",
                    "possible_values": [
                        [
                            "'autoencoder'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "scope_critic",
                    "possible_values": [
                        [
                            "'critic'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "scope_generator",
                    "possible_values": [
                        [
                            "'generator'",
                            "Constant"
                        ]
                    ]
                }
            },
            "one_hot_101": {
                "indices": {
                    "value": "target",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [None, args.maxlen], name='target')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "args.ntokens",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "equal_103": {
                "x": {
                    "value": "output_predictions",
                    "possible_values": [
                        [
                            "tf.argmax(output_logits, 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(0, dtype=tf.int64)",
                    "possible_values": []
                }
            },
            "cast_105": {
                "x": {
                    "value": "tf.logical_and(tf.equal(output_predictions, target), mask)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "RegisterGradient_110": {
                "op_type": {
                    "value": "CustomGradOne",
                    "possible_values": []
                }
            },
            "RegisterGradient_114": {
                "op_type": {
                    "value": "CustomGradMinusOne",
                    "possible_values": []
                }
            },
            "get_default_graph_124": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clip_by_value_130": {
                "t": {
                    "value": "p",
                    "possible_values": [
                        [
                            "gan_disc_params",
                            "Name"
                        ],
                        [
                            "autoencoder_params",
                            "Name"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-args.gan_clamp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "args.gan_clamp",
                    "possible_values": []
                }
            },
            "get_default_graph_134": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_default_graph_137": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clip_by_value_142": {
                "t": {
                    "value": "p",
                    "possible_values": [
                        [
                            "gan_disc_params",
                            "Name"
                        ],
                        [
                            "autoencoder_params",
                            "Name"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-args.clip",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "args.clip",
                    "possible_values": []
                }
            },
            "control_dependencies_151": {
                "control_inputs": {
                    "value": "bn_update_ops",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_185": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "constant_103": {
                "value": {
                    "value": "0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "logical_and_105": {
                "x": {
                    "value": "tf.equal(output_predictions, target)",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "tf.logical_not(tf.equal(output_predictions, tf.constant(0, dtype=tf.int64)))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_112": {
                "input": {
                    "value": "grad",
                    "possible_values": []
                }
            },
            "get_default_graph_171": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "equal_105": {
                "x": {
                    "value": "output_predictions",
                    "possible_values": [
                        [
                            "tf.argmax(output_logits, 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [None, args.maxlen], name='target')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_116": {
                "input": {
                    "value": "grad",
                    "possible_values": []
                }
            },
            "clip_by_value_157": {
                "t": {
                    "value": "grad",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-args.clip",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "args.clip",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {}
    },
    "utils_debug.py": {
        "tensorflow": {}
    }
}