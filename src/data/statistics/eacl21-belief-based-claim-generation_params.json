{
    "code/src-py/argument_mining.py": {
        "sklearn": {
            "train_test_split_35": {
                "variable": {
                    "value": "(trn_texts, val_texts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "texts",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "train_test_split_58": {
                "variable": {
                    "value": "(df_trn, df_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "code/pplm_experiment/src-py/pplm_classification_head.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "code/pplm_experiment/src-py/run_language_modeling.py": {
        "torch": {
            "full_189": {
                "variable": {
                    "value": "probability_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "args.mlm_probability",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_197": {
                "variable": {
                    "value": "masked_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, args.mlm_probability)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_206": {
                "variable": {
                    "value": "random_words",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(tokenizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_226": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_420": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_421": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_449": {
                "variable": {
                    "value": "perplexity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(eval_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_138": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_216": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_269": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelWithLMHead.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelWithLMHead.from_config(config)",
                            "Call"
                        ],
                        [
                            "AutoModelWithLMHead.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelWithLMHead.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_273": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelWithLMHead.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelWithLMHead.from_config(config)",
                            "Call"
                        ],
                        [
                            "AutoModelWithLMHead.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelWithLMHead.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_427": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelWithLMHead.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelWithLMHead.from_config(config)",
                            "Call"
                        ],
                        [
                            "AutoModelWithLMHead.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelWithLMHead.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_646": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_650": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "data": {
                    "value": "self.examples[item]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "self.examples[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_140": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "data": {
                    "value": "special_tokens_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_201": {
                "input": {
                    "value": "torch.full(labels.shape, 0.8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_223": {
                "sequences": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "tokenizer.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_225": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_225": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_sequence_418": {
                "sequences": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "tokenizer.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_449": {
                "data": {
                    "value": "eval_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "eval_loss / nb_eval_steps",
                            "BinOp"
                        ],
                        [
                            "eval_loss + lm_loss.mean().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_device_649": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_755": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bernoulli_205": {
                "input": {
                    "value": "torch.full(labels.shape, 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_222": {
                "sequences": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_257": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_258": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_417": {
                "sequences": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_442": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_647": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_201": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_grad_norm__350": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__352": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_381": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_386": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_387": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_646": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_205": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "code/pplm_experiment/src-py/run_pplm.py": {
        "torch": {
            "ones_157": {
                "variable": {
                    "value": "ones_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ones_key_val_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(past[0].shape[:-2]) + tuple([window_length]) + tuple(past[0].shape[-1:])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_161": {
                "variable": {
                    "value": "window_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ones_mask, torch.zeros(zeros_key_val_shape))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_163": {
                "variable": {
                    "value": "window_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "past[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_182": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_331": {
                "variable": {
                    "value": "single_bow",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "single_bow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bow_indices",
                            "variable"
                        ],
                        [
                            "list(filter(lambda x: len(x) == 1, single_bow))",
                            "Call"
                        ],
                        [
                            "torch.tensor(single_bow).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_333": {
                "variable": {
                    "value": "one_hot_bow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "single_bow.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "tokenizer.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_468": {
                "variable": {
                    "value": "context_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_545": {
                "variable": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pert_logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_logits, k=top_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_635": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_111": {
                "condition": {
                    "value": "logits < batch_mins",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(logits) * -BIG_CONST",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_195": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_198": {
                "variable": {
                    "value": "curr_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_208": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "prediction.shape[0] * [class_label]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_216": {
                "variable": {
                    "value": "unpert_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unpert_logits[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_281": {
                "f": {
                    "value": "resolved_archive_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_path(params['url'])",
                            "Call"
                        ],
                        [
                            "params['path']",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_cache_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_434": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_508": {
                "variable": {
                    "value": "accumulated_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "accumulated_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "unpert_last_hidden[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(accumulated_hidden, dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_548": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_550": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[class_label]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_559": {
                "variable": {
                    "value": "unpert_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unpert_logits[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_570": {
                "variable": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pert_logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_logits, k=top_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_574": {
                "variable": {
                    "value": "last",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_577": {
                "variable": {
                    "value": "(_, last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_107": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_110": {
                "condition": {
                    "value": "logits < batch_mins",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(logits) * 0.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_142": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0 + SMALL_CONST",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0 / window_length",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_179": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_hidden[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_188": {
                "variable": {
                    "value": "bow_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.t(one_hot_bow)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_201": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(probs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "wte.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_261": {
                "ndarray": {
                    "value": "p_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_perturbation",
                            "variable"
                        ],
                        [
                            "past",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_580": {
                "tensors": {
                    "value": "(output_so_far, last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_639": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_111": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_171": {
                "ndarray": {
                    "value": "p_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_perturbation",
                            "variable"
                        ],
                        [
                            "past",
                            "variable"
                        ]
                    ]
                }
            },
            "max_233": {
                "input": {
                    "value": "grad_norms[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_549": {
                "input": {
                    "value": "unpert_last_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unpert_all_hidden[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_565": {
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_110": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "t_188": {
                "input": {
                    "value": "one_hot_bow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one_hot_bows_vectors",
                            "variable"
                        ],
                        [
                            "torch.zeros(num_words, tokenizer.vocab_size).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_189": {
                "input": {
                    "value": "torch.sum(bow_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_204": {
                "input": {
                    "value": "curr_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_all_hidden[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_233": {
                "input": {
                    "value": "p_.grad * window_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_238": {
                "input": {
                    "value": "p_.grad * window_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_566": {
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_161": {
                "*size": {
                    "value": "zeros_key_val_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(past[0].shape[:-2]) + tuple([curr_length - window_length]) + tuple(past[0].shape[-1:])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_189": {
                "input": {
                    "value": "bow_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(probs, torch.t(one_hot_bow))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/pplm_experiment/src-py/run_pplm_discrim_train.py": {
        "torch": {
            "manual_seed_38": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "item_info['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "x_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "item_info['X']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "item_info['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "variable": {
                    "value": "input_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[input_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_200": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(x, y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_212": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset(xs, ys)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "cached_collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_450": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_softmax_79": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier_head(avg_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "padded_sequences",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_143": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(input_t)",
                            "Call"
                        ],
                        [
                            "discriminator(input_t)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_441": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(x, y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_444": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(test_x, test_y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_538": {
                "variable": {
                    "value": "input_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[input_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unbind_208": {
                "variable": {
                    "value": "avg_rep_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avg_rep.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_254": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[50256] + seq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_264": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[50256] + seq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_533": {
                "f": {
                    "value": "head_saved_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.ne(0).unsqueeze(2).repeat(1, 1, self.embed_size).float().to(self.device).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_170": {
                "input": {
                    "value": "output_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(input_t)",
                            "Call"
                        ],
                        [
                            "discriminator(input_t)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_t",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_477": {
                "obj": {
                    "value": "discriminator.get_classifier().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/{}_classifier_head_epoch_{}.pt'.format(model_path, dataset, epoch + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_507": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[50256] + seq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_302": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[50256] + seq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_342": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[50256] + seq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_398": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[50256] + seq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/src-py/utils.py": {
        "torch": {
            "ones_139": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_140": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_141": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}