{
    "rockyraccoon/model/amplitude.py": {
        "tensorflow": {
            "Variable_54": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.1 * (np.random.rand(nfeatures, nparams) - 0.5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "self.w_circuit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.1 * (np.random.rand(1, nparams, 3, nfeatures) - 0.5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_107": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nm,ijkm->nijk",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.w_circuit",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_96": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(phi, tf.zeros((phi.shape[0], 2 ** self.req_qub_in - phi.shape[1]), dtype=tf.float64))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_108": {
                "fn": {
                    "value": "lambda x: self.circuit(x[0], state=x[1], obs=observable)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "(w, phi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.math.abs(phi) ** 2, axis=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_92": {
                "x": {
                    "value": "tf.reduce_sum(tf.math.abs(phi) ** 2, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_92": {
                "input_tensor": {
                    "value": "tf.math.abs(phi) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "shape": {
                    "value": "(phi.shape[0], 2 ** self.req_qub_in - phi.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_92": {
                "x": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "phi / tf.reshape(tf.sqrt(tf.reduce_sum(tf.math.abs(phi) ** 2, axis=1)), (-1, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.concat((phi, tf.zeros((phi.shape[0], 2 ** self.req_qub_in - phi.shape[1]), dtype=tf.float64)), axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rockyraccoon/model/core.py": {
        "tensorflow": {
            "enable_eager_execution_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_168": {
                "variable": {
                    "value": "self.req_measurements",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.req_measurements",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_197": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "expval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.req_measurements * tf.map_fn(lambda x: self.data_circuit(full_phi, obs=x.numpy()), self.req_measurements, dtype=tf.float64)[:, tf.newaxis, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.map_fn(lambda x: self.model(inputs, x), self.req_measurements, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.transpose(expval)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: self.model(inputs, x), self.req_measurements, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.transpose(expval)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_220": {
                "variable": {
                    "value": "expval",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: self.model(inputs, x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "self.req_measurements",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_223": {
                "variable": {
                    "value": "expval",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "expval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.req_measurements * tf.map_fn(lambda x: self.data_circuit(full_phi, obs=x.numpy()), self.req_measurements, dtype=tf.float64)[:, tf.newaxis, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.map_fn(lambda x: self.model(inputs, x), self.req_measurements, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.transpose(expval)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: self.model(inputs, x), self.req_measurements, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.transpose(expval)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_224": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "no,oij->nij",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "expval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.req_measurements * tf.map_fn(lambda x: self.data_circuit(full_phi, obs=x.numpy()), self.req_measurements, dtype=tf.float64)[:, tf.newaxis, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.map_fn(lambda x: self.model(inputs, x), self.req_measurements, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.transpose(expval)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: self.model(inputs, x), self.req_measurements, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.transpose(expval)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.req_measurements",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_260": {
                "variable": {
                    "value": "data_states",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "self.construct_density_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "np.sqrt(self.q_y_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_268": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_fn_313": {
                "variable": {
                    "value": "expval",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: self.model(inputs, x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "self.req_measurements",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_316": {
                "variable": {
                    "value": "expval",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "expval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.req_measurements * tf.map_fn(lambda x: self.data_circuit(full_phi, obs=x.numpy()), self.req_measurements, dtype=tf.float64)[:, tf.newaxis, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.map_fn(lambda x: self.model(inputs, x), self.req_measurements, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.transpose(expval)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: self.model(inputs, x), self.req_measurements, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.transpose(expval)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_318": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "no,oij->nij",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "expval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.req_measurements * tf.map_fn(lambda x: self.data_circuit(full_phi, obs=x.numpy()), self.req_measurements, dtype=tf.float64)[:, tf.newaxis, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.map_fn(lambda x: self.model(inputs, x), self.req_measurements, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.transpose(expval)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda x: self.model(inputs, x), self.req_measurements, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.transpose(expval)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.req_measurements",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eigh_340": {
                "variable": {
                    "value": "(rx, Ux)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "adjoint_341": {
                "variable": {
                    "value": "Ux_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "matrix": {
                    "value": "Ux",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_342": {
                "variable": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.log(tf.clip_by_value(tf.math.real(rx), 1e-13, 10000000000000.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "rx.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LinearOperatorDiag_345": {
                "variable": {
                    "value": "tx",
                    "type": "variable",
                    "possible_values": []
                },
                "diag": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.log(tf.clip_by_value(tf.math.real(rx), 1e-13, 10000000000000.0)), rx.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_dense_345": {
                "variable": {
                    "value": "tx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_72": {
                "value": {
                    "value": "np.array([[0, 1], [1, 0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_73": {
                "value": {
                    "value": "np.array([[0, complex(0, -1)], [complex(0, 1), 0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_76": {
                "value": {
                    "value": "np.array([[1, 0], [0, -1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_77": {
                "value": {
                    "value": "np.array([[1, 0], [0, 1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_198": {
                "num_rows": {
                    "value": "2 ** self.model.req_qub_out",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_columns": {
                    "value": "2 ** self.model.req_qub_out",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trace_202": {
                "*args": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(expval, axis=0)",
                            "Call"
                        ],
                        [
                            "eta / tf.trace(eta)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_225": {
                "num_rows": {
                    "value": "2 ** self.model.req_qub_out",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_columns": {
                    "value": "2 ** self.model.req_qub_out",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_234": {
                "input_tensor": {
                    "value": "lh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.trace(eta @ log_rho)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reshape_264": {
                "tensor": {
                    "value": "self.q_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_319": {
                "num_rows": {
                    "value": "2 ** self.model.req_qub_out",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_columns": {
                    "value": "2 ** self.model.req_qub_out",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_325": {
                "values": {
                    "value": "[tf.to_float(rho[:, i, i]) for i in range(rho.shape[1])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_346": {
                "a": {
                    "value": "tx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.LinearOperatorDiag(rx).to_dense()",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Ux_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.adjoint(Ux)",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_229": {
                "*args": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('no,oij->nij', expval, self.req_measurements)",
                            "Call"
                        ],
                        [
                            "rho / tf.trace(rho)[:, tf.newaxis, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('no,oij->nij', expval, self.req_measurements)",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_232": {
                "*args": {
                    "value": "eta @ log_rho",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trace_323": {
                "*args": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('no,oij->nij', expval, self.req_measurements)",
                            "Call"
                        ],
                        [
                            "rho / tf.trace(rho)[:, tf.newaxis, tf.newaxis]",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('no,oij->nij', expval, self.req_measurements)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_343": {
                "x": {
                    "value": "tf.clip_by_value(tf.math.real(rx), 1e-13, 10000000000000.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_fn_190": {
                "fn": {
                    "value": "lambda x: self.data_circuit(full_phi, obs=x.numpy())",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "self.req_measurements",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_value_343": {
                "t": {
                    "value": "tf.math.real(rx)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-13",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "real_343": {
                "input": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.log(tf.clip_by_value(tf.math.real(rx), 1e-13, 10000000000000.0)), rx.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_326": {
                "x": {
                    "value": "rho[:, i, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "rockyraccoon/model/nn_hybrid.py": {
        "tensorflow": {
            "enable_eager_execution_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[keras.layers.Flatten(input_shape=(nfeatures,), dtype=tf.float64), keras.layers.Dense(10, activation=tf.nn.relu, dtype=tf.float64), keras.layers.Dense(1 * nparams * 3, activation=tf.nn.softmax, dtype=tf.float64)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * np.pi * nn_out",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(theta, (-1, 1, self.req_qub_in, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, self.req_qub_in, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "map_fn_93": {
                "fn": {
                    "value": "lambda x: self.circuit(x, obs=observable)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * np.pi * nn_out",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(theta, (-1, 1, self.req_qub_in, 3))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Flatten_58": {
                "input_shape": {
                    "value": "(nfeatures,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_59": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_60": {
                "units": {
                    "value": "1 * nparams * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rockyraccoon/model/wave_fn.py": {
        "tensorflow": {
            "enable_eager_execution_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_51": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.1 * (np.random.rand(nfeatures, nparams) - 0.5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.math.abs(phi) ** 2, axis=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "map_fn_82": {
                "fn": {
                    "value": "lambda x: self.circuit(x, obs=observable)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs @ self.w",
                            "BinOp"
                        ],
                        [
                            "phi / tf.reshape(tf.sqrt(tf.reduce_sum(tf.math.abs(phi) ** 2, axis=1)), (-1, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_80": {
                "x": {
                    "value": "tf.reduce_sum(tf.math.abs(phi) ** 2, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_80": {
                "input_tensor": {
                    "value": "tf.math.abs(phi) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_80": {
                "x": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs @ self.w",
                            "BinOp"
                        ],
                        [
                            "phi / tf.reshape(tf.sqrt(tf.reduce_sum(tf.math.abs(phi) ** 2, axis=1)), (-1, 1))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}